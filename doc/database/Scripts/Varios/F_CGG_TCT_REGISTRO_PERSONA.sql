/**
* FUNCION SII.F_CGG_TCT_REGISTRO_PERSONA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRDID_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DOCUMENTO DE IDENTIFICACION
* @param IN_CGNCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NACIONALIDAD
* @param IN_CRPER_NOMBRES NOMBRES DE LA PERSONA
* @param IN_CRPER_APELLIDO_PATERNO APELLIDO PATERNO
* @param IN_CRPER_NUM_DOC_IDENTIFIC NUMERO DE DOCUEMNTO DE IDENTIFICACION
* @param IN_CRPER_FECHA_NACIMIENTO FECHA DE NACIMIENTO
* @param IN_CRPER_GENERO GENERO DE LA PERSONA
		0 - MASCULINO
		1 - FEMENINO
* @param IN_CRPER_ESTADO ESTADO DEL REGISTRO
* @param IN_CGG_CPAIS_CODIGO IDENTIFICATIVO UNICO DE PAIS
* @param IN_CRPER_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRPER_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_PERSONA_INSERT(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE, 
IN IN_CRDID_CODIGO SII.CGG_RES_PERSONA.CRDID_CODIGO%TYPE, 
IN IN_CGNCN_CODIGO SII.CGG_RES_PERSONA.CGNCN_CODIGO%TYPE, 
IN IN_CRPER_NOMBRES SII.CGG_RES_PERSONA.CRPER_NOMBRES%TYPE, 
IN IN_CRPER_APELLIDO_PATERNO SII.CGG_RES_PERSONA.CRPER_APELLIDO_PATERNO%TYPE, 
IN IN_CRPER_NUM_DOC_IDENTIFIC SII.CGG_RES_PERSONA.CRPER_NUM_DOC_IDENTIFIC%TYPE, 
IN IN_CRPER_FECHA_NACIMIENTO SII.CGG_RES_PERSONA.CRPER_FECHA_NACIMIENTO%TYPE, 
IN IN_CRPER_GENERO SII.CGG_RES_PERSONA.CRPER_GENERO%TYPE, 
IN IN_CGG_CPAIS_CODIGO SII.CGG_RES_PERSONA.CGG_CPAIS_CODIGO%TYPE, 
IN IN_CRPER_ESTADO SII.CGG_RES_PERSONA.CRPER_ESTADO%TYPE, 
IN IN_CRPER_USUARIO_INSERT SII.CGG_RES_PERSONA.CRPER_USUARIO_INSERT%TYPE, 
IN IN_CRPER_USUARIO_UPDATE SII.CGG_RES_PERSONA.CRPER_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
TMP_RECORD RECORD;
OUT_KEY VARCHAR;
TMP_CODIGO VARCHAR;
BEGIN
	SELECT CRPER_CODIGO INTO TMP_CODIGO FROM SII.CGG_RES_PERSONA WHERE CRPER_NUM_DOC_IDENTIFIC = IN_CRPER_NUM_DOC_IDENTIFIC;
	IF (UPPER(IN_CRPER_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_PERSONA','CRPER_CODIGO','CRPER') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRPER_CODIGO;
	END IF;
	IF (TMP_CODIGO IS NULL ) THEN
		INSERT INTO SII.CGG_RES_PERSONA(
			CRPER_CODIGO, 
			CRDID_CODIGO, 
			CGNCN_CODIGO, 
			CRPER_NOMBRES, 
			CRPER_APELLIDO_PATERNO, 		
			CRPER_NUM_DOC_IDENTIFIC, 
			CRPER_FECHA_NACIMIENTO, 		
			CRPER_GENERO, 
			CGG_CPAIS_CODIGO,
			CRPER_ESTADO, 
			CRPER_FECHA_INSERT, 
			CRPER_USUARIO_INSERT, 
			CRPER_FECHA_UPDATE, 
			CRPER_USUARIO_UPDATE
		) VALUES (
			OUT_KEY, 		
			IN_CRDID_CODIGO, 		
			IN_CGNCN_CODIGO, 
			IN_CRPER_NOMBRES, 
			IN_CRPER_APELLIDO_PATERNO, 		
			UPPER(TRIM(IN_CRPER_NUM_DOC_IDENTIFIC)),
			IN_CRPER_FECHA_NACIMIENTO,
			IN_CRPER_GENERO, 
			IN_CGG_CPAIS_CODIGO,
			IN_CRPER_ESTADO, 
			CURRENT_TIMESTAMP, 
			IN_CRPER_USUARIO_INSERT, 
			CURRENT_TIMESTAMP, 
			IN_CRPER_USUARIO_UPDATE
		);
		FOR TMP_RECORD IN (SELECT 
			CRPER_CODIGO,
			CRPER_NOMBRES,
			CRPER_APELLIDO_PATERNO,
			CRPER_APELLIDO_MATERNO,
			CRPER_NUM_DOC_IDENTIFIC,
			CRPER_FECHA_NACIMIENTO,
			CRPER_LUGAR_NACIMIENTO,
			CRPER_OBSERVACIONES,
			CRPER_NUMERO_RESIDENCIA,
			CRPER_NUMERO_EXPEDIENTE,
			CRPER_FECHA_ARCHIVO,
			CRPER_FECHA_ULTIMO_EMPLEO,
			CRPER_ASPIRACION_SALARIAL,
			CRPER_FECHA_DEFUNCION,
			CRPER_NUMERO_ACTA
			FROM SII.CGG_RES_PERSONA WHERE CRPER_CODIGO = OUT_KEY ) LOOP
			UPDATE SII.CGG_RES_PERSONA SET CRPER_INDEX = TO_TSVECTOR(TMP_RECORD::VARCHAR)
				WHERE CRPER_CODIGO = TMP_RECORD.CRPER_CODIGO;
		END LOOP;
	ELSE
		OUT_KEY := TMP_CODIGO;
	END IF;
	RETURN OUT_KEY;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.SII.F_CGG_TCT_REGISTRO_PERSONA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRDID_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DOCUMENTO DE IDENTIFICACION
* @param IN_CGNCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NACIONALIDAD
* @param IN_CRPER_NOMBRES NOMBRES DE LA PERSONA
* @param IN_CRPER_APELLIDO_PATERNO APELLIDO PATERNO
* @param IN_CRPER_NUM_DOC_IDENTIFIC NUMERO DE DOCUEMNTO DE IDENTIFICACION
* @param IN_CRPER_FECHA_NACIMIENTO FECHA DE NACIMIENTO
* @param IN_CRPER_GENERO GENERO DE LA PERSONA
0 - MASCULINO
1 - FEMENINO
* @param IN_CRPER_ESTADO ESTADO DEL REGISTRO
* @param IN_CGG_CPAIS_CODIGO IDENTIFICATIVO UNICO DE PAIS
* @param IN_CRPER_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRPER_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_PERSONA_UPDATE(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE, 
IN IN_CRDID_CODIGO SII.CGG_RES_PERSONA.CRDID_CODIGO%TYPE, 
IN IN_CGNCN_CODIGO SII.CGG_RES_PERSONA.CGNCN_CODIGO%TYPE, 
IN IN_CRPER_NOMBRES SII.CGG_RES_PERSONA.CRPER_NOMBRES%TYPE, 
IN IN_CRPER_APELLIDO_PATERNO SII.CGG_RES_PERSONA.CRPER_APELLIDO_PATERNO%TYPE, 
IN IN_CRPER_NUM_DOC_IDENTIFIC SII.CGG_RES_PERSONA.CRPER_NUM_DOC_IDENTIFIC%TYPE, 
IN IN_CRPER_FECHA_NACIMIENTO SII.CGG_RES_PERSONA.CRPER_FECHA_NACIMIENTO%TYPE, 
IN IN_CRPER_GENERO SII.CGG_RES_PERSONA.CRPER_GENERO%TYPE, 
IN IN_CGG_CPAIS_CODIGO SII.CGG_RES_PERSONA.CGG_CPAIS_CODIGO%TYPE, 
IN IN_CRPER_ESTADO SII.CGG_RES_PERSONA.CRPER_ESTADO%TYPE,
IN IN_CRPER_USUARIO_UPDATE SII.CGG_RES_PERSONA.CRPER_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA SET	
		CRDID_CODIGO = IN_CRDID_CODIGO, 
		CGNCN_CODIGO = IN_CGNCN_CODIGO, 
		CRPER_NOMBRES = IN_CRPER_NOMBRES, 
		CRPER_APELLIDO_PATERNO = IN_CRPER_APELLIDO_PATERNO, 
		CRPER_NUM_DOC_IDENTIFIC = IN_CRPER_NUM_DOC_IDENTIFIC, 
		CRPER_FECHA_NACIMIENTO = IN_CRPER_FECHA_NACIMIENTO, 		
		CRPER_GENERO = IN_CRPER_GENERO, 
		CGG_CPAIS_CODIGO = IN_CGG_CPAIS_CODIGO,
		CRPER_ESTADO = IN_CRPER_ESTADO, 
		CRPER_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRPER_USUARIO_UPDATE = IN_CRPER_USUARIO_UPDATE
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_TCT_REGISTRO_PERSONA
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CTREG_CODIGO CODIGO DE LA TABLA CGG_TCT_REGISTRO
* @param IN_CTGTC_CODIGO IDENTIFICATIVO UNICO DE GRUPO DE TURISTAS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_PERSONA(
IN IN_CTGTR_CODIGO  SII.CGG_TCT_GRUPO_TURISTA.CTGTR_CODIGO%TYPE,
IN IN_CTREG_ESTADO_REGISTRO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
			SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
			FROM CGG_CONFIGURACION
			WHERE CGCNF_CODIGO = '05') 
			UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
			WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
		),
	RESIDENCIA AS(
		SELECT RG.CRPER_CODIGO,RS.CRTRA_CODIGO,RS.CRTST_CODIGO FROM  SII.CGG_TCT_REGISTRO RG
		LEFT JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = RG.CRPER_CODIGO AND RS.CRRSD_VIGENTE AND RS.CRRSD_FECHA_INICIO::DATE = RG.CTREG_FECHA_INGRESO::DATE)			
		AND RS.CRTST_CODIGO IN (SELECT CRTST_CODIGO  FROM TIPO)
		WHERE CTGTR_CODIGO = IN_CTGTR_CODIGO)
	SELECT DISTINCT
		RG.CTREG_CODIGO,
		GT.CTGTR_CODIGO,
		LPAD(GT.CTGTR_NUMERO::VARCHAR,7,'0'::VARCHAR) CTGTR_NUMERO,
		PR.CRPER_CODIGO,
		PR.CRDID_CODIGO,
		PR.CRPER_NUM_DOC_IDENTIFIC,
		PR.CRPER_NOMBRES,
		PR.CRPER_APELLIDO_PATERNO,
		PR.CRPER_GENERO,
		PR.CGNCN_CODIGO,
		PR.CRPER_FECHA_NACIMIENTO,
		PR.CGG_CPAIS_CODIGO,
		VDT.CKESP_CODIGO,
		CKESP_REPORTE,
		RG.CTREG_ESTADO_REGISTRO,
		RG.CTREG_OBSERVACION,
		TR.CRTRA_CODIGO,
		TR.CRTRA_NUMERO,
		(CASE WHEN RS.CRTST_CODIGO IS NULL THEN 'Turista' ELSE 'Transeunte' END)TIPO_RESIDENCIA,
		RG.CTREG_FECHA_INSERT
	FROM  SII.CGG_TCT_REGISTRO RG  
	INNER JOIN SII.CGG_RES_PERSONA PR ON PR.CRPER_CODIGO = RG.CRPER_CODIGO 
	INNER JOIN SII.CGG_TCT_GRUPO_TURISTA GT ON (GT.CTGTR_CODIGO = RG.CTGTR_CODIGO)
	INNER JOIN SII.CGG_KDX_VENTA_DETALLE VDT ON (VDT.CTREG_CODIGO = RG.CTREG_CODIGO)
	INNER JOIN SII.CGG_KDX_ESPECIE CKESP ON (CKESP.CKESP_CODIGO = VDT.CKESP_CODIGO)
	INNER JOIN RESIDENCIA RS ON (RS.CRPER_CODIGO = RG.CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_TRAMITE TR ON (TR.CRTRA_CODIGO=RS.CRTRA_CODIGO)
	WHERE RG.CTREG_ESTADO AND 
		GT.CTGTR_CODIGO = IN_CTGTR_CODIGO AND 
		CTREG_ESTADO_REGISTRO = ANY(STRING_TO_ARRAY(IN_CTREG_ESTADO_REGISTRO,',')::smallint[])
		AND NOT RG.CTREG_COMPLETO
	ORDER BY RG.CTREG_FECHA_INSERT;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;


	
