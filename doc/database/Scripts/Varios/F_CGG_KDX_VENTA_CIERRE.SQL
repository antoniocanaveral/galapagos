/**
* FUNCION SII.F_CGG_KDX_VENTA_CIERRE_INSERT1
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_VENTA_CIERRE
* @param IN_CKVTC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VENTA CIERRE
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  VENTA
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CIERRE DE CAJA
* @param IN_CKVTC_ESTADO ESTADO DEL REGISTRO
* @param IN_CKVTC_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_CIERRE_INSERT1(
IN IN_CKVTC_CODIGO SII.CGG_KDX_VENTA_CIERRE.CKVTC_CODIGO%TYPE,
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA_CIERRE.CKVNT_CODIGO%TYPE,
IN IN_CKCRR_CODIGO SII.CGG_KDX_VENTA_CIERRE.CKCRR_CODIGO%TYPE,
IN IN_CKVTC_ESTADO SII.CGG_KDX_VENTA_CIERRE.CKVTC_ESTADO%TYPE,
IN IN_CKVTC_USUARIO_INSERT SII.CGG_KDX_VENTA_CIERRE.CKVTC_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKVTC_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_VENTA_CIERRE','CKVTC_CODIGO','CKVTC') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKVTC_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_VENTA_CIERRE(
		CKVTC_CODIGO, 
		CKVNT_CODIGO, 
		CKCRR_CODIGO, 
		CKVTC_ESTADO, 
		CKVTC_FECHA_INSERT, 
		CKVTC_USUARIO_INSERT, 
		CKVTC_FECHA_UPDATE, 
		CKVTC_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKVNT_CODIGO, 
		IN_CKCRR_CODIGO, 
		IN_CKVTC_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKVTC_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKVTC_USUARIO_INSERT
	);
	UPDATE CGG_KDX_VENTA 
		SET CKVNT_ESTADO_VENTA = 2 
	WHERE CKVNT_CODIGO =  IN_CKVNT_CODIGO;

	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_KDX_VENTA_CIERRE_S_CGG_KDX_CIERRE1
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_CIERRE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CIERRE DE CAJA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_CIERRE_S_CGG_KDX_CIERRE1(
IN IN_CKCRR_CODIGO SII.CGG_KDX_VENTA_CIERRE.CKCRR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVTC_CODIGO, 
		VNT.CKVNT_CODIGO,
		VNT.CKVNT_NUMERO_VENTA,
		VNT.CKVNT_CANTIDAD,
		VNT.CKVNT_TOTAL,
		CKESP.CKESP_NOMBRE,
		CKASG_PRECIO_UNITARIO,
		CKCRR_CODIGO, 
		CKVTC_ESTADO, 
		CKVTC_FECHA_INSERT, 
		CKVTC_USUARIO_INSERT, 
		CKVTC_FECHA_UPDATE, 
		CKVTC_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA_CIERRE VCR
	INNER JOIN CGG_KDX_VENTA VNT ON  (VNT.CKVNT_CODIGO = VCR.CKVNT_CODIGO)
	INNER JOIN CGG_KDX_ASIGNACION ASG ON (ASG.CKASG_CODIGO = VNT.CKASG_CODIGO) 
	INNER JOIN CGG_KDX_TRANSFERENCIA TRN ON
	(ASG.CKTRN_CODIGO = TRN.CKTRN_CODIGO)	
	INNER JOIN  CGG_KDX_ESPECIE CKESP ON (CKESP.CKESP_CODIGO = TRN.CKESP_CODIGO)
	WHERE CKVTC_ESTADO = TRUE AND 
		CKCRR_CODIGO = IN_CKCRR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

