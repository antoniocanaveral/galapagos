	/**	* FUNCION SII.F_CGG_KDX_KARDEX_EJECUTAR_CALCULO	* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_KARDEX.	* @param IN_CKKRD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL KARDEX	* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA ESPECIE	* @param IN_CKKRD_DETALLE DETALLE DEL MOVIMIENTO	* @param IN_TIPO_MOVIMIENTO TIPO DE MOVIMIENTO	* @param IN_TIPO_OPERACION TIPO DE OPERACION	* @param IN_CKKRD_INGRESO_CANTIDAD CANTIDAD DE ESPECIES QUE INGRESARON	* @param IN_CKKRD_INGRESO_PU PRECIO UNITARIO DE COMPRA	* @param IN_CKKRD_INGRESO_TOTAL TOTAL CONTABLE DE INGRESO	* @param IN_CKKRD_ESTADO ESTADO DEL REGISTRO	* @param IN_CKKRD_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA	* @param IN_CKKRD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION	* @return VARCHAR	*/	CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_KARDEX_EJECUTAR_CALCULO(	IN IN_CKKRD_CODIGO SII.CGG_KDX_KARDEX.CKKRD_CODIGO%TYPE, 	IN IN_CKESP_CODIGO SII.CGG_KDX_KARDEX.CKESP_CODIGO%TYPE, 	IN IN_CKKRD_DETALLE SII.CGG_KDX_KARDEX.CKKRD_DETALLE%TYPE, 	IN IN_TIPO_MOVIMIENTO SII.CGG_KDX_KARDEX.CKKRD_TIPO_MOVIMIENTO%TYPE, 	IN IN_TIPO_OPERACION SII.CGG_KDX_KARDEX.CKKRD_TIPO_OPERACION%TYPE, 	IN IN_CKKRD_INGRESO_CANTIDAD SII.CGG_KDX_KARDEX.CKKRD_INGRESO_CANTIDAD%TYPE, 	IN IN_CKKRD_INGRESO_PU SII.CGG_KDX_KARDEX.CKKRD_INGRESO_PU%TYPE, 	IN IN_CKKRD_INGRESO_TOTAL SII.CGG_KDX_KARDEX.CKKRD_INGRESO_TOTAL%TYPE,	IN IN_CKKRD_ESTADO SII.CGG_KDX_KARDEX.CKKRD_ESTADO%TYPE, 	IN IN_CKKRD_USUARIO_INSERT SII.CGG_KDX_KARDEX.CKKRD_USUARIO_INSERT%TYPE, 	IN IN_CKKRD_USUARIO_UPDATE SII.CGG_KDX_KARDEX.CKKRD_USUARIO_UPDATE%TYPE	)RETURNS VARCHAR AS	$$	DECLARE	OUT_KEY VARCHAR;	TMP_RECORD RECORD;	TMP_TOTAL_CANTIDAD NUMERIC;	TMP_TOTAL_PU NUMERIC;	TMP_TOTAL_TOTAL NUMERIC;	BEGIN		TMP_TOTAL_CANTIDAD := IN_CKKRD_INGRESO_CANTIDAD;		TMP_TOTAL_PU := IN_CKKRD_INGRESO_PU;		TMP_TOTAL_TOTAL := IN_CKKRD_INGRESO_TOTAL;			IF (UPPER(IN_CKKRD_CODIGO) = 'KEYGEN') THEN			SELECT SII.F_KEYGEN('CGG_KDX_KARDEX','CKKRD_CODIGO','CKKRD') INTO OUT_KEY;		ELSE			OUT_KEY := IN_CKKRD_CODIGO;		END IF;		--CONSULTA SI EXISTE VALORES ALMACENADOS EN LA BASE PARA LA ESPECIE SOBRE LA QUE SE REALIZARA LA OPERACION		SELECT INTO TMP_RECORD			CKKRD_CODIGO, 			CKESP_CODIGO, 			CKKRD_NUMERO, 			CKKRD_TOTAL_CANTIDAD, 			CKKRD_TOTAL_PU, 			CKKRD_TOTAL_TOTAL,			CKKRD_FECHA_REGISTRO		FROM CGG_KDX_KARDEX		WHERE 			CKKRD_NUMERO = (							SELECT MAX(CKKRD_NUMERO) 							FROM CGG_KDX_KARDEX 							WHERE 								CKESP_CODIGO = IN_CKESP_CODIGO 								AND CKKRD_ESTADO =  TRUE)			AND CKESP_CODIGO = IN_CKESP_CODIGO			AND CKKRD_ESTADO =  TRUE;				CASE IN_TIPO_MOVIMIENTO 			WHEN 1 THEN --IF COMPRA/INGRESO				TMP_TOTAL_CANTIDAD := COALESCE(TMP_RECORD.CKKRD_TOTAL_CANTIDAD,0) + IN_CKKRD_INGRESO_CANTIDAD;				TMP_TOTAL_PU := IN_CKKRD_INGRESO_PU;				TMP_TOTAL_TOTAL := TMP_TOTAL_CANTIDAD * TMP_TOTAL_PU;				INSERT INTO SII.CGG_KDX_KARDEX(					CKKRD_CODIGO, 					CKESP_CODIGO, 					CKKRD_NUMERO, 					CKKRD_DETALLE,					CKKRD_FECHA_REGISTRO,					CKKRD_TIPO_MOVIMIENTO, 					CKKRD_TIPO_OPERACION, 					CKKRD_INGRESO_CANTIDAD, 					CKKRD_INGRESO_PU, 					CKKRD_INGRESO_TOTAL, 					CKKRD_TOTAL_CANTIDAD, 					CKKRD_TOTAL_PU, 					CKKRD_TOTAL_TOTAL, 					CKKRD_ESTADO, 					CKKRD_FECHA_INSERT, 					CKKRD_USUARIO_INSERT, 					CKKRD_FECHA_UPDATE, 					CKKRD_USUARIO_UPDATE				) VALUES (					OUT_KEY, 					IN_CKESP_CODIGO, 					 COALESCE(TMP_RECORD.CKKRD_NUMERO+1,1), 					IN_CKKRD_DETALLE,					CURRENT_TIMESTAMP,					IN_TIPO_MOVIMIENTO,					IN_TIPO_OPERACION,					IN_CKKRD_INGRESO_CANTIDAD, 					IN_CKKRD_INGRESO_PU, 					IN_CKKRD_INGRESO_TOTAL, 					TMP_TOTAL_CANTIDAD, 					TMP_TOTAL_PU, 					TMP_TOTAL_TOTAL, 					IN_CKKRD_ESTADO, 					CURRENT_TIMESTAMP, 					IN_CKKRD_USUARIO_INSERT, 					CURRENT_TIMESTAMP, 					IN_CKKRD_USUARIO_UPDATE				);					WHEN 2 THEN --IF VENTA/SALIDA 				TMP_TOTAL_CANTIDAD := TMP_RECORD.CKKRD_TOTAL_CANTIDAD - IN_CKKRD_INGRESO_CANTIDAD;				TMP_TOTAL_PU := IN_CKKRD_INGRESO_PU;				TMP_TOTAL_TOTAL := TMP_TOTAL_CANTIDAD * TMP_TOTAL_PU;				INSERT INTO SII.CGG_KDX_KARDEX(					CKKRD_CODIGO, 					CKESP_CODIGO, 					CKKRD_NUMERO, 					CKKRD_DETALLE,					CKKRD_FECHA_REGISTRO,					CKKRD_TIPO_MOVIMIENTO, 					CKKRD_TIPO_OPERACION, 					CKKRD_SALIDA_CANTIDAD, 					CKKRD_SALIDA_PU, 					CKKRD_SALIDA_TOTAL, 					CKKRD_TOTAL_CANTIDAD, 					CKKRD_TOTAL_PU, 					CKKRD_TOTAL_TOTAL, 					CKKRD_ESTADO, 					CKKRD_FECHA_INSERT, 					CKKRD_USUARIO_INSERT, 					CKKRD_FECHA_UPDATE, 					CKKRD_USUARIO_UPDATE				) VALUES (					OUT_KEY, 					IN_CKESP_CODIGO, 					COALESCE(TMP_RECORD.CKKRD_NUMERO+1,1), 					IN_CKKRD_DETALLE,					CURRENT_TIMESTAMP,					IN_TIPO_MOVIMIENTO,					IN_TIPO_OPERACION,					IN_CKKRD_INGRESO_CANTIDAD, 					IN_CKKRD_INGRESO_PU, 					IN_CKKRD_INGRESO_TOTAL, 					TMP_TOTAL_CANTIDAD, 					TMP_TOTAL_PU, 					TMP_TOTAL_TOTAL, 					IN_CKKRD_ESTADO, 					CURRENT_TIMESTAMP, 					IN_CKKRD_USUARIO_INSERT, 					CURRENT_TIMESTAMP, 					IN_CKKRD_USUARIO_UPDATE				);		ELSE --IF INVENTARIO INICIAL			IF COALESCE(TMP_RECORD.CKKRD_NUMERO+1,1) = 1 THEN					INSERT INTO SII.CGG_KDX_KARDEX(					CKKRD_CODIGO, 					CKESP_CODIGO, 					CKKRD_NUMERO, 					CKKRD_DETALLE,					CKKRD_FECHA_REGISTRO,					CKKRD_TIPO_MOVIMIENTO, 					CKKRD_TIPO_OPERACION, 					CKKRD_TOTAL_CANTIDAD, 					CKKRD_TOTAL_PU, 					CKKRD_TOTAL_TOTAL, 					CKKRD_ESTADO, 					CKKRD_FECHA_INSERT, 					CKKRD_USUARIO_INSERT, 					CKKRD_FECHA_UPDATE, 					CKKRD_USUARIO_UPDATE				) VALUES (					OUT_KEY, 					IN_CKESP_CODIGO, 					COALESCE(TMP_RECORD.CKKRD_NUMERO+1,1), 					IN_CKKRD_DETALLE,					CURRENT_TIMESTAMP,					IN_TIPO_MOVIMIENTO,					IN_TIPO_OPERACION,					TMP_TOTAL_CANTIDAD, 					TMP_TOTAL_PU, 					TMP_TOTAL_TOTAL, 					IN_CKKRD_ESTADO, 					CURRENT_TIMESTAMP, 					IN_CKKRD_USUARIO_INSERT, 					CURRENT_TIMESTAMP, 					IN_CKKRD_USUARIO_UPDATE				);			END IF;					END CASE ;		--ACTUALIZO LA TABLA DE ESPECIE PARA TENER UN VALOR DE STOCK DE CONSUMO RAPIDO		UPDATE CGG_KDX_ESPECIE SET CKESP_CANTIDAD = TMP_TOTAL_CANTIDAD		WHERE CKESP_CODIGO = IN_CKESP_CODIGO AND CKESP_ESTADO =  TRUE;		RETURN OUT_KEY;	END	$$	LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;	/**	* FUNCION SII.F_CGG_KDX_KARDEX_CONTROL_STOCK	* VERIFICA EL STOCK DE LA ESPECIE.	* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA ESPECIE	* @param IN_CANTIDAD CANTIDAD SOLICITADA PARA LA SALIDA	* @return VARCHAR TRUE/FALSE SEGUN DISPONIBILIDAD	*/	CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_KARDEX_CONTROL_STOCK(	IN IN_CKESP_CODIGO SII.CGG_KDX_KARDEX.CKESP_CODIGO%TYPE, 	IN IN_CANTIDAD NUMERIC 	)RETURNS VARCHAR AS	$$	DECLARE	OUT_EXIST VARCHAR;	BEGIN		SELECT ( CKKRD_TOTAL_CANTIDAD >= IN_CANTIDAD ) :: VARCHAR INTO OUT_EXIST		FROM CGG_KDX_KARDEX		WHERE CKESP_CODIGO = IN_CKESP_CODIGO		AND CKKRD_NUMERO = (SELECT MAX(CKKRD_NUMERO) 						FROM 							CGG_KDX_KARDEX 						WHERE CKESP_CODIGO = IN_CKESP_CODIGO						AND CKKRD_ESTADO = TRUE)		AND CKKRD_ESTADO = TRUE;		RETURN OUT_EXIST;	END	$$	LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;		CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_KARDEX_EXISTE_INVENTARIO(	IN IN_CKESP_CODIGO SII.CGG_KDX_KARDEX.CKESP_CODIGO%TYPE	)RETURNS VARCHAR AS	$$	DECLARE	OUT_EXIST VARCHAR;	BEGIN		SELECT (COUNT(CKESP_CODIGO)>0) ::VARCHAR INTO OUT_EXIST		FROM CGG_KDX_KARDEX		WHERE CKESP_CODIGO = IN_CKESP_CODIGO		AND CKKRD_TIPO_MOVIMIENTO = 0		AND CKKRD_ESTADO = TRUE;		RETURN OUT_EXIST;	END	$$	LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;/*** FUNCION SII.F_CGG_KDX_KARDEX_SELECT1* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_KARDEX.* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO * @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA* @return REFCURSOR*/CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_KARDEX_SELECT1(IN IN_USER_NAME VARCHAR,IN IN_START_INDEX INT,IN IN_LIMIT INT,IN IN_SORT_FIELD_NAME VARCHAR,IN IN_DIRECTION VARCHAR,IN IN_FIND_TEXT TEXT)RETURNS SETOF REFCURSOR AS$$DECLARE	TMP_REF REFCURSOR;BEGIN	OPEN TMP_REF FOR EXECUTE	'SELECT		CKKRD_CODIGO, 		CKKRD.CKESP_CODIGO,		CKESP.CKESP_NOMBRE,		CKKRD_NUMERO, 		CKKRD_DETALLE, 		CKKRD_FECHA_REGISTRO, 		CKKRD_TIPO_MOVIMIENTO, 		CKKRD_TIPO_OPERACION, 		CKKRD_INGRESO_CANTIDAD, 		CKKRD_INGRESO_PU, 		CKKRD_INGRESO_TOTAL, 		CKKRD_SALIDA_CANTIDAD, 		CKKRD_SALIDA_PU, 		CKKRD_SALIDA_TOTAL, 		CKKRD_TOTAL_CANTIDAD, 		CKKRD_TOTAL_PU, 		CKKRD_TOTAL_TOTAL, 		CKKRD_ESTADO, 		CKKRD_FECHA_INSERT, 		CKKRD_USUARIO_INSERT, 		CKKRD_FECHA_UPDATE, 		CKKRD_USUARIO_UPDATE	FROM SII.CGG_KDX_KARDEX CKKRD	INNER JOIN CGG_KDX_ESPECIE CKESP ON (CKESP.CKESP_CODIGO = CKKRD.CKESP_CODIGO) 	WHERE CKKRD_ESTADO = TRUE AND CKESP.CKESP_ESTADO = TRUE  AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKKRD_NUMERO, 0)||'' ''||COALESCE(CKESP.CKESP_NOMBRE, '''')||'' ''||COALESCE(CKKRD_DETALLE, '''')||'' ''||COALESCE(CKKRD_FECHA_REGISTRO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKKRD_TIPO_MOVIMIENTO, 0)||'' ''||COALESCE(CKKRD_TIPO_OPERACION, 0)||'' ''||COALESCE(CKKRD_INGRESO_CANTIDAD, 0)||'' ''||COALESCE(CKKRD_INGRESO_PU, 0)||'' ''||COALESCE(CKKRD_INGRESO_TOTAL, 0)||'' ''||COALESCE(CKKRD_SALIDA_CANTIDAD, 0)||'' ''||COALESCE(CKKRD_SALIDA_PU, 0)||'' ''||COALESCE(CKKRD_SALIDA_TOTAL, 0)||'' ''||COALESCE(CKKRD_TOTAL_CANTIDAD, 0)||'' ''||COALESCE(CKKRD_TOTAL_PU, 0)||'' ''||COALESCE(CKKRD_TOTAL_TOTAL, 0)||'' ''||COALESCE(CKKRD_ESTADO, FALSE)||'' ''||COALESCE(CKKRD_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKKRD_USUARIO_INSERT, '''')||'' ''||COALESCE(CKKRD_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKKRD_USUARIO_UPDATE, '''')) = 1	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;	RETURN NEXT TMP_REF;END$$LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;/*** FUNCION SII.F_CGG_KDX_KARDEX_STOCK* DEVUELVE  EL STOCK ACTUAL DE LA ESPECIE.  * @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA ESPECIE* @return VARCHAR TRUE/FALSE SEGUN DISPONIBILIDAD*/CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_KARDEX_STOCK(IN IN_CKESP_CODIGO SII.CGG_KDX_KARDEX.CKESP_CODIGO%TYPE)RETURNS SETOF REFCURSOR AS$$DECLARE	TMP_REF REFCURSOR;BEGIN	OPEN TMP_REF FOR		SELECT			CKKRD_CODIGO, 			CKKRD.CKESP_CODIGO,			CKESP.CKESP_NOMBRE,			CKKRD_NUMERO, 			CKKRD_DETALLE, 			CKKRD_FECHA_REGISTRO, 			CKKRD_TIPO_MOVIMIENTO, 			CKKRD_TIPO_OPERACION, 			CKKRD_INGRESO_CANTIDAD, 			CKKRD_INGRESO_PU, 			CKKRD_INGRESO_TOTAL, 			CKKRD_SALIDA_CANTIDAD, 			CKKRD_SALIDA_PU, 			CKKRD_SALIDA_TOTAL, 			CKKRD_TOTAL_CANTIDAD, 			CKKRD_TOTAL_PU, 			CKKRD_TOTAL_TOTAL		FROM SII.CGG_KDX_KARDEX CKKRD		INNER JOIN CGG_KDX_ESPECIE CKESP ON (CKESP.CKESP_CODIGO = CKKRD.CKESP_CODIGO) 		WHERE CKKRD_ESTADO = TRUE AND CKESP.CKESP_ESTADO = TRUE		AND CKKRD_NUMERO = (SELECT MAX(CKKRD_NUMERO) 							FROM 								CGG_KDX_KARDEX 							WHERE CKESP_CODIGO = IN_CKESP_CODIGO							AND CKKRD_ESTADO = TRUE)		AND CKKRD.CKESP_CODIGO = IN_CKESP_CODIGO;	RETURN NEXT TMP_REF;END$$LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
