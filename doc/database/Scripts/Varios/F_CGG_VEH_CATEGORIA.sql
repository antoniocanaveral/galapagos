/**
*FUNCION SII.F_CGG_VEH_CATEGORIA_PATH
* FUNCION RECURSIVA QUE OBTIENE LOS DATOS DE LAS CATEGORIAS DE VEHICULOS PARA FORMARLO COMO ARBOL.
* @param INCGG_CVCTG_CODIGO IDENTIFICATIVO UNICO DE LA CATEGORIA PADRE DESDE DONDE SE REALIZA LA CONSULTA
* @return VARCHAR (CADENA JSON)
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_PATH(INCGG_CVCTG_CODIGO CHARACTER VARYING)
  RETURNS CHARACTER VARYING AS
$BODY$
DECLARE
	TMP_ARBOL VARCHAR := '';
	TMP_RECORD RECORD;
	TMP_CURSOR REFCURSOR;
	SQL VARCHAR;
BEGIN
	IF INCGG_CVCTG_CODIGO IS NULL THEN 
		SQL := 'SELECT * FROM CGG_VEH_CATEGORIA WHERE CGG_CVCTG_CODIGO IS NULL';
	ELSE
		SQL :='SELECT * FROM CGG_VEH_CATEGORIA WHERE CGG_CVCTG_CODIGO ='||QUOTE_LITERAL(INCGG_CVCTG_CODIGO);
	END IF;
	
	OPEN TMP_CURSOR FOR EXECUTE SQL;
		LOOP
			--
			FETCH TMP_CURSOR INTO TMP_RECORD;
			EXIT WHEN NOT FOUND;
			IF ( LENGTH(TMP_ARBOL)>0) THEN
				TMP_ARBOL := TMP_ARBOL||',';
			END IF;
			TMP_ARBOL:= TMP_ARBOL||'{ "attr": { "id":"'||TMP_RECORD.CVCTG_CODIGO||'"},';
			TMP_ARBOL:= TMP_ARBOL||' "data":"'||TMP_RECORD.CVCTG_NOMBRE||'",';
			TMP_ARBOL := TMP_ARBOL||' "children" : ['||F_CGG_VEH_CATEGORIA_PATH(TMP_RECORD.CVCTG_CODIGO)||'] }';
		END LOOP;
	CLOSE TMP_CURSOR;
	RETURN TMP_ARBOL;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;



