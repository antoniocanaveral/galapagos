
/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_SELECT1
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_TRANSFERENCIA INCLUYENDO EL NOMBRE DE LA ESPECIE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_SELECT1(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKTRN_CODIGO, 
		CKTRN.CKPVT_CODIGO,
		CKPVT_NOMBRE,
		CKTRN.CKESP_CODIGO,
		CKESP_NOMBRE,
		CKTRN_NUMERO_TRANSFERENCIA,
		CKTRN_FECHA_RECEPCION, 
		CKTRN_CANTIDAD, 
		CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN, 
		CKTRN_CANTIDAD_DISPONIBLE,
 		CKTRN_OBSERVACION,
		CKTRN_USUARIO_INSERT	
		FROM SII.CGG_KDX_TRANSFERENCIA CKTRN 
	INNER JOIN CGG_KDX_ESPECIE CKESP ON( CKESP.CKESP_CODIGO = CKTRN.CKESP_CODIGO)
	INNER JOIN CGG_KDX_PUNTO_VENTA CKPVT ON (CKTRN.CKPVT_CODIGO = CKPVT.CKPVT_CODIGO)
	WHERE CKTRN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKPVT_NOMBRE, '''')||'' ''||COALESCE(CKESP_NOMBRE, '''')||'' ''||COALESCE(CKTRN_NUMERO_TRANSFERENCIA, '''')||'' ''||COALESCE(CKTRN_FECHA_RECEPCION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_CANTIDAD, 0)||'' ''||COALESCE(CKTRN_PRECIO_UNITARIO, 0)||'' ''||COALESCE(CKTRN_SERIE_INICIO, 0)||'' ''||COALESCE(CKTRN_SERIE_FIN, 0)||'' ''||COALESCE(CKTRN_CANTIDAD_DISPONIBLE, 0)||'' ''||COALESCE(CKTRN_ESTADO, FALSE)||'' ''||COALESCE(CKTRN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_USUARIO_INSERT, '''')||'' ''||COALESCE(CKTRN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION: SII.F_CGG_KDX_TRANSFERENCIA_GENERA_NUMERO
* GENERA LA SECUENCIA DE NUMEROS PARA LA TRANFERENCIA.
*@ return VARYING 
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_GENERA_NUMERO()
  RETURNS CHARACTER VARYING AS
$BODY$
DECLARE
	TMP_SECUENCIA CHARACTER VARYING;
	TMP_ANIO CHARACTER VARYING;
	TMP_ACRONIMO CHARACTER VARYING;	
BEGIN
	SELECT COUNT(CKTRN_NUMERO_TRANSFERENCIA)+1 INTO TMP_SECUENCIA  
	FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE EXTRACT(YEAR FROM CKTRN_FECHA_INSERT) = EXTRACT(YEAR FROM CURRENT_TIMESTAMP);
	
	--SELECT CGCNF_VALOR_CADENA INTO TMP_ACRONIMO
	--FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF11';
	
	SELECT EXTRACT(YEAR FROM CURRENT_TIMESTAMP) INTO TMP_ANIO;
	
	--RETURN  TMP_ACRONIMO||'-'||TMP_ANIO||'-'||LPAD(TMP_SECUENCIA,4,'0');
	RETURN  TMP_ANIO||'-'||LPAD(TMP_SECUENCIA,4,'0');
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;



/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_SELECT_DISPONIBLE_PV
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_TRANSFERENCIA INCLUYENDO EL NOMBRE DE LA ESPECIE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN IN_CKPVT_CODIGO CODIGO UNCIO IDENTIFICATIVO DE PUNTO DE VENTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_SELECT_DISPONIBLE_PV(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CKPVT_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKPVT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKTRN_CODIGO, 
		CKTRN.CKPVT_CODIGO,
		CKPVT_NOMBRE,
		CKTRN.CKESP_CODIGO,
		CKESP_NOMBRE,
		CKTRN_NUMERO_TRANSFERENCIA,
		CKTRN_FECHA_RECEPCION, 
		CKTRN_CANTIDAD, 
		CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN, 
		CKTRN_CANTIDAD_DISPONIBLE,
		CKTRN_OBSERVACION
	FROM SII.CGG_KDX_TRANSFERENCIA CKTRN 
	INNER JOIN CGG_KDX_ESPECIE CKESP ON( CKESP.CKESP_CODIGO = CKTRN.CKESP_CODIGO)
	INNER JOIN CGG_KDX_PUNTO_VENTA CKPVT ON (CKTRN.CKPVT_CODIGO = CKPVT.CKPVT_CODIGO)
	WHERE CKTRN_ESTADO AND CKPVT.CKPVT_CODIGO = '||quote_literal(IN_CKPVT_CODIGO)||' AND CKTRN_CANTIDAD_DISPONIBLE > 0 AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKPVT_NOMBRE, '''')||'' ''||COALESCE(CKESP_NOMBRE, '''')||'' ''||COALESCE(CKTRN_NUMERO_TRANSFERENCIA, '''')||'' ''||COALESCE(CKTRN_FECHA_RECEPCION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_CANTIDAD, 0)||'' ''||COALESCE(CKTRN_PRECIO_UNITARIO, 0)||'' ''||COALESCE(CKTRN_SERIE_INICIO, 0)||'' ''||COALESCE(CKTRN_SERIE_FIN, 0)||'' ''||COALESCE(CKTRN_CANTIDAD_DISPONIBLE, 0)||'' ''||COALESCE(CKTRN_ESTADO, FALSE)||'' ''||COALESCE(CKTRN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_USUARIO_INSERT, '''')||'' ''||COALESCE(CKTRN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* SII.F_CGG_KDX_TRANSFERENCIA_COUNT_DISPONIBLE_PV
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_TRANSFERENCIA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN IN_CKPVT_CODIGO CODIGO UNCIO IDENTIFICATIVO DE PUNTO DE VENTA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_COUNT_DISPONIBLE_PV(
IN IN_FIND_TEXT TEXT,
IN IN_CKPVT_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKPVT_CODIGO%TYPE
)RETURNS INT AS
$$
DECLARE
	TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_TRANSFERENCIA CKTRN 
	INNER JOIN CGG_KDX_ESPECIE CKESP ON( CKESP.CKESP_CODIGO = CKTRN.CKESP_CODIGO)
	INNER JOIN CGG_KDX_PUNTO_VENTA CKPVT ON (CKTRN.CKPVT_CODIGO = CKPVT.CKPVT_CODIGO)
	WHERE CKTRN_ESTADO = TRUE AND CKPVT.CKPVT_CODIGO = IN_CKPVT_CODIGO AND CKTRN_CANTIDAD_DISPONIBLE > 0 AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKTRN_NUMERO_TRANSFERENCIA, '''')||' '||COALESCE(CKTRN_FECHA_RECEPCION, CURRENT_TIMESTAMP)||' '||COALESCE(CKTRN_CANTIDAD, 0)||' '||COALESCE(CKTRN_PRECIO_UNITARIO, 0)||' '||COALESCE(CKTRN_SERIE_INICIO, 0)||' '||COALESCE(CKTRN_SERIE_FIN, 0)||' '||COALESCE(CKTRN_CANTIDAD_DISPONIBLE, 0)||' '||COALESCE(CKTRN_ESTADO, FALSE)||' '||COALESCE(CKTRN_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKTRN_USUARIO_INSERT, '''')||' '||COALESCE(CKTRN_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKTRN_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_SELECT_PUNTO_VENTA
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_TRANSFERENCIA POR CADA PUNTO DE VENTA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_SELECT_PUNTO_VENTA(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_PV VARCHAR;
BEGIN
	TMP_PV := SII.F_CGG_KDX_USUARIO_PV_S_PV_FROM_USUARIO(IN_USER_NAME);
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKTRN_CODIGO, 
		CKTRN.CKPVT_CODIGO,
		CKPVT_NOMBRE,
		CKTRN.CKESP_CODIGO,
		CKESP_NOMBRE,
		CKTRN_NUMERO_TRANSFERENCIA,
		CKTRN_FECHA_RECEPCION, 
		CKTRN_CANTIDAD, 
		CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN, 
		CKTRN_CANTIDAD_DISPONIBLE,
		CKTRN_OBSERVACION, 
		CKTRN_ESTADO, 
		CKTRN_FECHA_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_FECHA_UPDATE, 
		CKTRN_USUARIO_UPDATE
	FROM SII.CGG_KDX_TRANSFERENCIA CKTRN 
	INNER JOIN CGG_KDX_ESPECIE CKESP ON( CKESP.CKESP_CODIGO = CKTRN.CKESP_CODIGO)
	INNER JOIN CGG_KDX_PUNTO_VENTA CKPVT ON (CKTRN.CKPVT_CODIGO = CKPVT.CKPVT_CODIGO)
	WHERE CKTRN_ESTADO = TRUE AND CKPVT.CKPVT_CODIGO = '||quote_literal(TMP_PV)||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKPVT_NOMBRE, '''')||'' ''||COALESCE(CKESP_NOMBRE, '''')||'' ''||COALESCE(CKTRN_NUMERO_TRANSFERENCIA, '''')||'' ''||COALESCE(CKTRN_FECHA_RECEPCION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_CANTIDAD, 0)||'' ''||COALESCE(CKTRN_PRECIO_UNITARIO, 0)||'' ''||COALESCE(CKTRN_SERIE_INICIO, 0)||'' ''||COALESCE(CKTRN_SERIE_FIN, 0)||'' ''||COALESCE(CKTRN_CANTIDAD_DISPONIBLE, 0)||'' ''||COALESCE(CKTRN_ESTADO, FALSE)||'' ''||COALESCE(CKTRN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_USUARIO_INSERT, '''')||'' ''||COALESCE(CKTRN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* SII.F_CGG_KDX_TRANSFERENCIA_COUNT_PUNTO_VENTA
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_TRANSFERENCIA POR CADA PUNTO DE VENTA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN IN_CUSU_NOMBRE_USUARIO NOMBRE DE USUARIO
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_COUNT_PUNTO_VENTA(
IN IN_FIND_TEXT TEXT,
IN IN_CUSU_NOMBRE_USUARIO CHARACTER VARYING
)RETURNS INT AS
$$
DECLARE
	TMP_ROWS INT2;
	TMP_PV VARCHAR;
BEGIN
	TMP_PV := SII.F_CGG_KDX_USUARIO_PV_S_PV_FROM_USUARIO(IN_CUSU_NOMBRE_USUARIO);
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_TRANSFERENCIA CKTRN 
	INNER JOIN CGG_KDX_ESPECIE CKESP ON( CKESP.CKESP_CODIGO = CKTRN.CKESP_CODIGO)
	INNER JOIN CGG_KDX_PUNTO_VENTA CKPVT ON (CKTRN.CKPVT_CODIGO = CKPVT.CKPVT_CODIGO)
	WHERE CKTRN_ESTADO = TRUE AND CKPVT.CKPVT_CODIGO = TMP_PV AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKTRN_NUMERO_TRANSFERENCIA, '''')||' '||COALESCE(CKTRN_FECHA_RECEPCION, CURRENT_TIMESTAMP)||' '||COALESCE(CKTRN_CANTIDAD, 0)||' '||COALESCE(CKTRN_PRECIO_UNITARIO, 0)||' '||COALESCE(CKTRN_SERIE_INICIO, 0)||' '||COALESCE(CKTRN_SERIE_FIN, 0)||' '||COALESCE(CKTRN_CANTIDAD_DISPONIBLE, 0)||' '||COALESCE(CKTRN_ESTADO, FALSE)||' '||COALESCE(CKTRN_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKTRN_USUARIO_INSERT, '''')||' '||COALESCE(CKTRN_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKTRN_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_UPDATE_STOCK
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_TRANSFERENCIA.
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @param IN_CKTRN_CANTIDAD CANTIDAD DE ESPECIES
* @param IN_CKTRN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_UPDATE_STOCK(
IN IN_CKTRN_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKTRN_CODIGO%TYPE,
IN IN_CKTRN_CANTIDAD SII.CGG_KDX_TRANSFERENCIA.CKTRN_CANTIDAD%TYPE,
IN IN_CKTRN_USUARIO_UPDATE SII.CGG_KDX_TRANSFERENCIA.CKTRN_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
	TMP_RESULTADO VARCHAR;
	TMP_CKESP_CODIGO VARCHAR; 
BEGIN
	UPDATE SII.CGG_KDX_TRANSFERENCIA SET
		CKTRN_CANTIDAD_DISPONIBLE =  CKTRN_CANTIDAD_DISPONIBLE - IN_CKTRN_CANTIDAD,
		CKTRN_USUARIO_UPDATE =  IN_CKTRN_USUARIO_UPDATE 
	WHERE
		CKTRN_CODIGO = IN_CKTRN_CODIGO;
	SELECT CKESP_CODIGO INTO TMP_CKESP_CODIGO FROM SII.CGG_KDX_TRANSFERENCIA WHERE CKTRN_CODIGO = IN_CKTRN_CODIGO; 
        SELECT SII.F_CGG_KDX_CONTROL_STOCK(
		TMP_CKESP_CODIGO,
		IN_CKTRN_CODIGO,
		1,
		IN_CKTRN_USUARIO_UPDATE
		) INTO TMP_RESULTADO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



