/**
* FUNCION  F_CGG_DHU_BECA_EDIT_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_BECA. 
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/


CREATE OR REPLACE FUNCTION F_CGG_DHU_BECA_EDIT_SELECT(IN_USER_NAME CHARACTER VARYING, IN_START_INDEX INTEGER, IN_LIMIT INTEGER, IN_SORT_FIELD_NAME CHARACTER VARYING, IN_DIRECTION CHARACTER VARYING, IN_FIND_TEXT TEXT)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		BEC.CDBEC_CODIGO, 
		BEC.CDTBC_CODIGO, 
		BEC.CGESP_CODIGO, 
		BEC.CGIED_CODIGO, 
		BEC.CPAIS_CODIGO, 
		BEC.CGTPR_CODIGO, 
		BEC.CRPER_CODIGO, 
		PER.CRPER_NOMBRES,
		(SELECT TDI.CRDID_DESCRIPCION FROM SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI WHERE TDI.CRDID_CODIGO =PER.CRDID_CODIGO)AS CRDID_TIPO,
		PER.CRPER_APELLIDO_PATERNO,
		PER.CRPER_APELLIDO_MATERNO,
		PER.CRPER_NUM_DOC_IDENTIFIC,
		PER.CRPER_NUMERO_RESIDENCIA,
		PER.CRPER_LUGAR_NACIMIENTO,
		PER.CRPER_FECHA_NACIMIENTO,
		BEC.CGG_CRPER_CODIGO, 
		BEC.CRPJR_CODIGO,
		(SELECT PJR.CRPJR_RAZON_SOCIAL FROM SII.CGG_RES_PERSONA_JURIDICA PJR WHERE PJR.CRPJR_CODIGO =BEC.CRPJR_CODIGO) AS CRPJR_NOMBRE, 
		(SELECT ESP.CGESP_NOMBRE FROM SII.CGG_ESPECIALIDAD ESP WHERE ESP.CGESP_CODIGO =BEC.CGESP_CODIGO) AS CGESP_NOMBRE,
		(SELECT INS.CGIED_NOMBRE FROM SII.CGG_INSTITUCION_EDUCATIVA INS WHERE INS.CGIED_CODIGO =BEC.CGIED_CODIGO) AS CGIED_NOMBRE,
		(SELECT TPF.CGTPR_DESCRIPCION FROM SII.CGG_TITULO_PROFESIONAL TPF WHERE TPF.CGTPR_CODIGO =BEC.CGTPR_CODIGO) AS CGTPR_NOMBRE,
		(SELECT NES.CGNES_DESCRIPCION FROM SII.CGG_NIVEL_ESTUDIO NES INNER JOIN SII.CGG_ESPECIALIDAD ESP ON(ESP.CGNES_CODIGO=NES.CGNES_CODIGO ) 
			INNER JOIN SII.CGG_TITULO_PROFESIONAL TPF ON (TPF.CGNES_CODIGO =NES.CGNES_CODIGO) 
			WHERE ESP.CGESP_CODIGO =BEC.CGESP_CODIGO AND TPF.CGTPR_CODIGO =BEC.CGTPR_CODIGO ) AS CGNES_DESCRIPCION,
		BEC.CDBEC_NUMERO, 
		BEC.CDBEC_FECHA_INGRESO, 
		BEC.CDBEC_FUNCIONARIO, 
		BEC.CDBEC_NUMERO_APROBACION, 
		BEC.CDBEC_FECHA_INICIO, 
		BEC.CDBEC_FECHA_FIN, 
		BEC.CDBEC_NUMERO_CONVENIO, 
		BEC.CDBEC_VSALIDA_ORIGEN, 
		BEC.CDBEC_VSALIDA_DESTINO, 
		BEC.CDBEC_VSALIDA_VALOR, 
		BEC.CDBEC_VRETORNO_ORIGEN, 
		BEC.CDBEC_VRETORNO_DESTINO, 
		BEC.CDBEC_VRETORNO_VALOR, 
		BEC.CDBEC_CARRERA, 
		BEC.CDBEC_TIPO_CICLO, 
		BEC.CDBEC_TOTAL_CICLOS, 
		BEC.CDBEC_NUMERO_CUENTO, 
		BEC.CDBEC_NUMERO_APROBACION_MODIFICATORIO,
		BEC.CDBEC_NUMERO_CONTRATO_MODIFICATORIO,
		BEC.CDBEC_OBSERVACION_CONTRATO_MODIFICATORIO,
		BEC.CDBEC_OBSERVACION, 
		BEC.CDBEC_TITULO_ENTREGADO, 
		BEC.CDBEC_BECA_DEVENGADA, 
		BEC.CDBEC_ESTADO_APROBACION, 
		BEC.CDBEC_VALOR_REEMBOLSO, 
		BEC.CDBEC_ESTADO, 
		BEC.CDBEC_FECHA_INSERT, 
		BEC.CDBEC_USUARIO_INSERT, 
		BEC.CDBEC_FECHA_UPDATE, 
		BEC.CDBEC_USUARIO_UPDATE
	FROM SII.CGG_DHU_BECA BEC
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=BEC.CRPER_CODIGO)
	WHERE BEC.CDBEC_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')||'' ''||
	COALESCE(PER.CRPER_NUM_DOC_IDENTIFIC,'''')||'' ''||
	COALESCE(PER.CRPER_NUMERO_RESIDENCIA,'''')||'' ''||
	COALESCE(CDBEC_NUMERO, '''')||'' ''||
	COALESCE(CDBEC_FECHA_INGRESO, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CDBEC_FUNCIONARIO, '''')||'' ''||
	COALESCE(CDBEC_NUMERO_APROBACION, '''')||'' ''||
	COALESCE(CDBEC_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CDBEC_FECHA_FIN, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CDBEC_NUMERO_CONVENIO, '''')||'' ''||
	COALESCE(CDBEC_VSALIDA_ORIGEN, '''')||'' ''||
	COALESCE(CDBEC_VSALIDA_DESTINO, '''')||'' ''||
	COALESCE(CDBEC_VSALIDA_VALOR, 0)||'' ''||
	COALESCE(CDBEC_VRETORNO_ORIGEN, '''')||'' ''||
	COALESCE(CDBEC_VRETORNO_DESTINO, '''')||'' ''||
	COALESCE(CDBEC_VRETORNO_VALOR, 0)||'' ''||
	COALESCE(CDBEC_CARRERA, '''')||'' ''||
	COALESCE(CDBEC_TIPO_CICLO, 0)||'' ''||
	COALESCE(CDBEC_TOTAL_CICLOS, 0)||'' ''||
	COALESCE(CDBEC_NUMERO_CUENTO, '''')||'' ''||
	COALESCE(CDBEC_OBSERVACION, '''')||'' ''||
	COALESCE(CDBEC_TITULO_ENTREGADO, FALSE)||'' ''||
	COALESCE(CDBEC_BECA_DEVENGADA, FALSE)||'' ''||
	COALESCE(CDBEC_ESTADO_APROBACION, 0)||'' ''||
	COALESCE(CDBEC_VALOR_REEMBOLSO, 0)||'' ''||
	COALESCE(CDBEC_ESTADO, FALSE)||'' ''||
	COALESCE(CDBEC_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CDBEC_USUARIO_INSERT, '''')||'' ''||
	COALESCE(CDBEC_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CDBEC_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;

/** FUNCTION:F_CGG_RES_PERSONA_BECA_SELECT
* CONTABILIZA UN REGISTROS DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTA.
* @param IN_CRPER_NUM_DOC_IDENTIFIC CRITERIO DE BUSQUEDA.
* return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_BECA_SELECT(IN_CRPER_NUM_DOC_IDENTIFIC CHARACTER VARYING)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
SELECT
		PER.CRPER_CODIGO, 
		PER.CRDID_CODIGO,				
		(SELECT CRDID_DESCRIPCION FROM CGG_RES_DOCUMENTO_IDENTIFICACIO DI WHERE DI.CRDID_CODIGO = PER.CRDID_CODIGO) TIPO_DOCUMENTO,
		PER.CRPER_NUM_DOC_IDENTIFIC, 
		PER.CRPER_NOMBRES, 
		PER.CRPER_APELLIDO_PATERNO, 
		PER.CRPER_APELLIDO_MATERNO,
		INR.CDINR_DESCRIPCION,
	    INR.CDINR_TIPO_REPRESENTANTE
		
	FROM SII.CGG_RES_PERSONA PER 
	LEFT JOIN SII.CGG_DHU_INFORMACION_REPRESENTAN INR ON(PER.CRPER_CODIGO=INR.CRPER_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE AND 
		CRPER_NUM_DOC_IDENTIFIC =IN_CRPER_NUM_DOC_IDENTIFIC;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;

/**
* FUNCION F_CGG_DHU_PERSONA_BECA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA SOLO RESIDENTES PERMANENTES.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PERSONA_BECA_SELECT(
IN_USER_NAME CHARACTER VARYING, 
IN_START_INDEX INTEGER, 
IN_LIMIT INTEGER, 
IN_SORT_FIELD_NAME CHARACTER VARYING, 
IN_DIRECTION CHARACTER VARYING, 
IN_FIND_TEXT TEXT)RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	TMP TEXT;
BEGIN
	
	TMP:='SELECT  PER.CRPER_CODIGO,
	   (SELECT TDI.CRDID_DESCRIPCION FROM SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI WHERE TDI.CRDID_CODIGO =PER.CRDID_CODIGO)AS CRDID_TIPO,
       PER.CRPER_NOMBRES,
       PER.CRPER_APELLIDO_PATERNO,
       PER.CRPER_APELLIDO_MATERNO,
       PER.CRPER_NUM_DOC_IDENTIFIC,
       PER.CRPER_FECHA_NACIMIENTO,
       PER.CRPER_LUGAR_NACIMIENTO,
       PER.CRPER_GENERO,
       PER.CRPER_NUMERO_RESIDENCIA,
       PER.CRPER_AUTORIZADO,
    (SII.f_tramite_tipo(RS.CRTST_CODIGO))TIPO_RESIDENCIA,
	 (SELECT CGCNF_CODIGO FROM CGG_CONFIGURACION
	    WHERE CGCNF_VALOR_CADENA=(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
		SELECT TS.CRTST_CODIGO, TS.CGG_CRTST_CODIGO, TS.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TS WHERE (TS.CRTST_CODIGO = RS.CRTST_CODIGO)
		UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
		WHERE TP.CGG_CRTST_CODIGO = TST.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO WHERE CGG_CRTST_CODIGO IS NULL ) )AS CODIGO,
		(SELECT COUNT(CRPER_CODIGO) FROM CGG_DHU_BECA WHERE CDBEC_ESTADO=TRUE AND CRPER_CODIGO= PER.CRPER_CODIGO AND (CDBEC_ESTADO_APROBACION=0 OR CDBEC_ESTADO_APROBACION=1 OR CDBEC_ESTADO_APROBACION=2 OR CDBEC_ESTADO_APROBACION=4 OR CDBEC_ESTADO_APROBACION=5) ) AS NUM_REGISTROS
	FROM SII.CGG_RES_PERSONA PER 						
	INNER JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = RS.CRTST_CODIGO)	
	LEFT JOIN SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI ON(TDI.CRDID_CODIGO=PER.CRDID_CODIGO)
	WHERE CRPER_ESTADO = TRUE 
	AND RS.CRRSD_VIGENTE = TRUE  AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN PER.CRPER_CODIGO IS NULL THEN '''' ELSE PER.CRPER_CODIGO END ||'' ''||
	CASE WHEN PER.CRDID_CODIGO IS NULL THEN '''' ELSE PER.CRDID_CODIGO END ||'' ''||
	CASE WHEN TDI.CRDID_DESCRIPCION IS NULL THEN '''' ELSE TDI.CRDID_DESCRIPCION END ||'' ''||
	CASE WHEN PER.CRPER_NUM_DOC_IDENTIFIC IS NULL THEN '''' ELSE PER.CRPER_NUM_DOC_IDENTIFIC END ||'' ''||
	CASE WHEN PER.CRPER_NUMERO_RESIDENCIA IS NULL THEN '''' ELSE PER.CRPER_NUMERO_RESIDENCIA END ||'' ''||
	CASE WHEN PER.CRPER_NOMBRES IS NULL THEN '''' ELSE PER.CRPER_NOMBRES END ||'' ''||
	CASE WHEN PER.CRPER_APELLIDO_PATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_PATERNO END ||'' ''||
	CASE WHEN PER.CRPER_GENERO IS NULL THEN 0 ELSE PER.CRPER_GENERO END ) = 1
	AND	 RS.CRTST_CODIGO IN 
(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
	SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
FROM CGG_CONFIGURACION
WHERE CGCNF_CODIGO = ''03''))  
	UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
	WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
) SELECT CRTST_CODIGO  FROM TIPO)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	OPEN TMP_REF FOR EXECUTE TMP;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;

/** FUNCTION: f_cgg_dhu_persona_beca_select_count(TEXT)
* CONTABILIZA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA SOLO RESIDENTES PERMANENTES.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TMP_ROWS
*/
CREATE OR REPLACE FUNCTION SII.f_cgg_dhu_persona_beca_select_count(in_find_text text)
  RETURNS integer AS
$BODY$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_PERSONA PER 						
	INNER JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = RS.CRTST_CODIGO)	
	LEFT JOIN SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI ON(TDI.CRDID_CODIGO=PER.CRDID_CODIGO)
	WHERE CRPER_ESTADO = TRUE 
	AND RS.CRRSD_VIGENTE = TRUE  
	AND	 RS.CRTST_CODIGO IN 
(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
	SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
FROM CGG_CONFIGURACION
WHERE CGCNF_CODIGO = '03'))  
	UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
	WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
) SELECT CRTST_CODIGO  FROM TIPO) AND SII.F_STRING_IN(IN_FIND_TEXT,
	CASE WHEN PER.CRPER_CODIGO IS NULL THEN '''' ELSE PER.CRPER_CODIGO END ||' '||
	CASE WHEN PER.CRDID_CODIGO IS NULL THEN '''' ELSE PER.CRDID_CODIGO END ||' '||
	CASE WHEN TDI.CRDID_DESCRIPCION IS NULL THEN '''' ELSE TDI.CRDID_DESCRIPCION END ||' '||
	CASE WHEN PER.CRPER_NUM_DOC_IDENTIFIC IS NULL THEN '''' ELSE PER.CRPER_NUM_DOC_IDENTIFIC END ||' '||
	CASE WHEN PER.CRPER_NUMERO_RESIDENCIA IS NULL THEN '''' ELSE PER.CRPER_NUMERO_RESIDENCIA END ||' '||
	CASE WHEN PER.CRPER_NOMBRES IS NULL THEN '''' ELSE PER.CRPER_NOMBRES END ||' '||
	CASE WHEN PER.CRPER_APELLIDO_PATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_PATERNO END ||' '||
	CASE WHEN PER.CRPER_GENERO IS NULL THEN 0 ELSE PER.CRPER_GENERO END) = 1;	
	RETURN TMP_ROWS;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;


/** FUNCTION: F_CGG_DHU_PERSONA_REPRESENTANTE
* SELECCIONA UN REGISTRO DE LA TABLA CGG_RES_PERSONA SOLO RESIDENTES PERMANETES.
* @param IN_CRPER_NUM_DOC_IDENTIFIC CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/


CREATE OR REPLACE FUNCTION F_CGG_DHU_PERSONA_REPRESENTANTE(IN_CRPER_NUM_DOC_IDENTIFIC CHARACTER VARYING)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT		
		PR.CRPER_CODIGO,
		PR.CRPER_NUM_DOC_IDENTIFIC,
		PR.CRPER_NUMERO_RESIDENCIA,
		PR.CRPER_NOMBRES,
		PR.CRPER_APELLIDO_PATERNO,
		PR.CRPER_APELLIDO_MATERNO,
		PR.CRPER_NUMERO_RESIDENCIA,
		INR.CDINR_DESCRIPCION,
		INR.CDINR_TIPO_REPRESENTANTE,
		(SELECT CGCNF_CODIGO FROM CGG_CONFIGURACION
	    WHERE CGCNF_VALOR_CADENA=(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
		SELECT TS.CRTST_CODIGO, TS.CGG_CRTST_CODIGO, TS.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TS WHERE (TS.CRTST_CODIGO = RS.CRTST_CODIGO)
		UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
		WHERE TP.CGG_CRTST_CODIGO = TST.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO WHERE CGG_CRTST_CODIGO IS NULL ) )AS CODIGO		
	FROM SII.CGG_RES_PERSONA PR
	LEFT JOIN SII.CGG_DHU_INFORMACION_REPRESENTAN INR ON(INR.CRPER_CODIGO=PR.CRPER_CODIGO)								
	INNER JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PR.CRPER_CODIGO)	
        WHERE  RS.CRRSD_VIGENTE = TRUE
	AND (PR.CRPER_NUMERO_RESIDENCIA = IN_CRPER_NUM_DOC_IDENTIFIC
	OR PR.CRPER_NUM_DOC_IDENTIFIC = IN_CRPER_NUM_DOC_IDENTIFIC);
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;



/** Function: f_cgg_dhu_beca_certificado_select
* SELECCIONA LOS CERTIFICADOS ACADEMICOS DE ACUERDO AL TIPO DE BECA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return SETOF refcursor
-- DROP FUNCTION f_cgg_dhu_beca_certificado_select(character varying, integer, integer, character varying, character varying, text);
*/
CREATE OR REPLACE FUNCTION f_cgg_dhu_beca_certificado_select(in_user_name character varying, in_start_index integer, in_limit integer, in_sort_field_name character varying, in_direction character varying, in_find_text text)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		BCR.CDBCR_CODIGO, 
		BCR.CDTCA_CODIGO, 
		TCA.CDTCA_NOMBRE,
		BCR.CDTBC_CODIGO,
		TPB.CDTBC_NOMBRE,
		BCR.CDBCR_OBLIGATORIO, 
		BCR.CDBCR_ESTADO, 
		BCR.CDBCR_FECHA_INSERT, 
		BCR.CDBCR_USUARIO_INSERT, 
		BCR.CDBCR_FECHA_UPDATE, 
		BCR.CDBCR_USUARIO_UPDATE
	FROM SII.CGG_DHU_BECA_CERTIFICADO
	INNER SII.CGG_DHU_TIPO_BECA TBC ON(BCR.CDTBC_CODIGO=TBC.CDTBC_CODIGO)
	INNER SII.CGG_DHU_TIPO_CACADEMICO ON(BCR.CDTCA_CODIGO=TCA.CDTCA_CODIGO)
	WHERE CDBCR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN BCR.CDBCR_CODIGO IS NULL THEN '''' ELSE BCR.CDBCR_CODIGO END ||'' ''||
	CASE WHEN BCR.CDTCA_CODIGO IS NULL THEN '''' ELSE BCR.CDTCA_CODIGO END ||'' ''||
	CASE WHEN TCA.CDTCA_NOMBRE IS NULL THEN '''' ELSE CDTCA_NOMBRE END ||'' ''||
	CASE WHEN BCR.CDTBC_CODIGO IS NULL THEN '''' ELSE BCR.CDTBC_CODIGO END ||'' ''||
	CASE WHEN TBC.CDTBC_NOMBRE IS NULL THEN '''' ELSE CDTBC_NOMBRE END ||'' ''||
	CASE WHEN BCR.CDBCR_OBLIGATORIO IS NULL THEN FALSE ELSE BCR.CDBCR_OBLIGATORIO END ||'' ''||
	CASE WHEN BCR.CDBCR_ESTADO IS NULL THEN FALSE ELSE BCR.CDBCR_ESTADO END ||'' ''||
	CASE WHEN BCR.CDBCR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE BCR.CDBCR_FECHA_INSERT END ||'' ''||
	CASE WHEN BCR.CDBCR_USUARIO_INSERT IS NULL THEN '''' ELSE BCR.CDBCR_USUARIO_INSERT END ||'' ''||
	CASE WHEN BCR.CDBCR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE BCR.CDBCR_FECHA_UPDATE END ||'' ''||
	CASE WHEN BCR.CDBCR_USUARIO_UPDATE IS NULL THEN '''' ELSE BCR.CDBCR_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;


/** FUNCTION: f_cgg_res_persona_select_beca
* SELECCIONA UN REGISTROS DE LA TABLA SII.CGG_RES_PERSONA SOLO RESIDENTES PERMANENTES.
* @param IN_CRPER_NUM_DOC_IDENTIFIC CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION f_cgg_res_persona_select_beca(in_crper_num_doc_identific character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	
BEGIN
	OPEN TMP_REF FOR
	SELECT DISTINCT PER.CRPER_CODIGO,
	(SELECT TDI.CRDID_DESCRIPCION FROM SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI WHERE TDI.CRDID_CODIGO =PER.CRDID_CODIGO)AS CRDID_TIPO,
       PER.CRPER_NOMBRES,
       PER.CRPER_APELLIDO_PATERNO,
       PER.CRPER_APELLIDO_MATERNO,
       PER.CRPER_NUM_DOC_IDENTIFIC,
       PER.CRPER_FECHA_NACIMIENTO,
       PER.CRPER_LUGAR_NACIMIENTO,
       PER.CRPER_GENERO,
       PER.CRPER_NUMERO_RESIDENCIA,
       PER.CRPER_AUTORIZADO,
	  (SII.f_tramite_tipo(RS.CRTST_CODIGO))TIPO_RESIDENCIA,
        (SELECT CGCNF_CODIGO FROM CGG_CONFIGURACION
	    WHERE CGCNF_VALOR_CADENA=(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
		SELECT TS.CRTST_CODIGO, TS.CGG_CRTST_CODIGO, TS.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TS WHERE (TS.CRTST_CODIGO = RS.CRTST_CODIGO)
		UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
		WHERE TP.CGG_CRTST_CODIGO = TST.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO WHERE CGG_CRTST_CODIGO IS NULL ) )AS CODIGO,
		(SELECT COUNT(CRPER_CODIGO) FROM CGG_DHU_BECA WHERE CDBEC_ESTADO=TRUE AND CRPER_CODIGO= PER.CRPER_CODIGO AND (CDBEC_ESTADO_APROBACION=0 OR CDBEC_ESTADO_APROBACION=1 OR CDBEC_ESTADO_APROBACION=2 OR CDBEC_ESTADO_APROBACION=4 OR CDBEC_ESTADO_APROBACION=5) ) AS NUM_REGISTROS
	FROM SII.CGG_RES_PERSONA PER	
	INNER JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = RS.CRTST_CODIGO)	
	LEFT JOIN SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI ON(TDI.CRDID_CODIGO=PER.CRDID_CODIGO)
	WHERE CRPER_ESTADO = TRUE AND (PER.CRPER_NUM_DOC_IDENTIFIC =IN_CRPER_NUM_DOC_IDENTIFIC
	OR  PER.CRPER_NUMERO_RESIDENCIA =IN_CRPER_NUM_DOC_IDENTIFIC)
	AND RS.CRRSD_VIGENTE = TRUE;

	 

	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;

/** FUNCTION: f_cgg_dhu_adjunto
* SELECCIONA UN REGISTROS DE LA TABLA SII.CGG_DHU_ADJUNTO.
* @param IN_CDBEC_CODIGO CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION f_cgg_dhu_adjunto(in_cdbec_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDAD_CODIGO, 
		CDBEC_CODIGO, 
		CDAD_DESCRIPCION, 
		CDAD_OBSERVACION, 
		CDAD_NOMBRE_ADJUNTO, 
		--CDAD_ADJUNTO, 
		CDAD_TIPO, 
		CDAD_DESCRIPCION_CONTENIDO, 
		CDAD_ESTADO, 
		CDAD_FECHA_INSERT, 
		CDAD_USUARIO_INSERT, 
		CDAD_FECHA_UPDATE, 
		CDAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_ADJUNTO
	WHERE CDAD_ESTADO = TRUE AND 
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;


/** Function: f_cgg_dhu_beca_certificado_select
* SELECCIONA LOS CERTIFICADOS ACADEMICOS DE ACUERDO AL TIPO DE BECA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return SETOF refcursor
-- DROP FUNCTION f_cgg_dhu_beca_certificado_select(character varying, integer, integer, character varying, character varying, text);
*/
CREATE OR REPLACE FUNCTION f_cgg_dhu_beca_certificado_select(in_user_name character varying, in_start_index integer, in_limit integer, in_sort_field_name character varying, in_direction character varying, in_find_text text)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		BCR.CDBCR_CODIGO, 
		BCR.CDTCA_CODIGO, 
		TCA.CDTCA_NOMBRE,
		BCR.CDTBC_CODIGO,
		TBC.CDTBC_NOMBRE,
		BCR.CDBCR_OBLIGATORIO, 
		BCR.CDBCR_ESTADO, 
		BCR.CDBCR_FECHA_INSERT, 
		BCR.CDBCR_USUARIO_INSERT, 
		BCR.CDBCR_FECHA_UPDATE, 
		BCR.CDBCR_USUARIO_UPDATE
	FROM SII.CGG_DHU_BECA_CERTIFICADO BCR
	INNER JOIN SII.CGG_DHU_TIPO_BECA TBC ON(BCR.CDTBC_CODIGO=TBC.CDTBC_CODIGO)
	INNER JOIN SII.CGG_DHU_TIPO_CACADEMICO TCA ON(BCR.CDTCA_CODIGO=TCA.CDTCA_CODIGO)
	WHERE CDBCR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN BCR.CDBCR_CODIGO IS NULL THEN '''' ELSE BCR.CDBCR_CODIGO END ||'' ''||
	CASE WHEN BCR.CDTCA_CODIGO IS NULL THEN '''' ELSE BCR.CDTCA_CODIGO END ||'' ''||
	CASE WHEN TCA.CDTCA_NOMBRE IS NULL THEN '''' ELSE CDTCA_NOMBRE END ||'' ''||
	CASE WHEN BCR.CDTBC_CODIGO IS NULL THEN '''' ELSE BCR.CDTBC_CODIGO END ||'' ''||
	CASE WHEN TBC.CDTBC_NOMBRE IS NULL THEN '''' ELSE CDTBC_NOMBRE END ||'' ''||
	CASE WHEN BCR.CDBCR_OBLIGATORIO IS NULL THEN FALSE ELSE BCR.CDBCR_OBLIGATORIO END ||'' ''||
	CASE WHEN BCR.CDBCR_ESTADO IS NULL THEN FALSE ELSE BCR.CDBCR_ESTADO END ||'' ''||
	CASE WHEN BCR.CDBCR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE BCR.CDBCR_FECHA_INSERT END ||'' ''||
	CASE WHEN BCR.CDBCR_USUARIO_INSERT IS NULL THEN '''' ELSE BCR.CDBCR_USUARIO_INSERT END ||'' ''||
	CASE WHEN BCR.CDBCR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE BCR.CDBCR_FECHA_UPDATE END ||'' ''||
	CASE WHEN BCR.CDBCR_USUARIO_UPDATE IS NULL THEN '''' ELSE BCR.CDBCR_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;


/**
* FUNCION f_cgg_dhu_beca_estado_update
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_DHU_BECA.
* @param in_cdbec_codigo IDENTIFICATIVO UNICO DE REGISTRO BECA
* @param IN_CDACD_ESTADO_APROBACION IDENTIFICATIVO UNICO DE REGISTRO 
    NO_CONCLUIDA - 0,
    REGISTRADA - 1,
    EN_SEGUIMIENTO - 2,
    CONCLUIDA - 3,
    REPROBADA - 4,
    TERMINADA_CASO_FORTUITO - 5
* @param IN_CDACD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION f_cgg_dhu_beca_estado_update(in_cdbec_codigo character varying, in_cdbec_estado_aprobacion smallint, in_cdbec_usuario_update character varying)
  RETURNS void AS
$BODY$
BEGIN
	UPDATE SII.CGG_DHU_BECA SET		
		CDBEC_ESTADO_APROBACION= IN_CDBEC_ESTADO_APROBACION, 		
		CDBEC_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDBEC_USUARIO_UPDATE = IN_CDBEC_USUARIO_UPDATE
	WHERE
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;



/** FUNCION F_CGG_GENERA_NUM_BECA
*GENERA EL NUMERO DE LA BECA.
* @return CHARACTER VARYING
*/

CREATE OR REPLACE FUNCTION F_CGG_GENERA_NUM_BECA()
  RETURNS CHARACTER VARYING AS
$BODY$
DECLARE
	TMP_SECUENCIA CHARACTER VARYING;
	TMP_ANIO CHARACTER VARYING;
	TMP_ACRONIMO CHARACTER VARYING;	
BEGIN
	SELECT COUNT(CDBEC_NUMERO)+1 INTO TMP_SECUENCIA
	FROM SII.CGG_DHU_BECA
	WHERE EXTRACT(YEAR FROM CDBEC_FECHA_INSERT) = EXTRACT(YEAR FROM CURRENT_TIMESTAMP);
	
	SELECT CGCNF_VALOR_CADENA INTO TMP_ACRONIMO
	FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF25';
	
	SELECT EXTRACT(YEAR FROM CURRENT_TIMESTAMP) INTO TMP_ANIO;
	
	RETURN  TMP_ACRONIMO||'-'||TMP_ANIO||'-'||LPAD(TMP_SECUENCIA,4,'0');
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;
ALTER FUNCTION F_CGG_GENERA_NUM_BECA() OWNER TO SII;



