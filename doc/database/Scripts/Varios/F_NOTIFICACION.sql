/**
* FUNCION F_CGG_RES_NOTIFICACION_NO_RESIDENCIA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_NO_RESIDENCIA_SELECT(
IN_USER_NAME CHARACTER VARYING, 
IN_START_INDEX INTEGER, 
IN_LIMIT INTEGER, 
IN_SORT_FIELD_NAME CHARACTER VARYING, 
IN_DIRECTION CHARACTER VARYING, 
IN_FIND_TEXT TEXT)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT  PER.CRPER_CODIGO,
	(SELECT NAC.CGNCN_NACIONALIDAD FROM SII.CGG_NACIONALIDAD NAC WHERE NAC.CGNCN_CODIGO =PER.CGNCN_CODIGO)AS CGNCN_NOMBRE,
	(SELECT CTN.CCTN_NOMBRE FROM SII.CGG_CANTON CTN WHERE CTN.CCTN_CODIGO =PER.CCTN_CODIGO)AS CCNT_NOMBRE,
       PER.CRPER_NOMBRES,
       PER.CRPER_APELLIDO_PATERNO,
       PER.CRPER_APELLIDO_MATERNO,
       PER.CRPER_NUM_DOC_IDENTIFIC,
       PER.CRPER_NUMERO_RESIDENCIA,
       (SII.F_TRAMITE_TIPO(RS.CRTST_CODIGO))TIPO_RESIDENCIA,
       CASE (SELECT CGCNF_CODIGO FROM CGG_CONFIGURACION
	WHERE CGCNF_VALOR_CADENA=(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
			SELECT TS.CRTST_CODIGO, TS.CGG_CRTST_CODIGO, TS.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TS WHERE (TS.CRTST_CODIGO = RS.CRTST_CODIGO)
			UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
			WHERE TP.CGG_CRTST_CODIGO = TST.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO WHERE CGG_CRTST_CODIGO IS NULL ) )
			WHEN ''03'' THEN TRUE 
			ELSE
				FALSE
			END AS CODIGO
	FROM SII.CGG_RES_PERSONA PER	
	LEFT JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO)	
	WHERE PER.CRPER_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(PER.CRPER_NUM_DOC_IDENTIFIC,'''') ||'' ''||
	COALESCE(PER.CRPER_NUMERO_RESIDENCIA,'''') ||'' ''||
	COALESCE(PER.CRPER_NOMBRES, '''') ||'' ''||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''') ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;


/** FUNCTION: F_CGG_RES_NOTIFICACION_NO_RESIDENCIA_SELECT_COUNT(TEXT)
* CONTABILIZA N REGISTROS DE LA TABLA SII.CGG_RES_NOTIFICACION.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TMP_ROWS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_NO_RESIDENCIA_SELECT_COUNT(IN_FIND_TEXT TEXT)
  RETURNS INTEGER AS
$BODY$
DECLARE
TMP_ROWS INTEGER;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_PERSONA PER	
	LEFT JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO)	
	LEFT JOIN SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI ON(TDI.CRDID_CODIGO=PER.CRDID_CODIGO)
	LEFT JOIN CGG_NACIONALIDAD NC ON (NC.CGNCN_CODIGO = PER.CGNCN_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE  AND SII.F_STRING_IN(IN_FIND_TEXT,
	CASE WHEN PER.CRPER_CODIGO IS NULL THEN '''' ELSE PER.CRPER_CODIGO END ||' '||
	CASE WHEN PER.CRDID_CODIGO IS NULL THEN '''' ELSE PER.CRDID_CODIGO END ||' '||
	CASE WHEN TDI.CRDID_DESCRIPCION IS NULL THEN '''' ELSE TDI.CRDID_DESCRIPCION END ||' '||
	CASE WHEN PER.CRPER_NUM_DOC_IDENTIFIC IS NULL THEN '''' ELSE PER.CRPER_NUM_DOC_IDENTIFIC END ||' '||
	CASE WHEN PER.CRPER_NUMERO_RESIDENCIA IS NULL THEN '''' ELSE PER.CRPER_NUMERO_RESIDENCIA END ||' '||
	CASE WHEN PER.CRPER_NOMBRES IS NULL THEN '''' ELSE PER.CRPER_NOMBRES END ||' '||
	CASE WHEN PER.CRPER_APELLIDO_PATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_PATERNO END ||' '||
	CASE WHEN PER.CRPER_GENERO IS NULL THEN 0 ELSE PER.CRPER_GENERO END ||' '||
	CASE WHEN PER.CGNCN_CODIGO IS NULL THEN '''' ELSE PER.CGNCN_CODIGO END ||' '||
	CASE WHEN NC.CGNCN_NACIONALIDAD IS NULL THEN '''' ELSE NC.CGNCN_NACIONALIDAD END ) = 1;	
	RETURN TMP_ROWS;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;


-- Function: f_cgg_res_persona_select_num_doc_no_residente(character varying)

-- DROP FUNCTION f_cgg_res_persona_select_num_doc_no_residente(character varying);

CREATE OR REPLACE FUNCTION f_cgg_res_persona_select_num_doc_no_residente(in_crper_num_doc_identific character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
TMP_REF REFCURSOR;
BEGIN
OPEN TMP_REF FOR
SELECT DISTINCT PER.CRPER_CODIGO,
(SELECT NAC.CGNCN_NACIONALIDAD FROM SII.CGG_NACIONALIDAD NAC WHERE NAC.CGNCN_CODIGO =PER.CGNCN_CODIGO)AS CGNCN_NOMBRE,
(SELECT CTN.CCTN_NOMBRE FROM SII.CGG_CANTON CTN WHERE CTN.CCTN_CODIGO =PER.CCTN_CODIGO)AS CCNT_NOMBRE,
       PER.CRPER_NOMBRES,
       PER.CRPER_APELLIDO_PATERNO,
       PER.CRPER_APELLIDO_MATERNO,
       PER.CRPER_NUM_DOC_IDENTIFIC,
       PER.CRPER_NUMERO_RESIDENCIA,
       (SII.F_TRAMITE_TIPO(RS.CRTST_CODIGO))TIPO_RESIDENCIA,
CASE (SELECT CGCNF_CODIGO FROM CGG_CONFIGURACION
WHERE CGCNF_VALOR_CADENA=(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
SELECT TS.CRTST_CODIGO, TS.CGG_CRTST_CODIGO, TS.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TS WHERE (TS.CRTST_CODIGO = RS.CRTST_CODIGO)
UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
WHERE TP.CGG_CRTST_CODIGO = TST.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO WHERE CGG_CRTST_CODIGO IS NULL ) )
WHEN '03' THEN TRUE 
ELSE
FALSE
END AS CODIGO
FROM SII.CGG_RES_PERSONA PER 
LEFT JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO) 
WHERE CRPER_ESTADO = TRUE AND (PER.CRPER_NUM_DOC_IDENTIFIC =IN_CRPER_NUM_DOC_IDENTIFIC
OR  PER.CRPER_NUMERO_RESIDENCIA =IN_CRPER_NUM_DOC_IDENTIFIC)
AND PER.CRPER_ESTADO = TRUE ;
RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION f_cgg_res_persona_select_num_doc_no_residente(character varying) OWNER TO sii;


 /**
* FUNCION F_CGG_RES_RESOLUCION_SELECT_NOTIFICACION
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_SELECT_NOTIFICACION(
IN_USER_NAME CHARACTER VARYING, 
IN_START_INDEX INTEGER, 
IN_LIMIT INTEGER, 
IN_SORT_FIELD_NAME CHARACTER VARYING, 
IN_DIRECTION CHARACTER VARYING, 
IN_FIND_TEXT TEXT)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		RS.CRRES_CODIGO, 
		RS.CRSSC_CODIGO, 
		(SELECT CRSSC_NUMERO_SESION FROM SII.CGG_RES_SESION_COMITE WHERE CRSSC_CODIGO = RS.CRSSC_CODIGO) NUMERO_SESION,
		RS.CRRES_TIPO, 
                RS.CRRES_EXTRACTO_RESOLUCION, 
		RS.CRRES_RESOLUCION_REEMPLAZA, 
		RS.CRRES_ESTADO_RESOLUCION, 
		RS.CRRES_NUMERO_RESOLUCION,
		RS.CRRES_ESTADO, 
		RS.CRRES_FECHA_INSERT, 
		RS.CRRES_USUARIO_INSERT, 
		RS.CRRES_FECHA_UPDATE, 
		RS.CRRES_USUARIO_UPDATE
	FROM SII.CGG_RES_RESOLUCION RS
	WHERE CRRES_ESTADO = TRUE AND RS.CRRES_TIPO=0 AND 
	( LENGTH('''||IN_FIND_TEXT||''') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRRES_NUMERO_RESOLUCION, '''')||'' ''||
	COALESCE((SELECT CRSSC_NUMERO_SESION FROM SII.CGG_RES_SESION_COMITE WHERE CRSSC_CODIGO = RS.CRSSC_CODIGO), '''')||'' ''||
	COALESCE(CRRES_OBSERVACIONES, '''')||'' ''||
	COALESCE(CRRES_EXTRACTO_RESOLUCION, '''')||'' ''||
	COALESCE(CRRES_RESOLUCION_REEMPLAZA, '''')) = 1)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;


/** FUNCTION: F_CGG_RES_RESOLUCION_SELECT_NOTIFICACION_COUNT
* CONTABILIZA N REGISTROS DE LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TMP_ROWS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_SELECT_NOTIFICACION_COUNT(IN_FIND_TEXT TEXT)
  RETURNS INTEGER AS
$BODY$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_RESOLUCION RS
	WHERE CRRES_ESTADO = TRUE AND RS.CRRES_TIPO=0 AND 
	( LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRRES_NUMERO_RESOLUCION, '')||' '||
	COALESCE((SELECT CRSSC_NUMERO_SESION FROM SII.CGG_RES_SESION_COMITE WHERE CRSSC_CODIGO = RS.CRSSC_CODIGO), '')||' '||
	COALESCE(CRRES_OBSERVACIONES, '')||' '||
	COALESCE(CRRES_EXTRACTO_RESOLUCION, '')||' '||
	COALESCE(CRRES_RESOLUCION_REEMPLAZA, '')) = 1);
	RETURN TMP_ROWS;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;

/**
* FUNCION F_CGG_RES_OFICIAL_SEGUIMIENTO_USUARIO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_OFICIAL_SEGUIMIENTO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_SEGUIMIENTO_USUARIO(IN_USER_NAME CHARACTER VARYING, IN_START_INDEX INTEGER, IN_LIMIT INTEGER, IN_SORT_FIELD_NAME CHARACTER VARYING, IN_DIRECTION CHARACTER VARYING, IN_FIND_TEXT TEXT)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		OS.CROSG_CODIGO,
		U.CUSU_CODIGO,
		PER.CRPER_NOMBRES,
		(PER.CRPER_APELLIDO_PATERNO||'' ''||PER.CRPER_APELLIDO_MATERNO) AS APELLIDOS
	FROM SII.CGG_USUARIO U
	INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
	INNER JOIN SII.CGG_RES_OFICIAL_SEGUIMIENTO OS ON (U.CUSU_CODIGO= OS.CUSU_CODIGO)
	WHERE U.CUSU_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;

/** FUNCTION: SII.F_CGG_RES_OFICIAL_SEGUIMIENTO_USUARIO_COUNT(TEXT)
* CONTABILIZA N REGISTROS DE LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TMP_ROWS
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_SEGUIMIENTO_USUARIO_COUNT(IN_FIND_TEXT TEXT)
  RETURNS INTEGER AS
$BODY$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(
	        OS.CROSG_CODIGO,
		U.CUSU_CODIGO,
		PER.CRPER_NOMBRES,
		PER.CRPER_APELLIDO_PATERNO||' '||PER.CRPER_APELLIDO_MATERNO
	)INTO TMP_ROWS
	FROM SII.CGG_USUARIO U
	INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
	INNER JOIN SII.CGG_RES_OFICIAL_SEGUIMIENTO OS ON (U.CUSU_CODIGO= OS.CUSU_CODIGO)
	WHERE U.CUSU_ESTADO = TRUE AND OS.CROSG_TIPO_OFICIAL=1 AND SII.F_STRING_IN(IN_FIND_TEXT,
	COALESCE(PER.CRPER_NOMBRES,'''')||' '||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||' '||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,' ')) = 1;
	RETURN TMP_ROWS;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;

/**FUNCTION: SII.F_CGG_RES_OFICIAL_SEGUIMIENTO_USUARIO_COUNT( )
* CONTABILIZA N REGISTROS DE LA TABLA SII.CGG_RES_OFICIAL_SEGUIMIENTO.
* @return TMP_ROWS
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_SEGUIMIENTO_USUARIO_COUNT()
  RETURNS INTEGER AS
$BODY$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(OS.CROSG_CODIGO) INTO TMP_ROWS
	FROM SII.CGG_USUARIO U
	INNER JOIN SII.CGG_RES_OFICIAL_SEGUIMIENTO OS ON (U.CUSU_CODIGO= OS.CUSU_CODIGO)	
	WHERE U.CUSU_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;
 /**
* FUNCION F_CGG_RES_PERSONA_S_DENUNCIA
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
 CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_S_DENUNCIA(IN_USER_NAME CHARACTER VARYING, IN_START_INDEX INTEGER, IN_LIMIT INTEGER, IN_SORT_FIELD_NAME CHARACTER VARYING, IN_DIRECTION CHARACTER VARYING, IN_FIND_TEXT TEXT)
 RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
      TMP_REF REFCURSOR;
BEGIN
   OPEN TMP_REF FOR EXECUTE
   'SELECT
        PER.CRPER_CODIGO,
       PER.CRPER_NOMBRES,
       PER.CRPER_APELLIDO_PATERNO,
       PER.CRPER_APELLIDO_MATERNO,
       PER.CRPER_NUM_DOC_IDENTIFIC
       FROM SII.CGG_RES_PERSONA PER
       WHERE PER.CRPER_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN PER.CRPER_CODIGO IS NULL THEN '''' ELSE PER.CRPER_CODIGO END ||'' ''||
	CASE WHEN PER.CRPER_NOMBRES IS NULL THEN '''' ELSE PER.CRPER_NOMBRES END ||'' ''||
	CASE WHEN PER.CRPER_APELLIDO_PATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_PATERNO END ||'' ''||
	CASE WHEN PER.CRPER_APELLIDO_MATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_MATERNO END ||'' ''||
	CASE WHEN PER.CRPER_NUM_DOC_IDENTIFIC IS NULL THEN '''' ELSE PER.CRPER_NUM_DOC_IDENTIFIC END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
LANGUAGE 'PLPGSQL' VOLATILE
COST 100
ROWS 1000;

 /**
* FUNCION F_CGG_RES_DENUNCIA_SELECT_NOTI
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_DENUNCIA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.f_cgg_res_denuncia_select_noti(in_user_name character varying, in_start_index integer, in_limit integer, in_sort_field_name character varying, in_direction character varying, in_find_text text)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRDEN_CODIGO, 
		CUSU_CODIGO, 
		CRDEN_ANIO, 
		CRDEN_NUMERO, 
		CRDEN_FECHA_RECEPCION, 
		CRDEN_NUMERO_DOC_IDENT, 
		CRDEN_NOMBRES, 
		CRDEN_APELLIDOS, 
		CRDEN_DESCRIPCION, 
		CRDEN_CONTACTO, 
		CRDEN_TIPO, 
		CRDEN_DENUNCIA, 
		CRDEN_SEGUIMIENTO, 
		CRDEN_ESTADO_DENUNCIA, 
		CRDEN_ESTADO, 
		CRDEN_FECHA_INSERT, 
		CRDEN_USUARIO_INSERT, 
		CRDEN_FECHA_UPDATE, 
		CRDEN_USUARIO_UPDATE
	        FROM SII.CGG_RES_DENUNCIA
	        WHERE CRDEN_ESTADO_DENUNCIA=0 AND CRDEN_TIPO=0 AND CRDEN_ESTADO=TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
			CASE WHEN CRDEN_CODIGO IS NULL THEN '''' ELSE CRDEN_CODIGO END ||'' ''||
			CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||
			CASE WHEN CRDEN_ANIO IS NULL THEN '''' ELSE CRDEN_ANIO END ||'' ''||
			CASE WHEN CRDEN_NUMERO IS NULL THEN '''' ELSE CRDEN_NUMERO END ||'' ''||
			CASE WHEN CRDEN_FECHA_RECEPCION IS NULL THEN CURRENT_TIMESTAMP ELSE CRDEN_FECHA_RECEPCION END ||'' ''||
			CASE WHEN CRDEN_NUMERO_DOC_IDENT IS NULL THEN '''' ELSE CRDEN_NUMERO_DOC_IDENT END ||'' ''||
			CASE WHEN CRDEN_NOMBRES IS NULL THEN '''' ELSE CRDEN_NOMBRES END ||'' ''||
			CASE WHEN CRDEN_APELLIDOS IS NULL THEN '''' ELSE CRDEN_APELLIDOS END ||'' ''||
			CASE WHEN CRDEN_DESCRIPCION IS NULL THEN '''' ELSE CRDEN_DESCRIPCION END ||'' ''||
			CASE WHEN CRDEN_CONTACTO IS NULL THEN '''' ELSE CRDEN_CONTACTO END ||'' ''||
			CASE WHEN CRDEN_TIPO IS NULL THEN 0 ELSE CRDEN_TIPO END ||'' ''||
			CASE WHEN CRDEN_DENUNCIA IS NULL THEN FALSE ELSE CRDEN_DENUNCIA END ||'' ''||
			CASE WHEN CRDEN_SEGUIMIENTO IS NULL THEN '''' ELSE CRDEN_SEGUIMIENTO END ||'' ''||
			CASE WHEN CRDEN_ESTADO_DENUNCIA IS NULL THEN 0 ELSE CRDEN_ESTADO_DENUNCIA END ||'' ''||
			CASE WHEN CRDEN_ESTADO IS NULL THEN FALSE ELSE CRDEN_ESTADO END ||'' ''||
			CASE WHEN CRDEN_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRDEN_FECHA_INSERT END ||'' ''||
			CASE WHEN CRDEN_USUARIO_INSERT IS NULL THEN '''' ELSE CRDEN_USUARIO_INSERT END ||'' ''||
			CASE WHEN CRDEN_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRDEN_FECHA_UPDATE END ||'' ''||
			CASE WHEN CRDEN_USUARIO_UPDATE IS NULL THEN '''' ELSE CRDEN_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;

CREATE OR REPLACE FUNCTION SII.f_cgg_res_denuncia_count_noti()
  RETURNS integer AS
$BODY$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_DENUNCIA
	WHERE CRDEN_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;

/**
* FUNCION f_cgg_res_denuncia_update_noti
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_RES_DENUNCIA.
* @param IN_CRDEN_CODIGO  IDENTIFICATIVO UNICO DE REGISTRO DE DENUNCIA
* @param IN_CRDEN_ESTADO_DENUNCIA IDENTIFICATIVO UNICO DE REGISTRO 
* @param IN_CRDEN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/

CREATE OR REPLACE FUNCTION SII.f_cgg_res_denuncia_update_noti(
IN IN_CRDEN_CODIGO SII.CGG_RES_DENUNCIA.CRDEN_CODIGO%TYPE, 
IN IN_CRDEN_ESTADO_DENUNCIA SII.CGG_RES_DENUNCIA.CRDEN_ESTADO_DENUNCIA%TYPE, 
IN IN_CRDEN_USUARIO_UPDATE SII.CGG_RES_DENUNCIA.CRDEN_USUARIO_UPDATE%TYPE
)
  RETURNS void AS
$$
BEGIN
	UPDATE SII.CGG_RES_DENUNCIA SET
		CRDEN_ESTADO_DENUNCIA = IN_CRDEN_ESTADO_DENUNCIA,  
		CRDEN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRDEN_USUARIO_UPDATE = IN_CRDEN_USUARIO_UPDATE
	WHERE
		CRDEN_CODIGO = IN_CRDEN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/** FUNCION SII.F_CGG_GENERA_NUM_DENUNCIA
* GENERA EL NUMERO SECUENCIAL PARA EL REGISTRO DE DENUNCIA.
* @param IN_CRDEN_TIPO CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_GENERA_NUM_DENUNCIA(
IN IN_CRDEN_TIPO INT
)
  RETURNS CHARACTER VARYING AS
$BODY$
DECLARE
	TMP_SECUENCIA CHARACTER VARYING;
	TMP_ANIO CHARACTER VARYING;
	TMP_ACRONIMO CHARACTER VARYING;		
BEGIN
	SELECT EXTRACT(YEAR FROM CURRENT_TIMESTAMP) INTO TMP_ANIO;
	IF IN_CRDEN_TIPO = 0 THEN
		SELECT CGCNF_VALOR_CADENA INTO TMP_ACRONIMO	FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF13';		
	ELSIF IN_CRDEN_TIPO = 1 THEN
		SELECT CGCNF_VALOR_CADENA INTO TMP_ACRONIMO	FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF20';
	END IF;
	
	
	SELECT MAX ( SUBSTRING(CRDEN_NUMERO,LENGTH(CRDEN_NUMERO)-3,5) :: INTEGER )+1 INTO TMP_SECUENCIA 
	FROM SII.CGG_RES_DENUNCIA 
	WHERE CRDEN_TIPO = IN_CRDEN_TIPO
		AND EXTRACT(YEAR FROM CRDEN_FECHA_INSERT) = EXTRACT(YEAR FROM CURRENT_TIMESTAMP);
	IF TMP_SECUENCIA IS NULL THEN
		TMP_SECUENCIA = 1;
	END IF;
	RETURN TMP_ACRONIMO||'-'||TMP_ANIO||'-'||LPAD(TMP_SECUENCIA,4,'0');	
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;

/**
* FUNCION F_CGG_RES_OFICIAL_SEGUIMIENTO_JEFE
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_OFICIAL_SEGUIMIENTO DE ACUERDO AL CROSG_TIPO_OFICIAL.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_SEGUIMIENTO_JEFE(IN_USER_NAME CHARACTER VARYING, IN_START_INDEX INTEGER, IN_LIMIT INTEGER, IN_SORT_FIELD_NAME CHARACTER VARYING, IN_DIRECTION CHARACTER VARYING, IN_FIND_TEXT TEXT)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		OS.CROSG_CODIGO,
		U.CUSU_CODIGO,
		PER.CRPER_NOMBRES,
		(PER.CRPER_APELLIDO_PATERNO||'' ''||PER.CRPER_APELLIDO_MATERNO) AS APELLIDOS
	FROM SII.CGG_RES_OFICIAL_SEGUIMIENTO OS 
	INNER JOIN SII.CGG_USUARIO U ON (U.CUSU_CODIGO= OS.CUSU_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PER ON (PER.CRPER_CODIGO = U.CRPER_CODIGO)
	WHERE U.CUSU_ESTADO = TRUE AND OS.CROSG_TIPO_OFICIAL=1 AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;

/**FUNCTION: SII.F_CGG_RES_OFICIAL_SEGUIMIENTO_JEFE_COUNT
* CONTABILIZA N REGISTROS DE LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TMP_ROWS
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_SEGUIMIENTO_JEFE_COUNT(IN_FIND_TEXT TEXT)
  RETURNS INTEGER AS
$BODY$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*)INTO TMP_ROWS
	FROM SII.CGG_RES_OFICIAL_SEGUIMIENTO OS
	INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
	INNER JOIN SII.CGG_USUARIO U ON (U.CUSU_CODIGO= OS.CUSU_CODIGO)
	WHERE OS.CROSG_ESTADO = TRUE AND OS.CROSG_TIPO_OFICIAL=1 AND SII.F_STRING_IN(IN_FIND_TEXT,
	COALESCE(PER.CRPER_NOMBRES,'''')||' '||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||' '||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,' ')) = 1;
	RETURN TMP_ROWS;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;

/**FUNCTION: F_CGG_TIEMPO_MAXIMO_AUDIENCIA
* CONTROL QUE CALCULA LOS DIAS MAXIMO PARA UNA AUDIENCIA.
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE NOTIFICACION
* @return BOOLEAN
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TIEMPO_MAXIMO_AUDIENCIA(INCRNOT_CODIGO CHARACTER VARYING)
  RETURNS BOOLEAN AS
$BODY$ 
DECLARE
	TMPRESPUESTA BOOLEAN;
BEGIN
	SELECT 
	CASE WHEN
	(CAST(TO_CHAR(CRNOT_FECHA_NOTIFICACION,'YYYY/MM/DD')AS DATE) + (SELECT CAST(CGCNF_VALOR_NUMERICO AS INTEGER)
	FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO='CONF14')) >= CURRENT_DATE 
	THEN TRUE
	ELSE FALSE
	END INTO TMPRESPUESTA
	FROM CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO=TRUE AND CRNOT_CODIGO = INCRNOT_CODIGO;
	RETURN TMPRESPUESTA;
END;
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;

/** Function: f_cgg_res_notificacion_insert
* INSERTA INFORMACION EN LA TABLA CGG_RES_NOTIFICACION.
* @param in_crnot_codigo IDENTIFICATIVO UNICO DE NOTIFICACION 
* @param in_crtnt_codigo IDENTIFICATIVO UNICO DE DE TIPO DE NOTIFICACION
* @param in_crper_codigo IDENTIFICATIVO UNICO DE DE PERSONA
* @param in_cusu_codigo IDENTIFICATIVO UNICO DE USUARIO
* @param in_cgg_cusu_codigo IDENTIFICATIVO UNICO DE DE USUARIO
* @param in_crres_codigo IDENTIFICATIVO UNICO DE RESIDENCIA
* @param in_crden_codigo IDENTIFICATIVO UNICO DE DENUNCIA
* @param in_cctn_codigo  IDENTIFICATIVO UNICO DE CANTON
* @param in_crosg_codigo IDENTIFICATIVO UNICO DE OFICIAL SEGUIMIENTO
* @param in_cgg_crosg_codigo IDENTIFICATIVO UNICO DE OFICICAL SEGUIMIENTO
* @param in_crnot_numero_notificacion NUMERO DE NOTIFICACION
* @param in_crnot_fecha_notificacion  FECHA DE LA NOTIFICACION
* @param in_crnot_lugar_notificacion LUGAR DE LA NOTIFICACION
* @param in_crnot_referencia REFERNECIA DE LA NOTIFICACION
* @param in_crnot_observacion OBSERVACION DE LA NOTIFICACION
* @param in_crnot_estado_notificacion  ESTADO DE LA NOTIFICACION:
0 - REGISTRADA
1 - PROCESADA
2 - ANULADA
3 - EJECUTADA
* @param in_crnot_estado ESTADO DEL REGISTRO
0-REGISTRADA
1-PROCESADA
2-ANULADA
3-EJECUTADA
4-PERMITIDO INGRESO

* @param in_crnot_regularizacion REGULARIZACION DE LA NOTIFICACION
* @param in_crnot_fecha_audiencia  FECHA DE LA AUDIENCIA
* @param in_crnot_extracto_audiencia  EXTRACTO DE LA NOTIFICACION
* @param in_crnot_observacion_audiencia OBSERVACION DE LA NOTIFICACION
* @param in_crnot_procede_notificacion SI SE APLICA O NO LA NOTIFICACION
* @param in_crnot_descripcion_adjunto_aud DESCRIPCION DEL DOCUMENTO ADJUNTO 
* @param in_crnot_nombre_adjunto_audiencia  NOMBRE DEL ADJUNTO DE LA AUDIENCIA
* @param in_crnot_adjunto_audiencia DOCUMENTO DIGITAL ADJUNTO DE LA AUDIENCIA
* @param in_crnot_fecha_salida_volunt FECHA DE SALIDA VOLUNTARIA COMO CONSECUENCIA DE LA APLICACION DE LA RESOLUCION
* @param in_crnot_fecha_expulsion  FECHA DE EXPULSION COMO CONSECUENCIA DE LA APLICACION DE LA RESOLUCION
* @param in_crnot_usuario_insert USUARIO QUE INGRESO INFORMACION EN EL SISTEMA
* @param in_crnot_usuario_update USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARYING
*/

CREATE OR REPLACE FUNCTION SII.f_cgg_res_notificacion_insert(in_crnot_codigo character varying, in_crtnt_codigo character varying, in_crper_codigo character varying, in_cusu_codigo character varying, in_cgg_cusu_codigo character varying, in_crres_codigo character varying, in_crden_codigo character varying, in_cctn_codigo character varying, in_crosg_codigo character varying, in_cgg_crosg_codigo character varying, in_crnot_numero_notificacion character varying, in_crnot_fecha_notificacion timestamp with time zone, in_crnot_lugar_notificacion character varying, in_crnot_referencia character varying, in_crnot_observacion character varying, in_crnot_estado_notificacion smallint, in_crnot_estado boolean, in_crnot_regularizacion character varying, in_crnot_fecha_audiencia timestamp with time zone, in_crnot_extracto_audiencia text, in_crnot_observacion_audiencia character varying, in_crnot_procede_notificacion boolean, in_crnot_descripcion_adjunto_aud character varying, in_crnot_nombre_adjunto_audiencia character varying, in_crnot_adjunto_audiencia bytea, in_crnot_fecha_salida_volunt timestamp with time zone, in_crnot_fecha_expulsion timestamp with time zone, in_crnot_usuario_insert character varying, in_crnot_usuario_update character varying)
  RETURNS character varying AS
$BODY$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN
        SELECT COUNT(IN_CRNOT_NUMERO_NOTIFICACION) INTO TMP_COUNT FROM cgg_res_notificacion WHERE crnot_estado=true AND crnot_numero_notificacion= IN_CRNOT_NUMERO_NOTIFICACION AND cctn_codigo=IN_CCTN_CODIGO;
	IF (TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'Numero de la notificacion ya esta registrado.';
	END IF;
	IF (UPPER(IN_CRNOT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_NOTIFICACION','CRNOT_CODIGO','CRNOT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRNOT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_NOTIFICACION(
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRTNT_CODIGO, 
		IN_CRPER_CODIGO, 
		IN_CUSU_CODIGO, 
		IN_CGG_CUSU_CODIGO, 
		IN_CRRES_CODIGO, 
		IN_CRDEN_CODIGO, 
		IN_CCTN_CODIGO, 
		IN_CROSG_CODIGO, 
		IN_CGG_CROSG_CODIGO, 
		IN_CRNOT_NUMERO_NOTIFICACION, 
		IN_CRNOT_FECHA_NOTIFICACION, 
		IN_CRNOT_LUGAR_NOTIFICACION, 
		IN_CRNOT_REFERENCIA, 
		IN_CRNOT_OBSERVACION, 
		IN_CRNOT_ESTADO_NOTIFICACION, 
		IN_CRNOT_ESTADO, 
		IN_CRNOT_REGULARIZACION, 
		IN_CRNOT_FECHA_AUDIENCIA, 
		IN_CRNOT_EXTRACTO_AUDIENCIA, 
		IN_CRNOT_OBSERVACION_AUDIENCIA, 
		IN_CRNOT_PROCEDE_NOTIFICACION, 
		IN_CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		IN_CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		IN_CRNOT_ADJUNTO_AUDIENCIA, 
		IN_CRNOT_FECHA_SALIDA_VOLUNT, 
		IN_CRNOT_FECHA_EXPULSION, 
		CURRENT_TIMESTAMP, 
		IN_CRNOT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRNOT_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;
