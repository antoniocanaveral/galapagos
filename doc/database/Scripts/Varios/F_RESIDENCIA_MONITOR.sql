/**
* FUNCION SII.F_RESIDENCIA_MONITOR
* FUNCION QUE MONITOREA LA CADUCIDAD DE LAS RESIDENCIAS.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_RESIDENCIA_MONITOR(
)RETURNS VOID AS
$$
DECLARE
TMP_TRANSEUNTE VARCHAR;
TMP_TEMPORAL VARCHAR;
TMP_TURISTA VARCHAR;
TMP_IS_TEMPORAL BOOLEAN;
TMP_IS_TRANSEUNTE BOOLEAN;
TMP_IS_TURISTA BOOLEAN;
TMP_RECORD RECORD;
--FECHA ACTUAL DEL SERVIDOR
TMP_CURRENT_TIMESTAMP TIMESTAMP WITH TIME ZONE;
TMP_USER_NAME VARCHAR;
--NUMERO DE VUELO
TMP_CRMOV_NUMERO_VUELO VARCHAR;
--CODIGO DEL AEROPUERTO DE ABORDAJE
TMP_CARPT_CODIGO VARCHAR;
--CODIGO DEL AEROPUERTO DE ARRIVO
TMP_CGG_CARPT_CODIGO VARCHAR;
--CODIGO DE AEROLINEA
TMP_CRALN_CODIGO VARCHAR;
--CONTIENE LA CLAVE ASIGNADA AL ULTIMO REGISTRO INGRESADO
TMP_CODIGO VARCHAR;
--RECORD GEM
TMP_REC RECORD;
TMP_TMP VARCHAR;
TMP_CRMOV_TIPO_OPERACION INT;
--CODIGO DE RESIDENCIA
TMP_CRRSD_CODIGO VARCHAR;
--CODIGO DE TRAMITE
TMP_CRTRA_CODIGO VARCHAR;
--CODIGO DE TIPO DE SOLICITUD DE TRAMITE
TMP_CRTST_CODIGO VARCHAR;
--CORREO DESTINATARIO
TMP_DEST VARCHAR;
--CODIGO DE TRAMITE DE LA RESIDENCIA VIGENCIA
TMP_RSD_CRTRA_CODIGO VARCHAR;
BEGIN

	TMP_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
	TMP_USER_NAME := 'monitor';
	
	--OBTIENE EL TIPO DE SOLICITUD PADRE PARA TEMPORALES
	SELECT CGCNF_VALOR_CADENA INTO TMP_TEMPORAL
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '04';
	
	--OBTIENE EL TIPO DE SOLICITUD PADRE PARA TRANSEUNTES
	SELECT CGCNF_VALOR_CADENA INTO TMP_TRANSEUNTE
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '05';
	
	--OBTIENE EL TIPO DE SOLICITUD PADRE PARA TURISTAS
	SELECT CGCNF_VALOR_CADENA INTO TMP_TURISTA
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '06';
	
	BEGIN
		--CIERRES Y ACTIVACION DE RESIDENCIAS TEMPORALES Y TRANSEUNTES
		FOR TMP_RECORD IN (
			WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO IN (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO IN ('04','05')) 
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				)
			SELECT RSD.CRRSD_CODIGO, RSD.CRPER_CODIGO, RSD.CRTST_CODIGO
			FROM SII.CGG_RES_RESIDENCIA RSD
			WHERE CRRSD_VIGENTE AND 
				CRRSD_ESTADO AND 
				CRRSD_MODALIDAD = 1 AND 
				TMP_CURRENT_TIMESTAMP::DATE > CRRSD_FECHA_CADUCIDAD::DATE AND
				CRTST_CODIGO IN (SELECT CRTST_CODIGO  FROM TIPO)					
		) LOOP	
			SELECT MVL.CRMOV_TIPO_OPERACION INTO TMP_CRMOV_TIPO_OPERACION
					FROM SII.CGG_RES_MOVILIDAD MVL 
					WHERE MVL.CRRSD_CODIGO = TMP_RECORD.CRRSD_CODIGO AND 
						MVL.CRMOV_ESTADO
					ORDER BY CRMOV_FECHA_VIAJE DESC, CRMOV_TIPO_OPERACION DESC LIMIT 1;
					
			--VERIFICA SI EL TIPO DE SOLICITUD DEL TRAMITE ES PARA RESIDENCIA PERMANENTE O TEMPORAL
			TMP_IS_TEMPORAL := SII.F_PARENT_OF(TMP_TEMPORAL, TMP_RECORD.CRTST_CODIGO);
			TMP_IS_TRANSEUNTE := SII.F_PARENT_OF(TMP_TRANSEUNTE, TMP_RECORD.CRTST_CODIGO);
			
			--CIERRE DE LA RESIDENCIA ANTERIOR
			UPDATE SII.CGG_RES_RESIDENCIA SET CRRSD_VIGENTE = FALSE,
				CRRSD_USUARIO_UPDATE = TMP_USER_NAME,
				CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP
			WHERE CRRSD_CODIGO = TMP_RECORD.CRRSD_CODIGO;
			
			--ACTIVA RESIDENCIAS QUE ENTRAN EN VIGENCIA A LA FECHA ACTUAL
			WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '05')
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
			)
			SELECT RSD.CRRSD_CODIGO, RSD.CRTRA_CODIGO
			INTO TMP_CRRSD_CODIGO, TMP_CRTRA_CODIGO
			FROM SII.CGG_RES_RESIDENCIA RSD
			WHERE NOT CRRSD_VIGENTE AND 
				RSD.CRPER_CODIGO = TMP_RECORD.CRPER_CODIGO AND
				CRRSD_ESTADO AND 
				TMP_CURRENT_TIMESTAMP::DATE = CRRSD_FECHA_INICIO::DATE AND
				CRTST_CODIGO IN ( SELECT CRTST_CODIGO  FROM TIPO);
			
			IF (TMP_CRRSD_CODIGO IS NOT NULL) THEN
				--ACTIVA LA RESIDENCIA DE TIPO TRANSEUNTE
				UPDATE SII.CGG_RES_RESIDENCIA SET CRRSD_VIGENTE = TRUE,
					CRRSD_USUARIO_UPDATE = TMP_USER_NAME,
					CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP
				WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
			END IF;
				
			IF (TMP_CRMOV_TIPO_OPERACION IS NOT NULL AND TMP_CRMOV_TIPO_OPERACION = 0) THEN
				SELECT SII.F_CREAR_REGISTROS_SOPORTE(TMP_USER_NAME,
					TMP_RECORD.CRPER_CODIGO,
					TMP_CRRSD_CODIGO,
					TMP_CURRENT_TIMESTAMP,
					NULL::TIMESTAMP WITH TIME ZONE,
					TMP_CRTRA_CODIGO
				) INTO TMP_CODIGO;
			END IF;
			
			--ACTUALIZACION DEL NUMERO DE RESIDENCIA DE LA PERSONA
			IF (TMP_IS_TEMPORAL) THEN
				UPDATE SII.CGG_RES_PERSONA SET 
					CRPER_NUMERO_RESIDENCIA = NULL,
					CRPER_USUARIO_UPDATE = TMP_USER_NAME,
					CRPER_FECHA_UPDATE = CURRENT_TIMESTAMP
				WHERE CRPER_CODIGO = TMP_RECORD.CRPER_CODIGO;
			END IF;
		END LOOP;
	EXCEPTION WHEN OTHERS THEN
		SELECT SII.F_CGG_BUZON_CORREO_INSERT(
			'KEYGEN'::VARCHAR,		
			'soporte@besixplus.com', 
			('Error en el monitor de residencias '||TO_CHAR(CURRENT_DATE, 'DD/MM/YYYY'))::TEXT, 
			(SQLERRM)::TEXT, 
			'text/plain'::VARCHAR, 
			0, 
			FALSE, 
			TRUE, 
			TMP_USER_NAME				
		) INTO TMP_TMP;
	END;
	
	--ACTIVA RESIDENCIAS DE TIPO TRANSEUNTE SI TIENEN TIPO TURISTAS VIGENTE
	FOR TMP_RECORD IN (SELECT RSD.CRRSD_CODIGO, RSD.CRPER_CODIGO, RSD.CRTST_CODIGO, RSD.CRTRA_CODIGO
		FROM SII.CGG_RES_RESIDENCIA RSD
		WHERE NOT CRRSD_VIGENTE AND 
			CRRSD_ESTADO AND 
			CRRSD_MODALIDAD = 1 AND 
			TMP_CURRENT_TIMESTAMP::DATE = CRRSD_FECHA_INICIO::DATE AND
			CRTST_CODIGO IN
			(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
				SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO IN (SELECT CGCNF_VALOR_CADENA
				FROM CGG_CONFIGURACION
				WHERE CGCNF_CODIGO IN ('05')) 
				UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
				WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
			) SELECT CRTST_CODIGO  FROM TIPO)
	) LOOP	
		SELECT CRRSD_CODIGO, CRTST_CODIGO
		INTO TMP_CRRSD_CODIGO, TMP_CRTST_CODIGO
		FROM SII.CGG_RES_RESIDENCIA RSD
		WHERE RSD.CRPER_CODIGO = TMP_RECORD.CRPER_CODIGO AND 
			(RSD.CRTRA_CODIGO IS NULL OR RSD.CRTRA_CODIGO != TMP_RECORD.CRTRA_CODIGO) AND
			RSD.CRRSD_VIGENTE;
			
		SELECT CRTRA_CODIGO
		INTO TMP_RSD_CRTRA_CODIGO
		FROM SII.CGG_RES_RESIDENCIA RSD
		WHERE RSD.CRPER_CODIGO = TMP_RECORD.CRPER_CODIGO AND 
			RSD.CRTRA_CODIGO = TMP_RECORD.CRTRA_CODIGO AND
			RSD.CRRSD_VIGENTE;
			
		SELECT MVL.CRMOV_TIPO_OPERACION INTO TMP_CRMOV_TIPO_OPERACION
				FROM SII.CGG_RES_MOVILIDAD MVL 
				WHERE MVL.CRRSD_CODIGO = TMP_CRRSD_CODIGO AND 
					MVL.CRMOV_ESTADO
				ORDER BY CRMOV_FECHA_VIAJE DESC, CRMOV_TIPO_OPERACION DESC LIMIT 1;
				
		--VERIFICA SI EL TIPO DE SOLICITUD DEL TRAMITE ES PARA RESIDENCIA PERMANENTE O TEMPORAL
		TMP_IS_TEMPORAL := SII.F_PARENT_OF(TMP_TEMPORAL, TMP_CRTST_CODIGO);
		TMP_IS_TRANSEUNTE := SII.F_PARENT_OF(TMP_TRANSEUNTE, TMP_CRTST_CODIGO);
		
		--CIERRE DE LA RESIDENCIA ANTERIOR
		UPDATE SII.CGG_RES_RESIDENCIA SET CRRSD_VIGENTE = FALSE,
			CRRSD_USUARIO_UPDATE = TMP_USER_NAME,
			CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP
		WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
		
		--ACTIVA RESIDENCIAS QUE ENTRAN EN VIGENCIA A LA FECHA ACTUAL
		SELECT RSD.CRRSD_CODIGO, RSD.CRTRA_CODIGO
		INTO TMP_CRRSD_CODIGO, TMP_CRTRA_CODIGO
		FROM SII.CGG_RES_RESIDENCIA RSD
		WHERE NOT CRRSD_VIGENTE AND 
			RSD.CRPER_CODIGO = TMP_RECORD.CRPER_CODIGO AND
			CRRSD_ESTADO AND 
			TMP_CURRENT_TIMESTAMP::DATE = CRRSD_FECHA_INICIO::DATE AND
			CRTST_CODIGO IN
			(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
				SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
				FROM CGG_CONFIGURACION
				WHERE CGCNF_CODIGO = '05')
				UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
				WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
			) SELECT CRTST_CODIGO  FROM TIPO);
		
		IF (TMP_CRRSD_CODIGO IS NOT NULL AND TMP_RSD_CRTRA_CODIGO IS NULL) THEN
			--ACTIVA LA RESIDENCIA DE TIPO TRANSEUNTE
			UPDATE SII.CGG_RES_RESIDENCIA SET CRRSD_VIGENTE = TRUE,
				CRRSD_USUARIO_UPDATE = TMP_USER_NAME,
				CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP
			WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
		END IF;
			
		IF (TMP_CRMOV_TIPO_OPERACION IS NOT NULL AND TMP_CRMOV_TIPO_OPERACION = 0 AND TMP_RSD_CRTRA_CODIGO IS NULL) THEN
			SELECT SII.F_CREAR_REGISTROS_SOPORTE(TMP_USER_NAME,
				TMP_RECORD.CRPER_CODIGO,
				TMP_CRRSD_CODIGO,
				TMP_CURRENT_TIMESTAMP,
				NULL::TIMESTAMP WITH TIME ZONE,
				TMP_CRTRA_CODIGO
			) INTO TMP_CODIGO;
		END IF;
		
		--ACTUALIZACION DEL NUMERO DE RESIDENCIA DE LA PERSONA
		IF (TMP_IS_TEMPORAL) THEN
			UPDATE SII.CGG_RES_PERSONA SET 
				CRPER_NUMERO_RESIDENCIA = NULL,
				CRPER_USUARIO_UPDATE = TMP_USER_NAME,
				CRPER_FECHA_UPDATE = CURRENT_TIMESTAMP
			WHERE CRPER_CODIGO = TMP_RECORD.CRPER_CODIGO;
		END IF;
	END LOOP;
	
	--CAMBIA DE ESTADO A LAS NOTIFICACIONES REGISTRADAS A PROCESADAS.
	UPDATE SII.CGG_RES_NOTIFICACION SET	
	        CRNOT_ESTADO_NOTIFICACION=1,	
		CRNOT_OBSERVACION='LA NOTIFICACION FUE PROCESADA POR NO PRESENTARSE A LA AUDIENCIA',
		CRNOT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRNOT_USUARIO_UPDATE = TMP_USER_NAME
	WHERE
		CRNOT_CODIGO IN (SELECT CRNOT_CODIGO
		FROM SII.CGG_RES_NOTIFICACION WHERE CRNOT_ESTADO_NOTIFICACION=0 AND SII.F_CGG_TIEMPO_MAXIMO_AUDIENCIA(CRNOT_CODIGO)=FALSE);
	
	--ENVIO DE CORREO ELECTRONICO DESPUES DE ESTAR LA OFERTA NO ATENDIDA EN N DIAS
	SELECT CGCNF_VALOR_CADENA INTO TMP_DEST FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF48';
	FOR TMP_REC IN (
		SELECT CGVCN_NUMERO,CISLA_NOMBRE,CGCRG_NOMBRE,CGTPR_DESCRIPCION,CGVCN_DESCRIPCION,CGVCN_FECHA_INGRESO 
		FROM CGG_GEM_VACANTE VAC
		LEFT JOIN CGG_GEM_CARGO CAR ON VAC.CGCRG_CODIGO = CAR.CGCRG_CODIGO
		LEFT JOIN CGG_TITULO_PROFESIONAL TIT ON VAC.CGTPR_CODIGO = TIT.CGTPR_CODIGO
		INNER JOIN CGG_ISLA ISL ON VAC.CISLA_CODIGO = ISL.CISLA_CODIGO
		WHERE 
		(CGVCN_FECHA_INGRESO::DATE + (
			SELECT CGCNF_VALOR_NUMERICO FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF47'
		)::INTEGER ) < CURRENT_DATE AND
		CGVCN_ESTADO AND CGVCN_ESTADO_OFERTA = 0
	) LOOP
		IF (TMP_DEST IS NOT NULL AND LENGTH(TMP_DEST) > 0 ) THEN
			SELECT SII.F_CGG_BUZON_CORREO_INSERT(
				'KEYGEN'::VARCHAR,		
				TMP_DEST, 
				('OFERTA No. '|| TMP_REC.CGVCN_NUMERO ||' PENDIENTE DE ATENCION')::TEXT, 
				(
					'La oferta No. '|| TMP_REC.CGVCN_NUMERO ||
					' registrada el '||TMP_REC.CGVCN_FECHA_INGRESO ||
					' para el cargo '||TMP_REC.CGCRG_NOMBRE||
					' no ha sido atendida por el/la encargad@.<br>'||
					'<br> Isla de registro: '||TMP_REC.CISLA_NOMBRE
				)::TEXT, 
				'text/html'::VARCHAR, 
				0, 
				FALSE, 
				TRUE, 
				TMP_USER_NAME				
			) INTO TMP_TMP;
		END IF;
	END LOOP;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_EXCEDIDO_DIAS_MONITOR
* LLENA LA TABLA DE EXCEDIDOS DE DIAS CON TODOS LOS TURISTAS Y TRANSEUNTE QUE TIENEN LA RESTRICCION.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_EXCEDIDO_DIAS_MONITOR(
)RETURNS VOID AS
$$
DECLARE 
	DIAS_PERMITIDO NUMERIC;	
BEGIN
	DIAS_PERMITIDO := 0;	
		
	SELECT CGCNF_VALOR_NUMERICO INTO DIAS_PERMITIDO FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF18';
	
	DELETE FROM SII.CGG_PERSONA_EXCEDIDA_DIA;
	
    INSERT INTO SII.CGG_PERSONA_EXCEDIDA_DIA	
	WITH P1 AS(
		WITH TURISTRANS AS (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO IN (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '05' OR CGCNF_CODIGO = '06')
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT CRTST_CODIGO  FROM TIPO),
		TIPO_RESIDENTE AS (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO IN (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '03' OR CGCNF_CODIGO = '04')
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT CRTST_CODIGO  FROM TIPO),
		RESIDENTES AS (
			SELECT RES.CRPER_CODIGO FROM SII.CGG_RES_RESIDENCIA RES 
			WHERE RES.CRRSD_ESTADO = TRUE AND
			RES.CRRSD_VIGENTE = TRUE AND RES.CRTST_CODIGO IN (SELECT CRTST_CODIGO FROM TIPO_RESIDENTE )
		)		
		SELECT DISTINCT M.CRPER_CODIGO,P.CRPER_NUM_DOC_IDENTIFIC,P.CRDID_CODIGO       
		FROM CGG_RES_MOVILIDAD M
		INNER JOIN CGG_RES_RESIDENCIA R ON (M.CRRSD_CODIGO = R.CRRSD_CODIGO AND R.CRTST_CODIGO IN (SELECT CRTST_CODIGO FROM TURISTRANS))
		INNER JOIN SII.CGG_RES_PERSONA P ON (M.CRPER_CODIGO = P.CRPER_CODIGO AND P.CRPER_CODIGO NOT IN (SELECT CRPER_CODIGO FROM RESIDENTES))
		WHERE DATE(M.CRMOV_FECHA_VIAJE)>= CURRENT_DATE - 365
	),
	P2 AS (
		SELECT CRPER_CODIGO,
			   CRPER_NUM_DOC_IDENTIFIC,
			   CRDID_CODIGO,      
			   SII.F_CALCULO_DIAS_ESTADIA(CURRENT_DATE,CRPER_CODIGO) DIAS
		FROM P1
	),
	P3 AS (
		SELECT CRPER_CODIGO,			   
			   CRPER_NUM_DOC_IDENTIFIC,
			   CRDID_CODIGO,
			   DIAS 
	    FROM P2 WHERE DIAS >=DIAS_PERMITIDO
	)
	SELECT SII.F_KEYGEN('CGG_PERSONA_EXCEDIDA_DIA','CPEDI_CODIGO','CPEDI'),CRPER_CODIGO,CRPER_NUM_DOC_IDENTIFIC,CRDID_CODIGO,DIAS,CURRENT_DATE,CURRENT_TIMESTAMP,'admin',CURRENT_TIMESTAMP,'admin' FROM P3;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION SII.F_EXCEDIDO_DIAS_INDICE_MONITOR
*LLENA LA TABLA DE EXCEDIDOS DE DIAS CON TODOS LOS TURISTAS Y TRANSEUNTE QUE TIENEN LA RESTRICCION POR MES.
*SI UNA PERSONA APARECE EN UN MES EN EL SIGUIENTE MES ESTA PERSONA ES EXCLUIDA.
*@return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_EXCEDIDO_DIAS_INDICE_MONITOR(
)RETURNS VOID AS
$$
DECLARE 
	DIAS_PERMITIDO NUMERIC;
    DIAS_MES NUMERIC;	
	DIAS_ADICIONAL NUMERIC;	
	FECHA_CALCULO DATE;
BEGIN
	DIAS_PERMITIDO := 0;	
	DIAS_MES := 0;
	DIAS_ADICIONAL := 0;
	--FECHA_CALCULO := TO_DATE('31/01/2011','DD/MM/YYYY');
	FECHA_CALCULO := CURRENT_DATE;
	
	SELECT CGCNF_VALOR_NUMERICO INTO DIAS_PERMITIDO FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF18';	
	SELECT num_days(EXTRACT(YEAR FROM FECHA_CALCULO)::INT, EXTRACT(MONTH FROM FECHA_CALCULO)::INT) INTO DIAS_MES;
	
	DIAS_ADICIONAL:= DIAS_PERMITIDO+DIAS_MES;
		
    INSERT INTO SII.CGG_PERSONA_EXCEDIDA_DIA_INDICE		
	WITH P1 AS(
		WITH TURISTRANS AS (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO IN (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '05' OR CGCNF_CODIGO = '06')
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT CRTST_CODIGO  FROM TIPO)
		SELECT DISTINCT M.CRPER_CODIGO,P.CRPER_NUM_DOC_IDENTIFIC,P.CRDID_CODIGO       
		FROM CGG_RES_MOVILIDAD M
		INNER JOIN CGG_RES_RESIDENCIA R ON (M.CRRSD_CODIGO = R.CRRSD_CODIGO)
		INNER JOIN SII.CGG_RES_PERSONA P ON (M.CRPER_CODIGO = P.CRPER_CODIGO)
		WHERE R.CRTST_CODIGO IN (SELECT CRTST_CODIGO FROM TURISTRANS) 		
		AND DATE(M.CRMOV_FECHA_VIAJE)>= FECHA_CALCULO - 365
	),
	P0 AS (
		SELECT CRPER_CODIGO,
			   CRPER_NUM_DOC_IDENTIFIC,
			   CRDID_CODIGO,      
			   SII.F_PERSONA_EN_LA_PROVINCIA(CRPER_CODIGO,'=','1') DENTRO
		FROM P1
	),	
	P2 AS (
		SELECT CRPER_CODIGO,
			   CRPER_NUM_DOC_IDENTIFIC,
			   CRDID_CODIGO,      
			   SII.F_CALCULO_DIAS_ESTADIA(CURRENT_DATE,CRPER_CODIGO) DIAS
		FROM P0 
		WHERE P0.DENTRO::BOOLEAN = TRUE
	),
	P3 AS (
		SELECT CRPER_CODIGO,			   
			   CRPER_NUM_DOC_IDENTIFIC,
			   CRDID_CODIGO,
			   DIAS 
	    FROM P2 WHERE DIAS BETWEEN DIAS_PERMITIDO AND DIAS_ADICIONAL		
	)
	SELECT SII.F_KEYGEN('CGG_PERSONA_EXCEDIDA_DIA_INDICE','CPEDN_CODIGO','CPEDN'),CRPER_CODIGO,CRPER_NUM_DOC_IDENTIFIC,CRDID_CODIGO,DIAS,SII.F_ULTIMO_AEROPUERTO_ENTRADA(CRPER_CODIGO),FECHA_CALCULO,CURRENT_TIMESTAMP,'admin',CURRENT_TIMESTAMP,'admin' FROM P3;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*CREA UNA CADENA DE DATOS EN FORMATO ESTABLECIDO DE LAS RESIDENCIAS DE LAS PERSONAS DE GALAPAGOS PARA EXPORTACION A *OTRAS FUENTES DE DATOS QUE LO REQUIERAN.
*/
CREATE OR REPLACE FUNCTION SII.F_RESIDENCIA_FORMATO_MONITOR(
)RETURNS VOID AS
$$
DECLARE 
	TMP_FORMATO TEXT;	
BEGIN

	TMP_FORMATO := '';
	TMP_FORMATO := SII.F_CGG_MOVILIDAD_RESIDENCIA_SELECT_OFF('admin','',0);
		
	INSERT INTO SII.CGG_RESIDENCIA_FORMATO (
	   CRFOR_CODIGO,
	   CRFOR_CONTENIDO,
	   CRFOR_FORMATO,
	   CCTN_CODIGO,
	   CRFOR_FECHA_GENERACION,
	   CRFOR_FECHA_INSERT,
	   CRFOR_USUARIO_INSERT,
	   CRFOR_FECHA_UPDATE,
	   CRFOR_USUARIO_UPDATE
	)VALUES(
		SII.F_KEYGEN('CGG_RESIDENCIA_FORMATO','CRFOR_CODIGO','CRFOR'),
		TMP_FORMATO,
		0,--JSON
		NULL,
		CURRENT_TIMESTAMP,
		CURRENT_TIMESTAMP,
		'admin',
		CURRENT_TIMESTAMP,
		'admin'
	);
					
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
