
/**
* FUNCION SII.F_CGG_DHU_PREGUNTAS_RESPUESTAS_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA,SII.CGG_DHU_PREGUNTA_RESPUESTA Y SII.CGG_DHU_RESPUESTA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTAS_RESPUESTAS_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP TEXT;
BEGIN
	--OPEN TMP_REF FOR EXECUTE
	TMP:='SELECT
		DISTINCT PR.CDPRG_CODIGO, 
		PR.CDCAT_CODIGO, 
		CT.CDCAT_NOMBRE,
		PR.CDPRG_DESCRIPCION, 
		PR.CDPRG_CUANTIFICABLE,
		--RS.CDRES_DESCRIPCION,		
		--PRS.CDPRS_VALORACION,
		PR.CDPRG_ESTADO, 
		PR.CDPRG_FECHA_INSERT, 
		PR.CDPRG_USUARIO_INSERT, 
		PR.CDPRG_FECHA_UPDATE, 
		PR.CDPRG_USUARIO_UPDATE,
		array_to_string(ARRAY(
			SELECT 
				''<tr>''||
				''<td>''||CDRES_DESCRIPCION||''</td>''||			
				''<td>''||PRS1.CDPRS_VALORACION||''</td>''||			
				''</tr>''
				
				FROM SII.CGG_DHU_PREGUNTA PR1
				INNER JOIN CGG_DHU_CATEGORIA CT1 ON (CT1.CDCAT_CODIGO = PR1.CDCAT_CODIGO)
				INNER JOIN CGG_DHU_PREGUNTA_RESPUESTA PRS1 ON (PRS1.CDPRG_CODIGO = PR1.CDPRG_CODIGO)	
				INNER JOIN CGG_DHU_RESPUESTA RES ON (RES.CDRES_CODIGO = PRS1.CDRES_CODIGO)	
						WHERE CDRES_ESTADO = TRUE AND PRS1.CDPRG_CODIGO = PR.CDPRG_CODIGO	
						),'''') JSON_INFO
	FROM SII.CGG_DHU_PREGUNTA PR
	INNER JOIN SII.CGG_DHU_PREGUNTA_RESPUESTA PRE ON (PRE.CDPRG_CODIGO=PR.CDPRG_CODIGO)
	INNER JOIN CGG_DHU_CATEGORIA CT ON (CT.CDCAT_CODIGO = PR.CDCAT_CODIGO)	
	WHERE CDPRG_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN PR.CDPRG_DESCRIPCION IS NULL THEN '''' ELSE PR.CDPRG_DESCRIPCION END ||'' ''||
	CASE WHEN CT.CDCAT_NOMBRE IS NULL THEN '''' ELSE CT.CDCAT_NOMBRE END  ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	OPEN TMP_REF FOR EXECUTE TMP;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA,SII.CGG_DHU_PREGUNTA_RESPUESTA Y SII.CGG_DHU_RESPUESTA.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_PREGUNTA PR
	INNER JOIN CGG_DHU_CATEGORIA CT ON (CT.CDCAT_CODIGO = PR.CDCAT_CODIGO)
	INNER JOIN CGG_DHU_PREGUNTA_RESPUESTA PRS ON (PRS.CDPRG_CODIGO = PR.CDPRG_CODIGO)	
	INNER JOIN CGG_DHU_RESPUESTA RS ON (RS.CDRES_CODIGO = PRS.CDRES_CODIGO)	
	WHERE CDPRG_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_DHU_PREGUNTAS_RESPUESTAS_ENCUESTA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA,SII.CGG_DHU_PREGUNTA_RESPUESTA Y SII.CGG_DHU_RESPUESTA.
* @param IN_CDENC_CODIGO CODIGO DE LA ENCUESTA PARA QUE LOS DATOS SEAN FILTRADOS PARA LA ACTUALIZACION
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION f_cgg_dhu_preguntas_respuestas_encuesta_select(in_cdenc_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR 
	SELECT DISTINCT				
		CT.CDENC_CODIGO, 
		EN.CDENC_NOMBRE,
		PR.CDPRG_CODIGO, 
		PR.CDPRG_DESCRIPCION, 
		PR.CDPRG_CUANTIFICABLE,		
		array_to_string(ARRAY( SELECT 
			'<tr>'||
			'<td>'||CDRES_DESCRIPCION||'</td>'||			
			'<td>'||PRS1.CDPRS_VALORACION||'</td>'||			
			'</tr>'
			
			FROM CGG_DHU_PREGUNTA_RESPUESTA PRS1 
			INNER JOIN CGG_DHU_RESPUESTA RES ON (RES.CDRES_CODIGO = PRS1.CDRES_CODIGO)	
		WHERE CDRES_ESTADO = TRUE AND PRS1.CDPRG_CODIGO = PR.CDPRG_CODIGO	
		),',') JSON_INFO
			
	FROM SII.CGG_DHU_CUESTIONARIO CT
	INNER JOIN CGG_DHU_ENCUESTA EN ON (EN.CDENC_CODIGO = CT.CDENC_CODIGO )	
	INNER JOIN CGG_DHU_PREGUNTA PR ON (PR.CDPRG_CODIGO = CT.CDPRG_CODIGO )	
	INNER JOIN CGG_DHU_PREGUNTA_RESPUESTA PRS ON (PRS.CDPRG_CODIGO = PR.CDPRG_CODIGO)	
	--INNER JOIN CGG_DHU_RESPUESTA RS ON (RS.CDRES_CODIGO = PRS.CDRES_CODIGO)	
	WHERE CDPRG_ESTADO = TRUE AND CT.CDENC_CODIGO = IN_CDENC_CODIGO;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION f_cgg_dhu_preguntas_respuestas_encuesta_select(character varying) OWNER TO sii;



/**
* FUNCION SII.F_CGG_DHU_CUESTIONARIO_D_DHU_ENCUESTA_DHU_PREGUNTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_CUESTIONARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_ENCUESTA Y SII.CGG_DHU_PREGUNTA.
* @param IN_CDENC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE EVALUACION
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_CUESTIONARIO_D_DHU_ENCUESTA_DHU_PREGUNTA(
IN IN_CDENC_CODIGO SII.CGG_DHU_CUESTIONARIO.CDENC_CODIGO%TYPE,
IN IN_CDPRG_CODIGO SII.CGG_DHU_CUESTIONARIO.CDPRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_CUESTIONARIO
	WHERE
		CDENC_CODIGO = IN_CDENC_CODIGO and
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;
