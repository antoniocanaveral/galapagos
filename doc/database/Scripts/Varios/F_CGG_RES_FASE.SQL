/**
* FUNCION SII.F_CGG_RES_FASE_SELECT_CONTENT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_FASE.
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_SELECT_CONTENT(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE.CRFAS_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS.CRFAS_CODIGO, 
		CRFAS.CRPRO_CODIGO, 
		(SELECT CRPRO.CRPRO_NOMBRE FROM SII.CGG_RES_PROCESO CRPRO WHERE CRPRO.CRPRO_CODIGO = CRFAS.CRPRO_CODIGO) AS CRPRO_NOMBRE,
		CRFAS.CRETT_CODIGO, 
		( SELECT CRETT.CRETT_NOMBRE  FROM SII.CGG_RES_ESTADO_TRAMITE CRETT WHERE CRETT.CRETT_CODIGO = CRFAS.CRETT_CODIGO) AS CRETT_NOMBRE,
		CRFAS.CGG_CRETT_CODIGO,
		( SELECT CRETT.CRETT_NOMBRE  FROM SII.CGG_RES_ESTADO_TRAMITE CRETT WHERE CRETT.CRETT_CODIGO = CRFAS.CGG_CRETT_CODIGO) AS CGG_CRETT_NOMBRE, 
		CRFAS.CRSEC_CODIGO, 
		(SELECT CRSEC.CRSEC_NOMBRE FROM SII.CGG_RES_SECCION CRSEC WHERE CRSEC.CRSEC_CODIGO = CRFAS.CRSEC_CODIGO) AS CRSEC_NOMBRE,
		CRFAS.CGG_CRFAS_CODIGO,
		(SELECT CRFAS1.CRFAS_NOMBRE FROM SII.CGG_RES_FASE CRFAS1 WHERE CRFAS1.CRFAS_CODIGO = CRFAS.CGG_CRFAS_CODIGO) AS CGG_CRFAS_NOMBRE,
		CRFAS.CGG_CUSU_CODIGO, 
		(SELECT CUSU.CUSU_NOMBRE_USUARIO FROM SII.CGG_USUARIO CUSU WHERE CUSU.CUSU_CODIGO = CRFAS.CGG_CUSU_CODIGO ) AS CGG_CUSU_NOMBRE_USUARIO,
		CRFAS.CRFAS_NOMBRE, 
		CRFAS.CRFAS_ORDEN, 
		CRFAS.CRFAS_TAREA_REALIZA,
		CRFAS.CRFAS_FUNCION_EJECUTA, 
		CRFAS.CRFAS_SUBE_ADJUNTO, 
		CRFAS.CRFAS_SUBE_ADJUNTO_REQUISITO,
		CRFAS.CRFAS_EJECUTA_DESPACHO, 
		CRFAS.CRFAS_ATENCION_NORMAL, 
		CRFAS.CRFAS_ESTADO, 
		CRFAS.CRFAS_FECHA_INSERT, 
		CRFAS.CRFAS_USUARIO_INSERT, 
		CRFAS.CRFAS_FECHA_UPDATE, 
		CRFAS.CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE CRFAS
	WHERE CRFAS.CRFAS_ESTADO = TRUE AND 
		CRFAS.CRFAS_CODIGO = IN_CRFAS_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_RES_PROCESOSF_SELECT_CONTENT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_FASE.
* @param IN_CRPRO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PROCESOF_SELECT_CONTENT(
IN IN_CRPRO_CODIGO SII.CGG_RES_FASE.CRPRO_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS.CRFAS_CODIGO, 
		CRFAS.CRPRO_CODIGO, 
		(SELECT CRPRO.CRPRO_NOMBRE FROM SII.CGG_RES_PROCESO CRPRO WHERE CRPRO.CRPRO_CODIGO = CRFAS.CRPRO_CODIGO) AS CRPRO_NOMBRE,
		CRFAS.CRETT_CODIGO, 
		( SELECT CRETT.CRETT_NOMBRE  FROM SII.CGG_RES_ESTADO_TRAMITE CRETT WHERE CRETT.CRETT_CODIGO = CRFAS.CRETT_CODIGO) AS CRETT_NOMBRE,
		CRFAS.CGG_CRETT_CODIGO,
		( SELECT CRETT.CRETT_NOMBRE  FROM SII.CGG_RES_ESTADO_TRAMITE CRETT WHERE CRETT.CRETT_CODIGO = CRFAS.CGG_CRETT_CODIGO) AS CGG_CRETT_NOMBRE, 
		CRFAS.CRSEC_CODIGO, 
		(SELECT CRSEC.CRSEC_NOMBRE FROM SII.CGG_RES_SECCION CRSEC WHERE CRSEC.CRSEC_CODIGO = CRFAS.CRSEC_CODIGO) AS CRSEC_NOMBRE,
		CRFAS.CGG_CRFAS_CODIGO,
		(SELECT CRFAS1.CRFAS_NOMBRE FROM SII.CGG_RES_FASE CRFAS1 WHERE CRFAS1.CRFAS_CODIGO = CRFAS.CGG_CRFAS_CODIGO) AS CGG_CRFAS_NOMBRE,
		CRFAS.CGG_CUSU_CODIGO, 
		(SELECT CUSU.CUSU_NOMBRE_USUARIO FROM SII.CGG_USUARIO CUSU WHERE CUSU.CUSU_CODIGO = CRFAS.CGG_CUSU_CODIGO ) AS CGG_CUSU_NOMBRE_USUARIO,
		CRFAS.CRFAS_NOMBRE, 
		CRFAS.CRFAS_ORDEN, 
		CRFAS.CRFAS_TAREA_REALIZA,
		CRFAS.CRFAS_FUNCION_EJECUTA, 
		CRFAS.CRFAS_SUBE_ADJUNTO,
		CRFAS_SUBE_ADJUNTO_REQUISITO,
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL
	FROM SII.CGG_RES_FASE CRFAS
	WHERE CRFAS.CRFAS_ESTADO = TRUE AND 
		CRFAS.CRPRO_CODIGO = IN_CRPRO_CODIGO
	ORDER BY CRFAS.CRFAS_ORDEN,CRFAS.CRFAS_CODIGO ASC;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_RES_PARENT_FASE_SELECT_BY_POCESO
* SELECCIONA LOS REGISTRO PADRES EN LA TABLA SII.CGG_RES_FASE DE ACUERDO A UN PROCESO .
* @param IN_CRPRO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PARENT_FASE_SELECT_BY_PROCESO(
IN IN_CRPRO_CODIGO SII.CGG_RES_FASE.CRPRO_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS.CRFAS_CODIGO, 
		CRFAS.CRPRO_CODIGO, 
		(SELECT CRPRO.CRPRO_NOMBRE FROM SII.CGG_RES_PROCESO CRPRO WHERE CRPRO.CRPRO_CODIGO = CRFAS.CRPRO_CODIGO) AS CRPRO_NOMBRE,
		CRFAS.CRETT_CODIGO, 
		( SELECT CRETT.CRETT_NOMBRE  FROM SII.CGG_RES_ESTADO_TRAMITE CRETT WHERE CRETT.CRETT_CODIGO = CRFAS.CRETT_CODIGO) AS CRETT_NOMBRE,
		CRFAS.CGG_CRETT_CODIGO,
		( SELECT CRETT.CRETT_NOMBRE  FROM SII.CGG_RES_ESTADO_TRAMITE CRETT WHERE CRETT.CRETT_CODIGO = CRFAS.CGG_CRETT_CODIGO) AS CGG_CRETT_NOMBRE, 
		CRFAS.CRSEC_CODIGO, 
		(SELECT CRSEC.CRSEC_NOMBRE FROM SII.CGG_RES_SECCION CRSEC WHERE CRSEC.CRSEC_CODIGO = CRFAS.CRSEC_CODIGO) AS CRSEC_CODIGO,
		CRFAS.CGG_CRFAS_CODIGO,
		(SELECT CRFAS1.CRFAS_NOMBRE FROM SII.CGG_RES_FASE CRFAS1 WHERE CRFAS1.CRFAS_CODIGO = CRFAS.CGG_CRFAS_CODIGO) AS CGG_CRFAS_NOMBRE,
		CRFAS.CGG_CUSU_CODIGO, 
		CRFAS.CRFAS_NOMBRE, 
		CRFAS.CRFAS_ORDEN, 
		CRFAS.CRFAS_TAREA_REALIZA, 
		CRFAS.CRFAS_FUNCION_EJECUTA,
		CRFAS.CRFAS_SUBE_ADJUNTO,
		CRFAS_SUBE_ADJUNTO_REQUISITO,
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL		
	FROM SII.CGG_RES_FASE CRFAS
	WHERE CRFAS.CRFAS_ESTADO = TRUE AND 
		CRFAS.CRPRO_CODIGO = IN_CRPRO_CODIGO AND
		CRFAS.CGG_CRFAS_CODIGO IS NULL AND 
		CRFAS.CRFAS_ESTADO = TRUE
		ORDER BY CRFAS.CRFAS_ORDEN ASC;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_RES_FASE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_FASE.
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CRFAS_ORDEN ORDEN DE EJECUCION DE LA FASE
* @param IN_CRFAS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_UPDATE1(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE.CRFAS_CODIGO%TYPE, 
IN IN_CRFAS_ORDEN SII.CGG_RES_FASE.CRFAS_ORDEN%TYPE, 
IN IN_CRFAS_USUARIO_UPDATE SII.CGG_RES_FASE.CRFAS_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE SET
		CRFAS_ORDEN = IN_CRFAS_ORDEN, 
		CRFAS_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRFAS_USUARIO_UPDATE = IN_CRFAS_USUARIO_UPDATE
	WHERE
		CRFAS_CODIGO = IN_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_INSERT1
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_FASE.
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CRPRO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO
* @param IN_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA POSITIVA
* @param IN_CGG_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA NEGATIVA
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO
* @param IN_CRFAS_NOMBRE INFORMACION DE IDENTIFICACION DE LA FASE
* @param IN_CRFAS_ORDEN ORDEN DE EJECUCION DE LA FASE
* @param IN_CRFAS_TAREA_REALIZA TAREA QUE SE REALIZA EN ESTA FASE DEL PROCESO
* @param IN_CRFAS_FUNCION_EJECUTA NOMBRE DE LA FUNCION O PROCEDIMIENTO QUE SE EJECUTARIA EN LA FASE
* @param IN_CRFAS_SUBE_ADJUNTO ESTADO QUE DETERMINA LA AUTORIZACION DE SUBIR ARCHIVOS ADJUNTOS
* @param IN_CRFAS_SUBE_ADJUNTO_REQUISITO ESTADO QUE DETERMINA LA AUTORIZACION DE SUBIR ARCHIVOS ADJUNTOS DE REQUISITOS
* @param IN_CRFAS_EJECUTA_DESPACHO ESTADO QUE DETERMINA SI LA FUNCION SE EJECUTA AL REALIZAR DESPACHO O DISTRIBUCION
* @param IN_CRFAS_ATENCION_NORMAL ESTADO QUE DETERMINA LA FASE SERA ATENDIDA EN FORMA NORMAL O A TRAVES DE OTRO PROCESO
* @param IN_CRFAS_ESTADO ESTADO DEL REGISTRO
* @param IN_CRFAS_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRFAS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_INSERT1(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE.CRFAS_CODIGO%TYPE,
IN IN_CRPRO_CODIGO SII.CGG_RES_FASE.CRPRO_CODIGO%TYPE,
IN IN_CRETT_CODIGO SII.CGG_RES_FASE.CRETT_CODIGO%TYPE,
IN IN_CGG_CRETT_CODIGO SII.CGG_RES_FASE.CGG_CRETT_CODIGO%TYPE,
IN IN_CRSEC_CODIGO SII.CGG_RES_FASE.CRSEC_CODIGO%TYPE,
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_FASE.CGG_CRFAS_CODIGO%TYPE,
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_FASE.CGG_CUSU_CODIGO%TYPE,
IN IN_CRFAS_NOMBRE SII.CGG_RES_FASE.CRFAS_NOMBRE%TYPE,
IN IN_CRFAS_ORDEN SII.CGG_RES_FASE.CRFAS_ORDEN%TYPE,
IN IN_CRFAS_TAREA_REALIZA SII.CGG_RES_FASE.CRFAS_TAREA_REALIZA%TYPE,
IN IN_CRFAS_FUNCION_EJECUTA SII.CGG_RES_FASE.CRFAS_FUNCION_EJECUTA%TYPE,
IN IN_CRFAS_SUBE_ADJUNTO SII.CGG_RES_FASE.CRFAS_SUBE_ADJUNTO%TYPE,
IN IN_CRFAS_SUBE_ADJUNTO_REQUISITO SII.CGG_RES_FASE.CRFAS_SUBE_ADJUNTO_REQUISITO%TYPE,
IN IN_CRFAS_EJECUTA_DESPACHO SII.CGG_RES_FASE.CRFAS_EJECUTA_DESPACHO%TYPE,
IN IN_CRFAS_ATENCION_NORMAL SII.CGG_RES_FASE.CRFAS_ATENCION_NORMAL%TYPE,
IN IN_CRFAS_ESTADO SII.CGG_RES_FASE.CRFAS_ESTADO%TYPE,
IN IN_CRFAS_USUARIO_INSERT SII.CGG_RES_FASE.CRFAS_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_FAS_ORDEN SMALLINT;
BEGIN
	IF (UPPER(IN_CRFAS_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_FASE','CRFAS_CODIGO','CRFAS') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRFAS_CODIGO;		
	END IF;
	IF(IN_CGG_CRFAS_CODIGO IS NOT NULL) THEN
		SELECT (CRFAS_ORDEN::VARCHAR||'1')::SMALLINT INTO  TMP_FAS_ORDEN
		FROM  SII.CGG_RES_FASE 
		WHERE CRPRO_CODIGO = IN_CRPRO_CODIGO
		AND CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO;
	ELSE
		SELECT COALESCE(MAX(CRFAS_ORDEN),0) +1 INTO TMP_FAS_ORDEN
		FROM  SII.CGG_RES_FASE 
		WHERE CRPRO_CODIGO = IN_CRPRO_CODIGO
		AND  CGG_CRFAS_CODIGO IS NULL;
	END IF;
	
	INSERT INTO SII.CGG_RES_FASE(
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_ORDEN, 
		CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO, 
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPRO_CODIGO, 
		IN_CRETT_CODIGO, 
		IN_CGG_CRETT_CODIGO, 
		IN_CRSEC_CODIGO, 
		IN_CGG_CRFAS_CODIGO, 
		IN_CGG_CUSU_CODIGO, 
		IN_CRFAS_NOMBRE, 
		TMP_FAS_ORDEN, 
		IN_CRFAS_TAREA_REALIZA, 
		IN_CRFAS_FUNCION_EJECUTA, 
		IN_CRFAS_SUBE_ADJUNTO, 
		IN_CRFAS_SUBE_ADJUNTO_REQUISITO, 
		IN_CRFAS_EJECUTA_DESPACHO, 
		IN_CRFAS_ATENCION_NORMAL, 
		IN_CRFAS_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRFAS_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRFAS_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

-- FUNCTION: SII_OLD.F_CGG_RES_FASE_DELETE_SOFT(CHARACTER VARYING)

-- DROP FUNCTION SII_OLD.F_CGG_RES_FASE_DELETE_SOFT(CHARACTER VARYING);

CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_DELETE_SOFT(IN_CRFAS_CODIGO CHARACTER VARYING)
  RETURNS VOID AS
$BODY$
BEGIN
	UPDATE SII.CGG_RES_FASE SET
		CRFAS_ESTADO = FALSE
	WHERE
		CRFAS_CODIGO = IN_CRFAS_CODIGO;
END
$BODY$
 LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

