/**
* FUNCION SII.F_CGG_GEM_CARGO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_CARGO.
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @param IN_CGARE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AREA FUNCIONAL
* @param IN_CGCRG_NOMBRE IDENTIFICATIVO DEL CARGO
* @param IN_CGCRG_DESCRIPCION DESCRIPCION BREVE DEL CARGO
* @param IN_CGCRG_ESTADO ESTADO DEL REGISTRO
* @param IN_CGCRG_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGCRG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_INSERT(
IN IN_CGCRG_CODIGO SII.CGG_GEM_CARGO.CGCRG_CODIGO%TYPE, 
IN IN_CGARE_CODIGO SII.CGG_GEM_CARGO.CGARE_CODIGO%TYPE, 
IN IN_CGCRG_NOMBRE SII.CGG_GEM_CARGO.CGCRG_NOMBRE%TYPE, 
IN IN_CGCRG_DESCRIPCION SII.CGG_GEM_CARGO.CGCRG_DESCRIPCION%TYPE, 
IN IN_CGCRG_ESTADO SII.CGG_GEM_CARGO.CGCRG_ESTADO%TYPE, 
IN IN_CGCRG_USUARIO_INSERT SII.CGG_GEM_CARGO.CGCRG_USUARIO_INSERT%TYPE, 
IN IN_CGCRG_USUARIO_UPDATE SII.CGG_GEM_CARGO.CGCRG_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT2;
BEGIN
	SELECT COUNT(CGCRG_NOMBRE) INTO TMP_COUNT
	FROM SII.CGG_GEM_CARGO
	WHERE CGCRG_ESTADO = TRUE AND UPPER(CGCRG_NOMBRE) = UPPER(RTRIM(LTRIM(IN_CGCRG_NOMBRE))) AND CGARE_CODIGO = IN_CGARE_CODIGO;
	
	IF (TMP_COUNT>0) THEN
		RAISE EXCEPTION 'No se puede ingresar varios cargos con el mismo nombre y la misma area funcional';
	END IF;
	
	IF (UPPER(IN_CGCRG_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_CARGO','CGCRG_CODIGO','CGCRG') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGCRG_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_CARGO(
		CGCRG_CODIGO, 
		CGARE_CODIGO, 
		CGCRG_NOMBRE, 
		CGCRG_DESCRIPCION, 
		CGCRG_ESTADO, 
		CGCRG_FECHA_INSERT, 
		CGCRG_USUARIO_INSERT, 
		CGCRG_FECHA_UPDATE, 
		CGCRG_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGARE_CODIGO, 
		IN_CGCRG_NOMBRE, 
		IN_CGCRG_DESCRIPCION, 
		IN_CGCRG_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGCRG_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGCRG_USUARIO_UPDATE
	);
	RETURN OUT_KEY;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_CARGO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGCRG_CODIGO, 
		CGARE_CODIGO, 
		CGCRG_NOMBRE, 
		CGCRG_DESCRIPCION, 
		CGCRG_ESTADO, 
		CGCRG_FECHA_INSERT, 
		CGCRG_USUARIO_INSERT, 
		CGCRG_FECHA_UPDATE, 
		CGCRG_USUARIO_UPDATE
	FROM SII.CGG_GEM_CARGO
	WHERE CGCRG_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_CARGO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGCRG_CODIGO, 
		CGARE.CGARE_CODIGO, 
		CGARE.CGARE_NOMBRE, 
		CGCRG_NOMBRE, 
		CGCRG_DESCRIPCION, 
		CGCRG_ESTADO, 
		CGCRG_FECHA_INSERT, 
		CGCRG_USUARIO_INSERT, 
		CGCRG_FECHA_UPDATE, 
		CGCRG_USUARIO_UPDATE
	FROM SII.CGG_GEM_CARGO CGCRG
	LEFT JOIN SII.CGG_GEM_AREA_FUNCIONAL CGARE ON CGCRG.CGARE_CODIGO = CGARE.CGARE_CODIGO
	WHERE CGCRG_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
		COALESCE(CGCRG_NOMBRE, '''')||'' ''||
		COALESCE(CGCRG_DESCRIPCION, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_CARGO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_CARGO
	WHERE CGCRG_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_CARGO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_CARGO
	WHERE CGCRG_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGCRG_NOMBRE, '''')||' '||COALESCE(CGCRG_DESCRIPCION, '''')||' '||COALESCE(CGCRG_ESTADO, FALSE)||' '||COALESCE(CGCRG_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGCRG_USUARIO_INSERT, '''')||' '||COALESCE(CGCRG_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGCRG_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_CARGO.
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @param IN_CGARE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AREA FUNCIONAL
* @param IN_CGCRG_NOMBRE IDENTIFICATIVO DEL CARGO
* @param IN_CGCRG_DESCRIPCION DESCRIPCION BREVE DEL CARGO
* @param IN_CGCRG_ESTADO ESTADO DEL REGISTRO
* @param IN_CGCRG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_UPDATE(
IN IN_CGCRG_CODIGO SII.CGG_GEM_CARGO.CGCRG_CODIGO%TYPE, 
IN IN_CGARE_CODIGO SII.CGG_GEM_CARGO.CGARE_CODIGO%TYPE, 
IN IN_CGCRG_NOMBRE SII.CGG_GEM_CARGO.CGCRG_NOMBRE%TYPE, 
IN IN_CGCRG_DESCRIPCION SII.CGG_GEM_CARGO.CGCRG_DESCRIPCION%TYPE, 
IN IN_CGCRG_ESTADO SII.CGG_GEM_CARGO.CGCRG_ESTADO%TYPE, 
IN IN_CGCRG_USUARIO_UPDATE SII.CGG_GEM_CARGO.CGCRG_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
	TMP_COUNT INT2;
	TMP_NOMBRE VARCHAR;
	TMP INT2;
BEGIN
	SELECT COUNT(CGCRG_NOMBRE) INTO TMP_COUNT
	FROM SII.CGG_GEM_CARGO
	WHERE CGCRG_ESTADO = TRUE AND UPPER(CGCRG_NOMBRE) = UPPER(RTRIM(LTRIM(IN_CGCRG_NOMBRE))) AND CGARE_CODIGO = IN_CGARE_CODIGO;
	
	SELECT CGCRG_NOMBRE INTO TMP_NOMBRE
	FROM SII.CGG_GEM_CARGO
	WHERE CGCRG_CODIGO = IN_CGCRG_CODIGO; 
	
	IF (TMP_NOMBRE <> IN_CGCRG_NOMBRE) THEN
		TMP := 0;
	ELSE
		TMP :=1;
	END IF;
	
	IF (TMP_COUNT>TMP) THEN	
		RAISE EXCEPTION 'No se puede ingresar varios cargos con el mismo nombre y la misma area funcional';
	END IF;
	
	UPDATE SII.CGG_GEM_CARGO SET
		CGARE_CODIGO = IN_CGARE_CODIGO, 
		CGCRG_NOMBRE = IN_CGCRG_NOMBRE, 
		CGCRG_DESCRIPCION = IN_CGCRG_DESCRIPCION, 
		CGCRG_ESTADO = IN_CGCRG_ESTADO, 
		CGCRG_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGCRG_USUARIO_UPDATE = IN_CGCRG_USUARIO_UPDATE
	WHERE
		CGCRG_CODIGO = IN_CGCRG_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_CARGO.
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_SELECT(
IN IN_CGCRG_CODIGO SII.CGG_GEM_CARGO.CGCRG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGCRG_CODIGO, 
		CGARE_CODIGO, 
		CGCRG_NOMBRE, 
		CGCRG_DESCRIPCION, 
		CGCRG_ESTADO, 
		CGCRG_FECHA_INSERT, 
		CGCRG_USUARIO_INSERT, 
		CGCRG_FECHA_UPDATE, 
		CGCRG_USUARIO_UPDATE
	FROM SII.CGG_GEM_CARGO
	WHERE CGCRG_ESTADO = TRUE AND 
		CGCRG_CODIGO = IN_CGCRG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_CARGO.
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_DELETE(
IN IN_CGCRG_CODIGO SII.CGG_GEM_CARGO.CGCRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_CARGO
	WHERE
		CGCRG_CODIGO = IN_CGCRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_CARGO.
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_DELETE_SOFT(
IN IN_CGCRG_CODIGO SII.CGG_GEM_CARGO.CGCRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_CARGO SET
		CGCRG_ESTADO = FALSE
	WHERE
		CGCRG_CODIGO = IN_CGCRG_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_S_CGG_GEM_AREA_FUNCIONAL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_CARGO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_AREA_FUNCIONAL.
* @param IN_CGARE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AREA FUNCIONAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_S_CGG_GEM_AREA_FUNCIONAL(
IN IN_CGARE_CODIGO SII.CGG_GEM_CARGO.CGARE_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGCRG_CODIGO, 
		CGARE_CODIGO, 
		CGCRG_NOMBRE, 
		CGCRG_DESCRIPCION, 
		CGCRG_ESTADO, 
		CGCRG_FECHA_INSERT, 
		CGCRG_USUARIO_INSERT, 
		CGCRG_FECHA_UPDATE, 
		CGCRG_USUARIO_UPDATE
	FROM SII.CGG_GEM_CARGO
	WHERE CGCRG_ESTADO = TRUE AND 
		CGARE_CODIGO = IN_CGARE_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_D_CGG_GEM_AREA_FUNCIONAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_CARGO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_AREA_FUNCIONAL.
* @param IN_CGARE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AREA FUNCIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_D_CGG_GEM_AREA_FUNCIONAL(
IN IN_CGARE_CODIGO SII.CGG_GEM_CARGO.CGARE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_CARGO
	WHERE
		CGARE_CODIGO = IN_CGARE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_D_CGG_GEM_AREA_FUNCIONAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_CARGO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_AREA_FUNCIONAL.
* @param IN_CGARE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AREA FUNCIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_DS_CGG_GEM_AREA_FUNCIONAL(
IN IN_CGARE_CODIGO SII.CGG_GEM_CARGO.CGARE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_CARGO SET
		cgcrg_estado = false
	WHERE
		CGARE_CODIGO = IN_CGARE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_NOMBRE_CARGO
* RETORNA EL NOMBRE DE UN CARGO ESPECIFICADO POR SU CODIGO DE CARGO.
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return TEXT NOMBRE DE CARGO.
*/
CREATE OR REPLACE FUNCTION SII.F_NOMBRE_CARGO(
IN IN_CGCRG_CODIGO SII.CGG_GEM_CARGO.CGCRG_CODIGO%TYPE
)RETURNS TEXT AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_NOMBRE TEXT;
BEGIN
	TMP_NOMBRE := ' ';
	SELECT COALESCE(CGCRG_NOMBRE,'')||' '||COALESCE(CGCRG_DESCRIPCION,'') INTO  TMP_NOMBRE
	FROM SII.CGG_GEM_CARGO
	WHERE CGCRG_ESTADO = TRUE AND 
		CGCRG_CODIGO = IN_CGCRG_CODIGO;
	RETURN TMP_NOMBRE;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_SELECT_BY_AREA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_CARGO DE ACUERDO AL AREA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CGARE_CODIGO CODIGO DEL AREA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_SELECT_BY_AREA_COUNT(
	IN IN_FIND_TEXT TEXT,
	IN IN_CGARE_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
	TMP_ROWS INT2;	
	TMP_PART_SQL VARCHAR;
BEGIN
	TMP_PART_SQL:='';
	IF LENGTH(TRIM(IN_CGARE_CODIGO)) >0 THEN
		SELECT COUNT(CGCRG_CODIGO)	INTO TMP_ROWS	
		FROM SII.CGG_GEM_CARGO CGCRG	
		WHERE CGCRG_ESTADO = TRUE AND CGARE_CODIGO = IN_CGARE_CODIGO
		AND SII.F_STRING_IN(IN_FIND_TEXT,
			COALESCE(CGCRG_NOMBRE, '')||' '||
			COALESCE(CGCRG_DESCRIPCION, '')
		) = 1;
	ELSE
		SELECT COUNT(CGCRG_CODIGO)	INTO TMP_ROWS	
		FROM SII.CGG_GEM_CARGO CGCRG	
		WHERE CGCRG_ESTADO = TRUE
		AND SII.F_STRING_IN(IN_FIND_TEXT,
			COALESCE(CGCRG_NOMBRE, '')||' '||
			COALESCE(CGCRG_DESCRIPCION, '')
		) = 1;
	END IF;
	
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CARGO_SELECT_BY_AREA
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_CARGO DE ACRUERDO AL AREA.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CGARE_CODIGO CODIGO DEL AREA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APLICACIONES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CARGO_SELECT_BY_AREA(
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CGARE_CODIGO VARCHAR,
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_SQL TEXT;
	TMP_PART_SQL VARCHAR;
	TMP_IN_USER_CODIGO VARCHAR;
BEGIN	
	SELECT CUSU_CODIGO INTO TMP_IN_USER_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME;
	TMP_PART_SQL:='';
	IF LENGTH(TRIM(IN_CGARE_CODIGO)) >0 THEN
		TMP_PART_SQL:= ' AND CGARE_CODIGO= '''|| IN_CGARE_CODIGO ||'''' ;
	END IF;
	TMP_SQL:='SELECT
		CGUCR.CGUCR_CODIGO,
		CGCRG.CGCRG_CODIGO,		
		CGCRG_NOMBRE, 
		CGCRG_DESCRIPCION,
		/*(
			SELECT CGCRG_ESTADO_SUBSCRIPCION 
			FROM CGG_GEM_USUARIO_CARGO 
			WHERE 	CGUCR_ESTADO = TRUE 
				AND CGCRG_CODIGO  = CGCRG.CGCRG_CODIGO
				AND CUSU_CODIGO  = '''|| TMP_IN_USER_CODIGO ||'''
		)*/
		CGUCR.CGCRG_ESTADO_SUBSCRIPCION
	FROM SII.CGG_GEM_CARGO	CGCRG
	LEFT JOIN SII.CGG_GEM_USUARIO_CARGO	CGUCR ON CGCRG.CGCRG_CODIGO = CGUCR.CGCRG_CODIGO
	WHERE CGCRG_ESTADO = TRUE '||TMP_PART_SQL||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
		COALESCE(CGCRG_NOMBRE, '''')||'' ''||
		COALESCE(CGCRG_DESCRIPCION, '''')
	) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	OPEN TMP_REF FOR EXECUTE TMP_SQL;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
