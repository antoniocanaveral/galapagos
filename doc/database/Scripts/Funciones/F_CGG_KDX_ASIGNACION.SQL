/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @param IN_CGG_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @param IN_CGG_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION ANTERIOR
* @param IN_CKASG_NUMERO_ASIGNACION NUMERO SECUENCIAL UNICO DE IDENTIFICACION DE LA ASIGNACION
* @param IN_CKASG_FECHA_RECEPCION FECHA DE RECEPCION DE LAS ESPECIES
* @param IN_CKASG_CANTIDAD CANTIDAD DE ESPECIES
* @param IN_CKASG_PRECIO_UNITARIO PRECIO DE VENTA DE LA ESPECIE
* @param IN_CKASG_SERIE_INICIO SERIE DE INICIO DE LAS ESPECIES
* @param IN_CKASG_SERIE_FIN SERIE DE FIN DE LAS ESPECIES
* @param IN_CKASG_OBSERVACION COMENTARIO AFIN A LA ASIGNACION
* @param IN_CKASG_CANTIDAD_DISPONIBLE CANTIDAD DE ESPECIES DISPONIBLES PARA ASIGNACIONES
* @param IN_CKASG_ESTADO_ASIGNACION ESTADO DEL REGISTRO DE VENTA UTILIZADO PARA OPERACIONES
0.-  REGISTRADA
1.-  REASIGNADA
2.-  FINALIZADA
* @param IN_CKASG_ESTADO ESTADO DEL REGISTRO
* @param IN_CKASG_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKASG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_INSERT(
IN IN_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CKASG_CODIGO%TYPE,
IN IN_CKTRN_CODIGO SII.CGG_KDX_ASIGNACION.CKTRN_CODIGO%TYPE,
IN IN_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CKUPV_CODIGO%TYPE,
IN IN_CGG_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKUPV_CODIGO%TYPE,
IN IN_CGG_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKASG_CODIGO%TYPE,
IN IN_CKASG_NUMERO_ASIGNACION SII.CGG_KDX_ASIGNACION.CKASG_NUMERO_ASIGNACION%TYPE,
IN IN_CKASG_FECHA_RECEPCION SII.CGG_KDX_ASIGNACION.CKASG_FECHA_RECEPCION%TYPE,
IN IN_CKASG_CANTIDAD SII.CGG_KDX_ASIGNACION.CKASG_CANTIDAD%TYPE,
IN IN_CKASG_PRECIO_UNITARIO SII.CGG_KDX_ASIGNACION.CKASG_PRECIO_UNITARIO%TYPE,
IN IN_CKASG_SERIE_INICIO SII.CGG_KDX_ASIGNACION.CKASG_SERIE_INICIO%TYPE,
IN IN_CKASG_SERIE_FIN SII.CGG_KDX_ASIGNACION.CKASG_SERIE_FIN%TYPE,
IN IN_CKASG_OBSERVACION SII.CGG_KDX_ASIGNACION.CKASG_OBSERVACION%TYPE,
IN IN_CKASG_CANTIDAD_DISPONIBLE SII.CGG_KDX_ASIGNACION.CKASG_CANTIDAD_DISPONIBLE%TYPE,
IN IN_CKASG_ESTADO_ASIGNACION SII.CGG_KDX_ASIGNACION.CKASG_ESTADO_ASIGNACION%TYPE,
IN IN_CKASG_ESTADO SII.CGG_KDX_ASIGNACION.CKASG_ESTADO%TYPE,
IN IN_CKASG_USUARIO_INSERT SII.CGG_KDX_ASIGNACION.CKASG_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKASG_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_ASIGNACION','CKASG_CODIGO','CKASG') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKASG_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_ASIGNACION(
		CKASG_CODIGO, 
		CKTRN_CODIGO, 
		CKUPV_CODIGO, 
		CGG_CKUPV_CODIGO, 
		CGG_CKASG_CODIGO, 
		CKASG_NUMERO_ASIGNACION, 
		CKASG_FECHA_RECEPCION, 
		CKASG_CANTIDAD, 
		CKASG_PRECIO_UNITARIO, 
		CKASG_SERIE_INICIO, 
		CKASG_SERIE_FIN, 
		CKASG_OBSERVACION, 
		CKASG_CANTIDAD_DISPONIBLE, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_FECHA_INSERT, 
		CKASG_USUARIO_INSERT, 
		CKASG_FECHA_UPDATE, 
		CKASG_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKTRN_CODIGO, 
		IN_CKUPV_CODIGO, 
		IN_CGG_CKUPV_CODIGO, 
		IN_CGG_CKASG_CODIGO, 
		IN_CKASG_NUMERO_ASIGNACION, 
		IN_CKASG_FECHA_RECEPCION, 
		IN_CKASG_CANTIDAD, 
		IN_CKASG_PRECIO_UNITARIO, 
		IN_CKASG_SERIE_INICIO, 
		IN_CKASG_SERIE_FIN, 
		IN_CKASG_OBSERVACION, 
		IN_CKASG_CANTIDAD_DISPONIBLE, 
		IN_CKASG_ESTADO_ASIGNACION, 
		IN_CKASG_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKASG_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKASG_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKASG_CODIGO, 
		CKTRN_CODIGO, 
		CKUPV_CODIGO, 
		CGG_CKUPV_CODIGO, 
		CGG_CKASG_CODIGO, 
		CKASG_NUMERO_ASIGNACION, 
		CKASG_FECHA_RECEPCION, 
		CKASG_CANTIDAD, 
		CKASG_PRECIO_UNITARIO, 
		CKASG_SERIE_INICIO, 
		CKASG_SERIE_FIN, 
		CKASG_OBSERVACION, 
		CKASG_CANTIDAD_DISPONIBLE, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_FECHA_INSERT, 
		CKASG_USUARIO_INSERT, 
		CKASG_FECHA_UPDATE, 
		CKASG_USUARIO_UPDATE
	FROM SII.CGG_KDX_ASIGNACION
	WHERE CKASG_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKASG_CODIGO, 
		CKTRN_CODIGO, 
		CKUPV_CODIGO, 
		CGG_CKUPV_CODIGO, 
		CGG_CKASG_CODIGO, 
		CKASG_NUMERO_ASIGNACION, 
		CKASG_FECHA_RECEPCION, 
		CKASG_CANTIDAD, 
		CKASG_PRECIO_UNITARIO, 
		CKASG_SERIE_INICIO, 
		CKASG_SERIE_FIN, 
		CKASG_OBSERVACION, 
		CKASG_CANTIDAD_DISPONIBLE, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_FECHA_INSERT, 
		CKASG_USUARIO_INSERT, 
		CKASG_FECHA_UPDATE, 
		CKASG_USUARIO_UPDATE
	FROM SII.CGG_KDX_ASIGNACION
	WHERE CKASG_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKASG_NUMERO_ASIGNACION, '''')||'' ''||COALESCE(CKASG_FECHA_RECEPCION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKASG_CANTIDAD, 0)||'' ''||COALESCE(CKASG_PRECIO_UNITARIO, 0)||'' ''||COALESCE(CKASG_SERIE_INICIO, 0)||'' ''||COALESCE(CKASG_SERIE_FIN, 0)||'' ''||COALESCE(CKASG_CANTIDAD_DISPONIBLE, 0)||'' ''||COALESCE(CKASG_ESTADO_ASIGNACION, 0)||'' ''||COALESCE(CKASG_ESTADO, FALSE)||'' ''||COALESCE(CKASG_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKASG_USUARIO_INSERT, '''')||'' ''||COALESCE(CKASG_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKASG_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_ASIGNACION.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_ASIGNACION
	WHERE CKASG_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_ASIGNACION
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_ASIGNACION
	WHERE CKASG_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKASG_NUMERO_ASIGNACION, '''')||' '||COALESCE(CKASG_FECHA_RECEPCION, CURRENT_TIMESTAMP)||' '||COALESCE(CKASG_CANTIDAD, 0)||' '||COALESCE(CKASG_PRECIO_UNITARIO, 0)||' '||COALESCE(CKASG_SERIE_INICIO, 0)||' '||COALESCE(CKASG_SERIE_FIN, 0)||' '||COALESCE(CKASG_CANTIDAD_DISPONIBLE, 0)||' '||COALESCE(CKASG_ESTADO_ASIGNACION, 0)||' '||COALESCE(CKASG_ESTADO, FALSE)||' '||COALESCE(CKASG_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKASG_USUARIO_INSERT, '''')||' '||COALESCE(CKASG_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKASG_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_ASIGNACION.
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @param IN_CGG_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @param IN_CGG_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION ANTERIOR
* @param IN_CKASG_NUMERO_ASIGNACION NUMERO SECUENCIAL UNICO DE IDENTIFICACION DE LA ASIGNACION
* @param IN_CKASG_FECHA_RECEPCION FECHA DE RECEPCION DE LAS ESPECIES
* @param IN_CKASG_CANTIDAD CANTIDAD DE ESPECIES
* @param IN_CKASG_PRECIO_UNITARIO PRECIO DE VENTA DE LA ESPECIE
* @param IN_CKASG_SERIE_INICIO SERIE DE INICIO DE LAS ESPECIES
* @param IN_CKASG_SERIE_FIN SERIE DE FIN DE LAS ESPECIES
* @param IN_CKASG_OBSERVACION COMENTARIO AFIN A LA ASIGNACION
* @param IN_CKASG_CANTIDAD_DISPONIBLE CANTIDAD DE ESPECIES DISPONIBLES PARA ASIGNACIONES
* @param IN_CKASG_ESTADO_ASIGNACION ESTADO DEL REGISTRO DE VENTA UTILIZADO PARA OPERACIONES
0.-  REGISTRADA
1.-  REASIGNADA
2.-  FINALIZADA
* @param IN_CKASG_ESTADO ESTADO DEL REGISTRO
* @param IN_CKASG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_UPDATE(
IN IN_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CKASG_CODIGO%TYPE,
IN IN_CKTRN_CODIGO SII.CGG_KDX_ASIGNACION.CKTRN_CODIGO%TYPE,
IN IN_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CKUPV_CODIGO%TYPE,
IN IN_CGG_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKUPV_CODIGO%TYPE,
IN IN_CGG_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKASG_CODIGO%TYPE,
IN IN_CKASG_NUMERO_ASIGNACION SII.CGG_KDX_ASIGNACION.CKASG_NUMERO_ASIGNACION%TYPE,
IN IN_CKASG_FECHA_RECEPCION SII.CGG_KDX_ASIGNACION.CKASG_FECHA_RECEPCION%TYPE,
IN IN_CKASG_CANTIDAD SII.CGG_KDX_ASIGNACION.CKASG_CANTIDAD%TYPE,
IN IN_CKASG_PRECIO_UNITARIO SII.CGG_KDX_ASIGNACION.CKASG_PRECIO_UNITARIO%TYPE,
IN IN_CKASG_SERIE_INICIO SII.CGG_KDX_ASIGNACION.CKASG_SERIE_INICIO%TYPE,
IN IN_CKASG_SERIE_FIN SII.CGG_KDX_ASIGNACION.CKASG_SERIE_FIN%TYPE,
IN IN_CKASG_OBSERVACION SII.CGG_KDX_ASIGNACION.CKASG_OBSERVACION%TYPE,
IN IN_CKASG_CANTIDAD_DISPONIBLE SII.CGG_KDX_ASIGNACION.CKASG_CANTIDAD_DISPONIBLE%TYPE,
IN IN_CKASG_ESTADO_ASIGNACION SII.CGG_KDX_ASIGNACION.CKASG_ESTADO_ASIGNACION%TYPE,
IN IN_CKASG_ESTADO SII.CGG_KDX_ASIGNACION.CKASG_ESTADO%TYPE,
IN IN_CKASG_USUARIO_UPDATE SII.CGG_KDX_ASIGNACION.CKASG_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_ASIGNACION SET
		CKTRN_CODIGO = IN_CKTRN_CODIGO, 
		CKUPV_CODIGO = IN_CKUPV_CODIGO, 
		CGG_CKUPV_CODIGO = IN_CGG_CKUPV_CODIGO, 
		CGG_CKASG_CODIGO = IN_CGG_CKASG_CODIGO, 
		CKASG_NUMERO_ASIGNACION = IN_CKASG_NUMERO_ASIGNACION, 
		CKASG_FECHA_RECEPCION = IN_CKASG_FECHA_RECEPCION, 
		CKASG_CANTIDAD = IN_CKASG_CANTIDAD, 
		CKASG_PRECIO_UNITARIO = IN_CKASG_PRECIO_UNITARIO, 
		CKASG_SERIE_INICIO = IN_CKASG_SERIE_INICIO, 
		CKASG_SERIE_FIN = IN_CKASG_SERIE_FIN, 
		CKASG_OBSERVACION = IN_CKASG_OBSERVACION, 
		CKASG_CANTIDAD_DISPONIBLE = IN_CKASG_CANTIDAD_DISPONIBLE, 
		CKASG_ESTADO_ASIGNACION = IN_CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO = IN_CKASG_ESTADO, 
		CKASG_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKASG_USUARIO_UPDATE = IN_CKASG_USUARIO_UPDATE
	WHERE
		CKASG_CODIGO = IN_CKASG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_SELECT(
IN IN_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CKASG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKASG_CODIGO, 
		CKTRN_CODIGO, 
		CKUPV_CODIGO, 
		CGG_CKUPV_CODIGO, 
		CGG_CKASG_CODIGO, 
		CKASG_NUMERO_ASIGNACION, 
		CKASG_FECHA_RECEPCION, 
		CKASG_PRECIO_UNITARIO, 
		CKASG_SERIE_INICIO, 
		CKASG_SERIE_FIN, 
		CKASG_OBSERVACION, 
		CKASG_CANTIDAD_DISPONIBLE, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_ESTADO, 
		CKASG_FECHA_INSERT, 
		CKASG_USUARIO_INSERT, 
		CKASG_FECHA_UPDATE, 
		CKASG_USUARIO_UPDATE
	FROM SII.CGG_KDX_ASIGNACION
	WHERE CKASG_ESTADO = TRUE AND 
		CKASG_CODIGO = IN_CKASG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_DELETE(
IN IN_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CKASG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_ASIGNACION
	WHERE
		CKASG_CODIGO = IN_CKASG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_DELETE_SOFT(
IN IN_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CKASG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_ASIGNACION SET
		CKASG_ESTADO = FALSE
	WHERE
		CKASG_CODIGO = IN_CKASG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_S_CGG_KDX_ASIGNACION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_ASIGNACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CGG_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION ANTERIOR
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_S_CGG_KDX_ASIGNACION(
IN IN_CGG_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKASG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKASG_CODIGO, 
		CKTRN_CODIGO, 
		CKUPV_CODIGO, 
		CGG_CKUPV_CODIGO, 
		CGG_CKASG_CODIGO, 
		CKASG_NUMERO_ASIGNACION, 
		CKASG_PRECIO_UNITARIO, 
		CKASG_SERIE_INICIO, 
		CKASG_SERIE_FIN, 
		CKASG_OBSERVACION, 
		CKASG_CANTIDAD_DISPONIBLE, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_FECHA_INSERT, 
		CKASG_USUARIO_UPDATE
	FROM SII.CGG_KDX_ASIGNACION
	WHERE CKASG_ESTADO = TRUE AND 
		CGG_CKASG_CODIGO = IN_CGG_CKASG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_D_CGG_KDX_ASIGNACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_ASIGNACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CGG_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION ANTERIOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_D_CGG_KDX_ASIGNACION(
IN IN_CGG_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKASG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_ASIGNACION
	WHERE
		CGG_CKASG_CODIGO = IN_CGG_CKASG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_D_CGG_KDX_ASIGNACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_ASIGNACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CGG_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION ANTERIOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_DS_CGG_KDX_ASIGNACION(
IN IN_CGG_CKASG_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKASG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_ASIGNACION SET
		ckasg_estado = false
	WHERE
		CGG_CKASG_CODIGO = IN_CGG_CKASG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_S_CGG_KDX_TRANSFERENCIA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_ASIGNACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_TRANSFERENCIA.
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_S_CGG_KDX_TRANSFERENCIA(
IN IN_CKTRN_CODIGO SII.CGG_KDX_ASIGNACION.CKTRN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKASG_CODIGO, 
		CKTRN_CODIGO, 
		CKUPV_CODIGO, 
		CGG_CKUPV_CODIGO, 
		CGG_CKASG_CODIGO, 
		CKASG_NUMERO_ASIGNACION, 
		CKASG_PRECIO_UNITARIO, 
		CKASG_SERIE_INICIO, 
		CKASG_SERIE_FIN, 
		CKASG_OBSERVACION, 
		CKASG_CANTIDAD_DISPONIBLE, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_FECHA_INSERT, 
		CKASG_USUARIO_UPDATE
	FROM SII.CGG_KDX_ASIGNACION
	WHERE CKASG_ESTADO = TRUE AND 
		CKTRN_CODIGO = IN_CKTRN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_D_CGG_KDX_TRANSFERENCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_ASIGNACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_TRANSFERENCIA.
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_D_CGG_KDX_TRANSFERENCIA(
IN IN_CKTRN_CODIGO SII.CGG_KDX_ASIGNACION.CKTRN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_ASIGNACION
	WHERE
		CKTRN_CODIGO = IN_CKTRN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_D_CGG_KDX_TRANSFERENCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_ASIGNACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_TRANSFERENCIA.
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_DS_CGG_KDX_TRANSFERENCIA(
IN IN_CKTRN_CODIGO SII.CGG_KDX_ASIGNACION.CKTRN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_ASIGNACION SET
		ckasg_estado = false
	WHERE
		CKTRN_CODIGO = IN_CKTRN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_S_CGG_KDX_USUARIO_PV
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_ASIGNACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_USUARIO_PV.
* @param IN_CGG_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_S_CGG_KDX_USUARIO_PV(
IN IN_CGG_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKUPV_CODIGO%TYPE, 
IN IN_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CKUPV_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKASG_CODIGO, 
		CKTRN_CODIGO, 
		CKUPV_CODIGO, 
		CGG_CKUPV_CODIGO, 
		CGG_CKASG_CODIGO, 
		CKASG_NUMERO_ASIGNACION, 
		CKASG_PRECIO_UNITARIO, 
		CKASG_SERIE_INICIO, 
		CKASG_SERIE_FIN, 
		CKASG_OBSERVACION, 
		CKASG_CANTIDAD_DISPONIBLE, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_ESTADO_ASIGNACION, 
		CKASG_ESTADO, 
		CKASG_FECHA_INSERT, 
		CKASG_USUARIO_UPDATE
	FROM SII.CGG_KDX_ASIGNACION
	WHERE CKASG_ESTADO = TRUE AND 
		CGG_CKUPV_CODIGO = IN_CGG_CKUPV_CODIGO AND 
		CKUPV_CODIGO = IN_CKUPV_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_D_CGG_KDX_USUARIO_PV
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_ASIGNACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_USUARIO_PV.
* @param IN_CGG_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_D_CGG_KDX_USUARIO_PV(
IN IN_CGG_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKUPV_CODIGO%TYPE, 
IN IN_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CKUPV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_ASIGNACION
	WHERE
		CGG_CKUPV_CODIGO = IN_CGG_CKUPV_CODIGO AND 
		CKUPV_CODIGO = IN_CKUPV_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
/**
* FUNCION SII.F_CGG_KDX_ASIGNACION_D_CGG_KDX_USUARIO_PV
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_ASIGNACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_USUARIO_PV.
* @param IN_CGG_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ASIGNACION_DS_CGG_KDX_USUARIO_PV(
IN IN_CGG_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CGG_CKUPV_CODIGO%TYPE, 
IN IN_CKUPV_CODIGO SII.CGG_KDX_ASIGNACION.CKUPV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_ASIGNACION SET
		ckasg_estado = false
	WHERE
		CGG_CKUPV_CODIGO = IN_CGG_CKUPV_CODIGO AND 
		CKUPV_CODIGO = IN_CKUPV_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


