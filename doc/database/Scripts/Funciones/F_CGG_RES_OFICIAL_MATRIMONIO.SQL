/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CROFM_ESTADO ESTADO DEL REGISTRO
* @param IN_CROFM_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CROFM_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_INSERT(
IN IN_CROFM_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_CODIGO%TYPE, 
IN IN_CRMTR_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CRMTR_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CUSU_CODIGO%TYPE, 
IN IN_CROFM_ESTADO SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_ESTADO%TYPE, 
IN IN_CROFM_USUARIO_INSERT SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_USUARIO_INSERT%TYPE, 
IN IN_CROFM_USUARIO_UPDATE SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CROFM_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_OFICIAL_MATRIMONIO','CROFM_CODIGO','CROFM') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CROFM_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_OFICIAL_MATRIMONIO(
		CROFM_CODIGO, 
		CRMTR_CODIGO, 
		CUSU_CODIGO, 
		CROFM_ESTADO, 
		CROFM_FECHA_INSERT, 
		CROFM_USUARIO_INSERT, 
		CROFM_FECHA_UPDATE, 
		CROFM_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRMTR_CODIGO, 
		IN_CUSU_CODIGO, 
		IN_CROFM_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CROFM_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CROFM_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CROFM_CODIGO, 
		CRMTR_CODIGO, 
		CUSU_CODIGO, 
		CROFM_ESTADO, 
		CROFM_FECHA_INSERT, 
		CROFM_USUARIO_INSERT, 
		CROFM_FECHA_UPDATE, 
		CROFM_USUARIO_UPDATE
	FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE CROFM_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CROFM_CODIGO, 
		CRMTR_CODIGO, 
		CUSU_CODIGO, 
		CROFM_ESTADO, 
		CROFM_FECHA_INSERT, 
		CROFM_USUARIO_INSERT, 
		CROFM_FECHA_UPDATE, 
		CROFM_USUARIO_UPDATE
	FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE CROFM_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CROFM_CODIGO IS NULL THEN '''' ELSE CROFM_CODIGO END ||'' ''||CASE WHEN CRMTR_CODIGO IS NULL THEN '''' ELSE CRMTR_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CROFM_ESTADO IS NULL THEN FALSE ELSE CROFM_ESTADO END ||'' ''||CASE WHEN CROFM_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CROFM_FECHA_INSERT END ||'' ''||CASE WHEN CROFM_USUARIO_INSERT IS NULL THEN '''' ELSE CROFM_USUARIO_INSERT END ||'' ''||CASE WHEN CROFM_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CROFM_FECHA_UPDATE END ||'' ''||CASE WHEN CROFM_USUARIO_UPDATE IS NULL THEN '''' ELSE CROFM_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE CROFM_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE CROFM_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CROFM_CODIGO IS NULL THEN '''' ELSE CROFM_CODIGO END ||' '||CASE WHEN CRMTR_CODIGO IS NULL THEN '''' ELSE CRMTR_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CROFM_ESTADO IS NULL THEN FALSE ELSE CROFM_ESTADO END ||' '||CASE WHEN CROFM_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CROFM_FECHA_INSERT END ||' '||CASE WHEN CROFM_USUARIO_INSERT IS NULL THEN '''' ELSE CROFM_USUARIO_INSERT END ||' '||CASE WHEN CROFM_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CROFM_FECHA_UPDATE END ||' '||CASE WHEN CROFM_USUARIO_UPDATE IS NULL THEN '''' ELSE CROFM_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_OFICIAL_MATRIMONIO
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CROFM_ESTADO ESTADO DEL REGISTRO
* @param IN_CROFM_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_UPDATE(
IN IN_CROFM_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_CODIGO%TYPE, 
IN IN_CRMTR_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CRMTR_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CUSU_CODIGO%TYPE, 
IN IN_CROFM_ESTADO SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_ESTADO%TYPE, 
IN IN_CROFM_USUARIO_UPDATE SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_OFICIAL_MATRIMONIO SET
		CRMTR_CODIGO = IN_CRMTR_CODIGO, 
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CROFM_ESTADO = IN_CROFM_ESTADO, 
		CROFM_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CROFM_USUARIO_UPDATE = IN_CROFM_USUARIO_UPDATE
	WHERE
		CROFM_CODIGO = IN_CROFM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_SELECT(
IN IN_CROFM_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CROFM_CODIGO, 
		CRMTR_CODIGO, 
		CUSU_CODIGO, 
		CROFM_ESTADO, 
		CROFM_FECHA_INSERT, 
		CROFM_USUARIO_INSERT, 
		CROFM_FECHA_UPDATE, 
		CROFM_USUARIO_UPDATE
	FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE CROFM_ESTADO = TRUE AND 
		CROFM_CODIGO = IN_CROFM_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_DELETE(
IN IN_CROFM_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE
		CROFM_CODIGO = IN_CROFM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_DELETE_SOFT(
IN IN_CROFM_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CROFM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_OFICIAL_MATRIMONIO SET
		CROFM_ESTADO = FALSE
	WHERE
		CROFM_CODIGO = IN_CROFM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CROFM_CODIGO, 
		CRMTR_CODIGO, 
		CUSU_CODIGO, 
		CROFM_ESTADO, 
		CROFM_FECHA_INSERT, 
		CROFM_USUARIO_INSERT, 
		CROFM_FECHA_UPDATE, 
		CROFM_USUARIO_UPDATE
	FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE CROFM_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_OFICIAL_MATRIMONIO SET
		crofm_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_S_CGG_RES_MATRIMONIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MATRIMONIO.
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_S_CGG_RES_MATRIMONIO(
IN IN_CRMTR_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CRMTR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CROFM_CODIGO, 
		CRMTR_CODIGO, 
		CUSU_CODIGO, 
		CROFM_ESTADO, 
		CROFM_FECHA_INSERT, 
		CROFM_USUARIO_INSERT, 
		CROFM_FECHA_UPDATE, 
		CROFM_USUARIO_UPDATE
	FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE CROFM_ESTADO = TRUE AND 
		CRMTR_CODIGO = IN_CRMTR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_D_CGG_RES_MATRIMONIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MATRIMONIO.
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_D_CGG_RES_MATRIMONIO(
IN IN_CRMTR_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CRMTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_OFICIAL_MATRIMONIO
	WHERE
		CRMTR_CODIGO = IN_CRMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_D_CGG_RES_MATRIMONIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MATRIMONIO.
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_DS_CGG_RES_MATRIMONIO(
IN IN_CRMTR_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CRMTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_OFICIAL_MATRIMONIO SET
		crofm_estado = false
	WHERE
		CRMTR_CODIGO = IN_CRMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OFICIAL_MATRIMONIO_S_CGG_RES_MATRIMONIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MATRIMONIO.
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OFICIAL_MATRIMONIO_S_CGG_RES_MATRIMONIO(
IN IN_CRMTR_CODIGO SII.CGG_RES_OFICIAL_MATRIMONIO.CRMTR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		OM.CROFM_CODIGO, 
		OM.CRMTR_CODIGO, 
		U.CUSU_CODIGO,
		P.CRPER_NOMBRES, 
		P.CRPER_APELLIDO_PATERNO, 
		OM.CROFM_ESTADO, 
		OM.CROFM_FECHA_INSERT, 
		OM.CROFM_USUARIO_INSERT, 
		OM.CROFM_FECHA_UPDATE, 
		OM.CROFM_USUARIO_UPDATE
	FROM SII.CGG_RES_OFICIAL_MATRIMONIO OM
	INNER JOIN SII.CGG_USUARIO U ON U.CUSU_CODIGO = OM.CUSU_CODIGO
	INNER JOIN SII.CGG_RES_PERSONA P ON P.CRPER_CODIGO = U.CRPER_CODIGO
	WHERE OM.CROFM_ESTADO = TRUE AND
		OM.CRMTR_CODIGO = IN_CRMTR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
