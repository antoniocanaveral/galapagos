
/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_SEC_REPORTE_ROL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSRPR_CODIGO, 
		CSROL_CODIGO, 
		CSRPT_CODIGO, 
		CSRPR_ESTADO, 
		CSRPR_FECHA_INSERT, 
		CSRPR_USUARIO_INSERT, 
		CSRPR_FECHA_UPDATE, 
		CSRPR_USUARIO_UPDATE
	FROM SII.CGG_SEC_REPORTE_ROL
	WHERE CSRPR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SEC_REPORTE_ROL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CSRPR_CODIGO, 
		CSROL_CODIGO, 
		CSRPT_CODIGO, 
		CSRPR_ESTADO, 
		CSRPR_FECHA_INSERT, 
		CSRPR_USUARIO_INSERT, 
		CSRPR_FECHA_UPDATE, 
		CSRPR_USUARIO_UPDATE
	FROM SII.CGG_SEC_REPORTE_ROL
	WHERE CSRPR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CSRPR_ESTADO, FALSE)||'' ''||COALESCE(CSRPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CSRPR_USUARIO_INSERT, '''')||'' ''||COALESCE(CSRPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CSRPR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_REPORTE_ROL
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_REPORTE_ROL
	WHERE CSRPR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_REPORTE_ROL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_REPORTE_ROL
	WHERE CSRPR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CSRPR_ESTADO, FALSE)||' '||COALESCE(CSRPR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CSRPR_USUARIO_INSERT, '''')||' '||COALESCE(CSRPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CSRPR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_SEC_REPORTE_ROL
* @param IN_CSRPR_CODIGO IDENTIFICATIVO UNICO DE REPORTE DE ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @param IN_CSRPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO_ROL
* @param IN_CSRPR_ESTADO ESTADO DEL REGISTRO
* @param IN_CSRPR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_UPDATE(
IN IN_CSRPR_CODIGO SII.CGG_SEC_REPORTE_ROL.CSRPR_CODIGO%TYPE,
IN IN_CSROL_CODIGO SII.CGG_SEC_REPORTE_ROL.CSROL_CODIGO%TYPE,
IN IN_CSRPT_CODIGO SII.CGG_SEC_REPORTE_ROL.CSRPT_CODIGO%TYPE,
IN IN_CSRPR_ESTADO SII.CGG_SEC_REPORTE_ROL.CSRPR_ESTADO%TYPE,
IN IN_CSRPR_USUARIO_UPDATE SII.CGG_SEC_REPORTE_ROL.CSRPR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_REPORTE_ROL SET
		CSROL_CODIGO = IN_CSROL_CODIGO, 
		CSRPT_CODIGO = IN_CSRPT_CODIGO, 
		CSRPR_ESTADO = IN_CSRPR_ESTADO, 
		CSRPR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CSRPR_USUARIO_UPDATE = IN_CSRPR_USUARIO_UPDATE
	WHERE
		CSRPR_CODIGO = IN_CSRPR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_SEC_REPORTE_ROL
* @param IN_CSRPR_CODIGO NO ESPECIFICADO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_SELECT(
IN IN_CSRPR_CODIGO SII.CGG_SEC_REPORTE_ROL.CSRPR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSRPR_CODIGO, 
		CSROL_CODIGO, 
		CSRPT_CODIGO, 
		CSRPR_ESTADO, 
		CSRPR_FECHA_INSERT, 
		CSRPR_USUARIO_INSERT, 
		CSRPR_FECHA_UPDATE, 
		CSRPR_USUARIO_UPDATE
	FROM SII.CGG_SEC_REPORTE_ROL
	WHERE CSRPR_ESTADO = TRUE AND 
		CSRPR_CODIGO = IN_CSRPR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_SEC_REPORTE_ROL
* @param IN_CSRPR_CODIGO IDENTIFICATIVO UNICO DE REPORTE DE ROL.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_DELETE(
IN IN_CSRPR_CODIGO SII.CGG_SEC_REPORTE_ROL.CSRPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_REPORTE_ROL
	WHERE
		CSRPR_CODIGO = IN_CSRPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_SEC_REPORTE_ROL
* @param IN_CSRPR_CODIGO IDENTIFICATIVO UNICO DE REPORTE DE ROL.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_DELETE_SOFT(
IN IN_CSRPR_CODIGO SII.CGG_SEC_REPORTE_ROL.CSRPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_REPORTE_ROL SET
		CSRPR_ESTADO = FALSE
	WHERE
		CSRPR_CODIGO = IN_CSRPR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_S_CGG_SEC_ROL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_REPORTE_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_S_CGG_SEC_ROL(
IN IN_CSROL_CODIGO SII.CGG_SEC_REPORTE_ROL.CSROL_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSRPR_CODIGO, 
		CSROL_CODIGO, 
		CSRPT_CODIGO, 
		CSRPR_ESTADO, 
		CSRPR_FECHA_INSERT, 
		CSRPR_USUARIO_INSERT, 
		CSRPR_FECHA_UPDATE, 
		CSRPR_USUARIO_UPDATE
	FROM SII.CGG_SEC_REPORTE_ROL
	WHERE CSRPR_ESTADO = TRUE AND 
		CSROL_CODIGO = IN_CSROL_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_D_CGG_SEC_ROL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_REPORTE_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_D_CGG_SEC_ROL(
IN IN_CSROL_CODIGO SII.CGG_SEC_REPORTE_ROL.CSROL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_REPORTE_ROL
	WHERE
		CSROL_CODIGO = IN_CSROL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_D_CGG_SEC_ROL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_REPORTE_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_DS_CGG_SEC_ROL(
IN IN_CSROL_CODIGO SII.CGG_SEC_REPORTE_ROL.CSROL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_REPORTE_ROL SET
		csrpr_estado = false
	WHERE
		CSROL_CODIGO = IN_CSROL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_S_CGG_SEC_REPORTE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_REPORTE_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_REPORTE.
* @param IN_CSRPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO_ROL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_S_CGG_SEC_REPORTE(
IN IN_CSRPT_CODIGO SII.CGG_SEC_REPORTE_ROL.CSRPT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSRPR_CODIGO, 
		CSROL_CODIGO, 
		CSRPT_CODIGO, 
		CSRPR_ESTADO, 
		CSRPR_FECHA_INSERT, 
		CSRPR_USUARIO_INSERT, 
		CSRPR_FECHA_UPDATE, 
		CSRPR_USUARIO_UPDATE
	FROM SII.CGG_SEC_REPORTE_ROL
	WHERE CSRPR_ESTADO = TRUE AND 
		CSRPT_CODIGO = IN_CSRPT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_D_CGG_SEC_REPORTE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_REPORTE_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_REPORTE.
* @param IN_CSRPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO_ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_D_CGG_SEC_REPORTE(
IN IN_CSRPT_CODIGO SII.CGG_SEC_REPORTE_ROL.CSRPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_REPORTE_ROL
	WHERE
		CSRPT_CODIGO = IN_CSRPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_REPORTE_ROL_D_CGG_SEC_REPORTE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_REPORTE_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_REPORTE.
* @param IN_CSPRT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO_ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_REPORTE_ROL_DS_CGG_SEC_REPORTE(
IN IN_CSRPT_CODIGO SII.CGG_SEC_REPORTE_ROL.CSRPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_REPORTE_ROL SET
		csrpr_estado = false
	WHERE
		CSRPT_CODIGO = IN_CSRPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

