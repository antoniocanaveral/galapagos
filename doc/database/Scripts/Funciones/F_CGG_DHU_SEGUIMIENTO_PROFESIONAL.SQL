/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.
* @param IN_CDSPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL SEGUIMIENTO PROFESIONAL
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @param IN_CDSPR_ANIO NUMERO DEL ANIO DEL CUAL SE ESTA REGISTRANDO EL SEGUIMIENTO
* @param IN_CDSPR_FECHA_INGRESO FECHA DE INGRESO A LA INSTITUCION
* @param IN_CDSPR_INSTITUCION INSTITUCION DONDE EL BECARIO ESTA PRESTANDO SUS SERVICIOS
* @param IN_CDSPR_CARGO CARGO QUE SE HALLA DESEMPENIANDO EL BECARIO
* @param IN_CDSPR_FECHA_SALIDA FECHA DE SALIDA DE LA INSTITUCION
* @param IN_CDSPR_OBSERVACIONES OBSERVACIONES AL SEGUIMIENTO
* @param IN_CDSPR_ESTADO ESTADO DEL REGISTRO
* @param IN_CDSPR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDSPR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_INSERT(
IN IN_CDSPR_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_CODIGO%TYPE, 
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDBEC_CODIGO%TYPE, 
IN IN_CDSPR_ANIO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_ANIO%TYPE, 
IN IN_CDSPR_FECHA_INGRESO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_FECHA_INGRESO%TYPE, 
IN IN_CDSPR_INSTITUCION SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_INSTITUCION%TYPE, 
IN IN_CDSPR_CARGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_CARGO%TYPE, 
IN IN_CDSPR_FECHA_SALIDA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_FECHA_SALIDA%TYPE, 
IN IN_CDSPR_OBSERVACIONES SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_OBSERVACIONES%TYPE, 
IN IN_CDSPR_ESTADO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_ESTADO%TYPE, 
IN IN_CDSPR_USUARIO_INSERT SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_USUARIO_INSERT%TYPE, 
IN IN_CDSPR_USUARIO_UPDATE SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDSPR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_SEGUIMIENTO_PROFESIONAL','CDSPR_CODIGO','CDSPR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDSPR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL(
		CDSPR_CODIGO, 
		CDBEC_CODIGO, 
		CDSPR_ANIO, 
		CDSPR_FECHA_INGRESO, 
		CDSPR_INSTITUCION, 
		CDSPR_CARGO, 
		CDSPR_FECHA_SALIDA, 
		CDSPR_OBSERVACIONES, 
		CDSPR_ESTADO, 
		CDSPR_FECHA_INSERT, 
		CDSPR_USUARIO_INSERT, 
		CDSPR_FECHA_UPDATE, 
		CDSPR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CDBEC_CODIGO, 
		IN_CDSPR_ANIO, 
		IN_CDSPR_FECHA_INGRESO, 
		IN_CDSPR_INSTITUCION, 
		IN_CDSPR_CARGO, 
		IN_CDSPR_FECHA_SALIDA, 
		IN_CDSPR_OBSERVACIONES, 
		IN_CDSPR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDSPR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDSPR_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDSPR_CODIGO, 
		CDBEC_CODIGO, 
		CDSPR_ANIO, 
		CDSPR_FECHA_INGRESO, 
		CDSPR_INSTITUCION, 
		CDSPR_CARGO, 
		CDSPR_FECHA_SALIDA, 
		CDSPR_OBSERVACIONES, 
		CDSPR_ESTADO, 
		CDSPR_FECHA_INSERT, 
		CDSPR_USUARIO_INSERT, 
		CDSPR_FECHA_UPDATE, 
		CDSPR_USUARIO_UPDATE
	FROM SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
	WHERE CDSPR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CDSPR_CODIGO, 
		CDBEC_CODIGO, 
		CDSPR_ANIO, 
		CDSPR_FECHA_INGRESO, 
		CDSPR_INSTITUCION, 
		CDSPR_CARGO, 
		CDSPR_FECHA_SALIDA, 
		CDSPR_OBSERVACIONES, 
		CDSPR_ESTADO, 
		CDSPR_FECHA_INSERT, 
		CDSPR_USUARIO_INSERT, 
		CDSPR_FECHA_UPDATE, 
		CDSPR_USUARIO_UPDATE
	FROM SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
	WHERE CDSPR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CDSPR_CODIGO IS NULL THEN '''' ELSE CDSPR_CODIGO END ||'' ''||CASE WHEN CDBEC_CODIGO IS NULL THEN '''' ELSE CDBEC_CODIGO END ||'' ''||CASE WHEN CDSPR_ANIO IS NULL THEN 0 ELSE CDSPR_ANIO END ||'' ''||CASE WHEN CDSPR_FECHA_INGRESO IS NULL THEN CURRENT_TIMESTAMP ELSE CDSPR_FECHA_INGRESO END ||'' ''||CASE WHEN CDSPR_INSTITUCION IS NULL THEN '''' ELSE CDSPR_INSTITUCION END ||'' ''||CASE WHEN CDSPR_CARGO IS NULL THEN '''' ELSE CDSPR_CARGO END ||'' ''||CASE WHEN CDSPR_FECHA_SALIDA IS NULL THEN CURRENT_TIMESTAMP ELSE CDSPR_FECHA_SALIDA END ||'' ''||CASE WHEN CDSPR_OBSERVACIONES IS NULL THEN '''' ELSE CDSPR_OBSERVACIONES END ||'' ''||CASE WHEN CDSPR_ESTADO IS NULL THEN FALSE ELSE CDSPR_ESTADO END ||'' ''||CASE WHEN CDSPR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDSPR_FECHA_INSERT END ||'' ''||CASE WHEN CDSPR_USUARIO_INSERT IS NULL THEN '''' ELSE CDSPR_USUARIO_INSERT END ||'' ''||CASE WHEN CDSPR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDSPR_FECHA_UPDATE END ||'' ''||CASE WHEN CDSPR_USUARIO_UPDATE IS NULL THEN '''' ELSE CDSPR_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
	WHERE CDSPR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
	WHERE CDSPR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CDSPR_CODIGO IS NULL THEN '''' ELSE CDSPR_CODIGO END ||' '||CASE WHEN CDBEC_CODIGO IS NULL THEN '''' ELSE CDBEC_CODIGO END ||' '||CASE WHEN CDSPR_ANIO IS NULL THEN 0 ELSE CDSPR_ANIO END ||' '||CASE WHEN CDSPR_FECHA_INGRESO IS NULL THEN CURRENT_TIMESTAMP ELSE CDSPR_FECHA_INGRESO END ||' '||CASE WHEN CDSPR_INSTITUCION IS NULL THEN '''' ELSE CDSPR_INSTITUCION END ||' '||CASE WHEN CDSPR_CARGO IS NULL THEN '''' ELSE CDSPR_CARGO END ||' '||CASE WHEN CDSPR_FECHA_SALIDA IS NULL THEN CURRENT_TIMESTAMP ELSE CDSPR_FECHA_SALIDA END ||' '||CASE WHEN CDSPR_OBSERVACIONES IS NULL THEN '''' ELSE CDSPR_OBSERVACIONES END ||' '||CASE WHEN CDSPR_ESTADO IS NULL THEN FALSE ELSE CDSPR_ESTADO END ||' '||CASE WHEN CDSPR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDSPR_FECHA_INSERT END ||' '||CASE WHEN CDSPR_USUARIO_INSERT IS NULL THEN '''' ELSE CDSPR_USUARIO_INSERT END ||' '||CASE WHEN CDSPR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDSPR_FECHA_UPDATE END ||' '||CASE WHEN CDSPR_USUARIO_UPDATE IS NULL THEN '''' ELSE CDSPR_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_SEGUIMIENTO_PROFESIONAL.
* @param IN_CDSPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL SEGUIMIENTO PROFESIONAL
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @param IN_CDSPR_ANIO NUMERO DEL ANIO DEL CUAL SE ESTA REGISTRANDO EL SEGUIMIENTO
* @param IN_CDSPR_FECHA_INGRESO FECHA DE INGRESO A LA INSTITUCION
* @param IN_CDSPR_INSTITUCION INSTITUCION DONDE EL BECARIO ESTA PRESTANDO SUS SERVICIOS
* @param IN_CDSPR_CARGO CARGO QUE SE HALLA DESEMPENIANDO EL BECARIO
* @param IN_CDSPR_FECHA_SALIDA FECHA DE SALIDA DE LA INSTITUCION
* @param IN_CDSPR_OBSERVACIONES OBSERVACIONES AL SEGUIMIENTO
* @param IN_CDSPR_ESTADO ESTADO DEL REGISTRO
* @param IN_CDSPR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_UPDATE(
IN IN_CDSPR_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_CODIGO%TYPE, 
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDBEC_CODIGO%TYPE, 
IN IN_CDSPR_ANIO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_ANIO%TYPE, 
IN IN_CDSPR_FECHA_INGRESO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_FECHA_INGRESO%TYPE, 
IN IN_CDSPR_INSTITUCION SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_INSTITUCION%TYPE, 
IN IN_CDSPR_CARGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_CARGO%TYPE, 
IN IN_CDSPR_FECHA_SALIDA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_FECHA_SALIDA%TYPE, 
IN IN_CDSPR_OBSERVACIONES SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_OBSERVACIONES%TYPE, 
IN IN_CDSPR_ESTADO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_ESTADO%TYPE, 
IN IN_CDSPR_USUARIO_UPDATE SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL SET
		CDBEC_CODIGO = IN_CDBEC_CODIGO, 
		CDSPR_ANIO = IN_CDSPR_ANIO, 
		CDSPR_FECHA_INGRESO = IN_CDSPR_FECHA_INGRESO, 
		CDSPR_INSTITUCION = IN_CDSPR_INSTITUCION, 
		CDSPR_CARGO = IN_CDSPR_CARGO, 
		CDSPR_FECHA_SALIDA = IN_CDSPR_FECHA_SALIDA, 
		CDSPR_OBSERVACIONES = IN_CDSPR_OBSERVACIONES, 
		CDSPR_ESTADO = IN_CDSPR_ESTADO, 
		CDSPR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDSPR_USUARIO_UPDATE = IN_CDSPR_USUARIO_UPDATE
	WHERE
		CDSPR_CODIGO = IN_CDSPR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.
* @param IN_CDSPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL SEGUIMIENTO PROFESIONAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_SELECT(
IN IN_CDSPR_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDSPR_CODIGO, 
		CDBEC_CODIGO, 
		CDSPR_ANIO, 
		CDSPR_FECHA_INGRESO, 
		CDSPR_INSTITUCION, 
		CDSPR_CARGO, 
		CDSPR_FECHA_SALIDA, 
		CDSPR_OBSERVACIONES, 
		CDSPR_ESTADO, 
		CDSPR_FECHA_INSERT, 
		CDSPR_USUARIO_INSERT, 
		CDSPR_FECHA_UPDATE, 
		CDSPR_USUARIO_UPDATE
	FROM SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
	WHERE CDSPR_ESTADO = TRUE AND 
		CDSPR_CODIGO = IN_CDSPR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.
* @param IN_CDSPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL SEGUIMIENTO PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_DELETE(
IN IN_CDSPR_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
	WHERE
		CDSPR_CODIGO = IN_CDSPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.
* @param IN_CDSPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL SEGUIMIENTO PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_DELETE_SOFT(
IN IN_CDSPR_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDSPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL SET
		CDSPR_ESTADO = FALSE
	WHERE
		CDSPR_CODIGO = IN_CDSPR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_S_CGG_DHU_BECA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_S_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDBEC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDSPR_CODIGO, 
		CDBEC_CODIGO, 
		CDSPR_ANIO, 
		CDSPR_FECHA_INGRESO, 
		CDSPR_INSTITUCION, 
		CDSPR_CARGO, 
		CDSPR_FECHA_SALIDA, 
		CDSPR_OBSERVACIONES, 
		CDSPR_ESTADO, 
		CDSPR_FECHA_INSERT, 
		CDSPR_USUARIO_INSERT, 
		CDSPR_FECHA_UPDATE, 
		CDSPR_USUARIO_UPDATE
	FROM SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
	WHERE CDSPR_ESTADO = TRUE AND 
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_D_CGG_DHU_BECA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_D_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDBEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL
	WHERE
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_D_CGG_DHU_BECA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_PROFESIONAL_DS_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL.CDBEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SEGUIMIENTO_PROFESIONAL SET
		cdspr_estado = false
	WHERE
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

