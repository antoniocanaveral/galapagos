/**
* FUNCION SII.F_CGG_RES_VOTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_VOTO
* @param IN_CRVTO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VOTO
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRVTO_VOTACION ESTADO QUE DETERMINA LA DECISION APLICADA AL VOTO
APROBADO
NEGADO
* @param IN_CRVTO_OBSERVACION OBSERVACION DE LOS MIEMBROS EN LA VOTACION
* @param IN_CRVTO_ESTADO ESTADO DEL REGISTRO
* @param IN_CRVTO_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRVTO_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_INSERT(
IN IN_CRVTO_CODIGO SII.CGG_RES_VOTO.CRVTO_CODIGO%TYPE, 
IN IN_CRSMB_CODIGO SII.CGG_RES_VOTO.CRSMB_CODIGO%TYPE, 
IN IN_CRRES_CODIGO SII.CGG_RES_VOTO.CRRES_CODIGO%TYPE, 
IN IN_CRVTO_VOTACION SII.CGG_RES_VOTO.CRVTO_VOTACION%TYPE, 
IN IN_CRVTO_OBSERVACION SII.CGG_RES_VOTO.CRVTO_OBSERVACION%TYPE, 
IN IN_CRVTO_ESTADO SII.CGG_RES_VOTO.CRVTO_ESTADO%TYPE, 
IN IN_CRVTO_USUARIO_INSERT SII.CGG_RES_VOTO.CRVTO_USUARIO_INSERT%TYPE, 
IN IN_CRVTO_USUARIO_UPDATE SII.CGG_RES_VOTO.CRVTO_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT_ASIS INT;
TMP_TOTAL_VOTOS INT;
TMP_VOTOA INT;
TMP_VOTON INT;
TMP_VOTOAB INT;
TMP_VOTO_DIR INT;
TMP_EMPATEA BOOLEAN;
TMP_EMPATEN BOOLEAN;
TMP_UNANIMIDAD BOOLEAN;
BEGIN
	
	IF (UPPER(IN_CRVTO_CODIGO) = 'KEYGEN') THEN
		--SELECT SII.F_KEYGEN('CGG_RES_VOTO','CRVTO_CODIGO','CRVTO') INTO OUT_KEY;
		OUT_KEY = 'CRVTO'||NEXTVAL('scn_cgg_res_voto');
	ELSE
		OUT_KEY := IN_CRVTO_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_VOTO(
		CRVTO_CODIGO, 
		CRSMB_CODIGO, 
		CRRES_CODIGO, 
		CRVTO_VOTACION, 
		CRVTO_OBSERVACION, 
		CRVTO_ESTADO, 
		CRVTO_FECHA_INSERT, 
		CRVTO_USUARIO_INSERT, 
		CRVTO_FECHA_UPDATE, 
		CRVTO_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRSMB_CODIGO, 
		IN_CRRES_CODIGO, 
		IN_CRVTO_VOTACION, 
		IN_CRVTO_OBSERVACION, 
		IN_CRVTO_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRVTO_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRVTO_USUARIO_UPDATE
	);
	--CONTABILIZA LOS VOTOS QUE RECIBIDO UNA RESOLUCION
	SELECT COUNT(*) INTO TMP_TOTAL_VOTOS
	FROM SII.CGG_RES_VOTO VT
	WHERE CRVTO_ESTADO AND VT.CRRES_CODIGO = IN_CRRES_CODIGO;
	--CONTABILIZA CUANTOS MIEMBROS HAN ASISTIDO A LA SESION
	SELECT COUNT(*) INTO TMP_COUNT_ASIS
	FROM SII.CGG_RES_SESION_MIEMBRO SSM
	WHERE SSM.CRSMB_ESTADO AND SSM.CRSSC_CODIGO = (SELECT CRSSC_CODIGO FROM SII.CGG_RES_RESOLUCION WHERE CRRES_CODIGO = IN_CRRES_CODIGO);
	
	IF (TMP_TOTAL_VOTOS = TMP_COUNT_ASIS) THEN
		--CONTABILIZA LOS VOTOS APROBADOS
		SELECT COUNT(*) INTO TMP_VOTOA
		FROM SII.CGG_RES_VOTO VT
		WHERE VT.CRVTO_ESTADO AND VT.CRRES_CODIGO = IN_CRRES_CODIGO AND VT.CRVTO_VOTACION = 0;
		--CONTABILIZA LOS VOTOS NEGADOS
		SELECT COUNT(*) INTO TMP_VOTON
		FROM SII.CGG_RES_VOTO VT
		WHERE VT.CRVTO_ESTADO AND VT.CRRES_CODIGO = IN_CRRES_CODIGO AND VT.CRVTO_VOTACION = 1;
		--CONTABILIZA LOS VOTOS ABTENIDOS
		SELECT COUNT(*) INTO TMP_VOTOAB
		FROM SII.CGG_RES_VOTO VT
		WHERE VT.CRVTO_ESTADO AND VT.CRRES_CODIGO = IN_CRRES_CODIGO AND VT.CRVTO_VOTACION = 2;
		
		--SI LA RESOLUCION ESTA ASOCIADA A UN TRAMITE SE VERIFICA SI EL VOTO ES POR UNANIMIDAD
		SELECT CRTST_UNANIMIDAD INTO TMP_UNANIMIDAD
		FROM SII.CGG_RES_RESOLUCION RSL
		INNER JOIN SII.CGG_RES_RESOL_TRAMITE RST ON RST.CRRES_CODIGO = RSL.CRRES_CODIGO AND RST.CRRST_ESTADO
		INNER JOIN SII.CGG_RES_TRAMITE TRM ON TRM.CRTRA_CODIGO = RST.CRTRA_CODIGO AND TRM.CRTRA_ESTADO
		INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON TST.CRTST_CODIGO = TRM.CRTST_CODIGO AND TST.CRTST_ESTADO
		WHERE CRTST_ESTADO AND RSL.CRRES_CODIGO = IN_CRRES_CODIGO;
		
		IF (TMP_UNANIMIDAD IS NULL) THEN
			TMP_UNANIMIDAD = FALSE;
		END IF;
		
		TMP_EMPATEN = FAlSE;
		TMP_EMPATEA = FAlSE;
		IF (TMP_VOTOA = TMP_VOTON) THEN
			--VERIFICA COMO VOTO EL MIEMBRO CON VOTO DIRIMENTE
			SELECT SII.F_CGG_RES_VOTO_DIRIMENTE(IN_CRRES_CODIGO) INTO TMP_VOTO_DIR;
			IF(TMP_VOTO_DIR > -1) THEN
				IF (TMP_VOTO_DIR = 0) THEN
					TMP_EMPATEA = TRUE;
					TMP_VOTOA = TMP_VOTOA + 1;
				ELSIF (TMP_VOTO_DIR = 1) THEN
					TMP_EMPATEN = TRUE;
					TMP_VOTON = TMP_VOTON + 1;
				END IF;
			END IF;
		END IF;
		
		IF ((TMP_VOTOA > TMP_VOTON AND NOT TMP_UNANIMIDAD) OR 
			(TMP_UNANIMIDAD AND TMP_VOTOA = TMP_COUNT_ASIS) ) THEN
			UPDATE SII.CGG_RES_RESOLUCION SET 
				CRRES_ESTADO_RESOLUCION = 1,
				CRRES_VOTOS_APROBACION = CASE WHEN TMP_EMPATEA THEN TMP_VOTOA - 1 ELSE TMP_VOTOA END,
				CRRES_VOTOS_NEGACION = CASE WHEN TMP_EMPATEN THEN TMP_VOTON - 1 ELSE TMP_VOTON END,
				CRRES_VOTOS_ABSTENCION = TMP_VOTOAB,
				CRRES_FECHA_EMISION = CURRENT_TIMESTAMP,
				CRRES_FECHA_EJECUCION = CURRENT_TIMESTAMP,
				CRRES_FECHA_UPDATE = CURRENT_TIMESTAMP,
				CRRES_USUARIO_UPDATE = IN_CRVTO_USUARIO_UPDATE
			WHERE CRRES_CODIGO = IN_CRRES_CODIGO;
		ELSIF (TMP_VOTON > TMP_VOTOA OR (TMP_UNANIMIDAD AND TMP_VOTOA != TMP_COUNT_ASIS) ) THEN
			UPDATE SII.CGG_RES_RESOLUCION SET 
				CRRES_ESTADO_RESOLUCION = 2,
				CRRES_VOTOS_APROBACION = CASE WHEN TMP_EMPATEA THEN TMP_VOTOA - 1 ELSE TMP_VOTOA END,
				CRRES_VOTOS_NEGACION = CASE WHEN TMP_EMPATEN THEN TMP_VOTON - 1 ELSE TMP_VOTON END,
				CRRES_VOTOS_ABSTENCION = TMP_VOTOAB,
				CRRES_FECHA_EMISION = CURRENT_TIMESTAMP,
				CRRES_FECHA_EJECUCION = CURRENT_TIMESTAMP,
				CRRES_FECHA_UPDATE = CURRENT_TIMESTAMP,
				CRRES_USUARIO_UPDATE = IN_CRVTO_USUARIO_UPDATE
			WHERE CRRES_CODIGO = IN_CRRES_CODIGO;
		END IF;
	END IF;
	
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_VOTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRVTO_CODIGO, 
		CRSMB_CODIGO, 
		CRRES_CODIGO, 
		CRVTO_VOTACION, 
		CRVTO_OBSERVACION, 
		CRVTO_ESTADO, 
		CRVTO_FECHA_INSERT, 
		CRVTO_USUARIO_INSERT, 
		CRVTO_FECHA_UPDATE, 
		CRVTO_USUARIO_UPDATE
	FROM SII.CGG_RES_VOTO
	WHERE CRVTO_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_VOTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRVTO_CODIGO, 
		CRSMB_CODIGO, 
		CRRES_CODIGO, 
		CRVTO_VOTACION, 
		CRVTO_OBSERVACION, 
		CRVTO_ESTADO, 
		CRVTO_FECHA_INSERT, 
		CRVTO_USUARIO_INSERT, 
		CRVTO_FECHA_UPDATE, 
		CRVTO_USUARIO_UPDATE
	FROM SII.CGG_RES_VOTO
	WHERE CRVTO_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRVTO_CODIGO IS NULL THEN '''' ELSE CRVTO_CODIGO END ||'' ''||CASE WHEN CRSMB_CODIGO IS NULL THEN '''' ELSE CRSMB_CODIGO END ||'' ''||CASE WHEN CRRES_CODIGO IS NULL THEN '''' ELSE CRRES_CODIGO END ||'' ''||CASE WHEN CRVTO_VOTACION IS NULL THEN 0 ELSE CRVTO_VOTACION END ||'' ''||CASE WHEN CRVTO_OBSERVACION IS NULL THEN '''' ELSE CRVTO_OBSERVACION END ||'' ''||CASE WHEN CRVTO_ESTADO IS NULL THEN FALSE ELSE CRVTO_ESTADO END ||'' ''||CASE WHEN CRVTO_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRVTO_FECHA_INSERT END ||'' ''||CASE WHEN CRVTO_USUARIO_INSERT IS NULL THEN '''' ELSE CRVTO_USUARIO_INSERT END ||'' ''||CASE WHEN CRVTO_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRVTO_FECHA_UPDATE END ||'' ''||CASE WHEN CRVTO_USUARIO_UPDATE IS NULL THEN '''' ELSE CRVTO_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_VOTO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_VOTO
	WHERE CRVTO_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_VOTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_VOTO
	WHERE CRVTO_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRVTO_CODIGO IS NULL THEN '''' ELSE CRVTO_CODIGO END ||' '||CASE WHEN CRSMB_CODIGO IS NULL THEN '''' ELSE CRSMB_CODIGO END ||' '||CASE WHEN CRRES_CODIGO IS NULL THEN '''' ELSE CRRES_CODIGO END ||' '||CASE WHEN CRVTO_VOTACION IS NULL THEN 0 ELSE CRVTO_VOTACION END ||' '||CASE WHEN CRVTO_OBSERVACION IS NULL THEN '''' ELSE CRVTO_OBSERVACION END ||' '||CASE WHEN CRVTO_ESTADO IS NULL THEN FALSE ELSE CRVTO_ESTADO END ||' '||CASE WHEN CRVTO_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRVTO_FECHA_INSERT END ||' '||CASE WHEN CRVTO_USUARIO_INSERT IS NULL THEN '''' ELSE CRVTO_USUARIO_INSERT END ||' '||CASE WHEN CRVTO_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRVTO_FECHA_UPDATE END ||' '||CASE WHEN CRVTO_USUARIO_UPDATE IS NULL THEN '''' ELSE CRVTO_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_VOTO
* @param IN_CRVTO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VOTO
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRVTO_VOTACION ESTADO QUE DETERMINA LA DECISION APLICADA AL VOTO
APROBADO
NEGADO
* @param IN_CRVTO_OBSERVACION OBSERVACION DE LOS MIEMBROS EN LA VOTACION
* @param IN_CRVTO_ESTADO ESTADO DEL REGISTRO
* @param IN_CRVTO_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_UPDATE(
IN IN_CRVTO_CODIGO SII.CGG_RES_VOTO.CRVTO_CODIGO%TYPE, 
IN IN_CRSMB_CODIGO SII.CGG_RES_VOTO.CRSMB_CODIGO%TYPE, 
IN IN_CRRES_CODIGO SII.CGG_RES_VOTO.CRRES_CODIGO%TYPE, 
IN IN_CRVTO_VOTACION SII.CGG_RES_VOTO.CRVTO_VOTACION%TYPE, 
IN IN_CRVTO_OBSERVACION SII.CGG_RES_VOTO.CRVTO_OBSERVACION%TYPE, 
IN IN_CRVTO_ESTADO SII.CGG_RES_VOTO.CRVTO_ESTADO%TYPE, 
IN IN_CRVTO_USUARIO_UPDATE SII.CGG_RES_VOTO.CRVTO_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_VOTO SET
		CRSMB_CODIGO = IN_CRSMB_CODIGO, 
		CRRES_CODIGO = IN_CRRES_CODIGO, 
		CRVTO_VOTACION = IN_CRVTO_VOTACION, 
		CRVTO_OBSERVACION = IN_CRVTO_OBSERVACION, 
		CRVTO_ESTADO = IN_CRVTO_ESTADO, 
		CRVTO_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRVTO_USUARIO_UPDATE = IN_CRVTO_USUARIO_UPDATE
	WHERE
		CRVTO_CODIGO = IN_CRVTO_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_VOTO
* @param IN_CRVTO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VOTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_SELECT(
IN IN_CRVTO_CODIGO SII.CGG_RES_VOTO.CRVTO_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRVTO_CODIGO, 
		CRSMB_CODIGO, 
		CRRES_CODIGO, 
		CRVTO_VOTACION, 
		CRVTO_OBSERVACION, 
		CRVTO_ESTADO, 
		CRVTO_FECHA_INSERT, 
		CRVTO_USUARIO_INSERT, 
		CRVTO_FECHA_UPDATE, 
		CRVTO_USUARIO_UPDATE
	FROM SII.CGG_RES_VOTO
	WHERE CRVTO_ESTADO = TRUE AND 
		CRVTO_CODIGO = IN_CRVTO_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_VOTO
* @param IN_CRVTO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VOTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_DELETE(
IN IN_CRVTO_CODIGO SII.CGG_RES_VOTO.CRVTO_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_VOTO
	WHERE
		CRVTO_CODIGO = IN_CRVTO_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_VOTO
* @param IN_CRVTO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VOTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_DELETE_SOFT(
IN IN_CRVTO_CODIGO SII.CGG_RES_VOTO.CRVTO_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_VOTO SET
		CRVTO_ESTADO = FALSE
	WHERE
		CRVTO_CODIGO = IN_CRVTO_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_S_CGG_RES_RESOLUCION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_VOTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_S_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_VOTO.CRRES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRVTO_CODIGO, 
		CRSMB_CODIGO, 
		CRRES_CODIGO, 
		CRVTO_VOTACION, 
		CRVTO_OBSERVACION, 
		CRVTO_ESTADO, 
		CRVTO_FECHA_INSERT, 
		CRVTO_USUARIO_INSERT, 
		CRVTO_FECHA_UPDATE, 
		CRVTO_USUARIO_UPDATE
	FROM SII.CGG_RES_VOTO
	WHERE CRVTO_ESTADO = TRUE AND 
		CRRES_CODIGO = IN_CRRES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_D_CGG_RES_RESOLUCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_VOTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_D_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_VOTO.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_VOTO
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_D_CGG_RES_RESOLUCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_VOTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_DS_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_VOTO.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_VOTO SET
		crvto_estado = false
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_S_CGG_RES_SESION_MIEMBRO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_VOTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_MIEMBRO.
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_S_CGG_RES_SESION_MIEMBRO(
IN IN_CRSMB_CODIGO SII.CGG_RES_VOTO.CRSMB_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRVTO_CODIGO, 
		CRSMB_CODIGO, 
		CRRES_CODIGO, 
		CRVTO_VOTACION, 
		CRVTO_OBSERVACION, 
		CRVTO_ESTADO, 
		CRVTO_FECHA_INSERT, 
		CRVTO_USUARIO_INSERT, 
		CRVTO_FECHA_UPDATE, 
		CRVTO_USUARIO_UPDATE
	FROM SII.CGG_RES_VOTO
	WHERE CRVTO_ESTADO = TRUE AND 
		CRSMB_CODIGO = IN_CRSMB_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_D_CGG_RES_SESION_MIEMBRO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_VOTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_MIEMBRO.
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_D_CGG_RES_SESION_MIEMBRO(
IN IN_CRSMB_CODIGO SII.CGG_RES_VOTO.CRSMB_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_VOTO
	WHERE
		CRSMB_CODIGO = IN_CRSMB_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_VOTO_D_CGG_RES_SESION_MIEMBRO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_VOTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_MIEMBRO.
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_VOTO_DS_CGG_RES_SESION_MIEMBRO(
IN IN_CRSMB_CODIGO SII.CGG_RES_VOTO.CRSMB_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_VOTO SET
		crvto_estado = false
	WHERE
		CRSMB_CODIGO = IN_CRSMB_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

