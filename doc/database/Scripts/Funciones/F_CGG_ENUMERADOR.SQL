/**
* FUNCION SII.F_CGG_ENUMERADOR_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_ENUMERADOR.
* @param IN_CENUM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CENUM_TABLA NO ESPECIFICADO
* @param IN_CENUM_COLUMNA NO ESPECIFICADO
* @param IN_CENUM_VALOR NO ESPECIFICADO
* @param IN_CENUM_DESCRIPCION NO ESPECIFICADO
* @param IN_CENUM__ESTADO ESTADO DEL REGISTRO
* @param IN_CENUM__USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CENUM__USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_INSERT(
IN IN_CENUM_CODIGO SII.CGG_ENUMERADOR.CENUM_CODIGO%TYPE, 
IN IN_CENUM_TABLA SII.CGG_ENUMERADOR.CENUM_TABLA%TYPE, 
IN IN_CENUM_COLUMNA SII.CGG_ENUMERADOR.CENUM_COLUMNA%TYPE, 
IN IN_CENUM_VALOR SII.CGG_ENUMERADOR.CENUM_VALOR%TYPE, 
IN IN_CENUM_DESCRIPCION SII.CGG_ENUMERADOR.CENUM_DESCRIPCION%TYPE, 
IN IN_CENUM__ESTADO SII.CGG_ENUMERADOR.CENUM__ESTADO%TYPE, 
IN IN_CENUM__USUARIO_INSERT SII.CGG_ENUMERADOR.CENUM__USUARIO_INSERT%TYPE, 
IN IN_CENUM__USUARIO_UPDATE SII.CGG_ENUMERADOR.CENUM__USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CENUM_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_ENUMERADOR','CENUM_CODIGO','') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CENUM_CODIGO;
	END IF;
	INSERT INTO SII.CGG_ENUMERADOR(
		CENUM_CODIGO, 
		CENUM_TABLA, 
		CENUM_COLUMNA, 
		CENUM_VALOR, 
		CENUM_DESCRIPCION, 
		CENUM__ESTADO, 
		CENUM__FECHA_INSERT, 
		CENUM__USUARIO_INSERT, 
		CENUM__FECHA_UPDATE, 
		CENUM__USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CENUM_TABLA, 
		IN_CENUM_COLUMNA, 
		IN_CENUM_VALOR, 
		IN_CENUM_DESCRIPCION, 
		IN_CENUM__ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CENUM__USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CENUM__USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ENUMERADOR_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_ENUMERADOR.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CENUM_CODIGO, 
		CENUM_TABLA, 
		CENUM_COLUMNA, 
		CENUM_VALOR, 
		CENUM_DESCRIPCION, 
		CENUM__ESTADO, 
		CENUM__FECHA_INSERT, 
		CENUM__USUARIO_INSERT, 
		CENUM__FECHA_UPDATE, 
		CENUM__USUARIO_UPDATE
	FROM SII.CGG_ENUMERADOR;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ENUMERADOR_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_ENUMERADOR.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CENUM_CODIGO, 
		CENUM_TABLA, 
		CENUM_COLUMNA, 
		CENUM_VALOR, 
		CENUM_DESCRIPCION, 
		CENUM__ESTADO, 
		CENUM__FECHA_INSERT, 
		CENUM__USUARIO_INSERT, 
		CENUM__FECHA_UPDATE, 
		CENUM__USUARIO_UPDATE
	FROM SII.CGG_ENUMERADOR
	WHERE SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CENUM_TABLA, '''')||'' ''||COALESCE(CENUM_COLUMNA, '''')||'' ''||COALESCE(CENUM_VALOR, 0)||'' ''||COALESCE(CENUM_DESCRIPCION, '''')||'' ''||COALESCE(CENUM__ESTADO, FALSE)||'' ''||COALESCE(CENUM__FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CENUM__USUARIO_INSERT, '''')||'' ''||COALESCE(CENUM__FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CENUM__USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ENUMERADOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_ENUMERADOR.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_ENUMERADOR;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ENUMERADOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_ENUMERADOR
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_ENUMERADOR
	WHERE SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CENUM_TABLA, '''')||' '||COALESCE(CENUM_COLUMNA, '''')||' '||COALESCE(CENUM_VALOR, 0)||' '||COALESCE(CENUM_DESCRIPCION, '''')||' '||COALESCE(CENUM__ESTADO, FALSE)||' '||COALESCE(CENUM__FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CENUM__USUARIO_INSERT, '''')||' '||COALESCE(CENUM__FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CENUM__USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ENUMERADOR_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_ENUMERADOR.
* @param IN_CENUM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CENUM_TABLA NO ESPECIFICADO
* @param IN_CENUM_COLUMNA NO ESPECIFICADO
* @param IN_CENUM_VALOR NO ESPECIFICADO
* @param IN_CENUM_DESCRIPCION NO ESPECIFICADO
* @param IN_CENUM__ESTADO ESTADO DEL REGISTRO
* @param IN_CENUM__USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_UPDATE(
IN IN_CENUM_CODIGO SII.CGG_ENUMERADOR.CENUM_CODIGO%TYPE, 
IN IN_CENUM_TABLA SII.CGG_ENUMERADOR.CENUM_TABLA%TYPE, 
IN IN_CENUM_COLUMNA SII.CGG_ENUMERADOR.CENUM_COLUMNA%TYPE, 
IN IN_CENUM_VALOR SII.CGG_ENUMERADOR.CENUM_VALOR%TYPE, 
IN IN_CENUM_DESCRIPCION SII.CGG_ENUMERADOR.CENUM_DESCRIPCION%TYPE, 
IN IN_CENUM__ESTADO SII.CGG_ENUMERADOR.CENUM__ESTADO%TYPE, 
IN IN_CENUM__USUARIO_UPDATE SII.CGG_ENUMERADOR.CENUM__USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_ENUMERADOR SET
		CENUM_TABLA = IN_CENUM_TABLA, 
		CENUM_COLUMNA = IN_CENUM_COLUMNA, 
		CENUM_VALOR = IN_CENUM_VALOR, 
		CENUM_DESCRIPCION = IN_CENUM_DESCRIPCION, 
		CENUM__ESTADO = IN_CENUM__ESTADO, 
		CENUM__FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CENUM__USUARIO_UPDATE = IN_CENUM__USUARIO_UPDATE
	WHERE
		CENUM_CODIGO = IN_CENUM_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ENUMERADOR_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_ENUMERADOR.
* @param IN_CENUM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_SELECT(
IN IN_CENUM_CODIGO SII.CGG_ENUMERADOR.CENUM_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CENUM_CODIGO, 
		CENUM_TABLA, 
		CENUM_COLUMNA, 
		CENUM_VALOR, 
		CENUM_DESCRIPCION, 
		CENUM__ESTADO, 
		CENUM__FECHA_INSERT, 
		CENUM__USUARIO_INSERT, 
		CENUM__FECHA_UPDATE, 
		CENUM__USUARIO_UPDATE
	FROM SII.CGG_ENUMERADOR
	WHERE 
		CENUM_CODIGO = IN_CENUM_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ENUMERADOR_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_ENUMERADOR.
* @param IN_CENUM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_DELETE(
IN IN_CENUM_CODIGO SII.CGG_ENUMERADOR.CENUM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_ENUMERADOR
	WHERE
		CENUM_CODIGO = IN_CENUM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ENUMERADOR_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_ENUMERADOR.
* @param IN_CENUM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_DELETE_SOFT(
IN IN_CENUM_CODIGO SII.CGG_ENUMERADOR.CENUM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_ENUMERADOR SET
		_ESTADO = FALSE
	WHERE
		CENUM_CODIGO = IN_CENUM_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ENUMERADOR_SELECT 
* SELECCIONA EL VALOR DE UN ENUMERADOR.
* @param IN_CENUM_TABLA TABLA DEL ENUMERADOR
* @param IN_CENUM_COLUMNA COLUMNA EL ENUMERADOR
* @param IN_CENUM_DESCRIPCION DESCRIPCION DEL ENUMERADOR
* @return VALOR DEL ENUMERADOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ENUMERADOR_SELECT_VALOR(
IN IN_CENUM_TABLA SII.CGG_ENUMERADOR.CENUM_TABLA%TYPE,
IN IN_CENUM_COLUMNA SII.CGG_ENUMERADOR.CENUM_TABLA%TYPE,
IN IN_CENUM_DESCRIPCION SII.CGG_ENUMERADOR.CENUM_DESCRIPCION%TYPE
)RETURNS NUMERIC AS
$$
DECLARE
	TMP_VALOR NUMERIC;
BEGIN	
	
	SELECT COALESCE(CENUM_VALOR,NULL) INTO TMP_VALOR FROM SII.CGG_ENUMERADOR
	WHERE CENUM_TABLA = IN_CENUM_TABLA AND
		  CENUM_COLUMNA = IN_CENUM_COLUMNA AND
		  CENUM_DESCRIPCION = IN_CENUM_DESCRIPCION;		  
	RETURN TMP_VALOR;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
