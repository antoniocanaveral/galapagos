/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_SEC_USUARIO_ROL
* @param IN_CSPER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO - ROL
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CSPER_ESTADO ESTADO DEL REGISTRO
* @param IN_CSPER_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CSPER_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_INSERT(
IN IN_CSPER_CODIGO SII.CGG_SEC_USUARIO_ROL.CSPER_CODIGO%TYPE, 
IN IN_CSROL_CODIGO SII.CGG_SEC_USUARIO_ROL.CSROL_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_ROL.CUSU_CODIGO%TYPE, 
IN IN_CSPER_ESTADO SII.CGG_SEC_USUARIO_ROL.CSPER_ESTADO%TYPE, 
IN IN_CSPER_USUARIO_INSERT SII.CGG_SEC_USUARIO_ROL.CSPER_USUARIO_INSERT%TYPE, 
IN IN_CSPER_USUARIO_UPDATE SII.CGG_SEC_USUARIO_ROL.CSPER_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CSPER_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_SEC_USUARIO_ROL','CSPER_CODIGO','CSPER') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CSPER_CODIGO;
	END IF;
	INSERT INTO SII.CGG_SEC_USUARIO_ROL(
		CSPER_CODIGO, 
		CSROL_CODIGO, 
		CUSU_CODIGO, 
		CSPER_ESTADO, 
		CSPER_FECHA_INSERT, 
		CSPER_USUARIO_INSERT, 
		CSPER_FECHA_UPDATE, 
		CSPER_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CSROL_CODIGO, 
		IN_CUSU_CODIGO, 
		IN_CSPER_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CSPER_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CSPER_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_ROL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSPER_CODIGO, 
		CSROL_CODIGO, 
		CUSU_CODIGO, 
		CSPER_ESTADO, 
		CSPER_FECHA_INSERT, 
		CSPER_USUARIO_INSERT, 
		CSPER_FECHA_UPDATE, 
		CSPER_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_ROL
	WHERE CSPER_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_ROL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CSPER_CODIGO, 
		CSROL_CODIGO, 
		CUSU_CODIGO, 
		CSPER_ESTADO, 
		CSPER_FECHA_INSERT, 
		CSPER_USUARIO_INSERT, 
		CSPER_FECHA_UPDATE, 
		CSPER_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_ROL
	WHERE CSPER_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CSPER_ESTADO, FALSE)||'' ''||COALESCE(CSPER_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CSPER_USUARIO_INSERT, '''')||'' ''||COALESCE(CSPER_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CSPER_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_SELECT_USUARIO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_ROL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_SELECT_USUARIO(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CUSU_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		UR.CSPER_CODIGO, 
		UR.CSROL_CODIGO,
		ROL.CSROL_NOMBRE ROL,
		UR.CUSU_CODIGO, 
		UR.CSPER_ESTADO, 
		UR.CSPER_FECHA_INSERT, 
		UR.CSPER_USUARIO_INSERT, 
		UR.CSPER_FECHA_UPDATE, 
		UR.CSPER_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_ROL UR
	INNER JOIN SII.CGG_USUARIO U ON U.CUSU_CODIGO = UR.CUSU_CODIGO AND U.CUSU_ESTADO
	INNER JOIN SII.CGG_SEC_ROL ROL ON ROL.CSROL_CODIGO = UR.CSROL_CODIGO AND ROL.CSROL_ESTADO
	WHERE CSPER_ESTADO AND U.CUSU_CODIGO = '||QUOTE_LITERAL(IN_CUSU_CODIGO)||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CSPER_ESTADO, FALSE)||'' ''||COALESCE(CSPER_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CSPER_USUARIO_INSERT, '''')||'' ''||COALESCE(CSPER_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CSPER_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_SELECT_ROL
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_ROL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_SELECT_ROL(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CSROL_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		UR.CSPER_CODIGO, 
		UR.CSROL_CODIGO,
		US.CUSU_NOMBRE_USUARIO,
		UR.CUSU_CODIGO, 
		UR.CSPER_ESTADO
	FROM SII.CGG_SEC_USUARIO_ROL UR
	INNER JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = UR.CUSU_CODIGO AND US.CUSU_ESTADO
	WHERE CSPER_ESTADO AND UR.CSROL_CODIGO = '||QUOTE_LITERAL(IN_CSROL_CODIGO)||' AND 
		(LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',US.CUSU_NOMBRE_USUARIO) = 1)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_ROL
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_USUARIO_ROL
	WHERE CSPER_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_ROL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_USUARIO_ROL
	WHERE CSPER_ESTADO AND 
		(LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CSPER_ESTADO, FALSE)||' '||COALESCE(CSPER_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CSPER_USUARIO_INSERT, '''')||' '||COALESCE(CSPER_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CSPER_USUARIO_UPDATE, '''')) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_COUNT_USUARIO
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_ROL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_COUNT_USUARIO(
IN IN_FIND_TEXT TEXT,
IN IN_CUSU_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_USUARIO_ROL UR 
	INNER JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = UR.CUSU_CODIGO AND US.CUSU_ESTADO
	WHERE CSPER_ESTADO AND UR.CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_COUNT_ROL
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_ROL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_COUNT_ROL(
IN IN_FIND_TEXT TEXT,
IN IN_CSROL_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_USUARIO_ROL UR 
	INNER JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = UR.CUSU_CODIGO AND US.CUSU_ESTADO
	WHERE UR.CSPER_ESTADO AND UR.CSROL_CODIGO = IN_CSROL_CODIGO AND
		(LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,US.CUSU_NOMBRE_USUARIO) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_SEC_USUARIO_ROL
* @param IN_CSPER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO - ROL
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CSPER_ESTADO ESTADO DEL REGISTRO
* @param IN_CSPER_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_UPDATE(
IN IN_CSPER_CODIGO SII.CGG_SEC_USUARIO_ROL.CSPER_CODIGO%TYPE, 
IN IN_CSROL_CODIGO SII.CGG_SEC_USUARIO_ROL.CSROL_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_ROL.CUSU_CODIGO%TYPE, 
IN IN_CSPER_ESTADO SII.CGG_SEC_USUARIO_ROL.CSPER_ESTADO%TYPE, 
IN IN_CSPER_USUARIO_UPDATE SII.CGG_SEC_USUARIO_ROL.CSPER_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_USUARIO_ROL SET
		CSROL_CODIGO = IN_CSROL_CODIGO, 
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CSPER_ESTADO = IN_CSPER_ESTADO, 
		CSPER_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CSPER_USUARIO_UPDATE = IN_CSPER_USUARIO_UPDATE
	WHERE
		CSPER_CODIGO = IN_CSPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_SEC_USUARIO_ROL
* @param IN_CSPER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO - ROL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_SELECT(
IN IN_CSPER_CODIGO SII.CGG_SEC_USUARIO_ROL.CSPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSPER_CODIGO, 
		CSROL_CODIGO, 
		CUSU_CODIGO, 
		CSPER_ESTADO, 
		CSPER_FECHA_INSERT, 
		CSPER_USUARIO_INSERT, 
		CSPER_FECHA_UPDATE, 
		CSPER_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_ROL
	WHERE CSPER_ESTADO = TRUE AND 
		CSPER_CODIGO = IN_CSPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_SEC_USUARIO_ROL
* @param IN_CSPER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO - ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_DELETE(
IN IN_CSPER_CODIGO SII.CGG_SEC_USUARIO_ROL.CSPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_USUARIO_ROL
	WHERE CSPER_CODIGO = IN_CSPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_SEC_USUARIO_ROL
* @param IN_CSPER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO - ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_DELETE_SOFT(
IN IN_CSPER_CODIGO SII.CGG_SEC_USUARIO_ROL.CSPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_USUARIO_ROL SET
		CSPER_ESTADO = FALSE
	WHERE
		CSPER_CODIGO = IN_CSPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_S_CGG_SEC_ROL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_S_CGG_SEC_ROL(
IN IN_CSROL_CODIGO SII.CGG_SEC_USUARIO_ROL.CSROL_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSPER_CODIGO, 
		CSROL_CODIGO, 
		CUSU_CODIGO, 
		CSPER_ESTADO, 
		CSPER_FECHA_INSERT, 
		CSPER_USUARIO_INSERT, 
		CSPER_FECHA_UPDATE, 
		CSPER_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_ROL
	WHERE CSPER_ESTADO = TRUE AND 
		CSROL_CODIGO = IN_CSROL_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_D_CGG_SEC_ROL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_D_CGG_SEC_ROL(
IN IN_CSROL_CODIGO SII.CGG_SEC_USUARIO_ROL.CSROL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_USUARIO_ROL
	WHERE
		CSROL_CODIGO = IN_CSROL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_D_CGG_SEC_ROL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_DS_CGG_SEC_ROL(
IN IN_CSROL_CODIGO SII.CGG_SEC_USUARIO_ROL.CSROL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_USUARIO_ROL SET
		csper_estado = false
	WHERE
		CSROL_CODIGO = IN_CSROL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_ROL.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSPER_CODIGO, 
		CSROL_CODIGO, 
		CUSU_CODIGO, 
		CSPER_ESTADO, 
		CSPER_FECHA_INSERT, 
		CSPER_USUARIO_INSERT, 
		CSPER_FECHA_UPDATE, 
		CSPER_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_ROL
	WHERE CSPER_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_ROL.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_USUARIO_ROL
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_ROL_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_ROL_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_ROL.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_USUARIO_ROL SET
		csper_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;




/**
* FUNCION SII.F_CGG_USUARIO_ROL_DELETE_BYUSUARIOROL_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_USUARIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_ROL_DELETE_BYUSUARIOROL_SOFT(
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_ROL.CUSU_CODIGO%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
	TMP_RESULT VARCHAR;
BEGIN
	UPDATE SII.CGG_SEC_USUARIO_ROL SET
		CSPER_ESTADO = FALSE
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO AND CSROL_CODIGO = 'CSROL_GEAPL';
	TMP_RESULT := 'true';
	
	RETURN TMP_RESULT;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;