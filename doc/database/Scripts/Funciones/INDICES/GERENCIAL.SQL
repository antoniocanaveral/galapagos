/**
*SELECCION LA RESDIENCIA PADRE ACTIVA DE UNA PERSONA. TOMADO DE LA FUNCION DE CONTROL DE TCT DE 90 DIAS REGLAS DE VALIDACION.
*@param IN_CRPER_CODIGO CODIGO DE PERSONAL.
*@param IN_CRRSD_CODIGO CODIGO DE RESIDENCIA.
*@return CODIGO DE RESIDENCIA PADRE.
*/
CREATE OR REPLACE FUNCTION F_RESIDENCIA_PERSONA(
IN IN_CRPER_CODIGO CHARACTER VARYING, 
IN IN_CRRSD_CODIGO CHARACTER VARYING
)RETURNS CHARACTER VARYING AS
$$
DECLARE	
	TMP_CRTST_CODIGO VARCHAR(20);
BEGIN 
	TMP_CRTST_CODIGO:='';
	SELECT CRTST_CODIGO INTO TMP_CRTST_CODIGO 
			FROM SII.CGG_RES_RESIDENCIA
			WHERE CRPER_CODIGO = IN_CRPER_CODIGO AND 
				CRRSD_CODIGO = IN_CRRSD_CODIGO AND 
				CRTST_CODIGO IN (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '05') OR CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '06')) 
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT CRTST_CODIGO  FROM TIPO);
	RETURN TMP_CRTST_CODIGO;			
END
$$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;

/**
* DEVUELVE UNA FECHA DEL ULTIMO DIA DEL MES DE LA FECHA INDICADA.
*@param FECHA.
*@return FECHA FINAL DEL MES.
*/
CREATE OR REPLACE FUNCTION SII.LASTDATEOFMONTH(DATE) RETURNS DATE AS '
SELECT CAST(date_trunc(''month'', $1) + interval ''1 month''
- interval ''1 day'' as date);
' LANGUAGE sql;

CREATE OR REPLACE FUNCTION SII.F_FIRSTDATEOFMONTH(
	IN IN_FECHA DATE
) 
RETURNS DATE AS 
$$
DECLARE
	TMP_FECHA DATE;	
	TMP_1 VARCHAR;
BEGIN
	TMP_FECHA := CURRENT_DATE;
	TMP_1:= TO_CHAR(IN_FECHA,'MM/YYYY'); 
	SELECT TO_DATE('01/'||TMP_1,'DD/MM/YYYY') INTO TMP_FECHA;
	RETURN TMP_FECHA;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;

/**
*GENERA LOS INDICES DE LOS TURISTAS/TRANSEUNTES QUE ESTAN EN LA PROVINCIA MAS DE 90 DIAS.
*EL CALCULO ESTA BASADO EN LA REGLA DE VALIDACION DE TURISTAS/TRANSEUNTES PERMITIDOS, LA UNICA DIFERENCIA ES QUE SE TRATA LOS RESULTADOS PARA OBTENER UN ARRAY.
*@param IN_FECHA_INICIAL FECHA INICIAL.
*@param IN_FECHA_FINAL FECHA FINAL.
*@return ARRAY CON INFORMACION DEL INDICE.
*/
CREATE OR REPLACE FUNCTION SII.F_GENERA_INDICE_TURISTAS_90_DIAS(
IN IN_FECHA_INICIAL DATE,
IN IN_FECHA_FINAL DATE
)RETURNS text[][] AS
$$
DECLARE	
	TMP_CRTST_CODIGO VARCHAR(20);
	TMP_NUMERO_MESES NUMERIC;
	TMP_DIAS_ADICIONAL NUMERIC;
	RISLA RECORD;
	INDICE_90 text[][];
	TMP_INDICE_90 text[][];	
	TMP_FECHA_MENSUAL DATE;
	TMP_FECHA DATE;
	TMP_ANIO NUMERIC;
	INDICE_ISLA NUMERIC;
	TMP_DIAS_PERMITIDOS NUMERIC;
	TMP_MES VARCHAR;
	MES_INDEX INT;
BEGIN 
	TMP_NUMERO_MESES:=0;
	TMP_DIAS_ADICIONAL:=0;
	TMP_FECHA_MENSUAL:=CURRENT_DATE;
	TMP_FECHA := IN_FECHA_INICIAL; 
	TMP_ANIO := 0;
	TMP_MES:='';
	INDICE_ISLA:=0;
	TMP_DIAS_PERMITIDOS :=0;
	INDICE_90:=ARRAY[['','','','']];
	MES_INDEX:=0;
	
	SELECT CGCNF_VALOR_NUMERICO INTO TMP_DIAS_PERMITIDOS FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF18';
					
	TMP_NUMERO_MESES:=(EXTRACT(YEAR FROM AGE(IN_FECHA_FINAL,IN_FECHA_INICIAL))*12)+EXTRACT(MONTH FROM AGE(IN_FECHA_FINAL,IN_FECHA_INICIAL));
	TMP_DIAS_ADICIONAL:=EXTRACT(DAYS FROM AGE(IN_FECHA_FINAL,IN_FECHA_INICIAL));
	IF(TMP_DIAS_ADICIONAL IS NOT NULL AND TMP_DIAS_ADICIONAL > 0)THEN
		TMP_NUMERO_MESES:=TMP_NUMERO_MESES+1;
	END IF;
	
	--RECORRIDO DE LAS ISLAS PARA OBTENER LOS INDICES DE CADA UNA DE LAS ISLAS
	FOR RISLA IN SELECT CISLA_CODIGO,CISLA_NOMBRE FROM SII.CGG_ISLA LOOP	
		--RECORRIDO DE MESES ENTRE LAS FECHA ESPECIFICADAS
		TMP_FECHA := IN_FECHA_INICIAL;
		FOR MES_INDEX IN 0..TMP_NUMERO_MESES LOOP					
			TMP_FECHA_MENSUAL:= SII.LASTDATEOFMONTH(TMP_FECHA);			
			TMP_MES:=TO_CHAR(TMP_FECHA_MENSUAL,'TMMONTH');
			TMP_ANIO:=EXTRACT(YEAR FROM TMP_FECHA_MENSUAL);
			
			/*OBTIENE EL INDICE DE TURISTAS/TRANSEUNTES QUE EXEDIERON EL NUMERO DE DIAS PERMITIDOS EN GALAPAGOS.
			SE SELECCIONA POR LA ISLA CON CORTE A UN MES EN PARTICULAR.
			ESTA CONSULTA FUE TOMADA DE LA REGLA DE VALIDACION DE TCT PARA INGRESO DE TURISTAS/TRANSEUNTES.*/
			INDICE_ISLA:=0;
			
			SELECT
				COALESCE(COUNT(CRPER_NUM_DOC_IDENTIFIC),0) TOTAL_INDICE INTO INDICE_ISLA
			FROM(
				SELECT 					
						CRPER_NUM_DOC_IDENTIFIC,                  					
						SUM(DIAS) DIAS
				FROM (
					SELECT				
						PER.CRPER_NUM_DOC_IDENTIFIC,                  			
						(SELECT U.CISLA_CODIGO FROM SII.CGG_USUARIO U WHERE U.CUSU_NOMBRE_USUARIO=MOV.CRMOV_USUARIO_INSERT) CISLA_CODIGO,			 			
						F_RESIDENCIA_PERSONA(PER.CRPER_CODIGO,MOV.CRRSD_CODIGO) RESIDENCIA,
						(SELECT DATE(MVD.CRMOV_FECHA_VIAJE)-DATE(MOV.CRMOV_FECHA_VIAJE)) AS DIAS
						FROM SII.CGG_RES_MOVILIDAD MOV 
						INNER JOIN SII.CGG_RES_MOVILIDAD MVD ON MOV.CRPER_CODIGO = MVD.CRPER_CODIGO AND MVD.CRMOV_TIPO_OPERACION = 1 AND MVD.CRMOV_FECHA_VIAJE > MOV.CRMOV_FECHA_VIAJE AND MVD.CRMOV_ESTADO 
						INNER JOIN SII.CGG_RES_PERSONA PER ON MOV.CRPER_CODIGO = PER.CRPER_CODIGO
						WHERE MOV.CRMOV_TIPO_OPERACION = 0					
							AND MOV.CRMOV_FECHA_VIAJE < MVD.CRMOV_FECHA_VIAJE
							AND MOV.CRMOV_ESTADO
							AND MOV.CRMOV_SOPORTE=FALSE
							AND MVD.CRMOV_FECHA_VIAJE >= (TMP_FECHA_MENSUAL-365)
							AND MVD.CRMOV_FECHA_VIAJE = (SELECT MOV2.CRMOV_FECHA_VIAJE 
								FROM CGG_RES_MOVILIDAD MOV2 
								WHERE MOV2.CRMOV_FECHA_VIAJE > MOV.CRMOV_FECHA_VIAJE AND 
								MOV2.CRPER_CODIGO = PER.CRPER_CODIGO AND 
								MOV2.CRMOV_TIPO_OPERACION = 1 
								ORDER BY MOV2.CRMOV_FECHA_VIAJE LIMIT 1)
						ORDER BY MOV.CRMOV_FECHA_VIAJE,MVD.CRMOV_FECHA_VIAJE,MOV.CRMOV_TIPO_OPERACION ASC
					) AS A
					WHERE A.RESIDENCIA IS NOT NULL AND		
					CISLA_CODIGO = RISLA.CISLA_CODIGO
					GROUP BY CRPER_NUM_DOC_IDENTIFIC
				)AS B
				WHERE B.DIAS >= TMP_DIAS_PERMITIDOS;
						
				--ASENTAMIENTO DEL INDICE EN EL VECTOR				
				INDICE_90 := ARRAY_CAT(INDICE_90,ARRAY[TMP_ANIO::TEXT,TMP_MES,RISLA.CISLA_NOMBRE,INDICE_ISLA::TEXT]);
				
			TMP_FECHA := TMP_FECHA_MENSUAL + interval '1 MONTH';
		END LOOP;	
	END LOOP;
	RETURN INDICE_90;		
END
$$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;


