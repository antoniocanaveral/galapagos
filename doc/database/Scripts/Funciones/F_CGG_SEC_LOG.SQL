/**
* FUNCION SII.F_CGG_SEC_LOG_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_SEC_LOG
* @param IN_CSLOG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LOG
* @param IN_CSLOG_FECHA FECHA DEL CAMBIO DE INFORMACION
* @param IN_CSLOG_USUARIO USUARIO QUE REALIZO LA MODIFICACION
* @param IN_CSLOG_PROCESO NOMBRE DE LA TABLA QUE SUFRIO LA MODIFICACION
* @param IN_CSLOG_TIPO TAREA QUE REALIZO SOBRE LOS DATOS(INSERT, UPDATE, DELETE)
* @param IN_CSLOG_MENSAJE REGISTRO EN FORMATO XML CON LOS DATOS ANTIGUOS
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_LOG_INSERT(
IN IN_CSLOG_CODIGO SII.CGG_SEC_LOG.CSLOG_CODIGO%TYPE, 
IN IN_CSLOG_FECHA SII.CGG_SEC_LOG.CSLOG_FECHA%TYPE, 
IN IN_CSLOG_USUARIO SII.CGG_SEC_LOG.CSLOG_USUARIO%TYPE, 
IN IN_CSLOG_PROCESO SII.CGG_SEC_LOG.CSLOG_PROCESO%TYPE, 
IN IN_CSLOG_TIPO SII.CGG_SEC_LOG.CSLOG_TIPO%TYPE, 
IN IN_CSLOG_MENSAJE SII.CGG_SEC_LOG.CSLOG_MENSAJE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CSLOG_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_SEC_LOG','CSLOG_CODIGO','CSLOG') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CSLOG_CODIGO;
	END IF;
	INSERT INTO SII.CGG_SEC_LOG(
		CSLOG_CODIGO, 
		CSLOG_FECHA, 
		CSLOG_USUARIO, 
		CSLOG_PROCESO, 
		CSLOG_TIPO, 
		CSLOG_MENSAJE
	) VALUES (
		OUT_KEY, 
		IN_CSLOG_FECHA, 
		IN_CSLOG_USUARIO, 
		IN_CSLOG_PROCESO, 
		IN_CSLOG_TIPO, 
		IN_CSLOG_MENSAJE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_LOG_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_SEC_LOG
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_LOG_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSLOG_CODIGO, 
		CSLOG_FECHA, 
		CSLOG_USUARIO, 
		CSLOG_PROCESO, 
		CSLOG_TIPO, 
		CSLOG_MENSAJE
	FROM SII.CGG_SEC_LOG;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_SEC_LOG__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SEC_LOG
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_LOG_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CSLOG_CODIGO, 
		CSLOG_FECHA, 
		CSLOG_USUARIO, 
		CSLOG_PROCESO, 
		CSLOG_TIPO, 
		CSLOG_MENSAJE
	FROM SII.CGG_SEC_LOG
	WHERE SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CSLOG_CODIGO IS NULL THEN '''' ELSE CSLOG_CODIGO END ||'' ''||CASE WHEN CSLOG_FECHA IS NULL THEN CURRENT_TIMESTAMP ELSE CSLOG_FECHA END ||'' ''||CASE WHEN CSLOG_USUARIO IS NULL THEN '''' ELSE CSLOG_USUARIO END ||'' ''||CASE WHEN CSLOG_PROCESO IS NULL THEN '''' ELSE CSLOG_PROCESO END ||'' ''||CASE WHEN CSLOG_TIPO IS NULL THEN '''' ELSE CSLOG_TIPO END ||'' ''||CASE WHEN CSLOG_MENSAJE IS NULL THEN '''' ELSE CSLOG_MENSAJE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_LOG_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_LOG
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_LOG_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_LOG;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_LOG_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_LOG
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_LOG_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_LOG
	WHERE SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CSLOG_CODIGO IS NULL THEN '''' ELSE CSLOG_CODIGO END ||' '||CASE WHEN CSLOG_FECHA IS NULL THEN CURRENT_TIMESTAMP ELSE CSLOG_FECHA END ||' '||CASE WHEN CSLOG_USUARIO IS NULL THEN '''' ELSE CSLOG_USUARIO END ||' '||CASE WHEN CSLOG_PROCESO IS NULL THEN '''' ELSE CSLOG_PROCESO END ||' '||CASE WHEN CSLOG_TIPO IS NULL THEN '''' ELSE CSLOG_TIPO END ||' '||CASE WHEN CSLOG_MENSAJE IS NULL THEN '''' ELSE CSLOG_MENSAJE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_LOG_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_SEC_LOG
* @param IN_CSLOG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LOG
* @param IN_CSLOG_FECHA FECHA DEL CAMBIO DE INFORMACION
* @param IN_CSLOG_USUARIO USUARIO QUE REALIZO LA MODIFICACION
* @param IN_CSLOG_PROCESO NOMBRE DE LA TABLA QUE SUFRIO LA MODIFICACION
* @param IN_CSLOG_TIPO TAREA QUE REALIZO SOBRE LOS DATOS(INSERT, UPDATE, DELETE)
* @param IN_CSLOG_MENSAJE REGISTRO EN FORMATO XML CON LOS DATOS ANTIGUOS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_LOG_UPDATE(
IN IN_CSLOG_CODIGO SII.CGG_SEC_LOG.CSLOG_CODIGO%TYPE, 
IN IN_CSLOG_FECHA SII.CGG_SEC_LOG.CSLOG_FECHA%TYPE, 
IN IN_CSLOG_USUARIO SII.CGG_SEC_LOG.CSLOG_USUARIO%TYPE, 
IN IN_CSLOG_PROCESO SII.CGG_SEC_LOG.CSLOG_PROCESO%TYPE, 
IN IN_CSLOG_TIPO SII.CGG_SEC_LOG.CSLOG_TIPO%TYPE, 
IN IN_CSLOG_MENSAJE SII.CGG_SEC_LOG.CSLOG_MENSAJE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_LOG SET
		CSLOG_FECHA = IN_CSLOG_FECHA, 
		CSLOG_USUARIO = IN_CSLOG_USUARIO, 
		CSLOG_PROCESO = IN_CSLOG_PROCESO, 
		CSLOG_TIPO = IN_CSLOG_TIPO, 
		CSLOG_MENSAJE = IN_CSLOG_MENSAJE
	WHERE
		CSLOG_CODIGO = IN_CSLOG_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_LOG_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_SEC_LOG
* @param IN_CSLOG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LOG
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_LOG_SELECT(
IN IN_CSLOG_CODIGO SII.CGG_SEC_LOG.CSLOG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSLOG_CODIGO, 
		CSLOG_FECHA, 
		CSLOG_USUARIO, 
		CSLOG_PROCESO, 
		CSLOG_TIPO, 
		CSLOG_MENSAJE
	FROM SII.CGG_SEC_LOG
	WHERE 
		CSLOG_CODIGO = IN_CSLOG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_LOG_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_SEC_LOG
* @param IN_CSLOG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LOG
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_LOG_DELETE(
IN IN_CSLOG_CODIGO SII.CGG_SEC_LOG.CSLOG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_LOG
	WHERE
		CSLOG_CODIGO = IN_CSLOG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_LOG_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_SEC_LOG
* @param IN_CSLOG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LOG
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_LOG_DELETE_SOFT(
IN IN_CSLOG_CODIGO SII.CGG_SEC_LOG.CSLOG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_LOG SET
		CSLOG_ESTADO = FALSE
	WHERE
		CSLOG_CODIGO = IN_CSLOG_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

