/**
* FUNCION SII.F_CGG_RES_ENTIDAD_FINANCIERA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_ENTIDAD_FINANCIERA
* @param IN_CRETF_CODIGO IDENTIFICATIVO UNICO DE REGSITRO
* @param IN_CRETF_NOMBRE_ENTIDAD NOMBRE DE LA ENTIDAD FINANCIERA
* @param IN_CRETF_DESCRIPCION DESCRIPCION DE LA ENTIDAD BANCARIA
* @param IN_CRETF_ESTADO ESTADO DEL REGISTRO
* @param IN_CRETF_USUARIO_INSERT USUARIO QUE REGISTRO LA INFORMACION
* @param IN_CRETF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ENTIDAD_FINANCIERA_INSERT(
IN IN_CRETF_CODIGO SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_CODIGO%TYPE, 
IN IN_CRETF_NOMBRE_ENTIDAD SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_NOMBRE_ENTIDAD%TYPE, 
IN IN_CRETF_DESCRIPCION SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_DESCRIPCION%TYPE, 
IN IN_CRETF_ESTADO SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_ESTADO%TYPE, 
IN IN_CRETF_USUARIO_INSERT SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_USUARIO_INSERT%TYPE, 
IN IN_CRETF_USUARIO_UPDATE SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRETF_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_ENTIDAD_FINANCIERA','CRETF_CODIGO','CRETF') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRETF_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_ENTIDAD_FINANCIERA(
		CRETF_CODIGO, 
		CRETF_NOMBRE_ENTIDAD, 
		CRETF_DESCRIPCION, 
		CRETF_ESTADO, 
		CRETF_FECHA_INSERT, 
		CRETF_USUARIO_INSERT, 
		CRETF_FECHA_UPDATE, 
		CRETF_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRETF_NOMBRE_ENTIDAD, 
		IN_CRETF_DESCRIPCION, 
		IN_CRETF_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRETF_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRETF_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ENTIDAD_FINANCIERA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_ENTIDAD_FINANCIERA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ENTIDAD_FINANCIERA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRETF_CODIGO, 
		CRETF_NOMBRE_ENTIDAD, 
		CRETF_DESCRIPCION, 
		CRETF_ESTADO, 
		CRETF_FECHA_INSERT, 
		CRETF_USUARIO_INSERT, 
		CRETF_FECHA_UPDATE, 
		CRETF_USUARIO_UPDATE
	FROM SII.CGG_RES_ENTIDAD_FINANCIERA
	WHERE CRETF_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ENTIDAD_FINANCIERA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_ENTIDAD_FINANCIERA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ENTIDAD_FINANCIERA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRETF_CODIGO, 
		CRETF_NOMBRE_ENTIDAD, 
		CRETF_DESCRIPCION, 
		CRETF_ESTADO, 
		CRETF_FECHA_INSERT, 
		CRETF_USUARIO_INSERT, 
		CRETF_FECHA_UPDATE, 
		CRETF_USUARIO_UPDATE
	FROM SII.CGG_RES_ENTIDAD_FINANCIERA
	WHERE CRETF_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRETF_NOMBRE_ENTIDAD, '''')||'' ''||COALESCE(CRETF_DESCRIPCION, '''')||'' ''||COALESCE(CRETF_ESTADO, FALSE)||'' ''||COALESCE(CRETF_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRETF_USUARIO_INSERT, '''')||'' ''||COALESCE(CRETF_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRETF_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ENTIDAD_FINANCIERA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_ENTIDAD_FINANCIERA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ENTIDAD_FINANCIERA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_ENTIDAD_FINANCIERA
	WHERE CRETF_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ENTIDAD_FINANCIERA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_ENTIDAD_FINANCIERA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ENTIDAD_FINANCIERA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_ENTIDAD_FINANCIERA
	WHERE CRETF_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRETF_NOMBRE_ENTIDAD, '''')||' '||COALESCE(CRETF_DESCRIPCION, '''')||' '||COALESCE(CRETF_ESTADO, FALSE)||' '||COALESCE(CRETF_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRETF_USUARIO_INSERT, '''')||' '||COALESCE(CRETF_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRETF_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ENTIDAD_FINANCIERA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_ENTIDAD_FINANCIERA
* @param IN_CRETF_CODIGO IDENTIFICATIVO UNICO DE REGSITRO
* @param IN_CRETF_NOMBRE_ENTIDAD NOMBRE DE LA ENTIDAD FINANCIERA
* @param IN_CRETF_DESCRIPCION DESCRIPCION DE LA ENTIDAD BANCARIA
* @param IN_CRETF_ESTADO ESTADO DEL REGISTRO
* @param IN_CRETF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ENTIDAD_FINANCIERA_UPDATE(
IN IN_CRETF_CODIGO SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_CODIGO%TYPE, 
IN IN_CRETF_NOMBRE_ENTIDAD SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_NOMBRE_ENTIDAD%TYPE, 
IN IN_CRETF_DESCRIPCION SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_DESCRIPCION%TYPE, 
IN IN_CRETF_ESTADO SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_ESTADO%TYPE, 
IN IN_CRETF_USUARIO_UPDATE SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ENTIDAD_FINANCIERA SET
		CRETF_NOMBRE_ENTIDAD = IN_CRETF_NOMBRE_ENTIDAD, 
		CRETF_DESCRIPCION = IN_CRETF_DESCRIPCION, 
		CRETF_ESTADO = IN_CRETF_ESTADO, 
		CRETF_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRETF_USUARIO_UPDATE = IN_CRETF_USUARIO_UPDATE
	WHERE
		CRETF_CODIGO = IN_CRETF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ENTIDAD_FINANCIERA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_ENTIDAD_FINANCIERA
* @param IN_CRETF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ENTIDAD_FINANCIERA_SELECT(
IN IN_CRETF_CODIGO SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRETF_CODIGO, 
		CRETF_NOMBRE_ENTIDAD, 
		CRETF_DESCRIPCION, 
		CRETF_ESTADO, 
		CRETF_FECHA_INSERT, 
		CRETF_USUARIO_INSERT, 
		CRETF_FECHA_UPDATE, 
		CRETF_USUARIO_UPDATE
	FROM SII.CGG_RES_ENTIDAD_FINANCIERA
	WHERE CRETF_ESTADO = TRUE AND 
		CRETF_CODIGO = IN_CRETF_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ENTIDAD_FINANCIERA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_ENTIDAD_FINANCIERA
* @param IN_CRETF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ENTIDAD_FINANCIERA_DELETE(
IN IN_CRETF_CODIGO SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ENTIDAD_FINANCIERA
	WHERE
		CRETF_CODIGO = IN_CRETF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ENTIDAD_FINANCIERA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_ENTIDAD_FINANCIERA
* @param IN_CRETF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ENTIDAD_FINANCIERA_DELETE_SOFT(
IN IN_CRETF_CODIGO SII.CGG_RES_ENTIDAD_FINANCIERA.CRETF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ENTIDAD_FINANCIERA SET
		CRETF_ESTADO = FALSE
	WHERE
		CRETF_CODIGO = IN_CRETF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

