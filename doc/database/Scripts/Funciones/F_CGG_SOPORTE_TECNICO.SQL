/**
* FUNCION SII.F_CGG_SOPORTE_TECNICO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_SOPORTE_TECNICO
* @param IN_CSOTE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SOPORTE TECNICO
* @param IN_CSOTE_ASUNTO NOMBRE DEL SOPORTE TECNICO
* @param IN_CSOTE_NUMERO NUMERO DE SOPORTE TECNICO
* @param IN_CSOTE_DESCRIPCION DESCRIPCION DEL SOPORTE TECNICO
* @param IN_CSOTE_CONTACTO CAMPO QUE REGISTRA EL  EL CORREO ELECTRONICO O NUEMRO DE TELEFONO
* @param IN_CSOTE_ATENDIDO CAMPO QUE REGISTRA SE SE ATENDIO A UN SOPRTE TECNICO
0 - NO SOLUCIONADO
1 - SOLUCIONADO
2 - EN ESPERA
* @param IN_CSOTE_ESTADO ESTADO DEL REGISTRO

* @param IN_CSOTE_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CSOTE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SOPORTE_TECNICO_INSERT(
IN IN_CSOTE_CODIGO SII.CGG_SOPORTE_TECNICO.CSOTE_CODIGO%TYPE, 
IN IN_CSOTE_ASUNTO SII.CGG_SOPORTE_TECNICO.CSOTE_ASUNTO%TYPE, 
IN IN_CSOTE_NUMERO SII.CGG_SOPORTE_TECNICO.CSOTE_NUMERO%TYPE, 
IN IN_CSOTE_DESCRIPCION SII.CGG_SOPORTE_TECNICO.CSOTE_DESCRIPCION%TYPE, 
IN IN_CSOTE_CONTACTO SII.CGG_SOPORTE_TECNICO.CSOTE_CONTACTO%TYPE, 
IN IN_CSOTE_ATENDIDO SII.CGG_SOPORTE_TECNICO.CSOTE_ATENDIDO%TYPE, 
IN IN_CSOTE_ESTADO SII.CGG_SOPORTE_TECNICO.CSOTE_ESTADO%TYPE, 
IN IN_CSOTE_USUARIO_INSERT SII.CGG_SOPORTE_TECNICO.CSOTE_USUARIO_INSERT%TYPE, 
IN IN_CSOTE_USUARIO_UPDATE SII.CGG_SOPORTE_TECNICO.CSOTE_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CSOTE_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_SOPORTE_TECNICO','CSOTE_CODIGO','CSOTE') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CSOTE_CODIGO;
	END IF;
	INSERT INTO SII.CGG_SOPORTE_TECNICO(
		CSOTE_CODIGO, 
		CSOTE_ASUNTO, 
		CSOTE_NUMERO, 
		CSOTE_DESCRIPCION, 
		CSOTE_CONTACTO, 
		CSOTE_ATENDIDO, 
		CSOTE_ESTADO, 
		CSOTE_FECHA_INSERT, 
		CSOTE_USUARIO_INSERT, 
		CSOTE_FECHA_UPDATE, 
		CSOTE_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CSOTE_ASUNTO, 
		IN_CSOTE_NUMERO, 
		IN_CSOTE_DESCRIPCION, 
		IN_CSOTE_CONTACTO, 
		IN_CSOTE_ATENDIDO, 
		IN_CSOTE_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CSOTE_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CSOTE_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SOPORTE_TECNICO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_SOPORTE_TECNICO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SOPORTE_TECNICO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSOTE_CODIGO, 
		CSOTE_ASUNTO, 
		CSOTE_NUMERO, 
		CSOTE_DESCRIPCION, 
		CSOTE_CONTACTO, 
		CSOTE_ATENDIDO, 
		CSOTE_ESTADO, 
		CSOTE_FECHA_INSERT, 
		CSOTE_USUARIO_INSERT, 
		CSOTE_FECHA_UPDATE, 
		CSOTE_USUARIO_UPDATE
	FROM SII.CGG_SOPORTE_TECNICO
	WHERE CSOTE_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_SOPORTE_TECNICO__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SOPORTE_TECNICO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SOPORTE_TECNICO_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CSOTE_CODIGO, 
		CSOTE_ASUNTO, 
		CSOTE_NUMERO, 
		CSOTE_DESCRIPCION, 
		CSOTE_CONTACTO, 
		CSOTE_ATENDIDO, 
		CSOTE_ESTADO, 
		CSOTE_FECHA_INSERT, 
		CSOTE_USUARIO_INSERT, 
		CSOTE_FECHA_UPDATE, 
		CSOTE_USUARIO_UPDATE
	FROM SII.CGG_SOPORTE_TECNICO
	WHERE CSOTE_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CSOTE_CODIGO IS NULL THEN '''' ELSE CSOTE_CODIGO END ||'' ''||CASE WHEN CSOTE_ASUNTO IS NULL THEN '''' ELSE CSOTE_ASUNTO END ||'' ''||CASE WHEN CSOTE_NUMERO IS NULL THEN '''' ELSE CSOTE_NUMERO END ||'' ''||CASE WHEN CSOTE_DESCRIPCION IS NULL THEN '''' ELSE CSOTE_DESCRIPCION END ||'' ''||CASE WHEN CSOTE_CONTACTO IS NULL THEN '''' ELSE CSOTE_CONTACTO END ||'' ''||CASE WHEN CSOTE_ATENDIDO IS NULL THEN 0 ELSE CSOTE_ATENDIDO END ||'' ''||CASE WHEN CSOTE_ESTADO IS NULL THEN FALSE ELSE CSOTE_ESTADO END ||'' ''||CASE WHEN CSOTE_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CSOTE_FECHA_INSERT END ||'' ''||CASE WHEN CSOTE_USUARIO_INSERT IS NULL THEN '''' ELSE CSOTE_USUARIO_INSERT END ||'' ''||CASE WHEN CSOTE_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CSOTE_FECHA_UPDATE END ||'' ''||CASE WHEN CSOTE_USUARIO_UPDATE IS NULL THEN '''' ELSE CSOTE_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SOPORTE_TECNICO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SOPORTE_TECNICO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SOPORTE_TECNICO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SOPORTE_TECNICO
	WHERE CSOTE_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SOPORTE_TECNICO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SOPORTE_TECNICO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SOPORTE_TECNICO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SOPORTE_TECNICO
	WHERE CSOTE_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CSOTE_CODIGO IS NULL THEN '''' ELSE CSOTE_CODIGO END ||' '||CASE WHEN CSOTE_ASUNTO IS NULL THEN '''' ELSE CSOTE_ASUNTO END ||' '||CASE WHEN CSOTE_NUMERO IS NULL THEN '''' ELSE CSOTE_NUMERO END ||' '||CASE WHEN CSOTE_DESCRIPCION IS NULL THEN '''' ELSE CSOTE_DESCRIPCION END ||' '||CASE WHEN CSOTE_CONTACTO IS NULL THEN '''' ELSE CSOTE_CONTACTO END ||' '||CASE WHEN CSOTE_ATENDIDO IS NULL THEN 0 ELSE CSOTE_ATENDIDO END ||' '||CASE WHEN CSOTE_ESTADO IS NULL THEN FALSE ELSE CSOTE_ESTADO END ||' '||CASE WHEN CSOTE_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CSOTE_FECHA_INSERT END ||' '||CASE WHEN CSOTE_USUARIO_INSERT IS NULL THEN '''' ELSE CSOTE_USUARIO_INSERT END ||' '||CASE WHEN CSOTE_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CSOTE_FECHA_UPDATE END ||' '||CASE WHEN CSOTE_USUARIO_UPDATE IS NULL THEN '''' ELSE CSOTE_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SOPORTE_TECNICO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_SOPORTE_TECNICO
* @param IN_CSOTE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SOPORTE TECNICO
* @param IN_CSOTE_ASUNTO NOMBRE DEL SOPORTE TECNICO
* @param IN_CSOTE_NUMERO NUMERO DE SOPORTE TECNICO
* @param IN_CSOTE_DESCRIPCION DESCRIPCION DEL SOPORTE TECNICO
* @param IN_CSOTE_CONTACTO CAMPO QUE REGISTRA EL  EL CORREO ELECTRONICO O NUEMRO DE TELEFONO
* @param IN_CSOTE_ATENDIDO CAMPO QUE REGISTRA SE SE ATENDIO A UN SOPRTE TECNICO
0 - NO SOLUCIONADO
1 - SOLUCIONADO
2 - EN ESPERA
* @param IN_CSOTE_ESTADO ESTADO DEL REGISTRO

* @param IN_CSOTE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SOPORTE_TECNICO_UPDATE(
IN IN_CSOTE_CODIGO SII.CGG_SOPORTE_TECNICO.CSOTE_CODIGO%TYPE, 
IN IN_CSOTE_ASUNTO SII.CGG_SOPORTE_TECNICO.CSOTE_ASUNTO%TYPE, 
IN IN_CSOTE_NUMERO SII.CGG_SOPORTE_TECNICO.CSOTE_NUMERO%TYPE, 
IN IN_CSOTE_DESCRIPCION SII.CGG_SOPORTE_TECNICO.CSOTE_DESCRIPCION%TYPE, 
IN IN_CSOTE_CONTACTO SII.CGG_SOPORTE_TECNICO.CSOTE_CONTACTO%TYPE, 
IN IN_CSOTE_ATENDIDO SII.CGG_SOPORTE_TECNICO.CSOTE_ATENDIDO%TYPE, 
IN IN_CSOTE_ESTADO SII.CGG_SOPORTE_TECNICO.CSOTE_ESTADO%TYPE, 
IN IN_CSOTE_USUARIO_UPDATE SII.CGG_SOPORTE_TECNICO.CSOTE_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SOPORTE_TECNICO SET
		CSOTE_ASUNTO = IN_CSOTE_ASUNTO, 
		CSOTE_NUMERO = IN_CSOTE_NUMERO, 
		CSOTE_DESCRIPCION = IN_CSOTE_DESCRIPCION, 
		CSOTE_CONTACTO = IN_CSOTE_CONTACTO, 
		CSOTE_ATENDIDO = IN_CSOTE_ATENDIDO, 
		CSOTE_ESTADO = IN_CSOTE_ESTADO, 
		CSOTE_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CSOTE_USUARIO_UPDATE = IN_CSOTE_USUARIO_UPDATE
	WHERE
		CSOTE_CODIGO = IN_CSOTE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SOPORTE_TECNICO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_SOPORTE_TECNICO
* @param IN_CSOTE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SOPORTE TECNICO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SOPORTE_TECNICO_SELECT(
IN IN_CSOTE_CODIGO SII.CGG_SOPORTE_TECNICO.CSOTE_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSOTE_CODIGO, 
		CSOTE_ASUNTO, 
		CSOTE_NUMERO, 
		CSOTE_DESCRIPCION, 
		CSOTE_CONTACTO, 
		CSOTE_ATENDIDO, 
		CSOTE_ESTADO, 
		CSOTE_FECHA_INSERT, 
		CSOTE_USUARIO_INSERT, 
		CSOTE_FECHA_UPDATE, 
		CSOTE_USUARIO_UPDATE
	FROM SII.CGG_SOPORTE_TECNICO
	WHERE CSOTE_ESTADO = TRUE AND 
		CSOTE_CODIGO = IN_CSOTE_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SOPORTE_TECNICO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_SOPORTE_TECNICO
* @param IN_CSOTE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SOPORTE TECNICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SOPORTE_TECNICO_DELETE(
IN IN_CSOTE_CODIGO SII.CGG_SOPORTE_TECNICO.CSOTE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SOPORTE_TECNICO
	WHERE
		CSOTE_CODIGO = IN_CSOTE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SOPORTE_TECNICO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_SOPORTE_TECNICO
* @param IN_CSOTE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SOPORTE TECNICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SOPORTE_TECNICO_DELETE_SOFT(
IN IN_CSOTE_CODIGO SII.CGG_SOPORTE_TECNICO.CSOTE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SOPORTE_TECNICO SET
		CSOTE_ESTADO = FALSE
	WHERE
		CSOTE_CODIGO = IN_CSOTE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

