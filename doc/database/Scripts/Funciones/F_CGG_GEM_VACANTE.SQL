/**
* FUNCION SII.F_CGG_GEM_VACANTE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_VACANTE
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VACANTE
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CSCTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECTOR PRODUCTIVO
* @param IN_CGTCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO CONTRATO
* @param IN_CGTSA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO SALARIO
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @param IN_CGVCN_NUMERO NUMERO SECUENCIAL UNICO DE LA VACANTE
* @param IN_CGVCN_TITULO NOMBRE IDENTIFICATIVO DE LA VACANTE
* @param IN_CGVCN_DESCRIPCION DESCRIPCION DE LA VACANTE
* @param IN_CGVCN_SALARIO MONTO OFERTADO COMO RECONOCIMIENTO POR EL TRABAJO REALIZADO
* @param IN_CGVCN_DIRECCION DIRECCION DE TRABAJO DE LA OFERTA LABORAL
* @param IN_CGVCN_FECHA_INGRESO FECHA DE INGRESO DE LA OFERTA
* @param IN_CGVCN_FECHA_PUBLICACION FECHA DE PUBLICACION DE LA OFERTA
* @param IN_CGVCN_DURACION_OFERTA TIEMPO DEFINIDO DE VIGENCIA PARA LA OFERTA (DIAS)
* @param IN_CGVCN_FECHA_EXPIRACION FECHA EXPIRACION DE LA PUBLICACION
* @param IN_CGVCN_ESTADO_OFERTA ESTADO EN EL QUE SE HALLA LA PUBLICACION DE LA VACANTE
REGISTRADA
APROBADA
ENTREVISTA
VENCIDA
FINALIZADA
* @param IN_CGVCN_NUMERO_VACANTES CANTIDAD DE VACANTES DISPONIBLES 
* @param IN_CGVCN_DURACION  DURACION DEL TRABAJO VALORES:
0 -  HORA
1 - DIA
2 - MES
3 - ANIO
* @param IN_CGVCN_DURACION_TIEMPO TIEMPO DE DURACION NUMERICAMENTE
* @param IN_CGVCN_EXPERIENCIA EXPERIENCIA MINIMA SOLICITADA 
* @param IN_CGVCN_EXISTENCIA_MANOBRA EXISTENCIA DE MANO DE OBRA EN LA PROVINCIA
0 - NO EXISTE MANO DE OBRA 
1 - EXISTENCIA DE MANO DE OBRA
* @param IN_CGVCN_NUMERO_MANOBRA NUMERO DE CERTIFICADO DE MANO DE OBRA
* @param IN_CGVCN_ANIO ANIO DEL COMUNICADO RADIAL
* @param IN_CGVCN_NUMERO_COMUNICADO NUMERO DE COMUNICADO RADIAL
* @param IN_CGVCN_OFERTA_APROBADA CAMPO QUE IDENTIFICA SI SE APROBO UNA OFERTA
0 - NO APROBADOS
1 - APROBADOS Y GENERADO COMUNICADO RADIAL
2 - OTROS
* @param IN_CGVCN_CUBIERTA ESTADO DE CONTRATACION DE LA VACANTE
* @param IN_CGVCN_JUSTIFICACION_NO_CONTRAT DETALLE DE JUSTIFICACION DE LA NO CONTRATACION DE PERSONAL PARA ESA VACANTE
* @param IN_CGVCN_ESTADO ESTADO DEL REGISTRO 

* @param IN_CGVCN_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGVCN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_INSERT_USERS(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_GEM_VACANTE.CUSU_CODIGO%TYPE, 
IN IN_CSCTP_CODIGO SII.CGG_GEM_VACANTE.CSCTP_CODIGO%TYPE, 
IN IN_CGTCN_CODIGO SII.CGG_GEM_VACANTE.CGTCN_CODIGO%TYPE, 
IN IN_CGTSA_CODIGO SII.CGG_GEM_VACANTE.CGTSA_CODIGO%TYPE, 
IN IN_CGCRG_CODIGO SII.CGG_GEM_VACANTE.CGCRG_CODIGO%TYPE, 
IN IN_CGTPR_CODIGO SII.CGG_GEM_VACANTE.CGTPR_CODIGO%TYPE, 
IN IN_CGVCN_TITULO SII.CGG_GEM_VACANTE.CGVCN_TITULO%TYPE, 
IN IN_CGVCN_ESTADO_OFERTA SII.CGG_GEM_VACANTE.CGVCN_ESTADO_OFERTA%TYPE, 
IN IN_CGVCN_DESCRIPCION SII.CGG_GEM_VACANTE.CGVCN_DESCRIPCION%TYPE, 
IN IN_CGVCN_SALARIO SII.CGG_GEM_VACANTE.CGVCN_SALARIO%TYPE, 
IN IN_CGVCN_DIRECCION SII.CGG_GEM_VACANTE.CGVCN_DIRECCION%TYPE, 
IN IN_CGVCN_FECHA_INGRESO SII.CGG_GEM_VACANTE.CGVCN_FECHA_INGRESO%TYPE, 
IN IN_CGVCN_NUMERO_VACANTES SII.CGG_GEM_VACANTE.CGVCN_NUMERO_VACANTES%TYPE, 
IN IN_CGVCN_DURACION SII.CGG_GEM_VACANTE.CGVCN_DURACION%TYPE, 
IN IN_CGVCN_DURACION_TIEMPO SII.CGG_GEM_VACANTE.CGVCN_DURACION_TIEMPO%TYPE, 
IN IN_CGVCN_EXPERIENCIA SII.CGG_GEM_VACANTE.CGVCN_EXPERIENCIA%TYPE, 
IN IN_CGVCN_ESTADO SII.CGG_GEM_VACANTE.CGVCN_ESTADO%TYPE, 
IN IN_CGVCN_USUARIO_INSERT SII.CGG_GEM_VACANTE.CGVCN_USUARIO_INSERT%TYPE, 
IN IN_CGVCN_USUARIO_UPDATE SII.CGG_GEM_VACANTE.CGVCN_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
OUT_NUMERO integer;
IN_ANIO integer;
TMP_APROBADO INT;
TMP_ISLA VARCHAR;
TMP_ESTADO INT;
BEGIN	
	OUT_NUMERO :=0;
	select to_char(current_timestamp, 'YYYY') into IN_ANIO;
	IF (UPPER(IN_CGVCN_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_VACANTE','CGVCN_CODIGO','CGVCN') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGVCN_CODIGO;
	END IF;	
	SELECT  CAST((MAX(CGVCN_NUMERO)+1) AS INTEGER)  INTO OUT_NUMERO FROM SII.CGG_GEM_VACANTE ;
	IF OUT_NUMERO IS NULL THEN
		OUT_NUMERO:=1;
	END IF;	
	
	SELECT DISTINCT CISLA.CISLA_CODIGO INTO TMP_ISLA
	FROM SII.CGG_USUARIO CUSU
	INNER JOIN SII.CGG_ISLA CISLA ON CUSU.CISLA_CODIGO=CISLA.CISLA_CODIGO
	WHERE CUSU.CUSU_ESTADO=TRUE AND CISLA.CISLA_ESTADO = TRUE AND CUSU.CUSU_CODIGO = IN_CUSU_CODIGO;
	
	----ESTADO DE LA OFERTA CUANDO ES POR CONTRATACION DIRECTA
	TMP_APROBADO :=0;
	TMP_ESTADO:=IN_CGVCN_ESTADO_OFERTA;
	IF IN_CGVCN_ESTADO_OFERTA = 9 THEN
		TMP_APROBADO := 2;
		TMP_ESTADO :=1;
	END IF;
	
	INSERT INTO SII.CGG_GEM_VACANTE(
		CGVCN_CODIGO,
		CISLA_CODIGO,
		CUSU_CODIGO, 
		CSCTP_CODIGO, 
		CGTCN_CODIGO, 
		CGTSA_CODIGO, 
		CGTPR_CODIGO,
		CGCRG_CODIGO, 
		CGVCN_NUMERO, 
		CGVCN_TITULO, 
		CGVCN_DESCRIPCION, 
		CGVCN_SALARIO, 
		CGVCN_DIRECCION, 
		CGVCN_FECHA_INGRESO, 	
		CGVCN_FECHA_PUBLICACION,
		CGVCN_ESTADO_OFERTA, 
		CGVCN_NUMERO_VACANTES, 
		CGVCN_DURACION, 
		CGVCN_DURACION_TIEMPO, 
		CGVCN_EXPERIENCIA, 
		CGVCN_ANIO,
		CGVCN_OFERTA_APROBADA, 
		CGVCN_ESTADO, 
		CGVCN_FECHA_INSERT, 
		CGVCN_USUARIO_INSERT, 
		CGVCN_FECHA_UPDATE, 
		CGVCN_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		TMP_ISLA,
		IN_CUSU_CODIGO, 		
		IN_CSCTP_CODIGO, 
		IN_CGTCN_CODIGO, 
		IN_CGTSA_CODIGO, 
		IN_CGTPR_CODIGO,
		IN_CGCRG_CODIGO, 
		OUT_NUMERO, 
		IN_CGVCN_TITULO, 
		IN_CGVCN_DESCRIPCION, 
		IN_CGVCN_SALARIO, 
		IN_CGVCN_DIRECCION, 
		IN_CGVCN_FECHA_INGRESO, 
		IN_CGVCN_FECHA_INGRESO, 
		TMP_ESTADO, 
		IN_CGVCN_NUMERO_VACANTES, 
		IN_CGVCN_DURACION, 
		IN_CGVCN_DURACION_TIEMPO, 
		IN_CGVCN_EXPERIENCIA, 
		IN_ANIO,
		TMP_APROBADO, 
		IN_CGVCN_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGVCN_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGVCN_USUARIO_UPDATE
	);
	RETURN '{"CGVCN_CODIGO":"'||OUT_KEY||'","CGVCN_NUMERO":"'|| OUT_NUMERO ||'"}';
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGVCN_CODIGO, 
		CUSU_CODIGO, 		
		CSCTP_CODIGO, 
		CGTCN_CODIGO, 
		CGTSA_CODIGO, 
		CGCRG_CODIGO, 
		CGTPR_CODIGO,
		CGVCN_NUMERO, 
		CGVCN_TITULO, 
		CGVCN_DESCRIPCION, 
		CGVCN_SALARIO, 
		CGVCN_DIRECCION, 
		CGVCN_FECHA_INGRESO, 
		CGVCN_FECHA_PUBLICACION, 
		CGVCN_DURACION_OFERTA, 
		CGVCN_FECHA_EXPIRACION, 
		CGVCN_ESTADO_OFERTA, 
		CGVCN_NUMERO_VACANTES, 
		CGVCN_DURACION, 
		CGVCN_DURACION_TIEMPO, 
		CGVCN_EXPERIENCIA, 
		CGVCN_EXISTENCIA_MANOBRA, 
		CGVCN_NUMERO_MANOBRA, 
		CGVCN_ANIO, 
		CGVCN_NUMERO_COMUNICADO, 
		CGVCN_OFERTA_APROBADA, 
		CGVCN_CUBIERTA, 
		CGVCN_JUSTIFICACION_NO_CONTRAT, 
		CGVCN_ESTADO, 
		CGVCN_FECHA_INSERT, 
		CGVCN_USUARIO_INSERT, 
		CGVCN_FECHA_UPDATE, 
		CGVCN_USUARIO_UPDATE
	FROM SII.CGG_GEM_VACANTE
	WHERE CGVCN_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGVCN_CODIGO, 
		CUSU_CODIGO, 		
		CSCTP_CODIGO, 
		CGTCN_CODIGO, 
		CGTSA_CODIGO, 
		CGTPR_CODIGO,
		CGCRG_CODIGO, 
		CGVCN_NUMERO, 
		CGVCN_TITULO, 
		CGVCN_DESCRIPCION, 
		CGVCN_SALARIO, 
		CGVCN_DIRECCION, 
		CGVCN_FECHA_INGRESO, 
		CGVCN_FECHA_PUBLICACION, 
		CGVCN_DURACION_OFERTA, 
		CGVCN_FECHA_EXPIRACION, 
		CGVCN_ESTADO_OFERTA, 
		CGVCN_NUMERO_VACANTES, 
		CGVCN_DURACION, 
		CGVCN_DURACION_TIEMPO, 
		CGVCN_EXPERIENCIA, 
		CGVCN_EXISTENCIA_MANOBRA, 
		CGVCN_NUMERO_MANOBRA, 
		CGVCN_ANIO, 
		CGVCN_NUMERO_COMUNICADO, 
		CGVCN_OFERTA_APROBADA, 
		CGVCN_CUBIERTA, 
		CGVCN_JUSTIFICACION_NO_CONTRAT, 
		CGVCN_ESTADO, 
		CGVCN_FECHA_INSERT, 
		CGVCN_USUARIO_INSERT, 
		CGVCN_FECHA_UPDATE, 
		CGVCN_USUARIO_UPDATE
	FROM SII.CGG_GEM_VACANTE
	WHERE CGVCN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGVCN_NUMERO, 0)||'' ''||COALESCE(CGVCN_TITULO, '''')||'' ''||COALESCE(CGVCN_DESCRIPCION, '''')||'' ''||COALESCE(CGVCN_SALARIO, 0)||'' ''||COALESCE(CGVCN_DIRECCION, '''')||'' ''||COALESCE(CGVCN_FECHA_INGRESO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_FECHA_PUBLICACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_DURACION_OFERTA, 0)||'' ''||COALESCE(CGVCN_FECHA_EXPIRACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_ESTADO_OFERTA, 0)||'' ''||COALESCE(CGVCN_NUMERO_VACANTES, 0)||'' ''||COALESCE(CGVCN_DURACION, 0)||'' ''||COALESCE(CGVCN_DURACION_TIEMPO, 0)||'' ''||COALESCE(CGVCN_EXPERIENCIA, '''')||'' ''||COALESCE(CGVCN_EXISTENCIA_MANOBRA, 0)||'' ''||COALESCE(CGVCN_NUMERO_MANOBRA, '''')||'' ''||COALESCE(CGVCN_ANIO, 0)||'' ''||COALESCE(CGVCN_NUMERO_COMUNICADO, '''')||'' ''||COALESCE(CGVCN_OFERTA_APROBADA, 0)||'' ''||COALESCE(CGVCN_CUBIERTA, FALSE)||'' ''||COALESCE(CGVCN_JUSTIFICACION_NO_CONTRAT, '''')||'' ''||COALESCE(CGVCN_ESTADO, FALSE)||'' ''||COALESCE(CGVCN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_USUARIO_INSERT, '''')||'' ''||COALESCE(CGVCN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_VACANTE
	WHERE CGVCN_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_VACANTE
	WHERE CGVCN_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGVCN_NUMERO, 0)||' '||COALESCE(CGVCN_TITULO, '''')||' '||COALESCE(CGVCN_DESCRIPCION, '''')||' '||COALESCE(CGVCN_SALARIO, 0)||' '||COALESCE(CGVCN_DIRECCION, '''')||' '||COALESCE(CGVCN_FECHA_INGRESO, CURRENT_TIMESTAMP)||' '||COALESCE(CGVCN_FECHA_PUBLICACION, CURRENT_TIMESTAMP)||' '||COALESCE(CGVCN_DURACION_OFERTA, 0)||' '||COALESCE(CGVCN_FECHA_EXPIRACION, CURRENT_TIMESTAMP)||' '||COALESCE(CGVCN_ESTADO_OFERTA, 0)||' '||COALESCE(CGVCN_NUMERO_VACANTES, 0)||' '||COALESCE(CGVCN_DURACION, 0)||' '||COALESCE(CGVCN_DURACION_TIEMPO, 0)||' '||COALESCE(CGVCN_EXPERIENCIA, '''')||' '||COALESCE(CGVCN_EXISTENCIA_MANOBRA, 0)||' '||COALESCE(CGVCN_NUMERO_MANOBRA, '''')||' '||COALESCE(CGVCN_ANIO, 0)||' '||COALESCE(CGVCN_NUMERO_COMUNICADO, '''')||' '||COALESCE(CGVCN_OFERTA_APROBADA, 0)||' '||COALESCE(CGVCN_CUBIERTA, FALSE)||' '||COALESCE(CGVCN_JUSTIFICACION_NO_CONTRAT, '''')||' '||COALESCE(CGVCN_ESTADO, FALSE)||' '||COALESCE(CGVCN_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGVCN_USUARIO_INSERT, '''')||' '||COALESCE(CGVCN_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGVCN_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_VACANTE
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VACANTE
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CSCTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECTOR PRODUCTIVO
* @param IN_CGTCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO CONTRATO
* @param IN_CGTSA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO SALARIO
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @param IN_CGVCN_NUMERO NUMERO SECUENCIAL UNICO DE LA VACANTE
* @param IN_CGVCN_TITULO NOMBRE IDENTIFICATIVO DE LA VACANTE
* @param IN_CGVCN_DESCRIPCION DESCRIPCION DE LA VACANTE
* @param IN_CGVCN_SALARIO MONTO OFERTADO COMO RECONOCIMIENTO POR EL TRABAJO REALIZADO
* @param IN_CGVCN_DIRECCION DIRECCION DE TRABAJO DE LA OFERTA LABORAL
* @param IN_CGVCN_FECHA_INGRESO FECHA DE INGRESO DE LA OFERTA
* @param IN_CGVCN_FECHA_PUBLICACION FECHA DE PUBLICACION DE LA OFERTA
* @param IN_CGVCN_DURACION_OFERTA TIEMPO DEFINIDO DE VIGENCIA PARA LA OFERTA (DIAS)
* @param IN_CGVCN_FECHA_EXPIRACION FECHA EXPIRACION DE LA PUBLICACION
* @param IN_CGVCN_ESTADO_OFERTA ESTADO EN EL QUE SE HALLA LA PUBLICACION DE LA VACANTE
REGISTRADA
APROBADA
VENCIDA
FINALIZADA
* @param IN_CGVCN_NUMERO_VACANTES CANTIDAD DE VACANTES DISPONIBLES 
* @param IN_CGVCN_DURACION  DURACION DEL TRABAJO VALORES:
0 -  HORA
1 - DIA
2 - MES
3 - ANIO
* @param IN_CGVCN_DURACION_TIEMPO TIEMPO DE DURACION NUMERICAMENTE
* @param IN_CGVCN_EXPERIENCIA EXPERIENCIA MINIMA SOLICITADA 
* @param IN_CGVCN_EXISTENCIA_MANOBRA EXISTENCIA DE MANO DE OBRA EN LA PROVINCIA
0 - NO EXISTE MANO DE OBRA 
1 - EXISTENCIA DE MANO DE OBRA
* @param IN_CGVCN_NUMERO_MANOBRA NUMERO DE CERTIFICADO DE MANO DE OBRA
* @param IN_CGVCN_ANIO ANIO DEL COMUNICADO RADIAL
* @param IN_CGVCN_NUMERO_COMUNICADO NUMERO DE COMUNICADO RADIAL
* @param IN_CGVCN_OFERTA_APROBADA CAMPO QUE IDENTIFICA SI SE APROBO UNA OFERTA
0 - NO APROBADOS
1 - APROBADOS Y GENERADO COMUNICADO RADIAL
2 - OTROS
* @param IN_CGVCN_CUBIERTA ESTADO DE CONTRATACION DE LA VACANTE
* @param IN_CGVCN_JUSTIFICACION_NO_CONTRAT DETALLE DE JUSTIFICACION DE LA NO CONTRATACION DE PERSONAL PARA ESA VACANTE
* @param IN_CGVCN_ESTADO ESTADO DEL REGISTRO 

* @param IN_CGVCN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_UPDATE_USERS(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE, 
IN IN_CSCTP_CODIGO SII.CGG_GEM_VACANTE.CSCTP_CODIGO%TYPE, 
IN IN_CGTCN_CODIGO SII.CGG_GEM_VACANTE.CGTCN_CODIGO%TYPE, 
IN IN_CGTSA_CODIGO SII.CGG_GEM_VACANTE.CGTSA_CODIGO%TYPE, 
IN IN_CGCRG_CODIGO SII.CGG_GEM_VACANTE.CGCRG_CODIGO%TYPE, 
IN IN_CGTPR_CODIGO SII.CGG_GEM_VACANTE.CGTPR_CODIGO%TYPE, 
IN IN_CGVCN_TITULO SII.CGG_GEM_VACANTE.CGVCN_TITULO%TYPE, 
IN IN_CGVCN_DESCRIPCION SII.CGG_GEM_VACANTE.CGVCN_DESCRIPCION%TYPE, 
IN IN_CGVCN_SALARIO SII.CGG_GEM_VACANTE.CGVCN_SALARIO%TYPE, 
IN IN_CGVCN_DIRECCION SII.CGG_GEM_VACANTE.CGVCN_DIRECCION%TYPE, 
IN IN_CGVCN_NUMERO_VACANTES SII.CGG_GEM_VACANTE.CGVCN_NUMERO_VACANTES%TYPE, 
IN IN_CGVCN_DURACION SII.CGG_GEM_VACANTE.CGVCN_DURACION%TYPE, 
IN IN_CGVCN_DURACION_TIEMPO SII.CGG_GEM_VACANTE.CGVCN_DURACION_TIEMPO%TYPE, 
IN IN_CGVCN_EXPERIENCIA SII.CGG_GEM_VACANTE.CGVCN_EXPERIENCIA%TYPE, 
IN IN_CGVCN_ESTADO SII.CGG_GEM_VACANTE.CGVCN_ESTADO%TYPE, 
IN IN_CGVCN_USUARIO_UPDATE SII.CGG_GEM_VACANTE.CGVCN_USUARIO_UPDATE%TYPE,
IN IN_CGVCN_ESTADO_OFERTA SII.CGG_GEM_VACANTE.CGVCN_ESTADO_OFERTA%TYPE
)RETURNS VOID AS
$$
BEGIN
		
	UPDATE SII.CGG_GEM_VACANTE SET
		CSCTP_CODIGO = IN_CSCTP_CODIGO, 
		CGTCN_CODIGO = IN_CGTCN_CODIGO, 
		CGTSA_CODIGO = IN_CGTSA_CODIGO, 
		CGCRG_CODIGO = IN_CGCRG_CODIGO, 
		CGTPR_CODIGO = IN_CGTPR_CODIGO, 
		CGVCN_TITULO = IN_CGVCN_TITULO, 
		CGVCN_DESCRIPCION = IN_CGVCN_DESCRIPCION, 
		CGVCN_SALARIO = IN_CGVCN_SALARIO, 
		CGVCN_DIRECCION = IN_CGVCN_DIRECCION, 
		CGVCN_NUMERO_VACANTES = IN_CGVCN_NUMERO_VACANTES, 
		CGVCN_DURACION = IN_CGVCN_DURACION, 
		CGVCN_DURACION_TIEMPO = IN_CGVCN_DURACION_TIEMPO, 
		CGVCN_EXPERIENCIA = IN_CGVCN_EXPERIENCIA, 
		CGVCN_ESTADO_OFERTA = IN_CGVCN_ESTADO_OFERTA,
		CGVCN_ESTADO = IN_CGVCN_ESTADO, 
		CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
	WHERE
		CGVCN_CODIGO = IN_CGVCN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_VACANTE_UPDATE_ESTADO
* ACTUALIZA EL CAMPO DEL ESTADO_OFERTA EN LA TABLA SII.CGG_GEM_VACANTE
* @param IN_CGVCN_ESTADO_OFERTA ESTADO DE LA OFERTA
* @param IN_CGVCN_CODIGO IDENTIFICATIVO DE LA VACANTE
* @param IN_CGVCN_USUARIO_UPDATE  IDENTIFICATIVO DEL USUARIO QUE MODIFICO LA INFORMACION.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_UPDATE_ESTADO(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE, 
IN IN_CGVCN_ESTADO_OFERTA SII.CGG_GEM_VACANTE.CGVCN_ESTADO_OFERTA%TYPE,
IN IN_CGVCN_USUARIO_UPDATE VARCHAR
)RETURNS VOID AS
$$
BEGIN		
	UPDATE SII.CGG_GEM_VACANTE SET
		CGVCN_ESTADO_OFERTA = IN_CGVCN_ESTADO_OFERTA, 
		CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
	WHERE
		CGVCN_CODIGO = IN_CGVCN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_VACANTE_REVISION
* ACTUALIZA EL CAMPO DEL ESTADO_OFERTA EN LA TABLA SII.CGG_GEM_VACANTE Y AGREGA UN MENSAGE PARA REVISION
* @param IN_CGVCN_ESTADO_OFERTA ESTADO DE LA OFERTA
* @param IN_CGVCN_CODIGO IDENTIFICATIVO DE LA VACANTE
* @param IN_CGVCN_USUARIO_UPDATE  IDENTIFICATIVO DEL USUARIO QUE MODIFICO LA INFORMACION.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_REVISION(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE, 
IN IN_CGVCN_ESTADO_OFERTA SII.CGG_GEM_VACANTE.CGVCN_ESTADO_OFERTA%TYPE,
IN IN_CGVCN_USUARIO_UPDATE VARCHAR,
IN IN_MSG_REVISION VARCHAR
)RETURNS VOID AS
$$
DECLARE 
	TMP_CRPJR_CODIGO VARCHAR;
	TMP_EMAIL RECORD;
	TMP_REC_VACANTE record;
	TMP_RETURN_CODIGO VARCHAR;
	 TMP_CADENA TEXT;
BEGIN
	UPDATE SII.CGG_GEM_VACANTE SET
		CGVCN_ESTADO_OFERTA = IN_CGVCN_ESTADO_OFERTA, 
		CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE,
		CGVCN_TITULO = IN_MSG_REVISION
	WHERE
		CGVCN_CODIGO = IN_CGVCN_CODIGO;

	SELECT
		CGVCN_NUMERO,
		CISLA_NOMBRE,
		VAC.CUSU_CODIGO,
		VAC.CGVCN_FECHA_PUBLICACION,
		SII.F_RPT_NOMBRE_OFERTANTE(VAC.CUSU_CODIGO)  AS CGVCN_OFERTANTE,
		CGVCN_NUMERO_VACANTES,
		(SELECT CV.CGCRG_NOMBRE FROM SII.CGG_GEM_CARGO CV WHERE VAC.CGCRG_CODIGO = CV.CGCRG_CODIGO) AS CGCRG_NOMBRE,
		VAC.CGVCN_DIRECCION AS CGVCN_DIRECCION ,
		VAC.CGVCN_SALARIO,
		TSA.CGTSA_NOMBRE
		FROM SII.CGG_GEM_VACANTE VAC
		INNER JOIN SII.CGG_ISLA ISL ON ISL.CISLA_CODIGO = VAC.CISLA_CODIGO
		INNER JOIN SII.CGG_GEM_TIPO_SALARIO TSA ON TSA.CGTSA_CODIGO = VAC.CGTSA_CODIGO
		WHERE VAC.CGVCN_ESTADO = TRUE
		AND VAC.CGVCN_CODIGO =IN_CGVCN_CODIGO
	INTO TMP_REC_VACANTE;

	SELECT CRPJR_CODIGO INTO TMP_CRPJR_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_CODIGO = (select cusu_codigo from sii.cgg_gem_vacante where cgvcn_codigo = IN_CGVCN_CODIGO);
	select substring(IN_MSG_REVISION,position('msg:' in IN_MSG_REVISION)+5) into TMP_CADENA;
	 SELECT SUBSTR(TMP_CADENA,0,LENGTH(TMP_CADENA)-1) INTO TMP_CADENA;
	
	IF TMP_CRPJR_CODIGO IS NULL THEN
		FOR TMP_EMAIL IN 
			(SELECT DISTINCT(CNT.CRPRC_CONTACTO) FROM SII.CGG_RES_PERSONA PRS
				INNER JOIN SII.CGG_RES_PERSONA_CONTACTO CNT ON CNT.CRPER_CODIGO = PRS.CRPER_CODIGO AND CNT.CRTCO_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF43')
				INNER JOIN SII.CGG_USUARIO US ON US.CRPER_CODIGO = CNT.CRPER_CODIGO			
				WHERE CNT.CRPRC_ESTADO AND US.CUSU_CODIGO = TMP_REC_VACANTE.CUSU_CODIGO)
		LOOP
			TMP_RETURN_CODIGO:=NULL;
			SELECT SII.F_CGG_BUZON_CORREO_INSERT(
				'KEYGEN'::VARCHAR,
				TMP_EMAIL.CRPRC_CONTACTO, 
				'OFERTA DE EMPLEO ENVIADA PARA REVISION'::VARCHAR, 
				('SU OFERTA No. '|| TMP_REC_VACANTE.CGVCN_NUMERO ||' FUE ENVIADA PARA REVISION '||'<br>OBSERVACION: '||TMP_CADENA||'<br>CARGO: '||TMP_REC_VACANTE.CGCRG_NOMBRE) ::TEXT ,
				'text/html'::VARCHAR, 
				0, 
				FALSE, 
				TRUE, 
				'@GEM@'
			) INTO TMP_RETURN_CODIGO;
		END LOOP;
	ELSE
		FOR TMP_EMAIL IN 
			(SELECT DISTINCT(CNT.CRPJC_CONTACTO) FROM SII.CGG_RES_PERSONA_JURIDICA PJR
				INNER JOIN SII.cgg_res_pjuridica_contacto CNT ON CNT.CRPJR_CODIGO = PJR.CRPJR_CODIGO AND CNT.CRTCO_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF43')
				INNER JOIN SII.CGG_USUARIO US ON US.CRPJR_CODIGO = PJR.CRPJR_CODIGO
				WHERE US.CUSU_CODIGO = TMP_REC_VACANTE.CUSU_CODIGO)
		LOOP
			TMP_RETURN_CODIGO:=NULL;
			SELECT SII.F_CGG_BUZON_CORREO_INSERT(
				'KEYGEN'::VARCHAR,
				TMP_EMAIL.CRPJC_CONTACTO, 
				'OFERTA DE EMPLEO ENVIADA PARA REVISION'::VARCHAR, 
				('SU OFERTA No. '|| TMP_REC_VACANTE.CGVCN_NUMERO ||' FUE ENVIADA PARA REVISION '||'<br>OBSERVACION: '||TMP_CADENA||'<br>CARGO: '||TMP_REC_VACANTE.CGCRG_NOMBRE) ::TEXT ,
				'text/html'::VARCHAR, 
				0, 
				FALSE, 
				TRUE, 
				'@GEM@'
			) INTO TMP_RETURN_CODIGO;
		END LOOP;

	END IF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_VACANTE
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VACANTE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_SELECT(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		VAC.CGVCN_CODIGO, 
		VAC.CUSU_CODIGO, 		
		VAC.CSCTP_CODIGO, 
		VAC.CGTCN_CODIGO, 
		VAC.CGTSA_CODIGO, 
		VAC.CGTPR_CODIGO, 
		VAC.CGCRG_CODIGO, 
		VAC.CGVCN_NUMERO, 
		VAC.CGVCN_TITULO, 
		VAC.CGVCN_DESCRIPCION, 
		VAC.CGVCN_SALARIO, 
		VAC.CGVCN_DIRECCION, 
		VAC.CGVCN_FECHA_INGRESO, 
		VAC.CGVCN_FECHA_PUBLICACION, 
		VAC.CGVCN_DURACION_OFERTA, 
		VAC.CGVCN_FECHA_EXPIRACION, 
		VAC.CGVCN_ESTADO_OFERTA, 
		VAC.CGVCN_NUMERO_VACANTES, 
		VAC.CGVCN_DURACION, 
		VAC.CGVCN_DURACION_TIEMPO, 
		VAC.CGVCN_EXPERIENCIA, 
		VAC.CGVCN_EXISTENCIA_MANOBRA, 
		VAC.CGVCN_NUMERO_MANOBRA, 
		VAC.CGVCN_ANIO, 
		VAC.CGVCN_NUMERO_COMUNICADO, 
		VAC.CGVCN_OFERTA_APROBADA, 
		VAC.CGVCN_CUBIERTA, 
		VAC.CGVCN_JUSTIFICACION_NO_CONTRAT, 
		SPR.CSCTP_NOMBRE,
		CAR.CGCRG_NOMBRE,
		AFU.CGARE_NOMBRE,
		AFU.CGARE_DESCRIPCION,
		TCO.CGTCN_DESCRIPCION,
		TSA.CGTSA_NOMBRE
	FROM SII.CGG_GEM_VACANTE VAC LEFT JOIN SII.CGG_SECTOR_PRODUCTIVO SPR ON(SPR.CSCTP_CODIGO = VAC.CSCTP_CODIGO)
	LEFT JOIN SII.CGG_GEM_CARGO CAR ON(CAR.CGCRG_CODIGO = VAC.CGCRG_CODIGO)
	LEFT JOIN SII.CGG_GEM_AREA_FUNCIONAL AFU ON(AFU.CGARE_CODIGO = CAR.CGARE_CODIGO)
	LEFT JOIN SII.CGG_GEM_TIPO_CONTRATO TCO ON(TCO.CGTCN_CODIGO = VAC.CGTCN_CODIGO)
	LEFT JOIN SII.CGG_GEM_TIPO_SALARIO TSA ON(TSA.CGTSA_CODIGO = VAC.CGTSA_CODIGO)
	WHERE VAC.CGVCN_ESTADO = TRUE AND 
		VAC.CGVCN_CODIGO = IN_CGVCN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_VACANTE
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VACANTE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_DELETE(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_VACANTE
	WHERE
		CGVCN_CODIGO = IN_CGVCN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_VACANTE
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VACANTE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_DELETE_SOFT(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_VACANTE SET
		CGVCN_ESTADO = FALSE
	WHERE
		CGVCN_CODIGO = IN_CGVCN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_APROBAR
* APRUEBA LA OFERTA, GENERA EL COMUNICADO RADIAL Y PUBLICA LA OFERTA EN LA WEB
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VACANTE
* @param IN_CGVCN_FECHA_PUBLICACION FECHA DE PUBLICACION DEL COMUNICADO RADIAL
* @param IN_CGVCN_DURACION_OFERTA TIMEPO DE PUBLICACION DE LA OFERTA EN LA WEB
* @param IN_CGVCN_FECHA_EXPIRACION FECHA DE EXPIRACION DEL COMUNICADO RADIAL
* @param IN_CGVCN_USUARIO_UPDATE USUARIO QUE ACTUALIZO EL REGISTRO
* @return NUMERIC NUMERO DE COMUNICADO RADIAL
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_APROBAR(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE,
IN IN_CGVCN_FECHA_PUBLICACION SII.CGG_GEM_VACANTE.CGVCN_FECHA_PUBLICACION%TYPE,
IN IN_CGVCN_DURACION_OFERTA SII.CGG_GEM_VACANTE.CGVCN_DURACION_OFERTA%TYPE,
IN IN_CGVCN_FECHA_EXPIRACION SII.CGG_GEM_VACANTE.CGVCN_FECHA_EXPIRACION%TYPE,
IN IN_CGVCN_USUARIO_UPDATE SII.CGG_GEM_VACANTE.CGVCN_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE	
	IN_CGVCN_NUMERO_COMUNICADO VARCHAR;
	IN_CUSU_CODIGO VARCHAR;
	TMP_ASUNTO VARCHAR;
	TMP_DESCRIPCION TEXT;
	TMP_RETURN_CODIGO VARCHAR;
	TMP_EMAIL RECORD;
BEGIN
	IN_CGVCN_NUMERO_COMUNICADO:='';
	SELECT CUSU_CODIGO INTO IN_CUSU_CODIGO FROM SII.CGG_GEM_VACANTE WHERE CGVCN_CODIGO = IN_CGVCN_CODIGO;	
	SELECT SII.F_CGG_USUARIO_GENERAR_NUMERO_COMUNICADO_RADIAL(IN_CUSU_CODIGO) INTO IN_CGVCN_NUMERO_COMUNICADO;
	IF IN_CGVCN_NUMERO_COMUNICADO IS NULL THEN
		RAISE EXCEPTION 'No se pudo general el comunicado radial, El representante legal no tiene un numero de carnet de residencia';
	END IF;
	UPDATE SII.CGG_GEM_VACANTE SET
		CGVCN_FECHA_PUBLICACION = IN_CGVCN_FECHA_PUBLICACION, 
		CGVCN_DURACION_OFERTA = IN_CGVCN_DURACION_OFERTA, 
		CGVCN_FECHA_EXPIRACION = IN_CGVCN_FECHA_EXPIRACION, 
		CGVCN_ESTADO_OFERTA = 1, /*oferta aprobada*/
		CGVCN_NUMERO_COMUNICADO = IN_CGVCN_NUMERO_COMUNICADO, 
		CGVCN_OFERTA_APROBADA = 1,	/*oferta y generado el comunicado radial*/ 
		CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP,
		CGVCN_USUARIO_INSERT = IN_CGVCN_USUARIO_UPDATE,
		CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
	WHERE
		CGVCN_CODIGO = IN_CGVCN_CODIGO;
	return IN_CGVCN_NUMERO_COMUNICADO;
			
	TMP_ASUNTO := 'Su oferta ha sido aprobada y publicada.';
	TMP_DESCRIPCION := 'Estimad@:<br/>'||
		'<BR/>Le comunicamos que su oferta ha sido aprobada y publicada exitosamente en el sistema de Gesti&oacte;n de Empleo!<br/>'
		'<br/><b>Fecha de publicaci&oacute;n:</b> '|| to_char(IN_CGVCN_FECHA_PUBLICACION, 'dd-mm-yyyy') ||
		'<br/><b>Fecha de expiraci&oacute;n:</b> '|| to_char(IN_CGVCN_FECHA_EXPIRACION, 'dd-mm-yyyy') ||
		'<br/><b>Comunicado radial No:</b> '|| TMP_REC_VACANTE.CGVCN_NUMERO_COMUNICADO ||
		'<br/>';		
	FOR TMP_EMAIL IN 
		(SELECT DISTINCT(CNT.CRPRC_CONTACTO) FROM SII.CGG_RES_PERSONA PRS
			INNER JOIN SII.CGG_RES_PERSONA_CONTACTO CNT ON CNT.CRPER_CODIGO = PRS.CRPER_CODIGO AND CNT.CRTCO_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF43')
			INNER JOIN SII.CGG_USUARIO US ON US.CRPER_CODIGO = CNT.CRPER_CODIGO			
			WHERE CNT.CRPRC_ESTADO AND US.CUSU_CODIGO = IN_CUSU_CODIGO)
	LOOP
		SELECT SII.F_CGG_BUZON_CORREO_INSERT(
			'KEYGEN'::VARCHAR,		
			TMP_EMAIL.CRPRC_CONTACTO, 
			TMP_ASUNTO, 
			TMP_DESCRIPCION, 
			'text/html'::VARCHAR, 
			0, 
			FALSE, 
			TRUE, 
			'@GEM@'				
		) INTO TMP_RETURN_CODIGO;
	END LOOP;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_VACANTE_UPDATE_MANOBRA
* GENERA EL CERTIFICADO DE SI/NO DE EXISTENCIA DE MANO DE OBRA DE LA OFERTA
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VACANTE
* @param IN_CGVCN_EXISTENCIA_MANOBRA 1/0 VALORES CORRESPONDIENTES A SI EXISTENCIA DE MANO DE OBRA Y NO EXISTENCIA DE MANO DE OBRA RESPECTIVAMENTE
* @param IN_CGVCN_JUSTIFICACION_NO_CONTRAT DATO INFORMATIVO DE JUSTIFICACION EN EL CASO QUE NO EXISTA MANO DE OBRA 
* @param IN_CGVCN_ESTADO ESTADO EN LA QUE SE ACTUALIZA EL REGISTRO
* @param IN_CGVCN_USUARIO_UPDATE USUARIO QUE ACTUALIZO EL REGISTRO
* @return VOID
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_UPDATE_MANOBRA(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE, 
IN IN_CGVCN_EXISTENCIA_MANOBRA SII.CGG_GEM_VACANTE.CGVCN_EXISTENCIA_MANOBRA%TYPE, 
IN IN_CGVCN_JUSTIFICACION_NO_CONTRAT SII.CGG_GEM_VACANTE.CGVCN_JUSTIFICACION_NO_CONTRAT%TYPE, 
IN IN_CGVCN_ESTADO SII.CGG_GEM_VACANTE.CGVCN_ESTADO%TYPE, 
IN IN_CGVCN_USUARIO_UPDATE SII.CGG_GEM_VACANTE.CGVCN_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE	
	TMP_NUMERO_MANOBRA VARCHAR;
	TMP_ASUNTO VARCHAR;
	TMP_DESCRIPCION VARCHAR;
	TMP_COUNT INTEGER;
	TMP_REF RECORD;
	TMP_EMAIL RECORD;
	TMP_RETURN_CODIGO VARCHAR;
	TMP_NOMBRE_PERSONA VARCHAR;
	TMP_REC_VACANTE RECORD;
BEGIN		
	TMP_NUMERO_MANOBRA :=0;
	SELECT COUNT (CGCND_CODIGO) INTO TMP_COUNT 
	FROM SII.CGG_GEM_CANDIDATO CGCND
	WHERE CGVCN_CODIGO = IN_CGVCN_CODIGO
		AND CGCND_ESTADO = TRUE 
		AND CGCND_SELECCIONADO =0;
	IF (TMP_COUNT>0) THEN
		RAISE EXCEPTION 'Los datos no estan completos. Debe seleccionar o rechazar a los candidatos para esta oferta';
	END IF;	
	IF (IN_CGVCN_EXISTENCIA_MANOBRA = 0) THEN		 
		SELECT SII.F_CGG_VACANTE_GENERAR_NUMERO_MANO_OBRA(IN_CGVCN_CODIGO) INTO TMP_NUMERO_MANOBRA;
		UPDATE SII.CGG_GEM_VACANTE SET
			CGVCN_EXISTENCIA_MANOBRA = IN_CGVCN_EXISTENCIA_MANOBRA, 
			CGVCN_NUMERO_MANOBRA = TMP_NUMERO_MANOBRA,
			CGVCN_CUBIERTA = FALSE,
			CGVCN_ESTADO_OFERTA = 4,
			CGVCN_JUSTIFICACION_NO_CONTRAT = IN_CGVCN_JUSTIFICACION_NO_CONTRAT,
			CGVCN_ESTADO = IN_CGVCN_ESTADO,
			CGVCN_FECHA_MANOBRA = CURRENT_TIMESTAMP,
			CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP,
			CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
		WHERE
			CGVCN_CODIGO = IN_CGVCN_CODIGO;
	ELSIF (IN_CGVCN_EXISTENCIA_MANOBRA = 1) THEN		
		SELECT SII.F_CGG_VACANTE_GENERAR_NUMERO_MANO_OBRA(IN_CGVCN_CODIGO) INTO TMP_NUMERO_MANOBRA;
		UPDATE SII.CGG_GEM_VACANTE SET
			CGVCN_EXISTENCIA_MANOBRA = IN_CGVCN_EXISTENCIA_MANOBRA, 
			CGVCN_NUMERO_MANOBRA = TMP_NUMERO_MANOBRA,
			CGVCN_ESTADO = IN_CGVCN_ESTADO,
			CGVCN_ESTADO_OFERTA = 5,
			CGVCN_FECHA_MANOBRA = CURRENT_TIMESTAMP,
			CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP,
			CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
		WHERE
			CGVCN_CODIGO = IN_CGVCN_CODIGO;
	ELSIF (IN_CGVCN_EXISTENCIA_MANOBRA = 2) THEN
		UPDATE SII.CGG_GEM_VACANTE SET
			CGVCN_EXISTENCIA_MANOBRA = 1, 			
			CGVCN_ESTADO = IN_CGVCN_ESTADO,
			CGVCN_ESTADO_OFERTA = 5,
			CGVCN_FECHA_MANOBRA = CURRENT_TIMESTAMP,
			CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP,
			CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
		WHERE
			CGVCN_CODIGO = IN_CGVCN_CODIGO;		
	END IF;
	--SI ES DIFERENTE DE 2 ES CONTRATACION DIRECTA
	IF IN_CGVCN_EXISTENCIA_MANOBRA <> 2 THEN
		FOR TMP_REF IN 
			(SELECT CGCND_CODIGO,CUSU_CODIGO, CGCND_FECHA_ENTREVISTA,CGCND_DESCRIPCION , CGCND_SELECCIONADO
			FROM SII.CGG_GEM_CANDIDATO
			WHERE CGCND_ESTADO AND CGVCN_CODIGO = IN_CGVCN_CODIGO)
		LOOP
			SELECT SII.F_CUSU_NOMBRE_PERSONA(TMP_REF.CUSU_CODIGO,0) INTO TMP_NOMBRE_PERSONA;
			
			SELECT
				VAC.CGVCN_NUMERO_COMUNICADO,
				CISLA_NOMBRE,
				VAC.CGVCN_FECHA_PUBLICACION,
				SII.F_RPT_NOMBRE_OFERTANTE(VAC.CUSU_CODIGO)  AS CGVCN_OFERTANTE,
				CGVCN_NUMERO_VACANTES,
				(SELECT CV.CGCRG_NOMBRE FROM SII.CGG_GEM_CARGO CV WHERE VAC.CGCRG_CODIGO = CV.CGCRG_CODIGO) AS CGCRG_NOMBRE,
				VAC.CGVCN_DIRECCION AS CGVCN_DIRECCION ,
				VAC.CGVCN_SALARIO,
				TSA.CGTSA_NOMBRE
				FROM SII.CGG_GEM_VACANTE VAC
				INNER JOIN SII.CGG_ISLA ISL ON ISL.CISLA_CODIGO = VAC.CISLA_CODIGO
				INNER JOIN SII.CGG_GEM_TIPO_SALARIO TSA ON TSA.CGTSA_CODIGO = VAC.CGTSA_CODIGO
				WHERE VAC.CGVCN_ESTADO = TRUE
				AND VAC.CGVCN_NUMERO_COMUNICADO IS NOT NULL
				AND VAC.CGVCN_CODIGO =IN_CGVCN_CODIGO
			INTO TMP_REC_VACANTE;
	
			--Candidato seleccionado para la entrevista
			IF TMP_REF.CGCND_SELECCIONADO = 1 THEN
				TMP_ASUNTO := 'Felicitaciones: Usted ha sido seleccionado para la entrevista.';
				TMP_DESCRIPCION := 'Estimad@ '||TMP_NOMBRE_PERSONA||':<br/>'||
					'<BR/>Le comunicamos que usted ha sido seleccionad@ para participar en una entrevista de trabajo!<br/>'||
					'<br/><b>Fecha de la entrevista:</b> '|| TMP_REF.CGCND_FECHA_ENTREVISTA ||
					'<br/><b>Comunicado radial No:</b> '|| TMP_REC_VACANTE.CGVCN_NUMERO_COMUNICADO ||
					'<br/><b>Empledor:</b> '|| TMP_REC_VACANTE.CGVCN_OFERTANTE ||
					'<br/><b>Cargo:</b> '|| TMP_REC_VACANTE.CGCRG_NOMBRE ||
					'<br/><b>Lugar:</b> '||TMP_REC_VACANTE.CISLA_NOMBRE||
					'<br/><b>Salario:</b> '||TMP_REC_VACANTE.CGVCN_SALARIO||' '||TMP_REC_VACANTE.CGTSA_NOMBRE||
					'<br/><b>Detalle:</b> '||TMP_REF.CGCND_DESCRIPCION;
			ELSE
				TMP_ASUNTO := 'Lo sentimos Usted no ha sido seleccionado para la entrevista.';
				TMP_DESCRIPCION := 'Estimad@ '||TMP_NOMBRE_PERSONA||':<br/>'||
					'<BR/>Le comunicamos que usted no ha sido seleccionad@ para continuar en el proceso de la oferta de trabajo!<br>'				
					'<br/><b>Comunicado radial No:</b> '|| TMP_REC_VACANTE.CGVCN_NUMERO_COMUNICADO ||
					'<br/><b>Empledor:</b> '|| TMP_REC_VACANTE.CGVCN_OFERTANTE ||
					'<br/><b>Cargo:</b> '|| TMP_REC_VACANTE.CGCRG_NOMBRE ||
					'<br/><b>Lugar:</b> '||TMP_REC_VACANTE.CISLA_NOMBRE||
					'<br/><b>Salario:</b> '||TMP_REC_VACANTE.CGVCN_SALARIO||' '||TMP_REC_VACANTE.CGTSA_NOMBRE||
					'<br/><b>Detalle:</b> '||TMP_REF.CGCND_DESCRIPCION;
			END IF;		
			FOR TMP_EMAIL IN 
				(SELECT DISTINCT(CNT.CRPRC_CONTACTO), UCN.CSUCT_CONTACTO FROM SII.CGG_RES_PERSONA PRS
					INNER JOIN SII.CGG_RES_PERSONA_CONTACTO CNT ON CNT.CRPER_CODIGO = PRS.CRPER_CODIGO AND CNT.CRTCO_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF43')
					INNER JOIN SII.CGG_USUARIO US ON US.CRPER_CODIGO = CNT.CRPER_CODIGO
					LEFT JOIN SII.CGG_SEC_USUARIO_CONTACTO UCN ON UCN.CUSU_CODIGO = US.CUSU_CODIGO
					WHERE CNT.CRPRC_ESTADO AND US.CUSU_CODIGO = TMP_REF.CUSU_CODIGO)
			LOOP				
				SELECT SII.F_CGG_BUZON_CORREO_INSERT(
					'KEYGEN'::VARCHAR,		
					TMP_EMAIL.CRPRC_CONTACTO, 
					TMP_ASUNTO, 
					TMP_DESCRIPCION, 
					'text/html'::VARCHAR, 
					0, 
					FALSE, 
					TRUE, 
					'@GEM@'
				) INTO TMP_RETURN_CODIGO;
			END LOOP;		
		END LOOP;	
	END IF;
	RETURN TMP_NUMERO_MANOBRA;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_USUARIO_SELECT_INFO
* OBTINE INFORMACION DEL USUARIO
* @param IN_CUSU_CODIGO CODIGO DEL USUARIO
* @return VOID
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_SELECT_INFO(
IN IN_CUSU_CODIGO SII.CGG_USUARIO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
		SELECT 
			DISTINCT(CUSU.CUSU_CODIGO),
			CUSU.CUSU_NOMBRE_USUARIO,
			CRPER.CRPER_CODIGO,
			CRPER.CRPER_NUM_DOC_IDENTIFIC,
			CRPER.CRPER_NOMBRES,
			CRPER.CRPER_APELLIDO_PATERNO,
			CRPER.CRPER_APELLIDO_MATERNO,
			CRPER.CRPER_FECHA_NACIMIENTO,
			CRPER.CRPER_GENERO,
			CRPJR.CRPJR_CODIGO,
			CRPJR.CRPJR_NUMERO_IDENTIFICACION,
			CRPJR.CRPJR_RAZON_SOCIAL,
			CRPJR.CRPJR_DIRECCION,
			CRPJR.CRPJR_ACTIVIDAD
		FROM SII.CGG_USUARIO CUSU
		INNER JOIN SII.CGG_RES_PERSONA CRPER ON ( CRPER.CRPER_CODIGO =  CUSU.CRPER_CODIGO)
		LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA CRPJR ON ( CRPJR.CRPJR_CODIGO =  CUSU.CRPJR_CODIGO)		
		WHERE /*CRPER.CRPER_ESTADO = TRUE AND */CUSU.CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_VACANTE_FINALIZAR
* FINALIZA EL PROCESO DE LA OFERTA
* @param IN_CGVCN_CODIGO CODIGO IDENTIFICATIVO DE LA VACANTE
* @param IN_CGVCN_ESTADO_OFERTA ESTADO DE LA OFERTA
* @param IN_CGVCN_JUSTIFICACION_NO_CONTRAT DATO INFORMATIVO DE JUSTIFICACION EN EL CASO QUE NO EXISTA MANO DE OBRA 
* @param IN_CGVCN_USUARIO_UPDATE NOMBRE DEL USUARIO DE ACTUALIZACION
* @return VOID
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_VACANTE_FINALIZAR(
	IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE,
	IN_CGVCN_ESTADO_OFERTA SII.CGG_GEM_VACANTE.CGVCN_ESTADO_OFERTA%TYPE,	
	IN_CGVCN_JUSTIFICACION_NO_CONTRAT SII.CGG_GEM_VACANTE.CGVCN_JUSTIFICACION_NO_CONTRAT%TYPE,
	IN_CGVCN_USUARIO_UPDATE SII.CGG_USUARIO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
DECLARE 
	TMP_COUNT INTEGER;
	TMP_VACANTE INTEGER;
	TMP_ESTADO INT;
	TMP_REF RECORD;
	TMP_EMAIL RECORD;
	TMP_REC_VACANTE RECORD;
	TMP_NOMBRE_PERSONA VARCHAR;
	TMP_ASUNTO VARCHAR;
	TMP_RETURN_CODIGO VARCHAR;
	TMP_DESCRIPCION VARCHAR;
BEGIN
	/*FINALIZA EL PROCESO CUANDO A FINALIZADO EXITOSAMENTE - Y FINALIZADO CON VACANTES NO COMPLETAS*/
	IF IN_CGVCN_ESTADO_OFERTA=6 OR IN_CGVCN_ESTADO_OFERTA=7 THEN
		SELECT COUNT (CGCND_CODIGO) INTO TMP_COUNT
		FROM SII.CGG_GEM_CANDIDATO 
		WHERE CGCND_SELECCIONADO = 3
			AND CGVCN_CODIGO = IN_CGVCN_CODIGO		
			AND CGCND_ESTADO=TRUE;
			
		SELECT CGVCN_NUMERO_VACANTES INTO TMP_VACANTE FROM SII.CGG_GEM_VACANTE WHERE CGVCN_CODIGO = IN_CGVCN_CODIGO;
		IF TMP_COUNT = TMP_VACANTE THEN
			TMP_ESTADO:=7;
		ELSE
			TMP_ESTADO:=6;
		END IF;
		UPDATE SII.CGG_GEM_VACANTE SET			
			CGVCN_CUBIERTA = TRUE,
			CGVCN_ESTADO_OFERTA = TMP_ESTADO,
			CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP,
			CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
		WHERE
			CGVCN_CODIGO = IN_CGVCN_CODIGO;
			
		--Envio de correo electronico
		
		FOR TMP_REF IN 
			(SELECT CGCND_CODIGO,CUSU_CODIGO, CGCND_FECHA_ENTREVISTA,CGCND_DETALLE , CGCND_SELECCIONADO
			FROM SII.CGG_GEM_CANDIDATO
			WHERE CGCND_ESTADO AND CGVCN_CODIGO = IN_CGVCN_CODIGO AND CGCND_SELECCIONADO IN (3,4))
		LOOP
			SELECT SII.F_CUSU_NOMBRE_PERSONA(TMP_REF.CUSU_CODIGO,0) INTO TMP_NOMBRE_PERSONA;
			
			SELECT CGVCN_NUMERO_COMUNICADO 
			FROM SII.CGG_GEM_VACANTE 
			WHERE CGVCN_CODIGO = IN_CGVCN_CODIGO
			INTO TMP_REC_VACANTE;
			--Candidato seleccionado para la entrevista
			IF TMP_REF.CGCND_SELECCIONADO = 3 THEN
				TMP_ASUNTO := 'Felicitaciones: Usted ha sido seleccionado para el puesto de la oferta.';
				TMP_DESCRIPCION := 'Estimad@ '||TMP_NOMBRE_PERSONA||':<br/>'||
					'<BR/>Le comunicamos que usted ha sido seleccionad@ para ocupar una de las vacantes para la oferta de trabajo!<br/>'					
					'<br/><b>Comunicado radial No:</b> '|| TMP_REC_VACANTE.CGVCN_NUMERO_COMUNICADO ||
					'<br/><b>Detalle:</b> '||TMP_REF.CGCND_DETALLE;
			ELSE
				TMP_ASUNTO := 'Lo sentimos usted NO ha sido seleccionado para el puesto de la oferta';
				TMP_DESCRIPCION := 'Estimad@ '||TMP_NOMBRE_PERSONA||':<br/>'||
					'<BR/>Le comunicamos que usted no ha sido seleccionad@ para el puesto de la oferta de trabajo!<br>'				
					'<br/><b>Comunicado radial No:</b> '|| TMP_REC_VACANTE.CGVCN_NUMERO_COMUNICADO ||
					'<br/><b>Detalle:</b> '||TMP_REF.CGCND_DETALLE;
			END IF;		
			FOR TMP_EMAIL IN 
				(SELECT DISTINCT(CNT.CRPRC_CONTACTO), UCN.CSUCT_CONTACTO FROM SII.CGG_RES_PERSONA PRS
				INNER JOIN SII.CGG_RES_PERSONA_CONTACTO CNT ON CNT.CRPER_CODIGO = PRS.CRPER_CODIGO AND CNT.CRTCO_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF43')
				INNER JOIN SII.CGG_USUARIO US ON US.CRPER_CODIGO = CNT.CRPER_CODIGO
				LEFT JOIN SII.CGG_SEC_USUARIO_CONTACTO UCN ON UCN.CUSU_CODIGO = US.CUSU_CODIGO
				WHERE CNT.CRPRC_ESTADO AND US.CUSU_CODIGO = TMP_REF.CUSU_CODIGO)		
			LOOP
				SELECT SII.F_CGG_BUZON_CORREO_INSERT(
					'KEYGEN'::VARCHAR,		
					TMP_EMAIL.CRPRC_CONTACTO, 
					TMP_ASUNTO, 
					TMP_DESCRIPCION, 
					'text/html'::VARCHAR, 
					0, 
					FALSE, 
					TRUE, 
					'@GEM@'				
				) INTO TMP_RETURN_CODIGO;
			END LOOP;		
		END LOOP;			
	
	/*FINALIZADA CON UNA NO EXISTENCIA DE MANO DE OBRA*/
	ELSIF IN_CGVCN_ESTADO_OFERTA=4 THEN
		UPDATE SII.CGG_GEM_VACANTE SET
			CGVCN_EXISTENCIA_MANOBRA = 0, 
			CGVCN_CUBIERTA = FALSE,
			CGVCN_ESTADO_OFERTA = IN_CGVCN_ESTADO_OFERTA,
			CGVCN_JUSTIFICACION_NO_CONTRAT = IN_CGVCN_JUSTIFICACION_NO_CONTRAT,
			CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP,
			CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
		WHERE
			CGVCN_CODIGO = IN_CGVCN_CODIGO;
	/*FINALIZADA CON UN RECHAZO DE LA OFERTA*/
	ELSIF IN_CGVCN_ESTADO_OFERTA=2 THEN
		UPDATE SII.CGG_GEM_VACANTE SET
			CGVCN_CUBIERTA = FALSE,
			CGVCN_ESTADO_OFERTA = IN_CGVCN_ESTADO_OFERTA,
			CGVCN_JUSTIFICACION_NO_CONTRAT = IN_CGVCN_JUSTIFICACION_NO_CONTRAT,
			CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP,
			CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
		WHERE
			CGVCN_CODIGO = IN_CGVCN_CODIGO;	
	ELSIF IN_CGVCN_ESTADO_OFERTA=3 OR IN_CGVCN_ESTADO_OFERTA=8 THEN
		UPDATE SII.CGG_GEM_VACANTE SET
			CGVCN_CUBIERTA = FALSE,
			CGVCN_ESTADO_OFERTA = IN_CGVCN_ESTADO_OFERTA,
			CGVCN_JUSTIFICACION_NO_CONTRAT = IN_CGVCN_JUSTIFICACION_NO_CONTRAT,
			CGVCN_FECHA_UPDATE = CURRENT_TIMESTAMP,
			CGVCN_USUARIO_UPDATE = IN_CGVCN_USUARIO_UPDATE
		WHERE
			CGVCN_CODIGO = IN_CGVCN_CODIGO;		
	END IF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. VERIFICA SI UN COMUNICADO RADIAL ES VALIDO. POR VALIDO SE ENTIENDE QUE ESTE NO DEBE DE ESTAR EXPIRADO O QUE FUE YA UTILIZADO.
*@param IN_CGVCN_NUMERO_COMUNICADO NUMERO DE COMUNICADO RADIAL.
*@return 0/NO VALIDO - 1/VALIDO.
*/
CREATE OR REPLACE FUNCTION SII.F_VERIFICAR_COMUNICADO(
IN IN_CGVCN_NUMERO_COMUNICADO VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	TMP_VALIDO TEXT;	
	TMP_ROW RECORD;
	TMP_SELECCIONADO NUMERIC;
	NUMERO_TRAMITE NUMERIC;
BEGIN
	TMP_VALIDO := '[{"CGVCN_VALIDEZ":0,"CGVCN_MENSAJE":"NO EXITE UN COMUNICADO CON ESE NUMERO.","CGVCN_CODIGO":""}]';	
    FOR TMP_ROW IN SELECT * FROM SII.CGG_GEM_VACANTE WHERE CGVCN_NUMERO_COMUNICADO = IN_CGVCN_NUMERO_COMUNICADO LOOP
		IF(TMP_ROW.CGVCN_EXISTENCIA_MANOBRA IS NOT NULL)THEN		
			--CONSULTA DE TIPO DE CERTIFICADO DE MANO DE OBRA.
			IF(TMP_ROW.CGVCN_EXISTENCIA_MANOBRA = 0 )THEN
			--VERIFICA FECHA DE EXPIRACION.
				IF(TMP_ROW.CGVCN_FECHA_EXPIRACION >= NOW())THEN										
					SELECT COALESCE(COUNT(CRTRA_CODIGO),0) INTO NUMERO_TRAMITE FROM SII.CGG_RES_TRAMITE WHERE CRTRA_COMUNICADO_RADIAL = TMP_ROW.CGVCN_CODIGO;
					--VERIFICA EN CUANTOS TRAMITES SE ENCUENTRA EL COMUNICADO.
					IF(NUMERO_TRAMITE>=1)THEN						
						IF(NUMERO_TRAMITE<=TMP_ROW.CGVCN_NUMERO_VACANTES)THEN
							TMP_VALIDO := '[{"CGVCN_VALIDEZ":1,"CGVCN_MENSAJE":"","CGVCN_CODIGO":"'||TMP_ROW.CGVCN_CODIGO||'"}]';	
						ELSE
							TMP_VALIDO := '[{"CGVCN_VALIDEZ":0,"CGVCN_MENSAJE":"EL COMUNICADO YA ESTA SIENDO UTILIZADO EN OTROS TRAMITES DE RESIDENCIA","CGVCN_CODIGO":""}]';
						END IF;											
					ELSE
						TMP_VALIDO := '[{"CGVCN_VALIDEZ":1,"CGVCN_MENSAJE":"","CGVCN_CODIGO":"'||TMP_ROW.CGVCN_CODIGO||'"}]';	
					END IF;																														
				ELSE
					TMP_VALIDO := '[{"CGVCN_VALIDEZ":0,"CGVCN_MENSAJE":"EL COMUNICADO ESTA EXPIRADO","CGVCN_CODIGO":""}]';						
				END IF;		
			ELSIF(TMP_ROW.CGVCN_EXISTENCIA_MANOBRA = 1 AND DATE(TMP_ROW.CGVCN_FECHA_EXPIRACION) >= CURRENT_DATE ) THEN		
				SELECT COALESCE(COUNT(CGCND_CODIGO),0) INTO TMP_SELECCIONADO FROM SII.CGG_GEM_CANDIDATO WHERE CGVCN_CODIGO = TMP_ROW.CGVCN_CODIGO AND CGCND_SELECCIONADO = 3;
				IF(TMP_SELECCIONADO < TMP_ROW.CGVCN_NUMERO_VACANTES)THEN					
					TMP_VALIDO := '[{"CGVCN_VALIDEZ":1,"CGVCN_MENSAJE":"","CGVCN_CODIGO":"'||TMP_ROW.CGVCN_CODIGO||'"}]';						
				ELSE
					TMP_VALIDO := '[{"CGVCN_VALIDEZ":0,"CGVCN_MENSAJE":"EL COMUNICADO HA COMPLETADO SU CUPO DE VACANTES POR GESTION DE EMPLEO","CGVCN_CODIGO":""}]';						
				END IF;								
			END IF;
		ELSE IF(TMP_ROW.CGVCN_NUMERO_COMUNICADO IS NULL ) THEN						
					TMP_VALIDO := '[{"CGVCN_VALIDEZ":0,"CGVCN_MENSAJE":"EL COMUNICADO NO HA SIDO APROBADO POR EL ADMINISTRADOR","CGVCN_CODIGO":""}]';						
				ELSE					
					TMP_VALIDO := '[{"CGVCN_VALIDEZ":0,"CGVCN_MENSAJE":"EL COMUNICADO NO TIENE UN CERTIFICADO DE NO EXISTENCIA DE MANO DE OBRA GENERADO","CGVCN_CODIGO":""}]';						
				END IF;					
		END IF;
	END LOOP;		
	RETURN TMP_VALIDO;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_OFERTAS_SELECT_BYUSUARIOS
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE DE ACUERDO EL USUARIO DE LA TABLA CANDIDATO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CUSU_CODIGO CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_OFERTAS_SELECT_BYUSUARIOS(
	in_user_name varchar,
	in_start_index integer,
	in_limit integer,
	in_sort_field_name varchar,
	in_direction varchar,
	in_find_text text,
	in_Cusu_codigo varchar)
  RETURNS SETOF refcursor AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN		
	OPEN TMP_REF FOR EXECUTE
		'SELECT VAC.CGVCN_CODIGO, 
		VAC.CUSU_CODIGO,
		VAC.CGVCN_TITULO, 
		CAR.CGCRG_NOMBRE,
		VAC.CGVCN_DESCRIPCION, 
		VAC.CGVCN_EXPERIENCIA,
		VAC.CGVCN_EXPERIENCIA,
		VAC.CGVCN_SALARIO, 
		VAC.CGVCN_DIRECCION, 
		VAC.CGVCN_FECHA_PUBLICACION, 
		VAC.CGVCN_FECHA_EXPIRACION, 
		VAC.CGVCN_ESTADO_OFERTA, 
		VAC.CGVCN_ANIO, 
		VAC.CGVCN_NUMERO_COMUNICADO		
	FROM SII.CGG_GEM_VACANTE VAC INNER JOIN SII.CGG_GEM_CANDIDATO CAN ON(VAC.CGVCN_CODIGO = CAN.CGVCN_CODIGO)
	INNER JOIN SII.CGG_GEM_CARGO CAR ON(VAC.CGCRG_CODIGO = CAR.CGCRG_CODIGO)
	WHERE VAC.CGVCN_ESTADO = TRUE AND CAN.CUSU_CODIGO = '''||IN_CUSU_CODIGO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGVCN_TITULO, '''')||'' ''||COALESCE(CGVCN_DESCRIPCION, '''')||'' ''||COALESCE(CGVCN_SALARIO, 0)||'' ''||COALESCE(CGVCN_DIRECCION, '''')||'' ''||COALESCE(CGVCN_FECHA_PUBLICACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_FECHA_EXPIRACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_ESTADO_OFERTA, 0)||'' ''||COALESCE(CGVCN_EXPERIENCIA, '''')||'' ''||COALESCE(CGVCN_ANIO, 0)||'' ''||COALESCE(CGVCN_NUMERO_COMUNICADO, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_OFERTAS_COUNT_BYUSUARIOS
* SELECCIONA TOTAL DE REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE DE ACUERDO AL CODIGO DE USUARIO DE LA TABLA CANDIDATO
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CUSU_CODIGO CRITERIO DE BUSQUEDA.
* @return TMP_ROWS NUMERO DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_OFERTAS_COUNT_BYUSUARIOS(
	in_find_text text,
	in_Cusu_codigo varchar)
  RETURNS integer AS
$$
DECLARE
	TMP_ROWS INT2;
	TMP_SQL TEXT;
BEGIN
	TMP_SQL:='SELECT COUNT(VAC.CGVCN_CODIGO)
		FROM SII.CGG_GEM_VACANTE VAC INNER JOIN SII.CGG_GEM_CANDIDATO CAN ON(VAC.CGVCN_CODIGO = CAN.CGVCN_CODIGO)
		WHERE VAC.CGVCN_ESTADO = TRUE AND CAN.CUSU_CODIGO = '''||IN_CUSU_CODIGO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGVCN_TITULO, '''')||'' ''||COALESCE(CGVCN_DESCRIPCION, '''')||'' ''||COALESCE(CGVCN_SALARIO, 0)||'' ''||COALESCE(CGVCN_DIRECCION, '''')||'' ''||COALESCE(CGVCN_FECHA_PUBLICACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_FECHA_EXPIRACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_ESTADO_OFERTA, 0)||'' ''||COALESCE(CGVCN_EXPERIENCIA, '''')||'' ''||COALESCE(CGVCN_ANIO, 0)||'' ''||COALESCE(CGVCN_NUMERO_COMUNICADO, '''')) = 1;';		
	EXECUTE TMP_SQL INTO TMP_ROWS;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_USUARIO_GENERAR_NUMERO_COMUNICADO_RADIAL
* GENERA EL NUMERO DE COMUNICADO RADIAL DE ACUERDO AL USUARIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VARCHAR NUEVO NUMERO DE COMUNICADO RADIAL
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_GENERAR_NUMERO_COMUNICADO_RADIAL(
IN IN_CUSU_CODIGO SII.CGG_USUARIO.CUSU_CODIGO%TYPE
)RETURNS VARCHAR AS
$$
DECLARE	
	TMP_ABREVIATURA_CANTON VARCHAR;
	TMP_COUNT_ROL INT2;
	TMP_RETURN VARCHAR;
	TMP_NUMERO_CARNET VARCHAR;
	TMP_ULTIMO_COMUNICADO INT4;	
	TMP_REF REFCURSOR;
BEGIN	
	SELECT CNT.CCTN_ABREVIATURA INTO TMP_ABREVIATURA_CANTON
	FROM SII.CGG_CANTON CNT INNER JOIN SII.CGG_USUARIO USU ON(CNT.CCTN_CODIGO = USU.CCTN_CODIGO)
	WHERE USU.CUSU_CODIGO = IN_CUSU_CODIGO;
	
	SELECT COUNT(*) INTO TMP_COUNT_ROL
	FROM SII.CGG_SEC_USUARIO_ROL
	WHERE CSPER_ESTADO = TRUE AND CUSU_CODIGO = IN_CUSU_CODIGO AND CSROL_CODIGO = 'CSROL_GEAPL';
	
	IF (TMP_COUNT_ROL>0) THEN
		SELECT PER.CRPER_NUMERO_RESIDENCIA INTO TMP_NUMERO_CARNET
		FROM SII.CGG_USUARIO USU INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO = USU.CRPER_CODIGO)
		WHERE USU.CUSU_ESTADO AND PER.CRPER_ESTADO AND USU.CUSU_CODIGO = IN_CUSU_CODIGO
		ORDER BY PER.CRPER_NUMERO_RESIDENCIA DESC;
	ELSE
		SELECT PER.CRPER_NUMERO_RESIDENCIA INTO TMP_NUMERO_CARNET
		FROM SII.CGG_USUARIO USU INNER JOIN SII.CGG_RES_PERSONA_JURIDICA PJU ON(USU.CRPJR_CODIGO = PJU.CRPJR_CODIGO)
		INNER JOIN SII.CGG_RES_REPRESENTANTE_LEGAL RLE ON(RLE.CRPJR_CODIGO = PJU.CRPJR_CODIGO)
		INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO = RLE.CRPER_CODIGO)
		WHERE USU.CUSU_ESTADO AND PJU.CRPJR_ESTADO AND PER.CRPER_ESTADO and RLE.CRRPT_ESTADO 
		AND USU.CUSU_CODIGO = IN_CUSU_CODIGO
		ORDER BY PER.CRPER_NUMERO_RESIDENCIA DESC;
	END IF;
	TMP_NUMERO_CARNET := SUBSTR (TMP_NUMERO_CARNET,1,7);
	
	SELECT MAX((STRING_TO_ARRAY(CGVCN_NUMERO_COMUNICADO,'-'))[3]::INTEGER) INTO TMP_ULTIMO_COMUNICADO
	FROM SII.CGG_GEM_VACANTE
	WHERE (STRING_TO_ARRAY(CGVCN_NUMERO_COMUNICADO,'-'))[1] = (STRING_TO_ARRAY(TMP_ABREVIATURA_CANTON,'-'))[1];
	IF (TMP_ULTIMO_COMUNICADO IS NULL) THEN
		TMP_ULTIMO_COMUNICADO = 0;
	END IF;
	TMP_ULTIMO_COMUNICADO := TMP_ULTIMO_COMUNICADO + 1;
	TMP_RETURN := TMP_ABREVIATURA_CANTON||'-'||TMP_NUMERO_CARNET||'-'||TMP_ULTIMO_COMUNICADO;
	RETURN TMP_RETURN;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_VACANTE_GENERAR_NUMERO_MANO_OBRA
* GENERA EL NUMERO DE COMUNICADO RADIAL DE ACUERDO AL COIGO DE VACANTE
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VACANTE
* @return VARCHAR NUEVO NUMERO DE COMUNICADO RADIAL
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VACANTE_GENERAR_NUMERO_MANO_OBRA(
IN IN_CGVCN_CODIGO SII.CGG_GEM_VACANTE.CGVCN_CODIGO%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
	CADENA_COMUNICADO VARCHAR;
	CADENA_VALOR_CONF VARCHAR;
	NUMERO_COMUNICADO VARCHAR;
BEGIN	
	
	SELECT CGVCN_NUMERO_COMUNICADO INTO CADENA_COMUNICADO
	FROM SII.CGG_GEM_VACANTE
	WHERE CGVCN_ESTADO = TRUE AND CGVCN_CODIGO = IN_CGVCN_CODIGO;
	
	SELECT CGCNF_VALOR_CADENA INTO CADENA_VALOR_CONF
	FROM SII.CGG_CONFIGURACION
	WHERE CGCNF_ESTADO = TRUE AND CGCNF_CODIGO = 'CONFGE4';
	
	NUMERO_COMUNICADO := CADENA_VALOR_CONF || '-' || (STRING_TO_ARRAY(CADENA_COMUNICADO,'-'))[1] || '-' || (STRING_TO_ARRAY(CADENA_COMUNICADO,'-'))[3];	
	
	RETURN NUMERO_COMUNICADO;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_SELECT_USUARIO_EMPRESA
* SELECCIONA LOS UASUARIOS RESPONSABLES DE UNA EMPRESA
* @param IN_FIND_TEXT texto de busqueda
* @return int4 NUMERO DE REGISTROS DE LA SELECCION
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_SELECT_USUARIO_EMPRESA_COUNT(
IN IN_FIND_TEXT VARCHAR
)RETURNS int4 AS
$$
DECLARE
	TMP_COUNT INT4;
BEGIN	
	IF LENGTH(IN_FIND_TEXT) = 0 THEN
		SELECT COUNT(CUSU.CUSU_CODIGO) INTO TMP_COUNT
		FROM CGG_USUARIO CUSU 
		INNER JOIN CGG_RES_PERSONA_JURIDICA CRPJR ON CUSU.CRPJR_CODIGO = CRPJR.CRPJR_CODIGO
		INNER JOIN CGG_ISLA CISLA ON CUSU.CISLA_CODIGO = CISLA.CISLA_CODIGO
		WHERE CUSU_ESTADO AND CRPJR_ESTADO AND CISLA_ESTADO;	
	ELSE
		SELECT COUNT(CUSU.CUSU_CODIGO) INTO TMP_COUNT
		FROM CGG_USUARIO CUSU 
		INNER JOIN CGG_RES_PERSONA_JURIDICA CRPJR ON CUSU.CRPJR_CODIGO = CRPJR.CRPJR_CODIGO
		INNER JOIN CGG_ISLA CISLA ON CUSU.CISLA_CODIGO = CISLA.CISLA_CODIGO
		WHERE CUSU_ESTADO AND CRPJR_ESTADO AND CISLA_ESTADO AND SII.F_STRING_IN(IN_FIND_TEXT,
			COALESCE(CUSU_NOMBRE_USUARIO, '')||' '||
			COALESCE(CRPJR_RAZON_SOCIAL, '')||' '||
			COALESCE(CRPJR_ACTIVIDAD, '')||' '||
			COALESCE(CISLA_NOMBRE, '')) = 1	;
	END IF;	 
	RETURN TMP_COUNT;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_SELECT_USUARIO_EMPRESA
* SELECCIONA REGISTROS DE USUARIOS RESPONSABLE DE EMPRESAS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_SELECT_USUARIO_EMPRESA(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE	
	'SELECT	
		CUSU.CUSU_CODIGO,
		CUSU_NOMBRE_USUARIO,
		CRPJR_RAZON_SOCIAL,
		CRPJR_ACTIVIDAD, 
		CISLA_NOMBRE
	FROM CGG_USUARIO CUSU 
		INNER JOIN CGG_RES_PERSONA_JURIDICA CRPJR ON CUSU.CRPJR_CODIGO = CRPJR.CRPJR_CODIGO
		INNER JOIN CGG_ISLA CISLA ON CUSU.CISLA_CODIGO = CISLA.CISLA_CODIGO
		WHERE CUSU_ESTADO AND CRPJR_ESTADO AND CISLA_ESTADO AND 
			SII.F_STRING_IN('''||IN_FIND_TEXT||''',
				COALESCE(CUSU_NOMBRE_USUARIO, '''')||'' ''||
				COALESCE(CRPJR_RAZON_SOCIAL, '''')||'' ''||
				COALESCE(CRPJR_ACTIVIDAD, '''')||'' ''||
				COALESCE(CISLA_NOMBRE, '''')				
			) = 1
		ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
		' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;	
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
