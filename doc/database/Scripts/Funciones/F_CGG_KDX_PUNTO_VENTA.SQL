/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_PUNTO_VENTA
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON / CIUDAD
* @param IN_CKPVT_NOMBRE NOMBRE DEL PUNTO DE VENTA
* @param IN_CKPVT_OBSERVACION OBSERVACION DEL PUNTO DE VENTA
* @param IN_CKPVT_ESTADO ESTADO DEL REGISTRO
* @param IN_CKPVT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKPVT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_INSERT(
IN IN_CKPVT_CODIGO SII.CGG_KDX_PUNTO_VENTA.CKPVT_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_KDX_PUNTO_VENTA.CCTN_CODIGO%TYPE, 
IN IN_CKPVT_NOMBRE SII.CGG_KDX_PUNTO_VENTA.CKPVT_NOMBRE%TYPE, 
IN IN_CKPVT_OBSERVACION SII.CGG_KDX_PUNTO_VENTA.CKPVT_OBSERVACION%TYPE, 
IN IN_CKPVT_ESTADO SII.CGG_KDX_PUNTO_VENTA.CKPVT_ESTADO%TYPE, 
IN IN_CKPVT_USUARIO_INSERT SII.CGG_KDX_PUNTO_VENTA.CKPVT_USUARIO_INSERT%TYPE, 
IN IN_CKPVT_USUARIO_UPDATE SII.CGG_KDX_PUNTO_VENTA.CKPVT_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKPVT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_PUNTO_VENTA','CKPVT_CODIGO','CKPVT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKPVT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_PUNTO_VENTA(
		CKPVT_CODIGO, 
		CCTN_CODIGO, 
		CKPVT_NOMBRE, 
		CKPVT_OBSERVACION, 
		CKPVT_ESTADO, 
		CKPVT_FECHA_INSERT, 
		CKPVT_USUARIO_INSERT, 
		CKPVT_FECHA_UPDATE, 
		CKPVT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CCTN_CODIGO, 
		IN_CKPVT_NOMBRE, 
		IN_CKPVT_OBSERVACION, 
		IN_CKPVT_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKPVT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKPVT_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_PUNTO_VENTA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKPVT_CODIGO, 
		CCTN_CODIGO, 
		CKPVT_NOMBRE, 
		CKPVT_OBSERVACION, 
		CKPVT_ESTADO, 
		CKPVT_FECHA_INSERT, 
		CKPVT_USUARIO_INSERT, 
		CKPVT_FECHA_UPDATE, 
		CKPVT_USUARIO_UPDATE
	FROM SII.CGG_KDX_PUNTO_VENTA
	WHERE CKPVT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_PUNTO_VENTA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKPVT_CODIGO, 
		CCTN_CODIGO, 
		CKPVT_NOMBRE, 
		CKPVT_OBSERVACION, 
		CKPVT_ESTADO, 
		CKPVT_FECHA_INSERT, 
		CKPVT_USUARIO_INSERT, 
		CKPVT_FECHA_UPDATE, 
		CKPVT_USUARIO_UPDATE
	FROM SII.CGG_KDX_PUNTO_VENTA
	WHERE CKPVT_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKPVT_NOMBRE, '''')||'' ''||COALESCE(CKPVT_OBSERVACION, '''')||'' ''||COALESCE(CKPVT_ESTADO, FALSE)||'' ''||COALESCE(CKPVT_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKPVT_USUARIO_INSERT, '''')||'' ''||COALESCE(CKPVT_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKPVT_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_PUNTO_VENTA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_PUNTO_VENTA
	WHERE CKPVT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_PUNTO_VENTA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_PUNTO_VENTA
	WHERE CKPVT_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKPVT_NOMBRE, '''')||' '||COALESCE(CKPVT_OBSERVACION, '''')||' '||COALESCE(CKPVT_ESTADO, FALSE)||' '||COALESCE(CKPVT_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKPVT_USUARIO_INSERT, '''')||' '||COALESCE(CKPVT_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKPVT_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_PUNTO_VENTA
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON / CIUDAD
* @param IN_CKPVT_NOMBRE NOMBRE DEL PUNTO DE VENTA
* @param IN_CKPVT_OBSERVACION OBSERVACION DEL PUNTO DE VENTA
* @param IN_CKPVT_ESTADO ESTADO DEL REGISTRO
* @param IN_CKPVT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_UPDATE(
IN IN_CKPVT_CODIGO SII.CGG_KDX_PUNTO_VENTA.CKPVT_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_KDX_PUNTO_VENTA.CCTN_CODIGO%TYPE, 
IN IN_CKPVT_NOMBRE SII.CGG_KDX_PUNTO_VENTA.CKPVT_NOMBRE%TYPE, 
IN IN_CKPVT_OBSERVACION SII.CGG_KDX_PUNTO_VENTA.CKPVT_OBSERVACION%TYPE, 
IN IN_CKPVT_ESTADO SII.CGG_KDX_PUNTO_VENTA.CKPVT_ESTADO%TYPE, 
IN IN_CKPVT_USUARIO_UPDATE SII.CGG_KDX_PUNTO_VENTA.CKPVT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_PUNTO_VENTA SET
		CCTN_CODIGO = IN_CCTN_CODIGO, 
		CKPVT_NOMBRE = IN_CKPVT_NOMBRE, 
		CKPVT_OBSERVACION = IN_CKPVT_OBSERVACION, 
		CKPVT_ESTADO = IN_CKPVT_ESTADO, 
		CKPVT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKPVT_USUARIO_UPDATE = IN_CKPVT_USUARIO_UPDATE
	WHERE
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_PUNTO_VENTA
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_SELECT(
IN IN_CKPVT_CODIGO SII.CGG_KDX_PUNTO_VENTA.CKPVT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKPVT_CODIGO, 
		CCTN_CODIGO, 
		CKPVT_NOMBRE, 
		CKPVT_OBSERVACION, 
		CKPVT_ESTADO, 
		CKPVT_FECHA_INSERT, 
		CKPVT_USUARIO_INSERT, 
		CKPVT_FECHA_UPDATE, 
		CKPVT_USUARIO_UPDATE
	FROM SII.CGG_KDX_PUNTO_VENTA
	WHERE CKPVT_ESTADO = TRUE AND 
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_PUNTO_VENTA
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_DELETE(
IN IN_CKPVT_CODIGO SII.CGG_KDX_PUNTO_VENTA.CKPVT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_PUNTO_VENTA
	WHERE
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_PUNTO_VENTA
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_DELETE_SOFT(
IN IN_CKPVT_CODIGO SII.CGG_KDX_PUNTO_VENTA.CKPVT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_PUNTO_VENTA SET
		CKPVT_ESTADO = FALSE
	WHERE
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_S_CGG_CANTON
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_PUNTO_VENTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON / CIUDAD
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_S_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_KDX_PUNTO_VENTA.CCTN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKPVT_CODIGO, 
		CCTN_CODIGO, 
		CKPVT_NOMBRE, 
		CKPVT_OBSERVACION, 
		CKPVT_ESTADO, 
		CKPVT_FECHA_INSERT, 
		CKPVT_USUARIO_INSERT, 
		CKPVT_FECHA_UPDATE, 
		CKPVT_USUARIO_UPDATE
	FROM SII.CGG_KDX_PUNTO_VENTA
	WHERE CKPVT_ESTADO = TRUE AND 
		CCTN_CODIGO = IN_CCTN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_PUNTO_VENTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON / CIUDAD
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_D_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_KDX_PUNTO_VENTA.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_PUNTO_VENTA
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_PUNTO_VENTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON / CIUDAD
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_DS_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_KDX_PUNTO_VENTA.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_PUNTO_VENTA SET
		ckpvt_estado = false
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_PUNTO_VENTA_USUARIO
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_PUNTO_VENTA JUNTO CON EL CODIGO DE USUARIOS QUE ESTAN EN SE PUNTO DE VENTA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_PUNTO_VENTA_USUARIO(
IN IN_USER_NAME VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;	
BEGIN
		
	OPEN TMP_REF FOR
		SELECT 
		CKPVT_CODIGO,
		CCTN_CODIGO,
		CKPVT_NOMBRE,
		CUSU_CODIGO,
		CUSU_NOMBRE_USUARIO,		
		BUSQUEDA 
			FROM (		
				SELECT
					V.CKPVT_CODIGO,
					V.CCTN_CODIGO,
					V.CKPVT_NOMBRE,
					 UV.CUSU_CODIGO,
					U.CUSU_NOMBRE_USUARIO,		
					UPPER(V.CKPVT_NOMBRE||' '||U.CUSU_NOMBRE_USUARIO) BUSQUEDA 	
				FROM SII.CGG_KDX_PUNTO_VENTA V
				INNER JOIN SII.CGG_KDX_USUARIO_PV UV ON (V.CKPVT_CODIGO = UV.CKPVT_CODIGO)
				INNER JOIN SII.CGG_USUARIO U ON (U.CUSU_CODIGO = UV.CUSU_CODIGO)
				WHERE V.CKPVT_ESTADO = TRUE AND
				UV.CKPVT_ACTIVO = TRUE AND
				U.CUSU_ESTADO = TRUE
			) AS C1
			WHERE SII.F_STRING_IN(IN_FIND_TEXT,
					COALESCE(BUSQUEDA, '')) = 1;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

