/**
* FUNCION SII.F_CGG_KDX_CIERRE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CIERRE DE CAJA
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @param IN_CKCRR_FECHA_CIERRE FECHA DE REALIZACION DEL CIERRE
* @param IN_CKCRR_NUMERO_CIERRE NUMERO SECUENCIAL IDENTIFICATIVO
* @param IN_CKCRR_TOTAL_VENTA VALOR TOTAL REGISTRADO EN LA VENTA
* @param IN_CKCRR_TOTAL VALOR TOTAL CONTABILIZADO EN EL CIERRE
* @param IN_CKCRR_OBSERVACION INFORMACION ADICIONAL
* @param IN_CKCRR_DIFERENCIA VALOR DE DIFERENCIA
* @param IN_CKCRR_ESTADO_CIERRE ESTADO DEL REGISTRO DE CIERRE PARA CONTROL DE INFORMACION
0.- REGISTRADA
1.- CONFIRMADA
* @param IN_CKCRR_ESTADO ESTADO DEL REGISTRO
* @param IN_CKCRR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKCRR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_INSERT(
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE.CKCRR_CODIGO%TYPE,
IN IN_CKPVT_CODIGO SII.CGG_KDX_CIERRE.CKPVT_CODIGO%TYPE,
IN IN_CKUPV_CODIGO SII.CGG_KDX_CIERRE.CKUPV_CODIGO%TYPE,
IN IN_CKCRR_FECHA_CIERRE SII.CGG_KDX_CIERRE.CKCRR_FECHA_CIERRE%TYPE,
IN IN_CKCRR_NUMERO_CIERRE SII.CGG_KDX_CIERRE.CKCRR_NUMERO_CIERRE%TYPE,
IN IN_CKCRR_TOTAL_VENTA SII.CGG_KDX_CIERRE.CKCRR_TOTAL_VENTA%TYPE,
IN IN_CKCRR_TOTAL SII.CGG_KDX_CIERRE.CKCRR_TOTAL%TYPE,
IN IN_CKCRR_OBSERVACION SII.CGG_KDX_CIERRE.CKCRR_OBSERVACION%TYPE,
IN IN_CKCRR_DIFERENCIA SII.CGG_KDX_CIERRE.CKCRR_DIFERENCIA%TYPE,
IN IN_CKCRR_ESTADO_CIERRE SII.CGG_KDX_CIERRE.CKCRR_ESTADO_CIERRE%TYPE,
IN IN_CKCRR_ESTADO SII.CGG_KDX_CIERRE.CKCRR_ESTADO%TYPE,
IN IN_CKCRR_USUARIO_INSERT SII.CGG_KDX_CIERRE.CKCRR_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKCRR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_CIERRE','CKCRR_CODIGO','CKCRR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKCRR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_CIERRE(
		CKCRR_CODIGO, 
		CKPVT_CODIGO, 
		CKUPV_CODIGO, 
		CKCRR_FECHA_CIERRE, 
		CKCRR_NUMERO_CIERRE, 
		CKCRR_TOTAL_VENTA, 
		CKCRR_TOTAL, 
		CKCRR_OBSERVACION, 
		CKCRR_DIFERENCIA, 
		CKCRR_ESTADO_CIERRE, 
		CKCRR_ESTADO, 
		CKCRR_FECHA_INSERT, 
		CKCRR_USUARIO_INSERT, 
		CKCRR_FECHA_UPDATE, 
		CKCRR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKPVT_CODIGO, 
		IN_CKUPV_CODIGO, 
		IN_CKCRR_FECHA_CIERRE, 
		IN_CKCRR_NUMERO_CIERRE, 
		IN_CKCRR_TOTAL_VENTA, 
		IN_CKCRR_TOTAL, 
		IN_CKCRR_OBSERVACION, 
		IN_CKCRR_DIFERENCIA, 
		IN_CKCRR_ESTADO_CIERRE, 
		IN_CKCRR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKCRR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKCRR_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCRR_CODIGO, 
		CKPVT_CODIGO, 
		CKUPV_CODIGO, 
		CKCRR_FECHA_CIERRE, 
		CKCRR_NUMERO_CIERRE, 
		CKCRR_TOTAL_VENTA, 
		CKCRR_TOTAL, 
		CKCRR_OBSERVACION, 
		CKCRR_DIFERENCIA, 
		CKCRR_ESTADO_CIERRE, 
		CKCRR_ESTADO, 
		CKCRR_FECHA_INSERT, 
		CKCRR_USUARIO_INSERT, 
		CKCRR_FECHA_UPDATE, 
		CKCRR_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE
	WHERE CKCRR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKCRR_CODIGO, 
		CKPVT_CODIGO, 
		CKUPV_CODIGO, 
		CKCRR_FECHA_CIERRE, 
		CKCRR_NUMERO_CIERRE, 
		CKCRR_TOTAL_VENTA, 
		CKCRR_TOTAL, 
		CKCRR_OBSERVACION, 
		CKCRR_DIFERENCIA, 
		CKCRR_ESTADO_CIERRE, 
		CKCRR_ESTADO, 
		CKCRR_FECHA_INSERT, 
		CKCRR_USUARIO_INSERT, 
		CKCRR_FECHA_UPDATE, 
		CKCRR_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE
	WHERE CKCRR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKCRR_FECHA_CIERRE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKCRR_NUMERO_CIERRE, '''')||'' ''||COALESCE(CKCRR_TOTAL_VENTA, 0)||'' ''||COALESCE(CKCRR_TOTAL, 0)||'' ''||COALESCE(CKCRR_OBSERVACION, '''')||'' ''||COALESCE(CKCRR_DIFERENCIA, 0)||'' ''||COALESCE(CKCRR_ESTADO_CIERRE, 0)||'' ''||COALESCE(CKCRR_ESTADO, FALSE)||'' ''||COALESCE(CKCRR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKCRR_USUARIO_INSERT, '''')||'' ''||COALESCE(CKCRR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKCRR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_CIERRE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_CIERRE
	WHERE CKCRR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_CIERRE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_CIERRE
	WHERE CKCRR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKCRR_FECHA_CIERRE, CURRENT_TIMESTAMP)||' '||COALESCE(CKCRR_NUMERO_CIERRE, '''')||' '||COALESCE(CKCRR_TOTAL_VENTA, 0)||' '||COALESCE(CKCRR_TOTAL, 0)||' '||COALESCE(CKCRR_OBSERVACION, '''')||' '||COALESCE(CKCRR_DIFERENCIA, 0)||' '||COALESCE(CKCRR_ESTADO_CIERRE, 0)||' '||COALESCE(CKCRR_ESTADO, FALSE)||' '||COALESCE(CKCRR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKCRR_USUARIO_INSERT, '''')||' '||COALESCE(CKCRR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKCRR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_CIERRE.
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CIERRE DE CAJA
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @param IN_CKCRR_FECHA_CIERRE FECHA DE REALIZACION DEL CIERRE
* @param IN_CKCRR_NUMERO_CIERRE NUMERO SECUENCIAL IDENTIFICATIVO
* @param IN_CKCRR_TOTAL_VENTA VALOR TOTAL REGISTRADO EN LA VENTA
* @param IN_CKCRR_TOTAL VALOR TOTAL CONTABILIZADO EN EL CIERRE
* @param IN_CKCRR_OBSERVACION INFORMACION ADICIONAL
* @param IN_CKCRR_DIFERENCIA VALOR DE DIFERENCIA
* @param IN_CKCRR_ESTADO_CIERRE ESTADO DEL REGISTRO DE CIERRE PARA CONTROL DE INFORMACION
0.- REGISTRADA
1.- CONFIRMADA
* @param IN_CKCRR_ESTADO ESTADO DEL REGISTRO
* @param IN_CKCRR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_UPDATE(
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE.CKCRR_CODIGO%TYPE,
IN IN_CKPVT_CODIGO SII.CGG_KDX_CIERRE.CKPVT_CODIGO%TYPE,
IN IN_CKUPV_CODIGO SII.CGG_KDX_CIERRE.CKUPV_CODIGO%TYPE,
IN IN_CKCRR_FECHA_CIERRE SII.CGG_KDX_CIERRE.CKCRR_FECHA_CIERRE%TYPE,
IN IN_CKCRR_NUMERO_CIERRE SII.CGG_KDX_CIERRE.CKCRR_NUMERO_CIERRE%TYPE,
IN IN_CKCRR_TOTAL_VENTA SII.CGG_KDX_CIERRE.CKCRR_TOTAL_VENTA%TYPE,
IN IN_CKCRR_TOTAL SII.CGG_KDX_CIERRE.CKCRR_TOTAL%TYPE,
IN IN_CKCRR_OBSERVACION SII.CGG_KDX_CIERRE.CKCRR_OBSERVACION%TYPE,
IN IN_CKCRR_DIFERENCIA SII.CGG_KDX_CIERRE.CKCRR_DIFERENCIA%TYPE,
IN IN_CKCRR_ESTADO_CIERRE SII.CGG_KDX_CIERRE.CKCRR_ESTADO_CIERRE%TYPE,
IN IN_CKCRR_ESTADO SII.CGG_KDX_CIERRE.CKCRR_ESTADO%TYPE,
IN IN_CKCRR_USUARIO_UPDATE SII.CGG_KDX_CIERRE.CKCRR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_CIERRE SET
		CKPVT_CODIGO = IN_CKPVT_CODIGO, 
		CKUPV_CODIGO = IN_CKUPV_CODIGO, 
		CKCRR_FECHA_CIERRE = IN_CKCRR_FECHA_CIERRE, 
		CKCRR_NUMERO_CIERRE = IN_CKCRR_NUMERO_CIERRE, 
		CKCRR_TOTAL_VENTA = IN_CKCRR_TOTAL_VENTA, 
		CKCRR_TOTAL = IN_CKCRR_TOTAL, 
		CKCRR_OBSERVACION = IN_CKCRR_OBSERVACION, 
		CKCRR_DIFERENCIA = IN_CKCRR_DIFERENCIA, 
		CKCRR_ESTADO_CIERRE = IN_CKCRR_ESTADO_CIERRE, 
		CKCRR_ESTADO = IN_CKCRR_ESTADO, 
		CKCRR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKCRR_USUARIO_UPDATE = IN_CKCRR_USUARIO_UPDATE
	WHERE
		CKCRR_CODIGO = IN_CKCRR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CIERRE DE CAJA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_SELECT(
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE.CKCRR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCRR_CODIGO, 
		CKPVT_CODIGO, 
		CKUPV_CODIGO, 
		CKCRR_FECHA_CIERRE, 
		CKCRR_NUMERO_CIERRE, 
		CKCRR_TOTAL_VENTA, 
		CKCRR_TOTAL, 
		CKCRR_OBSERVACION, 
		CKCRR_DIFERENCIA, 
		CKCRR_ESTADO_CIERRE, 
		CKCRR_ESTADO, 
		CKCRR_FECHA_INSERT, 
		CKCRR_USUARIO_INSERT, 
		CKCRR_FECHA_UPDATE, 
		CKCRR_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE
	WHERE CKCRR_ESTADO = TRUE AND 
		CKCRR_CODIGO = IN_CKCRR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CIERRE DE CAJA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DELETE(
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE.CKCRR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_CIERRE
	WHERE
		CKCRR_CODIGO = IN_CKCRR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CIERRE DE CAJA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DELETE_SOFT(
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE.CKCRR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_CIERRE SET
		CKCRR_ESTADO = FALSE
	WHERE
		CKCRR_CODIGO = IN_CKCRR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_KDX_CIERRE_S_CGG_KDX_PUNTO_VENTA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_PUNTO_VENTA.
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_S_CGG_KDX_PUNTO_VENTA(
IN IN_CKPVT_CODIGO SII.CGG_KDX_CIERRE.CKPVT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCRR_CODIGO, 
		CKPVT_CODIGO, 
		CKUPV_CODIGO, 
		CKCRR_FECHA_CIERRE, 
		CKCRR_NUMERO_CIERRE, 
		CKCRR_TOTAL_VENTA, 
		CKCRR_TOTAL, 
		CKCRR_OBSERVACION, 
		CKCRR_DIFERENCIA, 
		CKCRR_ESTADO_CIERRE, 
		CKCRR_ESTADO, 
		CKCRR_FECHA_INSERT, 
		CKCRR_USUARIO_INSERT, 
		CKCRR_FECHA_UPDATE, 
		CKCRR_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE
	WHERE CKCRR_ESTADO = TRUE AND 
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_D_CGG_KDX_PUNTO_VENTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_PUNTO_VENTA.
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_D_CGG_KDX_PUNTO_VENTA(
IN IN_CKPVT_CODIGO SII.CGG_KDX_CIERRE.CKPVT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_CIERRE
	WHERE
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_D_CGG_KDX_PUNTO_VENTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_PUNTO_VENTA.
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DS_CGG_KDX_PUNTO_VENTA(
IN IN_CKPVT_CODIGO SII.CGG_KDX_CIERRE.CKPVT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_CIERRE SET
		ckcrr_estado = false
	WHERE
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_S_CGG_KDX_USUARIO_PV
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_USUARIO_PV.
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_S_CGG_KDX_USUARIO_PV(
IN IN_CKUPV_CODIGO SII.CGG_KDX_CIERRE.CKUPV_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCRR_CODIGO, 
		CKPVT_CODIGO, 
		CKUPV_CODIGO, 
		CKCRR_FECHA_CIERRE, 
		CKCRR_NUMERO_CIERRE, 
		CKCRR_TOTAL_VENTA, 
		CKCRR_TOTAL, 
		CKCRR_OBSERVACION, 
		CKCRR_DIFERENCIA, 
		CKCRR_ESTADO_CIERRE, 
		CKCRR_ESTADO, 
		CKCRR_FECHA_INSERT, 
		CKCRR_USUARIO_INSERT, 
		CKCRR_FECHA_UPDATE, 
		CKCRR_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE
	WHERE CKCRR_ESTADO = TRUE AND 
		CKUPV_CODIGO = IN_CKUPV_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_D_CGG_KDX_USUARIO_PV
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_USUARIO_PV.
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_D_CGG_KDX_USUARIO_PV(
IN IN_CKUPV_CODIGO SII.CGG_KDX_CIERRE.CKUPV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_CIERRE
	WHERE
		CKUPV_CODIGO = IN_CKUPV_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_D_CGG_KDX_USUARIO_PV
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_USUARIO_PV.
* @param IN_CKUPV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DS_CGG_KDX_USUARIO_PV(
IN IN_CKUPV_CODIGO SII.CGG_KDX_CIERRE.CKUPV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_CIERRE SET
		ckcrr_estado = false
	WHERE
		CKUPV_CODIGO = IN_CKUPV_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

