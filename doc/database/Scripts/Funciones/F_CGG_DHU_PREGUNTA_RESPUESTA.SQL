/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA.
* @param IN_CDPRS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA RESPUESTA
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @param IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @param IN_CDPRS_VALORACION VALOR ASIGNADO A UNA RESPUESTA SOBRE UNA PREGUNTA
* @param IN_CDPRS_ESTADO ESTADO DEL REGISTRO
* @param IN_CDPRS_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDPRS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_INSERT(
IN IN_CDPRS_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_CODIGO%TYPE, 
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRG_CODIGO%TYPE, 
IN IN_CDRES_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDRES_CODIGO%TYPE, 
IN IN_CDPRS_VALORACION SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_VALORACION%TYPE, 
IN IN_CDPRS_ESTADO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_ESTADO%TYPE, 
IN IN_CDPRS_USUARIO_INSERT SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_USUARIO_INSERT%TYPE, 
IN IN_CDPRS_USUARIO_UPDATE SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDPRS_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_PREGUNTA_RESPUESTA','CDPRS_CODIGO','CDPRS') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDPRS_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_PREGUNTA_RESPUESTA(
		CDPRS_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDPRS_VALORACION, 
		CDPRS_ESTADO, 
		CDPRS_FECHA_INSERT, 
		CDPRS_USUARIO_INSERT, 
		CDPRS_FECHA_UPDATE, 
		CDPRS_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CDPRG_CODIGO, 
		IN_CDRES_CODIGO, 
		IN_CDPRS_VALORACION, 
		IN_CDPRS_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDPRS_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDPRS_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_SELECT_AS(
IN IN_USER_NAME VARCHAR(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDPRS_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDPRS_VALORACION, 
		CDPRS_ESTADO, 
		CDPRS_FECHA_INSERT, 
		CDPRS_USUARIO_INSERT, 
		CDPRS_FECHA_UPDATE, 
		CDPRS_USUARIO_UPDATE
	FROM SII.CGG_DHU_PREGUNTA_RESPUESTA
	WHERE CDPRS_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_SELECT(
IN IN_USER_NAME VARCHAR(50),
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP TEXT;
BEGIN	
	TMP:='SELECT		
		DISTINCT(CT.CDCAT_CODIGO), 		
		CT.CDCAT_NOMBRE		
		
						
	FROM SII.CGG_DHU_PREGUNTA_RESPUESTA PGRS
	INNER JOIN CGG_DHU_PREGUNTA PR ON (PR.CDPRG_CODIGO = PGRS.CDPRG_CODIGO)
	INNER JOIN CGG_DHU_CATEGORIA CT ON (CT.CDCAT_CODIGO = PR.CDCAT_CODIGO)	
	WHERE CDPRS_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',	
	CASE WHEN CT.CDCAT_NOMBRE IS NULL THEN '''' ELSE CT.CDCAT_NOMBRE END  ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	OPEN TMP_REF FOR EXECUTE TMP;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA.
* @RETURN INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_PREGUNTA_RESPUESTA PGRS
	INNER JOIN CGG_DHU_PREGUNTA PR ON (PR.CDPRG_CODIGO = PGRS.CDPRG_CODIGO)
	INNER JOIN CGG_DHU_CATEGORIA CT ON (CT.CDCAT_CODIGO = PR.CDCAT_CODIGO)
	INNER JOIN CGG_DHU_RESPUESTA RS ON (RS.CDRES_CODIGO = PGRS.CDRES_CODIGO)
	WHERE CDPRS_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @PARAM IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @RETURN TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(DISTINCT(CT.CDCAT_CODIGO)) INTO TMP_ROWS
	FROM SII.CGG_DHU_PREGUNTA_RESPUESTA PGRS
	INNER JOIN CGG_DHU_PREGUNTA PR ON (PR.CDPRG_CODIGO = PGRS.CDPRG_CODIGO)
	INNER JOIN CGG_DHU_CATEGORIA CT ON (CT.CDCAT_CODIGO = PR.CDCAT_CODIGO)	
	WHERE CDPRS_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,	
	--CASE WHEN PR.CDPRG_DESCRIPCION IS NULL THEN '''' ELSE PR.CDPRG_DESCRIPCION END ||' '||
	CASE WHEN CT.CDCAT_NOMBRE IS NULL THEN '''' ELSE CT.CDCAT_NOMBRE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA
* @PARAM IN_CDPRS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA RESPUESTA
* @PARAM IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @PARAM IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @PARAM IN_CDPRS_VALORACION VALOR ASIGNADO A UNA RESPUESTA SOBRE UNA PREGUNTA
* @PARAM IN_CDPRS_ESTADO ESTADO DEL REGISTRO
* @PARAM IN_CDPRS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @RETURN VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_UPDATE(
IN IN_CDPRS_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_CODIGO%TYPE, 
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRG_CODIGO%TYPE, 
IN IN_CDRES_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDRES_CODIGO%TYPE, 
IN IN_CDPRS_VALORACION SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_VALORACION%TYPE, 
IN IN_CDPRS_ESTADO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_ESTADO%TYPE, 
IN IN_CDPRS_USUARIO_UPDATE SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_PREGUNTA_RESPUESTA SET
		CDPRG_CODIGO = IN_CDPRG_CODIGO, 
		CDRES_CODIGO = IN_CDRES_CODIGO, 
		CDPRS_VALORACION = IN_CDPRS_VALORACION, 
		CDPRS_ESTADO = IN_CDPRS_ESTADO, 
		CDPRS_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDPRS_USUARIO_UPDATE = IN_CDPRS_USUARIO_UPDATE
	WHERE
		CDPRS_CODIGO = IN_CDPRS_CODIGO;
END$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA.
* @param IN_CDPRS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA RESPUESTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_SELECT(
IN IN_CDPRS_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDPRS_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDPRS_VALORACION, 
		CDPRS_ESTADO, 
		CDPRS_FECHA_INSERT, 
		CDPRS_USUARIO_INSERT, 
		CDPRS_FECHA_UPDATE, 
		CDPRS_USUARIO_UPDATE
	FROM SII.CGG_DHU_PREGUNTA_RESPUESTA
	WHERE CDPRS_ESTADO = TRUE AND 
		CDPRS_CODIGO = IN_CDPRS_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA.
* @param IN_CDPRS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA RESPUESTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_DELETE(
IN IN_CDPRS_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_PREGUNTA_RESPUESTA
	WHERE
		CDPRS_CODIGO = IN_CDPRS_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA.
* @param IN_CDPRS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA RESPUESTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_DELETE_SOFT(
IN IN_CDPRS_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_PREGUNTA_RESPUESTA SET
		CDPRS_ESTADO = FALSE
	WHERE
		CDPRS_CODIGO = IN_CDPRS_CODIGO;
END$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_S_CGG_DHU_RESPUESTA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_RESPUESTA.
* @param IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_S_CGG_DHU_RESPUESTA(
IN IN_CDRES_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDRES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDPRS_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDPRS_VALORACION, 
		CDPRS_ESTADO, 
		CDPRS_FECHA_INSERT, 
		CDPRS_USUARIO_INSERT, 
		CDPRS_FECHA_UPDATE, 
		CDPRS_USUARIO_UPDATE
	FROM SII.CGG_DHU_PREGUNTA_RESPUESTA
	WHERE CDPRS_ESTADO = TRUE AND 
		CDRES_CODIGO = IN_CDRES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_D_CGG_DHU_RESPUESTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_RESPUESTA.
* @param IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_D_CGG_DHU_RESPUESTA(
IN IN_CDRES_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_PREGUNTA_RESPUESTA
	WHERE
		CDRES_CODIGO = IN_CDRES_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_D_CGG_DHU_RESPUESTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_RESPUESTA.
* @param IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_DS_CGG_DHU_RESPUESTA(
IN IN_CDRES_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_PREGUNTA_RESPUESTA SET
		CDPRS_ESTADO = FALSE
	WHERE
		CDRES_CODIGO = IN_CDRES_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_S_CGG_DHU_PREGUNTA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_S_CGG_DHU_PREGUNTA(
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDPRS_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDPRS_VALORACION, 
		CDPRS_ESTADO, 
		CDPRS_FECHA_INSERT, 
		CDPRS_USUARIO_INSERT, 
		CDPRS_FECHA_UPDATE, 
		CDPRS_USUARIO_UPDATE
	FROM SII.CGG_DHU_PREGUNTA_RESPUESTA
	WHERE CDPRS_ESTADO = TRUE AND 
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_D_CGG_DHU_PREGUNTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_D_CGG_DHU_PREGUNTA(
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_PREGUNTA_RESPUESTA
	WHERE
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_D_CGG_DHU_PREGUNTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_DS_CGG_DHU_PREGUNTA(
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA_RESPUESTA.CDPRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_PREGUNTA_RESPUESTA SET
		CDPRS_ESTADO = FALSE
	WHERE
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_DELETE_ALL_BYCATEGORIA
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA.
* @param IN_CDPRS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA RESPUESTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_DELETE_ALL_BYCATEGORIA(
IN IN_CDCAT_CODIGO SII.CGG_DHU_CATEGORIA.CDCAT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN        
	DELETE
	FROM SII.CGG_DHU_PREGUNTA_RESPUESTA	
	WHERE CDPRG_CODIGO IN (SELECT CDPRG_CODIGO FROM CGG_DHU_PREGUNTA WHERE CDCAT_CODIGO = IN_CDCAT_CODIGO) ;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.sii.F_CGG_DHU_PREGUNTA_RESPUESTA_SELECT_BY_CATEGORIA
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA_RESPUESTA.
* @param IN_CDCAT_CODIGO CATEGORIA SELECCIONADA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_RESPUESTA_SELECT_BY_CATEGORIA(
IN IN_CDCAT_CODIGO VARCHAR(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	select DISTINCT RES.CDRES_CODIGO,
	CDRES_DESCRIPCION,
	(SELECT PRS2.CDPRS_VALORACION 
		FROM SII.CGG_DHU_PREGUNTA_RESPUESTA PRS2
		INNER JOIN SII.CGG_DHU_PREGUNTA PRG2 ON (PRG2.CDPRG_CODIGO = PRS2.CDPRG_CODIGO)
		WHERE PRS2.CDPRS_CODIGO = PRS.CDPRS_CODIGO AND PRG2.CDCAT_CODIGO = IN_CDCAT_CODIGO
	) CDPRS_VALORACION
	from SII.CGG_DHU_RESPUESTA RES
	LEFT JOIN SII.CGG_DHU_PREGUNTA_RESPUESTA PRS ON(PRS.CDRES_CODIGO = RES.CDRES_CODIGO)
	WHERE RES.CDRES_ESTADO = TRUE;

	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;