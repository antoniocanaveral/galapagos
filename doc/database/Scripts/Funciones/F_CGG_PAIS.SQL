/**
* FUNCION SII.F_CGG_PAIS_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_PAIS
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @param IN_CPAIS_NOMBRE NOMBRE DEL PAIS
* @param IN_CPAIS_ISO ABREVIATURA ISO DEL NOMBRE DEL PAIS
* @param IN_CPAIS_DESCRIPCION DESCRIPCION DEL PAIS O CODIGO INTERNACIONAL
* @param IN_CPAIS_ESTADO ESTADO DEL RESGISTRO
* @param IN_CPAIS_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CPAIS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PAIS_INSERT(
IN IN_CPAIS_CODIGO SII.CGG_PAIS.CPAIS_CODIGO%TYPE,
IN IN_CPAIS_NOMBRE SII.CGG_PAIS.CPAIS_NOMBRE%TYPE,
IN IN_CPAIS_ISO SII.CGG_PAIS.CPAIS_ISO%TYPE,
IN IN_CPAIS_DESCRIPCION SII.CGG_PAIS.CPAIS_DESCRIPCION%TYPE,
IN IN_CPAIS_ESTADO SII.CGG_PAIS.CPAIS_ESTADO%TYPE,
IN IN_CPAIS_USUARIO_INSERT SII.CGG_PAIS.CPAIS_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN
	SELECT COUNT(CPAIS_CODIGO) INTO TMP_COUNT FROM SII.CGG_PAIS WHERE UPPER(CPAIS_NOMBRE) = UPPER(IN_CPAIS_NOMBRE);
	IF(TMP_COUNT > 0)THEN
		RAISE EXCEPTION 'El nombre de pa&iacute;s ya esta registrado.';
	END IF;
	IF (UPPER(IN_CPAIS_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_PAIS','CPAIS_CODIGO','CPAIS') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CPAIS_CODIGO;
	END IF;
	INSERT INTO SII.CGG_PAIS(
		CPAIS_CODIGO, 
		CPAIS_NOMBRE, 
		CPAIS_ISO, 
		CPAIS_DESCRIPCION, 
		CPAIS_ESTADO, 
		CPAIS_FECHA_INSERT, 
		CPAIS_USUARIO_INSERT, 
		CPAIS_FECHA_UPDATE, 
		CPAIS_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CPAIS_NOMBRE, 
		UPPER(IN_CPAIS_ISO), 
		IN_CPAIS_DESCRIPCION, 
		IN_CPAIS_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CPAIS_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CPAIS_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PAIS_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_PAIS
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PAIS_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CPAIS_CODIGO, 
		CPAIS_NOMBRE, 
		CPAIS_ISO, 
		CPAIS_DESCRIPCION
	FROM SII.CGG_PAIS
	WHERE CPAIS_ESTADO = TRUE
	ORDER BY CPAIS_NOMBRE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PAIS_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_PAIS
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PAIS_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CPAIS_CODIGO, 
		CPAIS_NOMBRE, 
		CPAIS_ISO, 
		CPAIS_DESCRIPCION, 
		CPAIS_ESTADO, 
		CPAIS_FECHA_INSERT, 
		CPAIS_USUARIO_INSERT, 
		CPAIS_FECHA_UPDATE, 
		CPAIS_USUARIO_UPDATE
	FROM SII.CGG_PAIS
	WHERE CPAIS_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CPAIS_NOMBRE, '''')||'' ''||COALESCE(CPAIS_ISO, '''')||'' ''||COALESCE(CPAIS_DESCRIPCION, '''')||'' ''||COALESCE(CPAIS_ESTADO, FALSE)||'' ''||COALESCE(CPAIS_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CPAIS_USUARIO_INSERT, '''')||'' ''||COALESCE(CPAIS_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CPAIS_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PAIS_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_PAIS
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PAIS_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_PAIS
	WHERE CPAIS_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PAIS_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_PAIS
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PAIS_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_PAIS
	WHERE CPAIS_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CPAIS_NOMBRE, '''')||' '||COALESCE(CPAIS_ISO, '''')||' '||COALESCE(CPAIS_DESCRIPCION, '''')||' '||COALESCE(CPAIS_ESTADO, FALSE)||' '||COALESCE(CPAIS_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CPAIS_USUARIO_INSERT, '''')||' '||COALESCE(CPAIS_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CPAIS_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PAIS_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_PAIS
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @param IN_CPAIS_NOMBRE NOMBRE DEL PAIS
* @param IN_CPAIS_ISO ABREVIATURA ISO DEL NOMBRE DEL PAIS
* @param IN_CPAIS_DESCRIPCION DESCRIPCION DEL PAIS O CODIGO INTERNACIONAL
* @param IN_CPAIS_ESTADO ESTADO DEL REGISTRO
* @param IN_CPAIS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PAIS_UPDATE(
IN IN_CPAIS_CODIGO SII.CGG_PAIS.CPAIS_CODIGO%TYPE,
IN IN_CPAIS_NOMBRE SII.CGG_PAIS.CPAIS_NOMBRE%TYPE,
IN IN_CPAIS_ISO SII.CGG_PAIS.CPAIS_ISO%TYPE,
IN IN_CPAIS_DESCRIPCION SII.CGG_PAIS.CPAIS_DESCRIPCION%TYPE,
IN IN_CPAIS_ESTADO SII.CGG_PAIS.CPAIS_ESTADO%TYPE,
IN IN_CPAIS_USUARIO_UPDATE SII.CGG_PAIS.CPAIS_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_PAIS SET
		CPAIS_NOMBRE = IN_CPAIS_NOMBRE, 
		CPAIS_ISO = UPPER(IN_CPAIS_ISO), 
		CPAIS_DESCRIPCION = IN_CPAIS_DESCRIPCION, 
		CPAIS_ESTADO = IN_CPAIS_ESTADO, 
		CPAIS_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CPAIS_USUARIO_UPDATE = IN_CPAIS_USUARIO_UPDATE
	WHERE
		CPAIS_CODIGO = IN_CPAIS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PAIS_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_PAIS
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PAIS_SELECT(
IN IN_CPAIS_CODIGO SII.CGG_PAIS.CPAIS_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CPAIS_CODIGO, 
		CPAIS_NOMBRE, 
		CPAIS_ISO, 
		CPAIS_DESCRIPCION, 
		CPAIS_ESTADO, 
		CPAIS_FECHA_INSERT, 
		CPAIS_USUARIO_INSERT, 
		CPAIS_FECHA_UPDATE, 
		CPAIS_USUARIO_UPDATE
	FROM SII.CGG_PAIS
	WHERE CPAIS_ESTADO = TRUE AND 
		CPAIS_CODIGO = IN_CPAIS_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PAIS_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_PAIS
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PAIS_DELETE(
IN IN_CPAIS_CODIGO SII.CGG_PAIS.CPAIS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_PAIS
	WHERE
		CPAIS_CODIGO = IN_CPAIS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PAIS_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_PAIS
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PAIS_DELETE_SOFT(
IN IN_CPAIS_CODIGO SII.CGG_PAIS.CPAIS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_PAIS SET
		CPAIS_ESTADO = FALSE
	WHERE
		CPAIS_CODIGO = IN_CPAIS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

