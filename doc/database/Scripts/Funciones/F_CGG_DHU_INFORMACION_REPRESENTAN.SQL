/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN
* @param IN_CDINR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORMACION DE REPRESENTANTE
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @param IN_CDINR_DESCRIPCION DESCRIPCION DEL REPRESENTANTE
* @param IN_CDINR_TIPO_REPRESENTANTE IDENTIFICA EL TIPO DE REPRESENTANTE
0 - PADRE
1 - MADRE
2 - REPRESENTANTE LEGAL
3 - GARANTE
4 - APODERADO

* @param IN_CDINR_ESTADO ESTADO DEL REGISTRO
* @param IN_CDINR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDINR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_INSERT(
IN IN_CDINR_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CRPER_CODIGO%TYPE, 
IN IN_CDBEC_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDBEC_CODIGO%TYPE, 
IN IN_CDINR_DESCRIPCION SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_DESCRIPCION%TYPE, 
IN IN_CDINR_TIPO_REPRESENTANTE SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_TIPO_REPRESENTANTE%TYPE, 
IN IN_CDINR_ESTADO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_ESTADO%TYPE, 
IN IN_CDINR_USUARIO_INSERT SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_USUARIO_INSERT%TYPE, 
IN IN_CDINR_USUARIO_UPDATE SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDINR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_INFORMACION_REPRESENTAN','CDINR_CODIGO','CDINR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDINR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_INFORMACION_REPRESENTAN(
		CDINR_CODIGO, 
		CRPER_CODIGO, 
		CDBEC_CODIGO, 
		CDINR_DESCRIPCION, 
		CDINR_TIPO_REPRESENTANTE, 
		CDINR_ESTADO, 
		CDINR_FECHA_INSERT, 
		CDINR_USUARIO_INSERT, 
		CDINR_FECHA_UPDATE, 
		CDINR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CDBEC_CODIGO, 
		IN_CDINR_DESCRIPCION, 
		IN_CDINR_TIPO_REPRESENTANTE, 
		IN_CDINR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDINR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDINR_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDINR_CODIGO, 
		CRPER_CODIGO, 
		CDBEC_CODIGO, 
		CDINR_DESCRIPCION, 
		CDINR_TIPO_REPRESENTANTE, 
		CDINR_ESTADO, 
		CDINR_FECHA_INSERT, 
		CDINR_USUARIO_INSERT, 
		CDINR_FECHA_UPDATE, 
		CDINR_USUARIO_UPDATE
	FROM SII.CGG_DHU_INFORMACION_REPRESENTAN
	WHERE CDINR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		INR.CDINR_CODIGO, 
		INR.CRPER_CODIGO, 
		(PER.CRPER_NOMBRES||'' ''||PER.CRPER_APELLIDO_PATERNO||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,''''))AS CRPER_NOMBRES,
		INR.CDBEC_CODIGO, 
		INR.CDINR_DESCRIPCION, 
		INR.CDINR_TIPO_REPRESENTANTE, 
		INR.CDINR_ESTADO, 
		INR.CDINR_FECHA_INSERT, 
		INR.CDINR_USUARIO_INSERT, 
		INR.CDINR_FECHA_UPDATE, 
		INR.CDINR_USUARIO_UPDATE
	FROM SII.CGG_DHU_INFORMACION_REPRESENTAN INR
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=INR.CRPER_CODIGO)
	WHERE CDINR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN CDINR_CODIGO IS NULL THEN '''' ELSE CDINR_CODIGO END ||'' ''||
	CASE WHEN CRPER_CODIGO IS NULL THEN '''' ELSE CRPER_CODIGO END ||'' ''||
	CASE WHEN PER.CRPER_NOMBRES IS NULL THEN '''' ELSE PER.CRPER_NOMBRES END||'' ''||
	CASE WHEN PER.CRPER_APELLIDO_PATERNO IS NULL '''' ELSE PER.CRPER_APELLIDO_PATERNO||'' ''||
	CASE WHEN PER.CRPER_APELLIDO_MATERNO IS NULL '''' ELSE PER.CRPER_APELLIDO_MATERNO||'' ''||
	CASE WHEN CDBEC_CODIGO IS NULL THEN '''' ELSE CDBEC_CODIGO END ||'' ''||
	CASE WHEN CDINR_DESCRIPCION IS NULL THEN '''' ELSE CDINR_DESCRIPCION END ||'' ''||
	CASE WHEN CDINR_TIPO_REPRESENTANTE IS NULL THEN 0 ELSE CDINR_TIPO_REPRESENTANTE END ||'' ''||
	CASE WHEN CDINR_ESTADO IS NULL THEN FALSE ELSE CDINR_ESTADO END ||'' ''||
	CASE WHEN CDINR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDINR_FECHA_INSERT END ||'' ''||
	CASE WHEN CDINR_USUARIO_INSERT IS NULL THEN '''' ELSE CDINR_USUARIO_INSERT END ||'' ''||
	CASE WHEN CDINR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDINR_FECHA_UPDATE END ||'' ''||
	CASE WHEN CDINR_USUARIO_UPDATE IS NULL THEN '''' ELSE CDINR_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_INFORMACION_REPRESENTAN
	WHERE CDINR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_INFORMACION_REPRESENTAN
	WHERE CDINR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CDINR_CODIGO IS NULL THEN '''' ELSE CDINR_CODIGO END ||' '||CASE WHEN CRPER_CODIGO IS NULL THEN '''' ELSE CRPER_CODIGO END ||' '||CASE WHEN CDBEC_CODIGO IS NULL THEN '''' ELSE CDBEC_CODIGO END ||' '||CASE WHEN CDINR_DESCRIPCION IS NULL THEN '''' ELSE CDINR_DESCRIPCION END ||' '||CASE WHEN CDINR_TIPO_REPRESENTANTE IS NULL THEN 0 ELSE CDINR_TIPO_REPRESENTANTE END ||' '||CASE WHEN CDINR_ESTADO IS NULL THEN FALSE ELSE CDINR_ESTADO END ||' '||CASE WHEN CDINR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDINR_FECHA_INSERT END ||' '||CASE WHEN CDINR_USUARIO_INSERT IS NULL THEN '''' ELSE CDINR_USUARIO_INSERT END ||' '||CASE WHEN CDINR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDINR_FECHA_UPDATE END ||' '||CASE WHEN CDINR_USUARIO_UPDATE IS NULL THEN '''' ELSE CDINR_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_INFORMACION_REPRESENTAN
* @param IN_CDINR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORMACION DE REPRESENTANTE
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @param IN_CDINR_DESCRIPCION DESCRIPCION DEL REPRESENTANTE
* @param IN_CDINR_TIPO_REPRESENTANTE IDENTIFICA EL TIPO DE REPRESENTANTE
0 - PADRE
1 - MADRE
2 - REPRESENTANTE LEGAL
3 - GARANTE
4 - APODERADO

* @param IN_CDINR_ESTADO ESTADO DEL REGISTRO
* @param IN_CDINR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_UPDATE(
IN IN_CDINR_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CRPER_CODIGO%TYPE, 
IN IN_CDBEC_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDBEC_CODIGO%TYPE, 
IN IN_CDINR_DESCRIPCION SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_DESCRIPCION%TYPE, 
IN IN_CDINR_TIPO_REPRESENTANTE SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_TIPO_REPRESENTANTE%TYPE, 
IN IN_CDINR_ESTADO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_ESTADO%TYPE, 
IN IN_CDINR_USUARIO_UPDATE SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_INFORMACION_REPRESENTAN SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CDBEC_CODIGO = IN_CDBEC_CODIGO, 
		CDINR_DESCRIPCION = IN_CDINR_DESCRIPCION, 
		CDINR_TIPO_REPRESENTANTE = IN_CDINR_TIPO_REPRESENTANTE, 
		CDINR_ESTADO = IN_CDINR_ESTADO, 
		CDINR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDINR_USUARIO_UPDATE = IN_CDINR_USUARIO_UPDATE
	WHERE
		CDINR_CODIGO = IN_CDINR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN
* @param IN_CDINR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORMACION DE REPRESENTANTE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_SELECT(
IN IN_CDINR_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDINR_CODIGO, 
		CRPER_CODIGO, 
		CDBEC_CODIGO, 
		CDINR_DESCRIPCION, 
		CDINR_TIPO_REPRESENTANTE, 
		CDINR_ESTADO, 
		CDINR_FECHA_INSERT, 
		CDINR_USUARIO_INSERT, 
		CDINR_FECHA_UPDATE, 
		CDINR_USUARIO_UPDATE
	FROM SII.CGG_DHU_INFORMACION_REPRESENTAN
	WHERE CDINR_ESTADO = TRUE AND 
		CDINR_CODIGO = IN_CDINR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN
* @param IN_CDINR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORMACION DE REPRESENTANTE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_DELETE(
IN IN_CDINR_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_INFORMACION_REPRESENTAN
	WHERE
		CDINR_CODIGO = IN_CDINR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN
* @param IN_CDINR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORMACION DE REPRESENTANTE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_DELETE_SOFT(
IN IN_CDINR_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDINR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_INFORMACION_REPRESENTAN SET
		CDINR_ESTADO = FALSE
	WHERE
		CDINR_CODIGO = IN_CDINR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_S_CGG_DHU_BECA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_S_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDBEC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDINR_CODIGO, 
		CRPER_CODIGO, 
		CDBEC_CODIGO, 
		CDINR_DESCRIPCION, 
		CDINR_TIPO_REPRESENTANTE, 
		CDINR_ESTADO, 
		CDINR_FECHA_INSERT, 
		CDINR_USUARIO_INSERT, 
		CDINR_FECHA_UPDATE, 
		CDINR_USUARIO_UPDATE
	FROM SII.CGG_DHU_INFORMACION_REPRESENTAN
	WHERE CDINR_ESTADO = TRUE AND 
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_D_CGG_DHU_BECA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_D_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDBEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_INFORMACION_REPRESENTAN
	WHERE
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_D_CGG_DHU_BECA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_DS_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CDBEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_INFORMACION_REPRESENTAN SET
		cdinr_estado = false
	WHERE
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDINR_CODIGO, 
		CRPER_CODIGO, 
		CDBEC_CODIGO, 
		CDINR_DESCRIPCION, 
		CDINR_TIPO_REPRESENTANTE, 
		CDINR_ESTADO, 
		CDINR_FECHA_INSERT, 
		CDINR_USUARIO_INSERT, 
		CDINR_FECHA_UPDATE, 
		CDINR_USUARIO_UPDATE
	FROM SII.CGG_DHU_INFORMACION_REPRESENTAN
	WHERE CDINR_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_INFORMACION_REPRESENTAN
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_INFORMACION_REPRESENTAN QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INFORMACION_REPRESENTAN_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_DHU_INFORMACION_REPRESENTAN.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_INFORMACION_REPRESENTAN SET
		cdinr_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

