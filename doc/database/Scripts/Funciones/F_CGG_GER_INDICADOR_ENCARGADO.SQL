/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO
* @param IN_CGGIE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGGIE_ESTADO ESTADO DEL REGISTRO
* @param IN_CGGIE_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGGIE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_INSERT(
IN IN_CGGIE_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIE_CODIGO%TYPE,
IN IN_CCTN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CCTN_CODIGO%TYPE,
IN IN_CUSU_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CUSU_CODIGO%TYPE,
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIN_CODIGO%TYPE,
IN IN_CGGIE_ESTADO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIE_ESTADO%TYPE,
IN IN_CGGIE_USUARIO_INSERT SII.CGG_GER_INDICADOR_ENCARGADO.CGGIE_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGGIE_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GER_INDICADOR_ENCARGADO','CGGIE_CODIGO','CGGIE') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGGIE_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GER_INDICADOR_ENCARGADO(
		CGGIE_CODIGO, 
		CCTN_CODIGO, 
		CUSU_CODIGO, 
		CGGIN_CODIGO, 
		CGGIE_ESTADO, 
		CGGIE_FECHA_INSERT, 
		CGGIE_USUARIO_INSERT, 
		CGGIE_FECHA_UPDATE, 
		CGGIE_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CCTN_CODIGO, 
		IN_CUSU_CODIGO, 
		IN_CGGIN_CODIGO, 
		IN_CGGIE_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGGIE_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGGIE_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGGIE_CODIGO, 
		CCTN_CODIGO, 
		CUSU_CODIGO, 
		CGGIN_CODIGO, 
		CGGIE_ESTADO, 
		CGGIE_FECHA_INSERT, 
		CGGIE_USUARIO_INSERT, 
		CGGIE_FECHA_UPDATE, 
		CGGIE_USUARIO_UPDATE
	FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE CGGIE_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGGIE_CODIGO, 
		IEN.CCTN_CODIGO, 
		IEN.CUSU_CODIGO, 
		IEN.CGGIN_CODIGO, 
		CGGIE_ESTADO, 
		CGGIE_FECHA_INSERT, 
		CGGIE_USUARIO_INSERT, 
		CGGIE_FECHA_UPDATE, 
		CGGIE_USUARIO_UPDATE,
		CGGIN_NOMBRE,
		CUSU_NOMBRE_USUARIO,
		CCTN_NOMBRE
	FROM SII.CGG_GER_INDICADOR_ENCARGADO IEN INNER JOIN SII.CGG_GER_INDICADOR IND ON (IND.CGGIN_CODIGO = IEN.CGGIN_CODIGO)
	INNER JOIN SII.CGG_USUARIO USU ON (USU.CUSU_CODIGO = IEN.CUSU_CODIGO)
	INNER JOIN SII.CGG_CANTON CAN ON (CAN.CCTN_CODIGO = IEN.CCTN_CODIGO)
	WHERE CGGIE_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CCTN_NOMBRE, '''')||'' ''||COALESCE(CUSU_NOMBRE_USUARIO, '''')||'' ''||COALESCE(CGGIN_NOMBRE, '''')||'' ''||COALESCE(CGGIE_ESTADO, FALSE)||'' ''||COALESCE(CGGIE_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGGIE_USUARIO_INSERT, '''')||'' ''||COALESCE(CGGIE_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGGIE_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE CGGIE_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GER_INDICADOR_ENCARGADO IEN INNER JOIN SII.CGG_GER_INDICADOR IND ON (IND.CGGIN_CODIGO = IEN.CGGIN_CODIGO)
	INNER JOIN SII.CGG_USUARIO USU ON (USU.CUSU_CODIGO = IEN.CUSU_CODIGO)
	INNER JOIN SII.CGG_CANTON CAN ON (CAN.CCTN_CODIGO = IEN.CCTN_CODIGO)
	WHERE CGGIE_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CCTN_NOMBRE, '')||' '||COALESCE(CUSU_NOMBRE_USUARIO, '')||' '||COALESCE(CGGIN_NOMBRE, '')||' '||COALESCE(CGGIE_ESTADO, FALSE)||' '||COALESCE(CGGIE_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGGIE_USUARIO_INSERT, '''')||' '||COALESCE(CGGIE_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGGIE_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GER_INDICADOR_ENCARGADO
* @param IN_CGGIE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGGIE_ESTADO ESTADO DEL REGISTRO
* @param IN_CGGIE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_UPDATE(
IN IN_CGGIE_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIE_CODIGO%TYPE,
IN IN_CCTN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CCTN_CODIGO%TYPE,
IN IN_CUSU_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CUSU_CODIGO%TYPE,
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIN_CODIGO%TYPE,
IN IN_CGGIE_ESTADO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIE_ESTADO%TYPE,
IN IN_CGGIE_USUARIO_UPDATE SII.CGG_GER_INDICADOR_ENCARGADO.CGGIE_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GER_INDICADOR_ENCARGADO SET
		CCTN_CODIGO = IN_CCTN_CODIGO, 
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CGGIN_CODIGO = IN_CGGIN_CODIGO, 
		CGGIE_ESTADO = IN_CGGIE_ESTADO, 
		CGGIE_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGGIE_USUARIO_UPDATE = IN_CGGIE_USUARIO_UPDATE
	WHERE
		CGGIE_CODIGO = IN_CGGIE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO
* @param IN_CGGIE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_SELECT(
IN IN_CGGIE_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIE_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGGIE_CODIGO, 
		CCTN_CODIGO, 
		CUSU_CODIGO, 
		CGGIN_CODIGO, 
		CGGIE_ESTADO, 
		CGGIE_FECHA_INSERT, 
		CGGIE_USUARIO_INSERT, 
		CGGIE_FECHA_UPDATE, 
		CGGIE_USUARIO_UPDATE
	FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE CGGIE_ESTADO = TRUE AND 
		CGGIE_CODIGO = IN_CGGIE_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO
* @param IN_CGGIE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_DELETE(
IN IN_CGGIE_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE
		CGGIE_CODIGO = IN_CGGIE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO
* @param IN_CGGIE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_DELETE_SOFT(
IN IN_CGGIE_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GER_INDICADOR_ENCARGADO SET
		CGGIE_ESTADO = FALSE
	WHERE
		CGGIE_CODIGO = IN_CGGIE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_S_CGG_GER_INDICADOR
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GER_INDICADOR.
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_S_CGG_GER_INDICADOR(
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGGIE_CODIGO, 
		CCTN_CODIGO, 
		CUSU_CODIGO, 
		CGGIN_CODIGO, 
		CGGIE_ESTADO, 
		CGGIE_FECHA_INSERT, 
		CGGIE_USUARIO_INSERT, 
		CGGIE_FECHA_UPDATE, 
		CGGIE_USUARIO_UPDATE
	FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE CGGIE_ESTADO = TRUE AND 
		CGGIN_CODIGO = IN_CGGIN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_D_CGG_GER_INDICADOR
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GER_INDICADOR.
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_D_CGG_GER_INDICADOR(
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE
		CGGIN_CODIGO = IN_CGGIN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_D_CGG_GER_INDICADOR
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GER_INDICADOR.
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_DS_CGG_GER_INDICADOR(
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CGGIN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GER_INDICADOR_ENCARGADO SET
		cggie_estado = false
	WHERE
		CGGIN_CODIGO = IN_CGGIN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_S_CGG_CANTON
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_S_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CCTN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGGIE_CODIGO, 
		CCTN_CODIGO, 
		CUSU_CODIGO, 
		CGGIN_CODIGO, 
		CGGIE_ESTADO, 
		CGGIE_FECHA_INSERT, 
		CGGIE_USUARIO_INSERT, 
		CGGIE_FECHA_UPDATE, 
		CGGIE_USUARIO_UPDATE
	FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE CGGIE_ESTADO = TRUE AND 
		CCTN_CODIGO = IN_CCTN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_D_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_DS_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GER_INDICADOR_ENCARGADO SET
		cggie_estado = false
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGGIE_CODIGO, 
		CCTN_CODIGO, 
		CUSU_CODIGO, 
		CGGIN_CODIGO, 
		CGGIE_ESTADO, 
		CGGIE_FECHA_INSERT, 
		CGGIE_USUARIO_INSERT, 
		CGGIE_FECHA_UPDATE, 
		CGGIE_USUARIO_UPDATE
	FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE CGGIE_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_ENCARGADO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_ENCARGADO_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_GER_INDICADOR_ENCARGADO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GER_INDICADOR_ENCARGADO SET
		cggie_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GER_INDICADOR_CANTON_BY_INDI
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GER_INDICADOR_ENCARGADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_CGGIN_CODIGO CODIGO DEL INDICADOR
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_CANTON_BY_INDI(
IN IN_USER_NAME VARCHAR,
IN IN_CGGIN_CODIGO VARCHAR,
IN IN_CCTN_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_COD VARCHAR;
	TMP_COD_USER_CONECT VARCHAR;
BEGIN
	SELECT CUSU_CODIGO INTO TMP_COD_USER_CONECT
	FROM SII.CGG_USUARIO
	WHERE CUSU_ESTADO = TRUE AND CUSU_NOMBRE_USUARIO = IN_USER_NAME;
	
	SELECT CUSU_CODIGO INTO TMP_COD
	FROM SII.CGG_GER_INDICADOR_ENCARGADO
	WHERE CGGIE_ESTADO = TRUE AND CGGIN_CODIGO = IN_CGGIN_CODIGO AND CCTN_CODIGO = IN_CCTN_CODIGO AND CUSU_CODIGO = TMP_COD_USER_CONECT;
	
	IF (TMP_COD = TMP_COD_USER_CONECT) THEN
		OPEN TMP_REF FOR
		SELECT
			CGGIE_CODIGO, 
			CCTN_CODIGO, 
			CUSU_CODIGO, 
			CGGIN_CODIGO, 
			CGGIE_ESTADO, 
			CGGIE_FECHA_INSERT, 
			CGGIE_USUARIO_INSERT, 
			CGGIE_FECHA_UPDATE, 
			CGGIE_USUARIO_UPDATE
		FROM SII.CGG_GER_INDICADOR_ENCARGADO
		WHERE CGGIE_ESTADO = TRUE AND CUSU_CODIGO = TMP_COD AND CGGIN_CODIGO = IN_CGGIN_CODIGO AND CCTN_CODIGO = IN_CCTN_CODIGO;
		RETURN NEXT TMP_REF;
	ELSE
		OPEN TMP_REF FOR
		SELECT
			CGGIE_CODIGO, 
			CCTN_CODIGO, 
			CUSU_CODIGO, 
			CGGIN_CODIGO, 
			CGGIE_ESTADO, 
			CGGIE_FECHA_INSERT, 
			CGGIE_USUARIO_INSERT, 
			CGGIE_FECHA_UPDATE, 
			CGGIE_USUARIO_UPDATE
		FROM SII.CGG_GER_INDICADOR_ENCARGADO
		WHERE CGGIE_ESTADO = TRUE AND CGGIE_CODIGO is null;
		RETURN NEXT TMP_REF;
	END IF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* SELECCIONA LOS CORREOS ELECTRONICOS DE LOS USUARIOS RESPONSABLES DE ACTUALIZAR LOS
* INDICADORES DEL MODULO GERENCIAL.
*/
CREATE OR REPLACE FUNCTION SII.F_SELECT_LEADERS(
)RETURNS REFCURSOR AS
$$
DECLARE
OUT_REF REFCURSOR;
BEGIN
	OPEN OUT_REF FOR
		SELECT CNT.CCTN_NOMBRE,
			IND.CGGIN_NOMBRE, 
			UC.CSUCT_CONTACTO 
		FROM SII.CGG_GER_INDICADOR IND
		INNER JOIN SII.CGG_GER_INDICADOR_ENCARGADO INE ON INE.CGGIN_CODIGO = IND.CGGIN_CODIGO
		INNER JOIN SII.CGG_CANTON CNT ON CNT.CCTN_CODIGO = INE.CCTN_CODIGO
		INNER JOIN SII.CGG_SEC_USUARIO_CONTACTO UC ON UC.CUSU_CODIGO = INE.CUSU_CODIGO
		INNER JOIN SII.CGG_RES_TIPO_CONTACTO TPC ON TPC.CRTCO_CODIGO = UC.CRTCO_CODIGO AND TPC.CRTCO_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF43');
	RETURN OUT_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;