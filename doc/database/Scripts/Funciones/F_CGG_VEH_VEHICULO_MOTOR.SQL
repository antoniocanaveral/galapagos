/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_VEH_VEHICULO_MOTOR
* @param IN_CVVMT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO  DE VEHICULO MOTOR
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @param IN_CVVMT_FECHA FECHA QUE SE ASIGNO EL MOTOR
* @param IN_CVVMT_OBSERVACION OBSERVACION DEL MOTOR DEL VEHICULO
* @param IN_CVVMT_ESTADO ESTADO DEL REGISTRO
* @param IN_CVVMT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CVVMT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_INSERT(
IN IN_CVVMT_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_CODIGO%TYPE,
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVEH_CODIGO%TYPE,
IN IN_CVMTR_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVMTR_CODIGO%TYPE,
IN IN_CVVMT_FECHA SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_FECHA%TYPE,
IN IN_CVVMT_OBSERVACION SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_OBSERVACION%TYPE,
IN IN_CVVMT_ESTADO SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_ESTADO%TYPE,
IN IN_CVVMT_USUARIO_INSERT SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CVVMT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_VEH_VEHICULO_MOTOR','CVVMT_CODIGO','CVVMT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CVVMT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_VEH_VEHICULO_MOTOR(
		CVVMT_CODIGO, 
		CVVEH_CODIGO, 
		CVMTR_CODIGO, 
		CVVMT_FECHA, 
		CVVMT_OBSERVACION, 
		CVVMT_ESTADO, 
		CVVMT_FECHA_INSERT, 
		CVVMT_USUARIO_INSERT, 
		CVVMT_FECHA_UPDATE, 
		CVVMT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CVVEH_CODIGO, 
		IN_CVMTR_CODIGO, 
		IN_CVVMT_FECHA, 
		IN_CVVMT_OBSERVACION, 
		IN_CVVMT_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CVVMT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CVVMT_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVVMT_CODIGO, 
		CVVEH_CODIGO, 
		CVMTR_CODIGO, 
		CVVMT_FECHA, 
		CVVMT_OBSERVACION, 
		CVVMT_ESTADO, 
		CVVMT_FECHA_INSERT, 
		CVVMT_USUARIO_INSERT, 
		CVVMT_FECHA_UPDATE, 
		CVVMT_USUARIO_UPDATE
	FROM SII.CGG_VEH_VEHICULO_MOTOR
	WHERE CVVMT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CVVMT_CODIGO, 
		CVVEH_CODIGO, 
		CVMTR_CODIGO, 
		CVVMT_FECHA, 
		CVVMT_OBSERVACION, 
		CVVMT_ESTADO, 
		CVVMT_FECHA_INSERT, 
		CVVMT_USUARIO_INSERT, 
		CVVMT_FECHA_UPDATE, 
		CVVMT_USUARIO_UPDATE
	FROM SII.CGG_VEH_VEHICULO_MOTOR
	WHERE CVVMT_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CVVMT_FECHA, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVVMT_OBSERVACION, '''')||'' ''||COALESCE(CVVMT_ESTADO, FALSE)||'' ''||COALESCE(CVVMT_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVVMT_USUARIO_INSERT, '''')||'' ''||COALESCE(CVVMT_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVVMT_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_VEHICULO_MOTOR
	WHERE CVVMT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_VEHICULO_MOTOR
	WHERE CVVMT_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CVVMT_FECHA, CURRENT_TIMESTAMP)||' '||COALESCE(CVVMT_OBSERVACION, '''')||' '||COALESCE(CVVMT_ESTADO, FALSE)||' '||COALESCE(CVVMT_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CVVMT_USUARIO_INSERT, '''')||' '||COALESCE(CVVMT_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CVVMT_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_VEH_VEHICULO_MOTOR
* @param IN_CVVMT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO  DE VEHICULO MOTOR
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @param IN_CVVMT_FECHA FECHA QUE SE ASIGNO EL MOTOR
* @param IN_CVVMT_OBSERVACION OBSERVACION DEL MOTOR DEL VEHICULO
* @param IN_CVVMT_ESTADO ESTADO DEL REGISTRO
* @param IN_CVVMT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_UPDATE(
IN IN_CVVMT_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_CODIGO%TYPE,
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVEH_CODIGO%TYPE,
IN IN_CVMTR_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVMTR_CODIGO%TYPE,
IN IN_CVVMT_FECHA SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_FECHA%TYPE,
IN IN_CVVMT_OBSERVACION SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_OBSERVACION%TYPE,
IN IN_CVVMT_ESTADO SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_ESTADO%TYPE,
IN IN_CVVMT_USUARIO_UPDATE SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_VEHICULO_MOTOR SET
		CVVEH_CODIGO = IN_CVVEH_CODIGO, 
		CVMTR_CODIGO = IN_CVMTR_CODIGO, 
		CVVMT_FECHA = IN_CVVMT_FECHA, 
		CVVMT_OBSERVACION = IN_CVVMT_OBSERVACION, 
		CVVMT_ESTADO = IN_CVVMT_ESTADO, 
		CVVMT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CVVMT_USUARIO_UPDATE = IN_CVVMT_USUARIO_UPDATE
	WHERE
		CVVMT_CODIGO = IN_CVVMT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_VEH_VEHICULO_MOTOR
* @param IN_CVVMT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO  DE VEHICULO MOTOR
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_SELECT(
IN IN_CVVMT_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVVMT_CODIGO, 
		CVVEH_CODIGO, 
		CVMTR_CODIGO, 
		CVVMT_FECHA, 
		CVVMT_OBSERVACION, 
		CVVMT_ESTADO, 
		CVVMT_FECHA_INSERT, 
		CVVMT_USUARIO_INSERT, 
		CVVMT_FECHA_UPDATE, 
		CVVMT_USUARIO_UPDATE
	FROM SII.CGG_VEH_VEHICULO_MOTOR
	WHERE CVVMT_ESTADO = TRUE AND 
		CVVMT_CODIGO = IN_CVVMT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_VEH_VEHICULO_MOTOR
* @param IN_CVVMT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO  DE VEHICULO MOTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_DELETE(
IN IN_CVVMT_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_VEHICULO_MOTOR
	WHERE
		CVVMT_CODIGO = IN_CVVMT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_VEH_VEHICULO_MOTOR
* @param IN_CVVMT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO  DE VEHICULO MOTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_DELETE_SOFT(
IN IN_CVVMT_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVMT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_VEHICULO_MOTOR SET
		CVVMT_ESTADO = FALSE
	WHERE
		CVVMT_CODIGO = IN_CVVMT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_S_CGG_VEH_VEHICULO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_VEHICULO.
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_S_CGG_VEH_VEHICULO(
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVEH_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		VM.CVVMT_CODIGO, 
		VM.CVVEH_CODIGO, 
		VM.CVMTR_CODIGO, 
		('Marca:'||COALESCE(MRC.CVMRC_NOMBRE,'S/M')||' Cln:'||COALESCE((CLN.CVCLN_CILINDRAJE)::VARCHAR,'S/N')||' Serie:'||COALESCE(MTR.CVMTR_SERIE,'')||' Fab.:'||COALESCE((MTR.CVMTR_ANIO_FABRICACION)::VARCHAR,''))RESUMEN,
		MRC.CVMRC_NOMBRE MARCA,
		CLN.CVCLN_CILINDRAJE CILINDRAJE,
		CMB.CVCMB_NOMBRE COMBUSTIBLE,
		MTR.CVMTR_SERIE,
		MTR.CVMTR_ANIO_FABRICACION,
		MTR.CVMTR_ESTADO_FUNCIONAL,
		MTR.CVMTR_TONELAJE,
		MTR.CVMTR_OBSERVACION,
		MTR.CVMTR_INGRESO,
		MTR.CVMTR_FECHA_INGRESO,
		MTR.CVMTR_SALIO,
		MTR.CVMTR_FECHA_SALIDA,
		VM.CVVMT_FECHA, 
		VM.CVVMT_OBSERVACION
	FROM SII.CGG_VEH_VEHICULO_MOTOR VM
	LEFT JOIN SII.CGG_VEH_MOTOR MTR ON MTR.CVMTR_CODIGO = VM.CVMTR_CODIGO
	LEFT JOIN SII.CGG_VEH_COMBUSTIBLE CMB ON CMB.CVCMB_CODIGO = MTR.CVCMB_CODIGO
	LEFT JOIN SII.CGG_VEH_MARCA MRC ON MRC.CVMRC_CODIGO = MTR.CVMRC_CODIGO
	LEFT JOIN SII.CGG_VEH_CILINDRAJE CLN ON CLN.CVCLN_CODIGO = MTR.CVCLN_CODIGO
	WHERE CVVMT_ESTADO AND 
		CVVEH_CODIGO = IN_CVVEH_CODIGO
	ORDER BY VM.CVVMT_FECHA DESC;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_D_CGG_VEH_VEHICULO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_VEHICULO.
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_D_CGG_VEH_VEHICULO(
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVEH_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_VEHICULO_MOTOR
	WHERE
		CVVEH_CODIGO = IN_CVVEH_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_D_CGG_VEH_VEHICULO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_VEHICULO.
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_DS_CGG_VEH_VEHICULO(
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVVEH_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_VEHICULO_MOTOR SET
		cvvmt_estado = false
	WHERE
		CVVEH_CODIGO = IN_CVVEH_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_S_CGG_VEH_MOTOR
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_MOTOR.
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_S_CGG_VEH_MOTOR(
IN IN_CVMTR_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVMTR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVVMT_CODIGO, 
		CVVEH_CODIGO, 
		CVMTR_CODIGO, 
		CVVMT_FECHA, 
		CVVMT_OBSERVACION, 
		CVVMT_ESTADO, 
		CVVMT_FECHA_INSERT, 
		CVVMT_USUARIO_INSERT, 
		CVVMT_FECHA_UPDATE, 
		CVVMT_USUARIO_UPDATE
	FROM SII.CGG_VEH_VEHICULO_MOTOR
	WHERE CVVMT_ESTADO = TRUE AND 
		CVMTR_CODIGO = IN_CVMTR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_D_CGG_VEH_MOTOR
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_MOTOR.
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_D_CGG_VEH_MOTOR(
IN IN_CVMTR_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVMTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_VEHICULO_MOTOR
	WHERE
		CVMTR_CODIGO = IN_CVMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_MOTOR_D_CGG_VEH_MOTOR
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_MOTOR.
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_MOTOR_DS_CGG_VEH_MOTOR(
IN IN_CVMTR_CODIGO SII.CGG_VEH_VEHICULO_MOTOR.CVMTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_VEHICULO_MOTOR SET
		cvvmt_estado = false
	WHERE
		CVMTR_CODIGO = IN_CVMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

