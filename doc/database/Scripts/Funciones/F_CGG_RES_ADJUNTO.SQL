/**
* FUNCION SII.F_CGG_RES_ADJUNTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_ADJUNTO
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO PERSONA
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO NOTIFICACION
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRDPT_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DEPOSITO GARANTIA
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CRTPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE TRAMITE
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION
* @param IN_CRRQT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE REQUISITO DE TRAMITE
* @param IN_CRADJ_CONTENIDO DESCRIPCION DEL CONTENIDO DEL ARCHIVO
* @param IN_CRADJ_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CRADJ_OBSERVACION OBSERVACION DEL ARCHIVO ADJUNTO
* @param IN_CRADJ_ARCHIVO_ADJUNTO ARCHIVO DIGITAL ANEXO 
* @param IN_CRADJ_FECHA_REGISTRO FECHA DE REGISTRO DEL ARCHIVO EN EL SISTEMA
* @param IN_CRADJ_ESTADO ESTADO DEL REGISTRO
* @param IN_CRADJ_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRADJ_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_INSERT(
IN IN_CRADJ_CODIGO SII.CGG_RES_ADJUNTO.CRADJ_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_ADJUNTO.CRPER_CODIGO%TYPE, 
IN IN_CRINF_CODIGO SII.CGG_RES_ADJUNTO.CRINF_CODIGO%TYPE, 
IN IN_CRNOT_CODIGO SII.CGG_RES_ADJUNTO.CRNOT_CODIGO%TYPE, 
IN IN_CRRES_CODIGO SII.CGG_RES_ADJUNTO.CRRES_CODIGO%TYPE, 
IN IN_CRDPT_CODIGO SII.CGG_RES_ADJUNTO.CRDPT_CODIGO%TYPE, 
IN IN_CRSEG_CODIGO SII.CGG_RES_ADJUNTO.CRSEG_CODIGO%TYPE, 
IN IN_CRTPT_CODIGO SII.CGG_RES_ADJUNTO.CRTPT_CODIGO%TYPE, 
IN IN_CRSSC_CODIGO SII.CGG_RES_ADJUNTO.CRSSC_CODIGO%TYPE, 
IN IN_CRRQT_CODIGO SII.CGG_RES_ADJUNTO.CRRQT_CODIGO%TYPE, 
IN IN_CRADJ_CONTENIDO SII.CGG_RES_ADJUNTO.CRADJ_CONTENIDO%TYPE, 
IN IN_CRADJ_NOMBRE_ADJUNTO SII.CGG_RES_ADJUNTO.CRADJ_NOMBRE_ADJUNTO%TYPE, 
IN IN_CRADJ_OBSERVACION SII.CGG_RES_ADJUNTO.CRADJ_OBSERVACION%TYPE, 
IN IN_CRADJ_ARCHIVO_ADJUNTO SII.CGG_RES_ADJUNTO.CRADJ_ARCHIVO_ADJUNTO%TYPE, 
IN IN_CRADJ_FECHA_REGISTRO SII.CGG_RES_ADJUNTO.CRADJ_FECHA_REGISTRO%TYPE, 
IN IN_CRADJ_ESTADO SII.CGG_RES_ADJUNTO.CRADJ_ESTADO%TYPE, 
IN IN_CRADJ_USUARIO_INSERT SII.CGG_RES_ADJUNTO.CRADJ_USUARIO_INSERT%TYPE, 
IN IN_CRADJ_USUARIO_UPDATE SII.CGG_RES_ADJUNTO.CRADJ_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRADJ_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_ADJUNTO','CRADJ_CODIGO','CRADJ') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRADJ_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_ADJUNTO(
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CRINF_CODIGO, 
		IN_CRNOT_CODIGO, 
		IN_CRRES_CODIGO, 
		IN_CRDPT_CODIGO, 
		IN_CRSEG_CODIGO, 
		IN_CRTPT_CODIGO, 
		IN_CRSSC_CODIGO, 
		IN_CRRQT_CODIGO, 
		IN_CRADJ_CONTENIDO, 
		IN_CRADJ_NOMBRE_ADJUNTO, 
		IN_CRADJ_OBSERVACION, 
		IN_CRADJ_ARCHIVO_ADJUNTO, 
		IN_CRADJ_FECHA_REGISTRO, 
		IN_CRADJ_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRADJ_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRADJ_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_INSERT_CGG_VEH_VEHICULO
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_ADJUNTO
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @param IN_CRADJ_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CRADJ_OBSERVACION OBSERVACION DEL ARCHIVO ADJUNTO
* @param IN_CRADJ_ARCHIVO_ADJUNTO ARCHIVO DIGITAL ANEXO 
* @param IN_CRADJ_FECHA_REGISTRO FECHA DE REGISTRO DEL ARCHIVO EN EL SISTEMA
* @param IN_CRADJ_ESTADO ESTADO DEL REGISTRO
* @param IN_CRADJ_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRADJ_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_INSERT_CGG_VEH_VEHICULO(
IN IN_CRADJ_CODIGO SII.CGG_RES_ADJUNTO.CRADJ_CODIGO%TYPE, 
IN IN_CVVEH_CODIGO SII.CGG_RES_ADJUNTO.CVVEH_CODIGO%TYPE,
IN IN_CRADJ_NOMBRE_ADJUNTO SII.CGG_RES_ADJUNTO.CRADJ_NOMBRE_ADJUNTO%TYPE, 
IN IN_CRADJ_OBSERVACION SII.CGG_RES_ADJUNTO.CRADJ_OBSERVACION%TYPE, 
IN IN_CRADJ_ARCHIVO_ADJUNTO SII.CGG_RES_ADJUNTO.CRADJ_ARCHIVO_ADJUNTO%TYPE, 
IN IN_CRADJ_FECHA_REGISTRO SII.CGG_RES_ADJUNTO.CRADJ_FECHA_REGISTRO%TYPE, 
IN IN_CRADJ_ESTADO SII.CGG_RES_ADJUNTO.CRADJ_ESTADO%TYPE, 
IN IN_CRADJ_USUARIO_INSERT SII.CGG_RES_ADJUNTO.CRADJ_USUARIO_INSERT%TYPE, 
IN IN_CRADJ_USUARIO_UPDATE SII.CGG_RES_ADJUNTO.CRADJ_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRADJ_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_ADJUNTO','CRADJ_CODIGO','CRADJ') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRADJ_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_ADJUNTO(
		CRADJ_CODIGO,  
		CVVEH_CODIGO,
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CVVEH_CODIGO,
		IN_CRADJ_NOMBRE_ADJUNTO, 
		IN_CRADJ_OBSERVACION, 
		IN_CRADJ_ARCHIVO_ADJUNTO, 
		IN_CRADJ_FECHA_REGISTRO, 
		IN_CRADJ_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRADJ_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRADJ_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_ADJUNTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_ADJUNTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		AD.CRADJ_CODIGO, 
		( CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_CODIGO ELSE AD.CRPER_CODIGO END) AS CRPER_CODIGO,
		CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_NUM_DOC_IDENTIFIC ELSE PRS.CRPER_NUM_DOC_IDENTIFIC END AS CRPER_NUM_DOC_IDENTIFIC,
		( CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,'''') 
		ELSE COALESCE(PRS.CRPER_NOMBRES,'''')||'' ''||COALESCE(PRS.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PRS.CRPER_APELLIDO_MATERNO,'''') END) AS PERSONA, 
		AD.CRINF_CODIGO, 
		AD.CRNOT_CODIGO, 
		AD.CRRES_CODIGO, 
		AD.CRDPT_CODIGO, 
		AD.CRSEG_CODIGO, 
		CRTRA_NUMERO,		
		AD.CRTPT_CODIGO, 
		TRM.CRTPT_NOMBRE TRAMITE,
		AD.CRADJ_NOMBRE_ADJUNTO, 
		AD.CRADJ_OBSERVACION, 
		AD.CRADJ_FECHA_REGISTRO,
		CRADJ_CONTENIDO,
		CRADJ_FECHA_INSERT,
		CRADJ_FECHA_UPDATE,
		CRADJ_USUARIO_INSERT,
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO AD
	LEFT JOIN SII.CGG_RES_PERSONA PRS ON PRS.CRPER_CODIGO = AD.CRPER_CODIGO
	LEFT JOIN SII.CGG_RES_SEGUIMIENTO SEG ON SEG.CRSEG_CODIGO = AD.CRSEG_CODIGO
	LEFT JOIN SII.CGG_RES_TRAMITE TRA ON TRA.CRTRA_CODIGO = SEG.CRTRA_CODIGO
	LEFT JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = TRA.CGG_CRPER_CODIGO
	LEFT JOIN SII.CGG_RES_TIPO_TRAMITE TRM ON TRM.CRTPT_CODIGO = AD.CRTPT_CODIGO 
	WHERE AD.CRADJ_ESTADO AND 
		(LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',
		COALESCE(CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_APELLIDO_MATERNO ELSE PRS.CRPER_APELLIDO_MATERNO END,'''')||'' ''||
		COALESCE(CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_APELLIDO_PATERNO ELSE PRS.CRPER_APELLIDO_PATERNO END,'''')||'' ''||
		COALESCE(CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_NOMBRES ELSE PRS.CRPER_NOMBRES END,'''')||'' ''||
		COALESCE(CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_NUM_DOC_IDENTIFIC ELSE PRS.CRPER_NUM_DOC_IDENTIFIC END,'''')||'' ''||
		COALESCE(TRA.CRTRA_NUMERO,0)||'' ''||
		COALESCE(CRADJ_NOMBRE_ADJUNTO,'''')||'' ''||
		COALESCE(CRADJ_OBSERVACION,'''')||'' ''||
		COALESCE(TO_CHAR(CRADJ_FECHA_REGISTRO,''dd/mm/YYYY''),'''')) = 1)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_ADJUNTO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_ADJUNTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_ADJUNTO AD
	LEFT JOIN SII.CGG_RES_PERSONA PRS ON PRS.CRPER_CODIGO = AD.CRPER_CODIGO
	LEFT JOIN SII.CGG_RES_SEGUIMIENTO SEG ON SEG.CRSEG_CODIGO = AD.CRSEG_CODIGO
	LEFT JOIN SII.CGG_RES_TRAMITE TRA ON TRA.CRTRA_CODIGO = SEG.CRTRA_CODIGO
	LEFT JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = TRA.CGG_CRPER_CODIGO
	LEFT JOIN SII.CGG_RES_TIPO_TRAMITE TRM ON TRM.CRTPT_CODIGO = AD.CRTPT_CODIGO 
	LEFT AD.CRADJ_ESTADO AND 
		(LENGTH(QUOTE_LITERAL(IN_FIND_TEXT)) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,
		COALESCE(CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_APELLIDO_MATERNO ELSE PRS.CRPER_APELLIDO_MATERNO END,'')||' '||
		COALESCE(CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_APELLIDO_PATERNO ELSE PRS.CRPER_APELLIDO_PATERNO END,'')||' '||
		COALESCE(CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_NOMBRES ELSE PRS.CRPER_NOMBRES END,'')||' '||
		COALESCE(CASE WHEN AD.CRSEG_CODIGO IS NOT NULL THEN PER.CRPER_NUM_DOC_IDENTIFIC ELSE PRS.CRPER_NUM_DOC_IDENTIFIC END,'')||' '||
		COALESCE(TRA.CRTRA_NUMERO,0)||' '||
		COALESCE(CRADJ_NOMBRE_ADJUNTO,'')||' '||
		COALESCE(CRADJ_OBSERVACION,'')||' '||
		COALESCE(TO_CHAR(CRADJ_FECHA_REGISTRO,'dd/mm/YYYY'),'')) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_ADJUNTO
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO PERSONA
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO NOTIFICACION
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRDPT_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DEPOSITO GARANTIA
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CRTPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE TRAMITE
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION
* @param IN_CRRQT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE REQUISITO DE TRAMITE
* @param IN_CRADJ_CONTENIDO DESCRIPCION DEL CONTENIDO DEL ARCHIVO
* @param IN_CRADJ_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CRADJ_OBSERVACION OBSERVACION DEL ARCHIVO ADJUNTO
* @param IN_CRADJ_ARCHIVO_ADJUNTO ARCHIVO DIGITAL ANEXO 
* @param IN_CRADJ_FECHA_REGISTRO FECHA DE REGISTRO DEL ARCHIVO EN EL SISTEMA
* @param IN_CRADJ_ESTADO ESTADO DEL REGISTRO
* @param IN_CRADJ_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_UPDATE(
IN IN_CRADJ_CODIGO SII.CGG_RES_ADJUNTO.CRADJ_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_ADJUNTO.CRPER_CODIGO%TYPE, 
IN IN_CRINF_CODIGO SII.CGG_RES_ADJUNTO.CRINF_CODIGO%TYPE, 
IN IN_CRNOT_CODIGO SII.CGG_RES_ADJUNTO.CRNOT_CODIGO%TYPE, 
IN IN_CRRES_CODIGO SII.CGG_RES_ADJUNTO.CRRES_CODIGO%TYPE, 
IN IN_CRDPT_CODIGO SII.CGG_RES_ADJUNTO.CRDPT_CODIGO%TYPE, 
IN IN_CRSEG_CODIGO SII.CGG_RES_ADJUNTO.CRSEG_CODIGO%TYPE, 
IN IN_CRTPT_CODIGO SII.CGG_RES_ADJUNTO.CRTPT_CODIGO%TYPE, 
IN IN_CRSSC_CODIGO SII.CGG_RES_ADJUNTO.CRSSC_CODIGO%TYPE, 
IN IN_CRRQT_CODIGO SII.CGG_RES_ADJUNTO.CRRQT_CODIGO%TYPE, 
IN IN_CRADJ_CONTENIDO SII.CGG_RES_ADJUNTO.CRADJ_CONTENIDO%TYPE, 
IN IN_CRADJ_NOMBRE_ADJUNTO SII.CGG_RES_ADJUNTO.CRADJ_NOMBRE_ADJUNTO%TYPE, 
IN IN_CRADJ_OBSERVACION SII.CGG_RES_ADJUNTO.CRADJ_OBSERVACION%TYPE, 
IN IN_CRADJ_ARCHIVO_ADJUNTO SII.CGG_RES_ADJUNTO.CRADJ_ARCHIVO_ADJUNTO%TYPE, 
IN IN_CRADJ_FECHA_REGISTRO SII.CGG_RES_ADJUNTO.CRADJ_FECHA_REGISTRO%TYPE, 
IN IN_CRADJ_ESTADO SII.CGG_RES_ADJUNTO.CRADJ_ESTADO%TYPE, 
IN IN_CRADJ_USUARIO_UPDATE SII.CGG_RES_ADJUNTO.CRADJ_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
TMP_FILE_NAME VARCHAR;
BEGIN
	IF(LENGTH(TRIM(IN_CRADJ_NOMBRE_ADJUNTO)) > 0 ) THEN
		UPDATE SII.CGG_RES_ADJUNTO SET
			CRADJ_NOMBRE_ADJUNTO = IN_CRADJ_NOMBRE_ADJUNTO, 
			CRADJ_ARCHIVO_ADJUNTO = IN_CRADJ_ARCHIVO_ADJUNTO
		WHERE
			CRADJ_CODIGO = IN_CRADJ_CODIGO;
	END IF;
	
	UPDATE SII.CGG_RES_ADJUNTO SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CRINF_CODIGO = IN_CRINF_CODIGO, 
		CRNOT_CODIGO = IN_CRNOT_CODIGO, 
		CRRES_CODIGO = IN_CRRES_CODIGO, 
		CRDPT_CODIGO = IN_CRDPT_CODIGO, 
		CRSEG_CODIGO = IN_CRSEG_CODIGO, 
		CRTPT_CODIGO = IN_CRTPT_CODIGO, 
		CRSSC_CODIGO = IN_CRSSC_CODIGO, 
		CRRQT_CODIGO = IN_CRRQT_CODIGO, 
		CRADJ_CONTENIDO = IN_CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO = IN_CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION = IN_CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO = IN_CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO = IN_CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO = IN_CRADJ_ESTADO, 
		CRADJ_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRADJ_USUARIO_UPDATE = IN_CRADJ_USUARIO_UPDATE
	WHERE
		CRADJ_CODIGO = IN_CRADJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_ADJUNTO
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_SELECT(
IN IN_CRADJ_CODIGO SII.CGG_RES_ADJUNTO.CRADJ_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRADJ_CODIGO = IN_CRADJ_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_ADJUNTO
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DELETE(
IN IN_CRADJ_CODIGO SII.CGG_RES_ADJUNTO.CRADJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRADJ_CODIGO = IN_CRADJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_ADJUNTO
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DELETE_SOFT(
IN IN_CRADJ_CODIGO SII.CGG_RES_ADJUNTO.CRADJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		CRADJ_ESTADO = FALSE
	WHERE
		CRADJ_CODIGO = IN_CRADJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_DEPOSITO_GARANTIA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_DEPOSITO_GARANTIA.
* @param IN_CRDPT_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DEPOSITO GARANTIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_DEPOSITO_GARANTIA(
IN IN_CRDPT_CODIGO SII.CGG_RES_ADJUNTO.CRDPT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRDPT_CODIGO = IN_CRDPT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_DEPOSITO_GARANTIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_DEPOSITO_GARANTIA.
* @param IN_CRDPT_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DEPOSITO GARANTIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_DEPOSITO_GARANTIA(
IN IN_CRDPT_CODIGO SII.CGG_RES_ADJUNTO.CRDPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRDPT_CODIGO = IN_CRDPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_DEPOSITO_GARANTIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_DEPOSITO_GARANTIA.
* @param IN_CRDPT_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DEPOSITO GARANTIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DS_CGG_RES_DEPOSITO_GARANTIA(
IN IN_CRDPT_CODIGO SII.CGG_RES_ADJUNTO.CRDPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		cradj_estado = false
	WHERE
		CRDPT_CODIGO = IN_CRDPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_SEGUIMIENTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_RES_ADJUNTO.CRSEG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_RES_ADJUNTO.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DS_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_RES_ADJUNTO.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		cradj_estado = false
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_RESOLUCION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_ADJUNTO.CRRES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRRES_CODIGO = IN_CRRES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_RESOLUCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_ADJUNTO.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_RESOLUCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DS_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_ADJUNTO.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		cradj_estado = false
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_TIPO_TRAMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_TRAMITE.
* @param IN_CRTPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE TRAMITE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_TIPO_TRAMITE(
IN IN_CRTPT_CODIGO SII.CGG_RES_ADJUNTO.CRTPT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRTPT_CODIGO = IN_CRTPT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_TIPO_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_TRAMITE.
* @param IN_CRTPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE TRAMITE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_TIPO_TRAMITE(
IN IN_CRTPT_CODIGO SII.CGG_RES_ADJUNTO.CRTPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRTPT_CODIGO = IN_CRTPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_TIPO_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_TRAMITE.
* @param IN_CRTPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE TRAMITE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DS_CGG_RES_TIPO_TRAMITE(
IN IN_CRTPT_CODIGO SII.CGG_RES_ADJUNTO.CRTPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		cradj_estado = false
	WHERE
		CRTPT_CODIGO = IN_CRTPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_INFORME_PAREJA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_INFORME_PAREJA.
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_INFORME_PAREJA(
IN IN_CRINF_CODIGO SII.CGG_RES_ADJUNTO.CRINF_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRINF_CODIGO = IN_CRINF_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_INFORME_PAREJA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_INFORME_PAREJA.
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_INFORME_PAREJA(
IN IN_CRINF_CODIGO SII.CGG_RES_ADJUNTO.CRINF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRINF_CODIGO = IN_CRINF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_INFORME_PAREJA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_INFORME_PAREJA.
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DS_CGG_RES_INFORME_PAREJA(
IN IN_CRINF_CODIGO SII.CGG_RES_ADJUNTO.CRINF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		cradj_estado = false
	WHERE
		CRINF_CODIGO = IN_CRINF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_ADJUNTO.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_ADJUNTO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_ADJUNTO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		cradj_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_SESION_COMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_ADJUNTO.CRSSC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_SESION_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION COMITE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_ADJUNTO.CRSSC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_SESION_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION COMITE.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DS_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_ADJUNTO.CRSSC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		cradj_estado = false
	WHERE
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_REQUISITO_TRAMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_REQUISITO_TRAMITE.
* @param IN_CRRQT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE REQUISITO DE TRAMITE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_REQUISITO_TRAMITE(
IN IN_CRRQT_CODIGO SII.CGG_RES_ADJUNTO.CRRQT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRRQT_CODIGO = IN_CRRQT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_REQUISITO_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_REQUISITO_TRAMITE.
* @param IN_CRRQT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE REQUISITO DE TRAMITE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_REQUISITO_TRAMITE(
IN IN_CRRQT_CODIGO SII.CGG_RES_ADJUNTO.CRRQT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRRQT_CODIGO = IN_CRRQT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_REQUISITO_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_REQUISITO_TRAMITE.
* @param IN_CRRQT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE REQUISITO DE TRAMITE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DS_CGG_RES_REQUISITO_TRAMITE(
IN IN_CRRQT_CODIGO SII.CGG_RES_ADJUNTO.CRRQT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		cradj_estado = false
	WHERE
		CRRQT_CODIGO = IN_CRRQT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_NOTIFICACION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_NOTIFICACION.
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO NOTIFICACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_RES_NOTIFICACION(
IN IN_CRNOT_CODIGO SII.CGG_RES_ADJUNTO.CRNOT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		CRADJ_ARCHIVO_ADJUNTO, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_NOTIFICACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_NOTIFICACION.
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO NOTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_NOTIFICACION(
IN IN_CRNOT_CODIGO SII.CGG_RES_ADJUNTO.CRNOT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_ADJUNTO
	WHERE
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_D_CGG_RES_NOTIFICACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_NOTIFICACION.
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO NOTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_DS_CGG_RES_NOTIFICACION(
IN IN_CRNOT_CODIGO SII.CGG_RES_ADJUNTO.CRNOT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_ADJUNTO SET
		cradj_estado = false
	WHERE
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCIONA TODOS LOS ADJUNTOS DE UN TRAMITE  POR EL SEGUIMIENTO ACTUAL EN EL QUE SE ENCUENTRA EL FLUJO DE TRABAJO O LA FECHA EN LA QUE SE ENCUENTRA EL SEGUIMIENTO SELECCIONADO DE CONSULTA.
*@param IN_CRTRA_CODGIGO CODIGO DE TRAMITE.
*@param IN_CRSEG_CODIGO CODIGO DE SEGUIMIENTO.
*@return REFCURSOR CURSOR CON INFORMMACION.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_TRAMITE(
IN IN_CRTRA_CODIGO VARCHAR,
IN IN_CRSEG_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	FECHA_SEGUIMIENTO TIMESTAMP;	
BEGIN

	SELECT CRSEG_FECHA_INSERT INTO FECHA_SEGUIMIENTO FROM CGG_RES_SEGUIMIENTO WHERE CRSEG_CODIGO = IN_CRSEG_CODIGO;
	
	OPEN TMP_REF FOR
	SELECT
		ADJ.CRADJ_CODIGO, 
		ADJ.CRPER_CODIGO, 
		ADJ.CRINF_CODIGO, 
		ADJ.CRNOT_CODIGO, 
		ADJ.CRRES_CODIGO, 
		ADJ.CRDPT_CODIGO, 
		ADJ.CRSEG_CODIGO, 
		ADJ.CRTPT_CODIGO, 
		ADJ.CRSSC_CODIGO, 
		ADJ.CRRQT_CODIGO, 
		ADJ.CRADJ_CONTENIDO, 
		ADJ.CRADJ_NOMBRE_ADJUNTO, 
		ADJ.CRADJ_OBSERVACION, 		
		ADJ.CRADJ_FECHA_REGISTRO, 
		ADJ.CRADJ_ESTADO, 
		ADJ.CRADJ_FECHA_INSERT, 
		ADJ.CRADJ_USUARIO_INSERT, 
		ADJ.CRADJ_FECHA_UPDATE, 
		ADJ.CRADJ_USUARIO_UPDATE,
		FAS.CRFAS_CODIGO
	FROM SII.CGG_RES_ADJUNTO ADJ
	INNER JOIN SII.CGG_RES_SEGUIMIENTO SEG ON (ADJ.CRSEG_CODIGO = SEG.CRSEG_CODIGO)
	INNER JOIN SII.CGG_RES_FASE FAS ON (FAS.CRFAS_CODIGO = SEG.CRFAS_CODIGO)
	WHERE ADJ.CRADJ_ESTADO = TRUE AND 
		  SEG.CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		  (SEG.CRSEG_CODIGO = IN_CRSEG_CODIGO OR ADJ.CRADJ_FECHA_REGISTRO <= FECHA_SEGUIMIENTO OR ADJ.CRADJ_FECHA_INSERT <= FECHA_SEGUIMIENTO);
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_S_CGG_VEH_VEHICULO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_VEHICULO.
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_S_CGG_VEH_VEHICULO(
IN IN_CVVEH_CODIGO SII.CGG_RES_ADJUNTO.CVVEH_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 
		CRPER_CODIGO, 
		CRINF_CODIGO, 
		CRNOT_CODIGO, 
		CRRES_CODIGO, 
		CRDPT_CODIGO, 
		CRSEG_CODIGO, 
		CRTPT_CODIGO, 
		CRSSC_CODIGO, 
		CRRQT_CODIGO, 
		CVVEH_CODIGO, 
		CRADJ_CONTENIDO, 
		CRADJ_NOMBRE_ADJUNTO, 
		CRADJ_OBSERVACION, 
		NULL, 
		CRADJ_FECHA_REGISTRO, 
		CRADJ_ESTADO, 
		CRADJ_FECHA_INSERT, 
		CRADJ_USUARIO_INSERT, 
		CRADJ_FECHA_UPDATE, 
		CRADJ_USUARIO_UPDATE
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 
		CVVEH_CODIGO = IN_CVVEH_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;