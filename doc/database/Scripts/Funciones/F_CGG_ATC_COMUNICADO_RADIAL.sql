
/**
* FUNCION SII.F_CGG_ATC_COMUNICADO_RADIAL_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ATC_COMUNICADO_RADIAL_SELECT(
	in_user_name character varying,
	in_start_index integer,
	in_limit integer,
	in_sort_field_name character varying,
	in_direction character varying,
	in_find_text text)
  RETURNS SETOF refcursor AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN		
	OPEN TMP_REF FOR EXECUTE
		'SELECT CGVCN_CODIGO, 		
		CGVCN_TITULO, 
		CGVCN_DESCRIPCION, 
		CGVCN_EXPERIENCIA,
		CGVCN_SALARIO, 
		CGVCN_DIRECCION, 
		CGVCN_FECHA_PUBLICACION, 
		CGVCN_FECHA_EXPIRACION, 
		CGVCN_ESTADO_OFERTA, 
		CGVCN_ANIO, 
		CGVCN_NUMERO_COMUNICADO		
	FROM SII.CGG_GEM_VACANTE
	WHERE CGVCN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGVCN_TITULO, '''')||'' ''||COALESCE(CGVCN_DESCRIPCION, '''')||'' ''||COALESCE(CGVCN_SALARIO, 0)||'' ''||COALESCE(CGVCN_DIRECCION, '''')||'' ''||COALESCE(CGVCN_FECHA_PUBLICACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_FECHA_EXPIRACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_ESTADO_OFERTA, 0)||'' ''||COALESCE(CGVCN_EXPERIENCIA, '''')||'' ''||COALESCE(CGVCN_ANIO, 0)||'' ''||COALESCE(CGVCN_NUMERO_COMUNICADO, 0)) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_ATC_COMUNICADO_RADIAL_COUNT
* SELECCIONA TOTAL DE REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TMP_ROWS NUMERO DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ATC_COMUNICADO_RADIAL_COUNT(
	in_find_text text)
  RETURNS integer AS
$$
DECLARE
	TMP_ROWS INT2;
	TMP_SQL TEXT;
BEGIN
	TMP_SQL:='SELECT COUNT(distinct(CGVCN.CGVCN_CODIGO))
		FROM SII.CGG_GEM_VACANTE CGVCN
		INNER JOIN SII.CGG_USUARIO CUSU ON CUSU.CUSU_CODIGO = CGVCN.CUSU_CODIGO
		LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA CRPJR ON ( CRPJR.CRPJR_CODIGO =  CUSU.CRPJR_CODIGO)
		LEFT JOIN SII.CGG_GEM_CANDIDATO CGCND ON ( CGCND.CGVCN_CODIGO =  CGVCN.CGVCN_CODIGO)
		WHERE CGVCN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGVCN_TITULO, '''')||'' ''||COALESCE(CGVCN_DESCRIPCION, '''')||'' ''||COALESCE(CGVCN_SALARIO, 0)||'' ''||COALESCE(CGVCN_DIRECCION, '''')||'' ''||COALESCE(CGVCN_FECHA_PUBLICACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_FECHA_EXPIRACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGVCN_ESTADO_OFERTA, 0)||'' ''||COALESCE(CGVCN_EXPERIENCIA, '''')||'' ''||COALESCE(CGVCN_ANIO, 0)||'' ''||COALESCE(CGVCN_NUMERO_COMUNICADO, 0)) = 1;';		
	EXECUTE TMP_SQL INTO TMP_ROWS;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

