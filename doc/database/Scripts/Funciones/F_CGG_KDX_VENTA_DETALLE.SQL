/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_VENTA_DETALLE
* @param IN_CKVDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA DETALLE
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CKVDT_CANTIDAD CANTIDAD DE ESPECIES
* @param IN_CKVDT_SERIE SERIE DE INICIO DE LAS ESPECIES
* @param IN_CKVDT_PRECIO_UNITARIO PRECIO UNITARIO DE LA ESPECIE
* @param IN_CKVDT_TOTAL TOTAL DE LA COMPRA
* @param IN_CKVDT_ESTADO ESTADO DEL REGISTRO
* @param IN_CKVDT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKVDT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_INSERT(
IN IN_CKVDT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVDT_CODIGO%TYPE,
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVNT_CODIGO%TYPE,
IN IN_CKESP_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKESP_CODIGO%TYPE,
IN IN_CTREG_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTREG_CODIGO%TYPE,
IN IN_CRCNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CRCNT_CODIGO%TYPE,
IN IN_CTIGF_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTIGF_CODIGO%TYPE,
IN IN_CKVDT_CANTIDAD SII.CGG_KDX_VENTA_DETALLE.CKVDT_CANTIDAD%TYPE,
IN IN_CKVDT_SERIE SII.CGG_KDX_VENTA_DETALLE.CKVDT_SERIE%TYPE,
IN IN_CKVDT_PRECIO_UNITARIO SII.CGG_KDX_VENTA_DETALLE.CKVDT_PRECIO_UNITARIO%TYPE,
IN IN_CKVDT_TOTAL SII.CGG_KDX_VENTA_DETALLE.CKVDT_TOTAL%TYPE,
IN IN_CKVDT_ESTADO SII.CGG_KDX_VENTA_DETALLE.CKVDT_ESTADO%TYPE,
IN IN_CKVDT_USUARIO_INSERT SII.CGG_KDX_VENTA_DETALLE.CKVDT_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKVDT_CODIGO) = 'KEYGEN') THEN
		OUT_KEY = 'CKVDT'||NEXTVAL('scn_cgg_kdx_venta_detalle');		
		--SELECT SII.F_KEYGEN('CGG_KDX_VENTA_DETALLE','CKVDT_CODIGO','CKVDT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKVDT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_VENTA_DETALLE(
		CKVDT_CODIGO, 
		CKVNT_CODIGO, 
		CKESP_CODIGO, 
		CTREG_CODIGO, 
		CRCNT_CODIGO, 
		CTIGF_CODIGO, 
		CKVDT_CANTIDAD, 
		CKVDT_SERIE, 
		CKVDT_PRECIO_UNITARIO, 
		CKVDT_TOTAL, 
		CKVDT_ESTADO, 
		CKVDT_FECHA_INSERT, 
		CKVDT_USUARIO_INSERT, 
		CKVDT_FECHA_UPDATE, 
		CKVDT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKVNT_CODIGO, 
		IN_CKESP_CODIGO, 
		IN_CTREG_CODIGO, 
		IN_CRCNT_CODIGO, 
		IN_CTIGF_CODIGO, 
		IN_CKVDT_CANTIDAD, 
		IN_CKVDT_SERIE, 
		IN_CKVDT_PRECIO_UNITARIO, 
		IN_CKVDT_TOTAL, 
		IN_CKVDT_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKVDT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKVDT_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_VENTA_DETALLE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVDT_CODIGO, 
		CKVNT_CODIGO, 
		CKESP_CODIGO, 
		CTREG_CODIGO, 
		CRCNT_CODIGO, 
		CTIGF_CODIGO, 
		CKVDT_CANTIDAD, 
		CKVDT_SERIE, 
		CKVDT_PRECIO_UNITARIO, 
		CKVDT_TOTAL, 
		CKVDT_ESTADO, 
		CKVDT_FECHA_INSERT, 
		CKVDT_USUARIO_INSERT, 
		CKVDT_FECHA_UPDATE, 
		CKVDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE CKVDT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_VENTA_DETALLE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKVDT_CODIGO, 
		CKVNT_CODIGO, 
		CKESP_CODIGO, 
		CTREG_CODIGO, 
		CRCNT_CODIGO, 
		CTIGF_CODIGO, 
		CKVDT_CANTIDAD, 
		CKVDT_SERIE, 
		CKVDT_PRECIO_UNITARIO, 
		CKVDT_TOTAL, 
		CKVDT_ESTADO, 
		CKVDT_FECHA_INSERT, 
		CKVDT_USUARIO_INSERT, 
		CKVDT_FECHA_UPDATE, 
		CKVDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE CKVDT_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKVDT_CANTIDAD, 0)||'' ''||COALESCE(CKVDT_SERIE, 0)||'' ''||COALESCE(CKVDT_PRECIO_UNITARIO, 0)||'' ''||COALESCE(CKVDT_TOTAL, 0)||'' ''||COALESCE(CKVDT_ESTADO, FALSE)||'' ''||COALESCE(CKVDT_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKVDT_USUARIO_INSERT, '''')||'' ''||COALESCE(CKVDT_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKVDT_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_VENTA_DETALLE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE CKVDT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_VENTA_DETALLE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE CKVDT_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKVDT_CANTIDAD, 0)||' '||COALESCE(CKVDT_SERIE, 0)||' '||COALESCE(CKVDT_PRECIO_UNITARIO, 0)||' '||COALESCE(CKVDT_TOTAL, 0)||' '||COALESCE(CKVDT_ESTADO, FALSE)||' '||COALESCE(CKVDT_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKVDT_USUARIO_INSERT, '''')||' '||COALESCE(CKVDT_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKVDT_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_VENTA_DETALLE
* @param IN_CKVDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA DETALLE
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CKVDT_CANTIDAD CANTIDAD DE ESPECIES
* @param IN_CKVDT_SERIE SERIE DE INICIO DE LAS ESPECIES
* @param IN_CKVDT_PRECIO_UNITARIO PRECIO UNITARIO DE LA ESPECIE
* @param IN_CKVDT_TOTAL TOTAL DE LA COMPRA
* @param IN_CKVDT_ESTADO ESTADO DEL REGISTRO
* @param IN_CKVDT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_UPDATE(
IN IN_CKVDT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVDT_CODIGO%TYPE,
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVNT_CODIGO%TYPE,
IN IN_CKESP_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKESP_CODIGO%TYPE,
IN IN_CTREG_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTREG_CODIGO%TYPE,
IN IN_CRCNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CRCNT_CODIGO%TYPE,
IN IN_CTIGF_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTIGF_CODIGO%TYPE,
IN IN_CKVDT_CANTIDAD SII.CGG_KDX_VENTA_DETALLE.CKVDT_CANTIDAD%TYPE,
IN IN_CKVDT_SERIE SII.CGG_KDX_VENTA_DETALLE.CKVDT_SERIE%TYPE,
IN IN_CKVDT_PRECIO_UNITARIO SII.CGG_KDX_VENTA_DETALLE.CKVDT_PRECIO_UNITARIO%TYPE,
IN IN_CKVDT_TOTAL SII.CGG_KDX_VENTA_DETALLE.CKVDT_TOTAL%TYPE,
IN IN_CKVDT_ESTADO SII.CGG_KDX_VENTA_DETALLE.CKVDT_ESTADO%TYPE,
IN IN_CKVDT_USUARIO_UPDATE SII.CGG_KDX_VENTA_DETALLE.CKVDT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA_DETALLE SET
		CKVNT_CODIGO = IN_CKVNT_CODIGO, 
		CKESP_CODIGO = IN_CKESP_CODIGO, 
		CTREG_CODIGO = IN_CTREG_CODIGO, 
		CRCNT_CODIGO = IN_CRCNT_CODIGO, 
		CTIGF_CODIGO = IN_CTIGF_CODIGO, 
		CKVDT_CANTIDAD = IN_CKVDT_CANTIDAD, 
		CKVDT_SERIE = IN_CKVDT_SERIE, 
		CKVDT_PRECIO_UNITARIO = IN_CKVDT_PRECIO_UNITARIO, 
		CKVDT_TOTAL = IN_CKVDT_TOTAL, 
		CKVDT_ESTADO = IN_CKVDT_ESTADO, 
		CKVDT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKVDT_USUARIO_UPDATE = IN_CKVDT_USUARIO_UPDATE
	WHERE
		CKVDT_CODIGO = IN_CKVDT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_VENTA_DETALLE
* @param IN_CKVDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA DETALLE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_SELECT(
IN IN_CKVDT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVDT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVDT_CODIGO, 
		CKVNT_CODIGO, 
		CKESP_CODIGO, 
		CTREG_CODIGO, 
		CRCNT_CODIGO, 
		CTIGF_CODIGO, 
		CKVDT_CANTIDAD, 
		CKVDT_SERIE, 
		CKVDT_PRECIO_UNITARIO, 
		CKVDT_TOTAL, 
		CKVDT_ESTADO, 
		CKVDT_FECHA_INSERT, 
		CKVDT_USUARIO_INSERT, 
		CKVDT_FECHA_UPDATE, 
		CKVDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE CKVDT_ESTADO = TRUE AND 
		CKVDT_CODIGO = IN_CKVDT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_VENTA_DETALLE
* @param IN_CKVDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA DETALLE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_DELETE(
IN IN_CKVDT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVDT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE
		CKVDT_CODIGO = IN_CKVDT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_VENTA_DETALLE
* @param IN_CKVDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA DETALLE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_DELETE_SOFT(
IN IN_CKVDT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVDT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA_DETALLE SET
		CKVDT_ESTADO = FALSE
	WHERE
		CKVDT_CODIGO = IN_CKVDT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_KDX_VENTA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_VENTA.
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_KDX_VENTA(
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVNT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVDT_CODIGO, 
		CKVNT_CODIGO, 
		CKESP_CODIGO, 
		CTREG_CODIGO, 
		CRCNT_CODIGO, 
		CTIGF_CODIGO, 
		CKVDT_CANTIDAD, 
		CKVDT_SERIE, 
		CKVDT_PRECIO_UNITARIO, 
		CKVDT_TOTAL, 
		CKVDT_ESTADO, 
		CKVDT_FECHA_INSERT, 
		CKVDT_USUARIO_INSERT, 
		CKVDT_FECHA_UPDATE, 
		CKVDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE CKVDT_ESTADO = TRUE AND 
		CKVNT_CODIGO = IN_CKVNT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_KDX_VENTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_VENTA.
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_KDX_VENTA(
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE
		CKVNT_CODIGO = IN_CKVNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_KDX_VENTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_VENTA.
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_DS_CGG_KDX_VENTA(
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKVNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA_DETALLE SET
		ckvdt_estado = false
	WHERE
		CKVNT_CODIGO = IN_CKVNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_TCT_REGISTRO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_REGISTRO.
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_TCT_REGISTRO(
IN IN_CTREG_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTREG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		VD.CKVDT_CODIGO, 
		VD.CKVNT_CODIGO, 
		VD.CKESP_CODIGO, 
		ESP.CKESP_REPORTE,
		VD.CTREG_CODIGO, 
		VD.CRCNT_CODIGO, 
		VD.CTIGF_CODIGO, 
		VD.CKVDT_CANTIDAD, 
		VD.CKVDT_SERIE, 
		VD.CKVDT_PRECIO_UNITARIO, 
		VD.CKVDT_TOTAL, 
		VD.CKVDT_ESTADO, 
		VD.CKVDT_FECHA_INSERT, 
		VD.CKVDT_USUARIO_INSERT, 
		VD.CKVDT_FECHA_UPDATE, 
		VD.CKVDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA_DETALLE VD
	INNER JOIN SII.CGG_KDX_ESPECIE ESP ON ESP.CKESP_CODIGO = VD.CKESP_CODIGO
	WHERE CKVDT_ESTADO = TRUE AND 
		CTREG_CODIGO = IN_CTREG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_TCT_REGISTRO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_REGISTRO.
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_TCT_REGISTRO(
IN IN_CTREG_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTREG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE
		CTREG_CODIGO = IN_CTREG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_TCT_REGISTRO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_REGISTRO.
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_DS_CGG_TCT_REGISTRO(
IN IN_CTREG_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTREG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA_DETALLE SET
		ckvdt_estado = false
	WHERE
		CTREG_CODIGO = IN_CTREG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_TCT_INGRESO_FALLIDO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_INGRESO_FALLIDO.
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_TCT_INGRESO_FALLIDO(
IN IN_CTIGF_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTIGF_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVDT_CODIGO, 
		CKVNT_CODIGO, 
		CKESP_CODIGO, 
		CTREG_CODIGO, 
		CRCNT_CODIGO, 
		CTIGF_CODIGO, 
		CKVDT_CANTIDAD, 
		CKVDT_SERIE, 
		CKVDT_PRECIO_UNITARIO, 
		CKVDT_TOTAL, 
		CKVDT_ESTADO, 
		CKVDT_FECHA_INSERT, 
		CKVDT_USUARIO_INSERT, 
		CKVDT_FECHA_UPDATE, 
		CKVDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE CKVDT_ESTADO = TRUE AND 
		CTIGF_CODIGO = IN_CTIGF_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_TCT_INGRESO_FALLIDO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_INGRESO_FALLIDO.
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_TCT_INGRESO_FALLIDO(
IN IN_CTIGF_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTIGF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE
		CTIGF_CODIGO = IN_CTIGF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_TCT_INGRESO_FALLIDO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_INGRESO_FALLIDO.
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_DS_CGG_TCT_INGRESO_FALLIDO(
IN IN_CTIGF_CODIGO SII.CGG_KDX_VENTA_DETALLE.CTIGF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA_DETALLE SET
		ckvdt_estado = false
	WHERE
		CTIGF_CODIGO = IN_CTIGF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_RES_CARNET
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_CARNET.
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_RES_CARNET(
IN IN_CRCNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CRCNT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVDT_CODIGO, 
		CKVNT_CODIGO, 
		CKESP_CODIGO, 
		CTREG_CODIGO, 
		CRCNT_CODIGO, 
		CTIGF_CODIGO, 
		CKVDT_CANTIDAD, 
		CKVDT_SERIE, 
		CKVDT_PRECIO_UNITARIO, 
		CKVDT_TOTAL, 
		CKVDT_ESTADO, 
		CKVDT_FECHA_INSERT, 
		CKVDT_USUARIO_INSERT, 
		CKVDT_FECHA_UPDATE, 
		CKVDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE CKVDT_ESTADO = TRUE AND 
		CRCNT_CODIGO = IN_CRCNT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_RES_CARNET
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_CARNET.
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_RES_CARNET(
IN IN_CRCNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CRCNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE
		CRCNT_CODIGO = IN_CRCNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_RES_CARNET
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_CARNET.
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_DS_CGG_RES_CARNET(
IN IN_CRCNT_CODIGO SII.CGG_KDX_VENTA_DETALLE.CRCNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA_DETALLE SET
		ckvdt_estado = false
	WHERE
		CRCNT_CODIGO = IN_CRCNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_KDX_ESPECIE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_S_CGG_KDX_ESPECIE(
IN IN_CKESP_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKESP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVDT_CODIGO, 
		CKVNT_CODIGO, 
		CKESP_CODIGO, 
		CTREG_CODIGO, 
		CRCNT_CODIGO, 
		CTIGF_CODIGO, 
		CKVDT_CANTIDAD, 
		CKVDT_SERIE, 
		CKVDT_PRECIO_UNITARIO, 
		CKVDT_TOTAL, 
		CKVDT_ESTADO, 
		CKVDT_FECHA_INSERT, 
		CKVDT_USUARIO_INSERT, 
		CKVDT_FECHA_UPDATE, 
		CKVDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE CKVDT_ESTADO = TRUE AND 
		CKESP_CODIGO = IN_CKESP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_KDX_ESPECIE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_KDX_ESPECIE(
IN IN_CKESP_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_VENTA_DETALLE
	WHERE
		CKESP_CODIGO = IN_CKESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DETALLE_D_CGG_KDX_ESPECIE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DETALLE_DS_CGG_KDX_ESPECIE(
IN IN_CKESP_CODIGO SII.CGG_KDX_VENTA_DETALLE.CKESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA_DETALLE SET
		ckvdt_estado = false
	WHERE
		CKESP_CODIGO = IN_CKESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

