/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION
* @param IN_CRNOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CRNOV_FECHA_REGISTRO FECHA DE REGISTRO DE LA NOVEDAD
* @param IN_CRNOV_DESCRIPCION DESCRIPCION DE LA NOVEDAD
* @param IN_CRNOV_TIPO TIPO DE NOVEDAD - NOTIFICACION
0 Comentario
1 Notificacion
* @param IN_CRNOV_ESTADO ESTADO DEL REGISTRO
* @param IN_CRNOV_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRNOV_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_INSERT(
IN IN_CRNOV_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_CODIGO%TYPE, 
IN IN_CRSEG_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRSEG_CODIGO%TYPE, 
IN IN_CRNOV_FECHA_REGISTRO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_FECHA_REGISTRO%TYPE, 
IN IN_CRNOV_DESCRIPCION SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_DESCRIPCION%TYPE, 
IN IN_CRNOV_TIPO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_TIPO%TYPE, 
IN IN_CRNOV_ESTADO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_ESTADO%TYPE, 
IN IN_CRNOV_USUARIO_INSERT SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_USUARIO_INSERT%TYPE, 
IN IN_CRNOV_USUARIO_UPDATE SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRNOV_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_NOVEDAD_NOTIFICACION','CRNOV_CODIGO','CRNOV') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRNOV_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_NOVEDAD_NOTIFICACION(
		CRNOV_CODIGO, 
		CRSEG_CODIGO, 
		CRNOV_FECHA_REGISTRO, 
		CRNOV_DESCRIPCION, 
		CRNOV_TIPO, 
		CRNOV_ESTADO, 
		CRNOV_FECHA_INSERT, 
		CRNOV_USUARIO_INSERT, 
		CRNOV_FECHA_UPDATE, 
		CRNOV_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRSEG_CODIGO, 
		IN_CRNOV_FECHA_REGISTRO, 
		IN_CRNOV_DESCRIPCION, 
		IN_CRNOV_TIPO, 
		IN_CRNOV_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRNOV_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRNOV_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOV_CODIGO, 
		CRSEG_CODIGO, 
		CRNOV_FECHA_REGISTRO, 
		CRNOV_DESCRIPCION, 
		CRNOV_TIPO, 
		CRNOV_ESTADO, 
		CRNOV_FECHA_INSERT, 
		CRNOV_USUARIO_INSERT, 
		CRNOV_FECHA_UPDATE, 
		CRNOV_USUARIO_UPDATE
	FROM SII.CGG_RES_NOVEDAD_NOTIFICACION
	WHERE CRNOV_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRNOV_CODIGO, 
		CRSEG_CODIGO, 
		CRNOV_FECHA_REGISTRO, 
		CRNOV_DESCRIPCION, 
		CRNOV_TIPO, 
		CRNOV_ESTADO, 
		CRNOV_FECHA_INSERT, 
		CRNOV_USUARIO_INSERT, 
		CRNOV_FECHA_UPDATE, 
		CRNOV_USUARIO_UPDATE
	FROM SII.CGG_RES_NOVEDAD_NOTIFICACION
	WHERE CRNOV_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRNOV_FECHA_REGISTRO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRNOV_DESCRIPCION, '''')||'' ''||COALESCE(CRNOV_TIPO, 0)||'' ''||COALESCE(CRNOV_ESTADO, FALSE)||'' ''||COALESCE(CRNOV_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRNOV_USUARIO_INSERT, '''')||'' ''||COALESCE(CRNOV_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRNOV_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_NOVEDAD_NOTIFICACION
	WHERE CRNOV_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_NOVEDAD_NOTIFICACION
	WHERE CRNOV_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRNOV_FECHA_REGISTRO, CURRENT_TIMESTAMP)||' '||COALESCE(CRNOV_DESCRIPCION, '''')||' '||COALESCE(CRNOV_TIPO, 0)||' '||COALESCE(CRNOV_ESTADO, FALSE)||' '||COALESCE(CRNOV_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRNOV_USUARIO_INSERT, '''')||' '||COALESCE(CRNOV_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRNOV_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_NOVEDAD_NOTIFICACION
* @param IN_CRNOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CRNOV_FECHA_REGISTRO FECHA DE REGISTRO DE LA NOVEDAD
* @param IN_CRNOV_DESCRIPCION DESCRIPCION DE LA NOVEDAD
* @param IN_CRNOV_TIPO TIPO DE NOVEDAD - NOTIFICACION
0 Comentario
1 Notificacion
* @param IN_CRNOV_ESTADO ESTADO DEL REGISTRO
* @param IN_CRNOV_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_UPDATE(
IN IN_CRNOV_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_CODIGO%TYPE, 
IN IN_CRSEG_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRSEG_CODIGO%TYPE, 
IN IN_CRNOV_FECHA_REGISTRO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_FECHA_REGISTRO%TYPE, 
IN IN_CRNOV_DESCRIPCION SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_DESCRIPCION%TYPE, 
IN IN_CRNOV_TIPO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_TIPO%TYPE, 
IN IN_CRNOV_ESTADO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_ESTADO%TYPE, 
IN IN_CRNOV_USUARIO_UPDATE SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOVEDAD_NOTIFICACION SET
		CRSEG_CODIGO = IN_CRSEG_CODIGO, 
		CRNOV_FECHA_REGISTRO = IN_CRNOV_FECHA_REGISTRO, 
		CRNOV_DESCRIPCION = IN_CRNOV_DESCRIPCION, 
		CRNOV_TIPO = IN_CRNOV_TIPO, 
		CRNOV_ESTADO = IN_CRNOV_ESTADO, 
		CRNOV_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRNOV_USUARIO_UPDATE = IN_CRNOV_USUARIO_UPDATE
	WHERE
		CRNOV_CODIGO = IN_CRNOV_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION
* @param IN_CRNOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_SELECT(
IN IN_CRNOV_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOV_CODIGO, 
		CRSEG_CODIGO, 
		CRNOV_FECHA_REGISTRO, 
		CRNOV_DESCRIPCION, 
		CRNOV_TIPO, 
		CRNOV_ESTADO, 
		CRNOV_FECHA_INSERT, 
		CRNOV_USUARIO_INSERT, 
		CRNOV_FECHA_UPDATE, 
		CRNOV_USUARIO_UPDATE
	FROM SII.CGG_RES_NOVEDAD_NOTIFICACION
	WHERE CRNOV_ESTADO = TRUE AND 
		CRNOV_CODIGO = IN_CRNOV_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION
* @param IN_CRNOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_DELETE(
IN IN_CRNOV_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOVEDAD_NOTIFICACION
	WHERE
		CRNOV_CODIGO = IN_CRNOV_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION
* @param IN_CRNOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_DELETE_SOFT(
IN IN_CRNOV_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRNOV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOVEDAD_NOTIFICACION SET
		CRNOV_ESTADO = FALSE
	WHERE
		CRNOV_CODIGO = IN_CRNOV_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_S_CGG_RES_SEGUIMIENTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_S_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRSEG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOV_CODIGO, 
		CRSEG_CODIGO, 
		CRNOV_FECHA_REGISTRO, 
		CRNOV_DESCRIPCION, 
		CRNOV_TIPO, 
		CRNOV_ESTADO, 
		CRNOV_FECHA_INSERT, 
		CRNOV_USUARIO_INSERT, 
		CRNOV_FECHA_UPDATE, 
		CRNOV_USUARIO_UPDATE
	FROM SII.CGG_RES_NOVEDAD_NOTIFICACION
	WHERE CRNOV_ESTADO = TRUE AND 
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_D_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOVEDAD_NOTIFICACION
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOVEDAD_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_NOTIFICACION_DS_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_RES_NOVEDAD_NOTIFICACION.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOVEDAD_NOTIFICACION SET
		crnov_estado = false
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCIONA TODOS LAS NOTIFICACIONES DE UN TRAMITE  POR EL SEGUIMIENTO ACTUAL EN EL QUE SE ENCUENTRA EL FLUJO DE TRABAJO O LA FECHA EN LA QUE SE ENCUENTRA EL SEGUIMIENTO SELECCIONADO DE CONSULTA.
*@param IN_CRTRA_CODGIGO CODIGO DE TRAMITE.
*@param IN_CRSEG_CODIGO CODIGO DE SEGUIMIENTO.
*@return REFCURSOR CURSOR CON INFORMMACION.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOVEDAD_TRAMITE(
IN IN_CRTRA_CODIGO VARCHAR,
IN IN_CRSEG_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	FECHA_SEGUIMIENTO TIMESTAMP;	
BEGIN
	SELECT CRSEG_FECHA_INSERT INTO FECHA_SEGUIMIENTO FROM CGG_RES_SEGUIMIENTO WHERE CRSEG_CODIGO = IN_CRSEG_CODIGO;
	OPEN TMP_REF FOR
	SELECT
		NOV.CRNOV_CODIGO, 
		NOV.CRSEG_CODIGO, 
		NOV.CRNOV_FECHA_REGISTRO, 
		NOV.CRNOV_DESCRIPCION, 
		NOV.CRNOV_TIPO, 
		NOV.CRNOV_ESTADO, 
		NOV.CRNOV_FECHA_INSERT, 
		NOV.CRNOV_USUARIO_INSERT, 
		NOV.CRNOV_FECHA_UPDATE, 
		NOV.CRNOV_USUARIO_UPDATE,
		FAS.CRFAS_CODIGO,
		FAS.CRFAS_NOMBRE
	FROM SII.CGG_RES_NOVEDAD_NOTIFICACION NOV
	INNER JOIN SII.CGG_RES_SEGUIMIENTO SEG ON (NOV.CRSEG_CODIGO = SEG.CRSEG_CODIGO)
	INNER JOIN SII.CGG_RES_FASE FAS ON (FAS.CRFAS_CODIGO = SEG.CRFAS_CODIGO)
	WHERE CRNOV_ESTADO = TRUE AND 
		SEG.CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		  (SEG.CRSEG_CODIGO = IN_CRSEG_CODIGO OR NOV.CRNOV_FECHA_INSERT <= FECHA_SEGUIMIENTO OR SEG.CGG_CRSEG_CODIGO = IN_CRSEG_CODIGO);
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


