/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO
* @param IN_CRISE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME DE SEGUIMIENTO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @param IN_CRISE_NUMERO_INFORME NUMERO DE INFORME DE SEGUIMIENTO DE RESPUESTA AL SEGUIMIENTO
* @param IN_CRISE_FECHA_INFORME FECHA DE REALIZACION DEL INFORME DE SEGUIMIENTO
* @param IN_CRISE_ASUNTO_INFORME ASUNTO DEL INFORME SE SEGUIMIENTO
* @param IN_CRISE_EXTRACTO_INFORME RESUMEN DEL CONTENIDO DEL INFORME DE SEGUIMIENTO
* @param IN_CRISE_DESCRIPCION_ADJUNTO DESCRIPCION DE LOS DOCUMENTOS DIGITALIZADOS ADJUNTOS EN EL SEGUIMIENTO
* @param IN_CRISE_ESTADO ESTADO DEL REGISTRO DE INFORME DE SEGUIMIENTO
* @param IN_CRISE_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRISE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_INSERT(
IN IN_CRISE_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_CODIGO%TYPE, 
IN IN_CRSEG_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEG_CODIGO%TYPE, 
IN IN_CRSEC_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEC_CODIGO%TYPE, 
IN IN_CRISE_NUMERO_INFORME SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_NUMERO_INFORME%TYPE, 
IN IN_CRISE_FECHA_INFORME SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_FECHA_INFORME%TYPE, 
IN IN_CRISE_ASUNTO_INFORME SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_ASUNTO_INFORME%TYPE, 
IN IN_CRISE_EXTRACTO_INFORME SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_EXTRACTO_INFORME%TYPE, 
IN IN_CRISE_DESCRIPCION_ADJUNTO SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_DESCRIPCION_ADJUNTO%TYPE, 
IN IN_CRISE_ESTADO SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_ESTADO%TYPE, 
IN IN_CRISE_USUARIO_INSERT SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_USUARIO_INSERT%TYPE, 
IN IN_CRISE_USUARIO_UPDATE SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRISE_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_INFORME_SEGUIMIENTO','CRISE_CODIGO','CRISE') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRISE_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_INFORME_SEGUIMIENTO(
		CRISE_CODIGO, 
		CRSEG_CODIGO, 
		CRSEC_CODIGO, 
		CRISE_NUMERO_INFORME, 
		CRISE_FECHA_INFORME, 
		CRISE_ASUNTO_INFORME, 
		CRISE_EXTRACTO_INFORME, 
		CRISE_DESCRIPCION_ADJUNTO, 
		CRISE_ESTADO, 
		CRISE_FECHA_INSERT, 
		CRISE_USUARIO_INSERT, 
		CRISE_FECHA_UPDATE, 
		CRISE_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRSEG_CODIGO, 
		IN_CRSEC_CODIGO, 
		IN_CRISE_NUMERO_INFORME, 
		IN_CRISE_FECHA_INFORME, 
		IN_CRISE_ASUNTO_INFORME, 
		IN_CRISE_EXTRACTO_INFORME, 
		IN_CRISE_DESCRIPCION_ADJUNTO, 
		IN_CRISE_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRISE_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRISE_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRISE_CODIGO, 
		CRSEG_CODIGO, 
		CRSEC_CODIGO, 
		CRISE_NUMERO_INFORME, 
		CRISE_FECHA_INFORME, 
		CRISE_ASUNTO_INFORME, 
		CRISE_EXTRACTO_INFORME, 
		CRISE_DESCRIPCION_ADJUNTO, 
		CRISE_ESTADO, 
		CRISE_FECHA_INSERT, 
		CRISE_USUARIO_INSERT, 
		CRISE_FECHA_UPDATE, 
		CRISE_USUARIO_UPDATE
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE CRISE_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRISE_CODIGO, 
		CRSEG_CODIGO, 
		CRSEC_CODIGO, 
		CRISE_NUMERO_INFORME, 
		CRISE_FECHA_INFORME, 
		CRISE_ASUNTO_INFORME, 
		CRISE_EXTRACTO_INFORME, 
		CRISE_DESCRIPCION_ADJUNTO, 
		CRISE_ESTADO, 
		CRISE_FECHA_INSERT, 
		CRISE_USUARIO_INSERT, 
		CRISE_FECHA_UPDATE, 
		CRISE_USUARIO_UPDATE
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE CRISE_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRISE_NUMERO_INFORME, '''')||'' ''||COALESCE(CRISE_FECHA_INFORME, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRISE_ASUNTO_INFORME, '''')||'' ''||COALESCE(CRISE_EXTRACTO_INFORME, '''')||'' ''||COALESCE(CRISE_DESCRIPCION_ADJUNTO, '''')||'' ''||COALESCE(CRISE_ESTADO, FALSE)||'' ''||COALESCE(CRISE_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRISE_USUARIO_INSERT, '''')||'' ''||COALESCE(CRISE_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRISE_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE CRISE_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE CRISE_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRISE_NUMERO_INFORME, '''')||' '||COALESCE(CRISE_FECHA_INFORME, CURRENT_TIMESTAMP)||' '||COALESCE(CRISE_ASUNTO_INFORME, '''')||' '||COALESCE(CRISE_EXTRACTO_INFORME, '''')||' '||COALESCE(CRISE_DESCRIPCION_ADJUNTO, '''')||' '||COALESCE(CRISE_ESTADO, FALSE)||' '||COALESCE(CRISE_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRISE_USUARIO_INSERT, '''')||' '||COALESCE(CRISE_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRISE_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_INFORME_SEGUIMIENTO
* @param IN_CRISE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME DE SEGUIMIENTO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @param IN_CRISE_NUMERO_INFORME NUMERO DE INFORME DE SEGUIMIENTO DE RESPUESTA AL SEGUIMIENTO
* @param IN_CRISE_FECHA_INFORME FECHA DE REALIZACION DEL INFORME DE SEGUIMIENTO
* @param IN_CRISE_ASUNTO_INFORME ASUNTO DEL INFORME SE SEGUIMIENTO
* @param IN_CRISE_EXTRACTO_INFORME RESUMEN DEL CONTENIDO DEL INFORME DE SEGUIMIENTO
* @param IN_CRISE_DESCRIPCION_ADJUNTO DESCRIPCION DE LOS DOCUMENTOS DIGITALIZADOS ADJUNTOS EN EL SEGUIMIENTO
* @param IN_CRISE_ESTADO ESTADO DEL REGISTRO DE INFORME DE SEGUIMIENTO
* @param IN_CRISE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_UPDATE(
IN IN_CRISE_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_CODIGO%TYPE, 
IN IN_CRSEG_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEG_CODIGO%TYPE, 
IN IN_CRSEC_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEC_CODIGO%TYPE, 
IN IN_CRISE_NUMERO_INFORME SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_NUMERO_INFORME%TYPE, 
IN IN_CRISE_FECHA_INFORME SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_FECHA_INFORME%TYPE, 
IN IN_CRISE_ASUNTO_INFORME SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_ASUNTO_INFORME%TYPE, 
IN IN_CRISE_EXTRACTO_INFORME SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_EXTRACTO_INFORME%TYPE, 
IN IN_CRISE_DESCRIPCION_ADJUNTO SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_DESCRIPCION_ADJUNTO%TYPE, 
IN IN_CRISE_ESTADO SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_ESTADO%TYPE, 
IN IN_CRISE_USUARIO_UPDATE SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_INFORME_SEGUIMIENTO SET
		CRSEG_CODIGO = IN_CRSEG_CODIGO, 
		CRSEC_CODIGO = IN_CRSEC_CODIGO, 
		CRISE_NUMERO_INFORME = IN_CRISE_NUMERO_INFORME, 
		CRISE_FECHA_INFORME = IN_CRISE_FECHA_INFORME, 
		CRISE_ASUNTO_INFORME = IN_CRISE_ASUNTO_INFORME, 
		CRISE_EXTRACTO_INFORME = IN_CRISE_EXTRACTO_INFORME, 
		CRISE_DESCRIPCION_ADJUNTO = IN_CRISE_DESCRIPCION_ADJUNTO, 
		CRISE_ESTADO = IN_CRISE_ESTADO, 
		CRISE_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRISE_USUARIO_UPDATE = IN_CRISE_USUARIO_UPDATE
	WHERE
		CRISE_CODIGO = IN_CRISE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO
* @param IN_CRISE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME DE SEGUIMIENTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_SELECT(
IN IN_CRISE_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRISE_CODIGO, 
		CRSEG_CODIGO, 
		CRSEC_CODIGO, 
		CRISE_NUMERO_INFORME, 
		CRISE_FECHA_INFORME, 
		CRISE_ASUNTO_INFORME, 
		CRISE_EXTRACTO_INFORME, 
		CRISE_DESCRIPCION_ADJUNTO, 
		CRISE_ESTADO, 
		CRISE_FECHA_INSERT, 
		CRISE_USUARIO_INSERT, 
		CRISE_FECHA_UPDATE, 
		CRISE_USUARIO_UPDATE
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE CRISE_ESTADO = TRUE AND 
		CRISE_CODIGO = IN_CRISE_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO
* @param IN_CRISE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_DELETE(
IN IN_CRISE_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE
		CRISE_CODIGO = IN_CRISE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO
* @param IN_CRISE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORME DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_DELETE_SOFT(
IN IN_CRISE_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRISE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_INFORME_SEGUIMIENTO SET
		CRISE_ESTADO = FALSE
	WHERE
		CRISE_CODIGO = IN_CRISE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_S_CGG_RES_SECCION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SECCION.
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_S_CGG_RES_SECCION(
IN IN_CRSEC_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRISE_CODIGO, 
		CRSEG_CODIGO, 
		CRSEC_CODIGO, 
		CRISE_NUMERO_INFORME, 
		CRISE_FECHA_INFORME, 
		CRISE_ASUNTO_INFORME, 
		CRISE_EXTRACTO_INFORME, 
		CRISE_DESCRIPCION_ADJUNTO, 
		CRISE_ESTADO, 
		CRISE_FECHA_INSERT, 
		CRISE_USUARIO_INSERT, 
		CRISE_FECHA_UPDATE, 
		CRISE_USUARIO_UPDATE
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE CRISE_ESTADO = TRUE AND 
		CRSEC_CODIGO = IN_CRSEC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_D_CGG_RES_SECCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SECCION.
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_D_CGG_RES_SECCION(
IN IN_CRSEC_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE
		CRSEC_CODIGO = IN_CRSEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_D_CGG_RES_SECCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SECCION.
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_DS_CGG_RES_SECCION(
IN IN_CRSEC_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_INFORME_SEGUIMIENTO SET
		crise_estado = false
	WHERE
		CRSEC_CODIGO = IN_CRSEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_S_CGG_RES_SEGUIMIENTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_S_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRISE_CODIGO, 
		CRSEG_CODIGO, 
		CRSEC_CODIGO, 
		CRISE_NUMERO_INFORME, 
		CRISE_FECHA_INFORME, 
		CRISE_ASUNTO_INFORME, 
		CRISE_EXTRACTO_INFORME, 
		CRISE_DESCRIPCION_ADJUNTO, 
		CRISE_ESTADO, 
		CRISE_FECHA_INSERT, 
		CRISE_USUARIO_INSERT, 
		CRISE_FECHA_UPDATE, 
		CRISE_USUARIO_UPDATE
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE CRISE_ESTADO = TRUE AND 
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_D_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_INFORME_SEGUIMIENTO
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_SEGUIMIENTO_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_INFORME_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_SEGUIMIENTO_DS_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_RES_INFORME_SEGUIMIENTO.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_INFORME_SEGUIMIENTO SET
		crise_estado = false
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCIONA TODOS INFORMES DE UN TRAMITE  POR EL SEGUIMIENTO ACTUAL EN EL QUE SE ENCUENTRA EL FLUJO DE TRABAJO O LA FECHA EN LA QUE SE ENCUENTRA EL SEGUIMIENTO SELECCIONADO DE CONSULTA.
*@param IN_CRTRA_CODGIGO CODIGO DE TRAMITE.
*@param IN_CRSEG_CODIGO CODIGO DE SEGUIMIENTO.
*@return REFCURSOR CURSOR CON INFORMMACION.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_TRAMITE(
IN IN_CRTRA_CODIGO VARCHAR,
IN IN_CRSEG_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	FECHA_SEGUIMIENTO TIMESTAMP;	
BEGIN
	SELECT CRSEG_FECHA_INSERT INTO FECHA_SEGUIMIENTO FROM CGG_RES_SEGUIMIENTO WHERE CRSEG_CODIGO = IN_CRSEG_CODIGO;
	OPEN TMP_REF FOR
	SELECT
		CRISE.CRISE_CODIGO, 
		CRISE.CRSEG_CODIGO, 
		CRISE.CRSEC_CODIGO, 
		CRISE.CRISE_NUMERO_INFORME, 
		CRISE.CRISE_FECHA_INFORME, 
		CRISE.CRISE_ASUNTO_INFORME, 
		CRISE.CRISE_EXTRACTO_INFORME, 
		CRISE.CRISE_DESCRIPCION_ADJUNTO, 
		CRISE.CRISE_ESTADO, 
		CRISE.CRISE_FECHA_INSERT, 
		CRISE.CRISE_USUARIO_INSERT, 
		CRISE.CRISE_FECHA_UPDATE, 
		CRISE.CRISE_USUARIO_UPDATE,
		FAS.CRFAS_CODIGO
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO CRISE
	INNER JOIN SII.CGG_RES_SEGUIMIENTO SEG ON (CRISE.CRSEG_CODIGO = SEG.CRSEG_CODIGO)
	INNER JOIN SII.CGG_RES_FASE FAS ON (FAS.CRFAS_CODIGO = SEG.CRFAS_CODIGO)
	WHERE CRISE_ESTADO = TRUE AND 
		  SEG.CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		 (SEG.CRSEG_CODIGO = IN_CRSEG_CODIGO OR CRISE.CRISE_FECHA_INSERT <= FECHA_SEGUIMIENTO);
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


