/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_CERTIFICADO
* @param IN_CRCRT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CERTIFICADO
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @param IN_CRCRT_FECHA_EMISION FECHA DE EMISION DEL CERTIFICADO
* @param IN_CRCRT_NUMERO NUMERO SECUENCIAL UNICO DEL CERTIFICADO
* @param IN_CRCRT_CONTENIDO DESCRIPCION DEL CUERPO DEL CERTIFICADO
* @param IN_CRCRT_ANIO ANIO DE EMISION DEL CERTIFICADO
* @param IN_CRCRT_ESTADO ESTADO DEL REGISTRO
* @param IN_CRCRT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRCRT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_INSERT(
IN IN_CRCRT_CODIGO SII.CGG_RES_CERTIFICADO.CRCRT_CODIGO%TYPE, 
IN IN_CRRSD_CODIGO SII.CGG_RES_CERTIFICADO.CRRSD_CODIGO%TYPE, 
IN IN_CRCRT_FECHA_EMISION SII.CGG_RES_CERTIFICADO.CRCRT_FECHA_EMISION%TYPE, 
IN IN_CRCRT_NUMERO SII.CGG_RES_CERTIFICADO.CRCRT_NUMERO%TYPE, 
IN IN_CRCRT_CONTENIDO SII.CGG_RES_CERTIFICADO.CRCRT_CONTENIDO%TYPE, 
IN IN_CRCRT_ANIO SII.CGG_RES_CERTIFICADO.CRCRT_ANIO%TYPE, 
IN IN_CRCRT_ESTADO SII.CGG_RES_CERTIFICADO.CRCRT_ESTADO%TYPE, 
IN IN_CRCRT_USUARIO_INSERT SII.CGG_RES_CERTIFICADO.CRCRT_USUARIO_INSERT%TYPE, 
IN IN_CRCRT_USUARIO_UPDATE SII.CGG_RES_CERTIFICADO.CRCRT_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRCRT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_CERTIFICADO','CRCRT_CODIGO','CRCRT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRCRT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_CERTIFICADO(
		CRCRT_CODIGO, 
		CRRSD_CODIGO, 
		CRCRT_FECHA_EMISION, 
		CRCRT_NUMERO, 
		CRCRT_CONTENIDO, 
		CRCRT_ANIO, 
		CRCRT_ESTADO, 
		CRCRT_FECHA_INSERT, 
		CRCRT_USUARIO_INSERT, 
		CRCRT_FECHA_UPDATE, 
		CRCRT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRRSD_CODIGO, 
		IN_CRCRT_FECHA_EMISION, 
		IN_CRCRT_NUMERO, 
		IN_CRCRT_CONTENIDO, 
		IN_CRCRT_ANIO, 
		IN_CRCRT_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRCRT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRCRT_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_CERTIFICADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCRT_CODIGO, 
		CRRSD_CODIGO, 
		CRCRT_FECHA_EMISION, 
		CRCRT_NUMERO, 
		CRCRT_CONTENIDO, 
		CRCRT_ANIO, 
		CRCRT_ESTADO, 
		CRCRT_FECHA_INSERT, 
		CRCRT_USUARIO_INSERT, 
		CRCRT_FECHA_UPDATE, 
		CRCRT_USUARIO_UPDATE
	FROM SII.CGG_RES_CERTIFICADO
	WHERE CRCRT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_CERTIFICADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRCRT_CODIGO, 
		CRRSD_CODIGO, 
		CRCRT_FECHA_EMISION, 
		CRCRT_NUMERO, 
		CRCRT_CONTENIDO, 
		CRCRT_ANIO, 
		CRCRT_ESTADO, 
		CRCRT_FECHA_INSERT, 
		CRCRT_USUARIO_INSERT, 
		CRCRT_FECHA_UPDATE, 
		CRCRT_USUARIO_UPDATE
	FROM SII.CGG_RES_CERTIFICADO
	WHERE CRCRT_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRCRT_FECHA_EMISION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRCRT_NUMERO, '''')||'' ''||COALESCE(CRCRT_CONTENIDO, '''')||'' ''||COALESCE(CRCRT_ANIO, 0)||'' ''||COALESCE(CRCRT_ESTADO, FALSE)||'' ''||COALESCE(CRCRT_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRCRT_USUARIO_INSERT, '''')||'' ''||COALESCE(CRCRT_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRCRT_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_CERTIFICADO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_CERTIFICADO
	WHERE CRCRT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_CERTIFICADO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_CERTIFICADO
	WHERE CRCRT_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRCRT_FECHA_EMISION, CURRENT_TIMESTAMP)||' '||COALESCE(CRCRT_NUMERO, '''')||' '||COALESCE(CRCRT_CONTENIDO, '''')||' '||COALESCE(CRCRT_ANIO, 0)||' '||COALESCE(CRCRT_ESTADO, FALSE)||' '||COALESCE(CRCRT_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRCRT_USUARIO_INSERT, '''')||' '||COALESCE(CRCRT_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRCRT_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_CERTIFICADO
* @param IN_CRCRT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CERTIFICADO
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @param IN_CRCRT_FECHA_EMISION FECHA DE EMISION DEL CERTIFICADO
* @param IN_CRCRT_NUMERO NUMERO SECUENCIAL UNICO DEL CERTIFICADO
* @param IN_CRCRT_CONTENIDO DESCRIPCION DEL CUERPO DEL CERTIFICADO
* @param IN_CRCRT_ANIO ANIO DE EMISION DEL CERTIFICADO
* @param IN_CRCRT_ESTADO ESTADO DEL REGISTRO
* @param IN_CRCRT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_UPDATE(
IN IN_CRCRT_CODIGO SII.CGG_RES_CERTIFICADO.CRCRT_CODIGO%TYPE, 
IN IN_CRRSD_CODIGO SII.CGG_RES_CERTIFICADO.CRRSD_CODIGO%TYPE, 
IN IN_CRCRT_FECHA_EMISION SII.CGG_RES_CERTIFICADO.CRCRT_FECHA_EMISION%TYPE, 
IN IN_CRCRT_NUMERO SII.CGG_RES_CERTIFICADO.CRCRT_NUMERO%TYPE, 
IN IN_CRCRT_CONTENIDO SII.CGG_RES_CERTIFICADO.CRCRT_CONTENIDO%TYPE, 
IN IN_CRCRT_ANIO SII.CGG_RES_CERTIFICADO.CRCRT_ANIO%TYPE, 
IN IN_CRCRT_ESTADO SII.CGG_RES_CERTIFICADO.CRCRT_ESTADO%TYPE, 
IN IN_CRCRT_USUARIO_UPDATE SII.CGG_RES_CERTIFICADO.CRCRT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_CERTIFICADO SET
		CRRSD_CODIGO = IN_CRRSD_CODIGO, 
		CRCRT_FECHA_EMISION = IN_CRCRT_FECHA_EMISION, 
		CRCRT_NUMERO = IN_CRCRT_NUMERO, 
		CRCRT_CONTENIDO = IN_CRCRT_CONTENIDO, 
		CRCRT_ANIO = IN_CRCRT_ANIO, 
		CRCRT_ESTADO = IN_CRCRT_ESTADO, 
		CRCRT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRCRT_USUARIO_UPDATE = IN_CRCRT_USUARIO_UPDATE
	WHERE
		CRCRT_CODIGO = IN_CRCRT_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_CERTIFICADO
* @param IN_CRCRT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CERTIFICADO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_SELECT(
IN IN_CRCRT_CODIGO SII.CGG_RES_CERTIFICADO.CRCRT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCRT_CODIGO, 
		CRRSD_CODIGO, 
		CRCRT_FECHA_EMISION, 
		CRCRT_NUMERO, 
		CRCRT_CONTENIDO, 
		CRCRT_ANIO, 
		CRCRT_ESTADO, 
		CRCRT_FECHA_INSERT, 
		CRCRT_USUARIO_INSERT, 
		CRCRT_FECHA_UPDATE, 
		CRCRT_USUARIO_UPDATE
	FROM SII.CGG_RES_CERTIFICADO
	WHERE CRCRT_ESTADO = TRUE AND 
		CRCRT_CODIGO = IN_CRCRT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_CERTIFICADO
* @param IN_CRCRT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CERTIFICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_DELETE(
IN IN_CRCRT_CODIGO SII.CGG_RES_CERTIFICADO.CRCRT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_CERTIFICADO
	WHERE
		CRCRT_CODIGO = IN_CRCRT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_CERTIFICADO
* @param IN_CRCRT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CERTIFICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_DELETE_SOFT(
IN IN_CRCRT_CODIGO SII.CGG_RES_CERTIFICADO.CRCRT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_CERTIFICADO SET
		CRCRT_ESTADO = FALSE
	WHERE
		CRCRT_CODIGO = IN_CRCRT_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_S_CGG_RES_RESIDENCIA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CERTIFICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESIDENCIA.
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_S_CGG_RES_RESIDENCIA(
IN IN_CRRSD_CODIGO SII.CGG_RES_CERTIFICADO.CRRSD_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCRT_CODIGO, 
		CRRSD_CODIGO, 
		CRCRT_FECHA_EMISION, 
		CRCRT_NUMERO, 
		CRCRT_CONTENIDO, 
		CRCRT_ANIO, 
		CRCRT_ESTADO, 
		CRCRT_FECHA_INSERT, 
		CRCRT_USUARIO_INSERT, 
		CRCRT_FECHA_UPDATE, 
		CRCRT_USUARIO_UPDATE
	FROM SII.CGG_RES_CERTIFICADO
	WHERE CRCRT_ESTADO = TRUE AND 
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_D_CGG_RES_RESIDENCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CERTIFICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESIDENCIA.
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_D_CGG_RES_RESIDENCIA(
IN IN_CRRSD_CODIGO SII.CGG_RES_CERTIFICADO.CRRSD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_CERTIFICADO
	WHERE
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CERTIFICADO_D_CGG_RES_RESIDENCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CERTIFICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESIDENCIA.
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CERTIFICADO_DS_CGG_RES_RESIDENCIA(
IN IN_CRRSD_CODIGO SII.CGG_RES_CERTIFICADO.CRRSD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_CERTIFICADO SET
		crcrt_estado = false
	WHERE
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

