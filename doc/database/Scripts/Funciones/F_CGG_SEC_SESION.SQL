/**
* FUNCION SII.F_CGG_SEC_SESION_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_SEC_SESION
* @param IN_CSSSN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESIONES DE CONEXION
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CSSSN_FECHA_INICIO FECHA DE INICIO DE LA SESION
* @param IN_CSSSN_FECHA_FIN FECHA DE FINALIZACION DE LA SESION
* @param IN_CSSSN_ID IDENTIFICATIVO UNICO DE LA SESION DADO POR EL SERVIDOR DE APLICACIONES
* @param IN_CSSSN_IP DIRECCION IP REMOTA DEL USUARIO QUE SE CONECTA
* @param IN_CSSSN_ZONA_TIEMPO ZONA DE TIEMPO DEL USUARIO QUE SE CONECTA
* @param IN_CSSSN_ACTIVO SI LA SESION DEL USUARIO ESTA ACTIVA
* @param IN_CSSSN_CONTEXTO CONTEXTO DE LA APLICACION QUE ACCEDIO EL USUARIO
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_INSERT(
IN IN_CSSSN_CODIGO SII.CGG_SEC_SESION.CSSSN_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_SEC_SESION.CUSU_CODIGO%TYPE, 
IN IN_CSSSN_FECHA_INICIO SII.CGG_SEC_SESION.CSSSN_FECHA_INICIO%TYPE, 
IN IN_CSSSN_FECHA_FIN SII.CGG_SEC_SESION.CSSSN_FECHA_FIN%TYPE, 
IN IN_CSSSN_ID SII.CGG_SEC_SESION.CSSSN_ID%TYPE, 
IN IN_CSSSN_IP SII.CGG_SEC_SESION.CSSSN_IP%TYPE, 
IN IN_CSSSN_ZONA_TIEMPO SII.CGG_SEC_SESION.CSSSN_ZONA_TIEMPO%TYPE, 
IN IN_CSSSN_ACTIVO SII.CGG_SEC_SESION.CSSSN_ACTIVO%TYPE,
IN IN_CSSSN_CONTEXTO SII.CGG_SEC_SESION.CSSSN_CONTEXTO%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CSSSN_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_SEC_SESION','CSSSN_CODIGO','CSSSN') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CSSSN_CODIGO;
	END IF;
	INSERT INTO SII.CGG_SEC_SESION(
		CSSSN_CODIGO, 
		CUSU_CODIGO, 
		CSSSN_FECHA_INICIO, 
		CSSSN_FECHA_FIN, 
		CSSSN_ID, 
		CSSSN_IP, 
		CSSSN_ZONA_TIEMPO, 
		CSSSN_ACTIVO,
		CSSSN_CONTEXTO
	) VALUES (
		OUT_KEY, 
		IN_CUSU_CODIGO, 
		IN_CSSSN_FECHA_INICIO, 
		IN_CSSSN_FECHA_FIN, 
		IN_CSSSN_ID, 
		IN_CSSSN_IP, 
		IN_CSSSN_ZONA_TIEMPO, 
		IN_CSSSN_ACTIVO,
		IN_CSSSN_CONTEXTO
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_SEC_SESION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSSSN_CODIGO, 
		CUSU_CODIGO, 
		CSSSN_FECHA_INICIO, 
		CSSSN_FECHA_FIN, 
		CSSSN_ID, 
		CSSSN_IP, 
		CSSSN_ZONA_TIEMPO, 
		CSSSN_ACTIVO,
		CSSSN_CONTEXTO
	FROM SII.CGG_SEC_SESION;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_SELECT_ACTIVE
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_SEC_SESION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_SELECT_ACTIVE(
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		SS.CSSSN_CODIGO, 
		SS.CUSU_CODIGO, 
		US.CUSU_NOMBRE_USUARIO,
		SS.CSSSN_FECHA_INICIO, 
		SS.CSSSN_FECHA_FIN, 
		SS.CSSSN_ID, 
		SS.CSSSN_IP, 
		SS.CSSSN_ZONA_TIEMPO, 
		SS.CSSSN_ACTIVO,
		CSSSN_CONTEXTO
	FROM SII.CGG_SEC_SESION SS
	INNER JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = SS.CUSU_CODIGO
	WHERE CSSSN_ACTIVO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SEC_SESION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CSSSN_CODIGO, 
		CUSU_CODIGO, 
		CSSSN_FECHA_INICIO, 
		CSSSN_FECHA_FIN, 
		CSSSN_ID, 
		CSSSN_IP, 
		CSSSN_ZONA_TIEMPO, 
		CSSSN_ACTIVO,
		CSSSN_CONTEXTO
	FROM SII.CGG_SEC_SESION
	WHERE SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CSSSN_CODIGO IS NULL THEN '''' ELSE CSSSN_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CSSSN_FECHA_INICIO IS NULL THEN CURRENT_TIMESTAMP ELSE CSSSN_FECHA_INICIO END ||'' ''||CASE WHEN CSSSN_FECHA_FIN IS NULL THEN CURRENT_TIMESTAMP ELSE CSSSN_FECHA_FIN END ||'' ''||CASE WHEN CSSSN_ID IS NULL THEN '''' ELSE CSSSN_ID END ||'' ''||CASE WHEN CSSSN_IP IS NULL THEN '''' ELSE CSSSN_IP END ||'' ''||CASE WHEN CSSSN_ZONA_TIEMPO IS NULL THEN '''' ELSE CSSSN_ZONA_TIEMPO END ||'' ''||CASE WHEN CSSSN_ACTIVO IS NULL THEN FALSE ELSE CSSSN_ACTIVO END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_SESION
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_SESION;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_COUNT_AS
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_SESION
* @param IN_CUSU_NOMBRE_USUARIO NOMBRE DE USUARIO 
* @param IN_CSSSN_ID IDENTIFICATIVO UNICO DE SECCION SESION
* @param IN_CSSSN_CONTEXTO IDENTIFICATIVO UNICO DE CONTEXTO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_COUNT_AS(
IN IN_CUSU_NOMBRE_USUARIO VARCHAR,
IN IN_CSSSN_ID TEXT,
IN IN_CSSSN_CONTEXTO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_SESION SS
	INNER JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = SS.CUSU_CODIGO
	WHERE US.CUSU_NOMBRE_USUARIO = IN_CUSU_NOMBRE_USUARIO AND 
		CSSSN_ID != IN_CSSSN_ID AND 
		CSSSN_CONTEXTO = IN_CSSSN_CONTEXTO AND 
		CSSSN_ACTIVO;
	
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_SESION
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_SESION
	WHERE SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CSSSN_CODIGO IS NULL THEN '''' ELSE CSSSN_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CSSSN_FECHA_INICIO IS NULL THEN CURRENT_TIMESTAMP ELSE CSSSN_FECHA_INICIO END ||' '||CASE WHEN CSSSN_FECHA_FIN IS NULL THEN CURRENT_TIMESTAMP ELSE CSSSN_FECHA_FIN END ||' '||CASE WHEN CSSSN_ID IS NULL THEN '''' ELSE CSSSN_ID END ||' '||CASE WHEN CSSSN_IP IS NULL THEN '''' ELSE CSSSN_IP END ||' '||CASE WHEN CSSSN_ZONA_TIEMPO IS NULL THEN '''' ELSE CSSSN_ZONA_TIEMPO END ||' '||CASE WHEN CSSSN_ACTIVO IS NULL THEN FALSE ELSE CSSSN_ACTIVO END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_SEC_SESION
* @param IN_CSSSN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESIONES DE CONEXION
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CSSSN_FECHA_INICIO FECHA DE INICIO DE LA SESION
* @param IN_CSSSN_FECHA_FIN FECHA DE FINALIZACION DE LA SESION
* @param IN_CSSSN_ID IDENTIFICATIVO UNICO DE LA SESION DADO POR EL SERVIDOR DE APLICACIONES
* @param IN_CSSSN_IP DIRECCION IP REMOTA DEL USUARIO QUE SE CONECTA
* @param IN_CSSSN_ZONA_TIEMPO ZONA DE TIEMPO DEL USUARIO QUE SE CONECTA
* @param IN_CSSSN_ACTIVO SI LA SESION DEL USUARIO ESTA ACTIVA
* @param IN_CSSSN_CONTEXTO CONTEXTO DE LA APLICACION QUE ACCEDIO EL USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_UPDATE(
IN IN_CSSSN_CODIGO SII.CGG_SEC_SESION.CSSSN_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_SEC_SESION.CUSU_CODIGO%TYPE, 
IN IN_CSSSN_FECHA_INICIO SII.CGG_SEC_SESION.CSSSN_FECHA_INICIO%TYPE, 
IN IN_CSSSN_FECHA_FIN SII.CGG_SEC_SESION.CSSSN_FECHA_FIN%TYPE, 
IN IN_CSSSN_ID SII.CGG_SEC_SESION.CSSSN_ID%TYPE, 
IN IN_CSSSN_IP SII.CGG_SEC_SESION.CSSSN_IP%TYPE, 
IN IN_CSSSN_ZONA_TIEMPO SII.CGG_SEC_SESION.CSSSN_ZONA_TIEMPO%TYPE, 
IN IN_CSSSN_ACTIVO SII.CGG_SEC_SESION.CSSSN_ACTIVO%TYPE,
IN IN_CSSSN_CONTEXTO SII.CGG_SEC_SESION.CSSSN_CONTEXTO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_SESION SET
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CSSSN_FECHA_INICIO = IN_CSSSN_FECHA_INICIO, 
		CSSSN_FECHA_FIN = IN_CSSSN_FECHA_FIN, 
		CSSSN_ID = IN_CSSSN_ID, 
		CSSSN_IP = IN_CSSSN_IP, 
		CSSSN_ZONA_TIEMPO = IN_CSSSN_ZONA_TIEMPO, 
		CSSSN_ACTIVO = IN_CSSSN_ACTIVO,
		CSSSN_CONTEXTO = IN_CSSSN_CONTEXTO
	WHERE
		CSSSN_CODIGO = IN_CSSSN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_SEC_SESION
* @param IN_CSSSN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESIONES DE CONEXION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_SELECT(
IN IN_CSSSN_CODIGO SII.CGG_SEC_SESION.CSSSN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSSSN_CODIGO, 
		CUSU_CODIGO, 
		CSSSN_FECHA_INICIO, 
		CSSSN_FECHA_FIN, 
		CSSSN_ID, 
		CSSSN_IP, 
		CSSSN_ZONA_TIEMPO, 
		CSSSN_ACTIVO,
		CSSSN_CONTEXTO
	FROM SII.CGG_SEC_SESION
	WHERE 
		CSSSN_CODIGO = IN_CSSSN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_SEC_SESION
* @param IN_CSSSN_ID IDENTIFICATIVO UNICO QUE LE ASIGNA EL SERVIDOR DE APLICACIONES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_SELECT_ID(
IN IN_CSSSN_ID SII.CGG_SEC_SESION.CSSSN_CODIGO%TYPE
)RETURNS REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSSSN_CODIGO, 
		CUSU_CODIGO, 
		CSSSN_FECHA_INICIO, 
		CSSSN_FECHA_FIN, 
		CSSSN_ID, 
		CSSSN_IP, 
		CSSSN_ZONA_TIEMPO, 
		CSSSN_ACTIVO,
		CSSSN_CONTEXTO
	FROM SII.CGG_SEC_SESION
	WHERE CSSSN_ID = IN_CSSSN_ID;
	RETURN TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_SEC_SESION
* @param IN_CSSSN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESIONES DE CONEXION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_DELETE(
IN IN_CSSSN_CODIGO SII.CGG_SEC_SESION.CSSSN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_SESION
	WHERE
		CSSSN_CODIGO = IN_CSSSN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_SEC_SESION
* @param IN_CSSSN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESIONES DE CONEXION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_DELETE_SOFT(
IN IN_CSSSN_CODIGO SII.CGG_SEC_SESION.CSSSN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_SESION SET
		CSSSN_ESTADO = FALSE
	WHERE
		CSSSN_CODIGO = IN_CSSSN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_SESION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_SEC_SESION.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSSSN_CODIGO, 
		CUSU_CODIGO, 
		CSSSN_FECHA_INICIO, 
		CSSSN_FECHA_FIN, 
		CSSSN_ID, 
		CSSSN_IP, 
		CSSSN_ZONA_TIEMPO, 
		CSSSN_ACTIVO,
		CSSSN_CONTEXTO
	FROM SII.CGG_SEC_SESION
	WHERE 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_SESION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_SEC_SESION.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_SESION
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_SESION_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_SESION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_SESION_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_SEC_SESION.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_SESION SET
		csssn_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

