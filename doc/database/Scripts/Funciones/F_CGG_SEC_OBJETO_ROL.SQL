/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_SEC_OBJETO_ROL
* @param IN_CSBJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO_ROL
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @param IN_CSBJR_ACCESO_DIRECTO SI TIENE ACCESO DIRECTO EN EL ESCRITORIO
* @param IN_CSBJR_ACCESO_DIRECTO_TEXTO TEXTO DEL ACCESO DIRECTO. SOLO ES APLICABLE A LOS OBJETOS VISUALES.
* @param IN_CSBJR_ESTADO ESTADO DEL REGISTRO
* @param IN_CSBJR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CSBJR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_INSERT(
IN IN_CSBJR_CODIGO SII.CGG_SEC_OBJETO_ROL.CSBJR_CODIGO%TYPE,
IN IN_CSROL_CODIGO SII.CGG_SEC_OBJETO_ROL.CSROL_CODIGO%TYPE,
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO_ROL.CSOBJ_CODIGO%TYPE,
IN IN_CSBJR_ACCESO_DIRECTO SII.CGG_SEC_OBJETO_ROL.CSBJR_ACCESO_DIRECTO%TYPE,
IN IN_CSBJR_ACCESO_DIRECTO_TEXTO SII.CGG_SEC_OBJETO_ROL.CSBJR_ACCESO_DIRECTO_TEXTO%TYPE,
IN IN_CSBJR_ESTADO SII.CGG_SEC_OBJETO_ROL.CSBJR_ESTADO%TYPE,
IN IN_CSBJR_USUARIO_INSERT SII.CGG_SEC_OBJETO_ROL.CSBJR_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
TMP_AD BOOLEAN;
TMP_AD_TEXT VARCHAR;
BEGIN
	SELECT COUNT(IN_CSBJR_CODIGO) INTO TMP_COUNT FROM SII.CGG_SEC_OBJETO_ROL WHERE CSROL_CODIGO = IN_CSROL_CODIGO AND CSOBJ_CODIGO = IN_CSOBJ_CODIGO AND CSBJR_ESTADO;
	IF (TMP_COUNT > 0) THEN
		SELECT CSBJR_CODIGO INTO OUT_KEY FROM SII.CGG_SEC_OBJETO_ROL WHERE CSROL_CODIGO = IN_CSROL_CODIGO AND CSOBJ_CODIGO = IN_CSOBJ_CODIGO AND CSBJR_ESTADO;
		RETURN OUT_KEY;
	END IF;  
	SELECT COUNT(CSBJR_CODIGO) INTO TMP_COUNT
	FROM SII.CGG_SEC_OBJETO_ROL 
	WHERE CSBJR_ACCESO_DIRECTO = TRUE AND 
		CSOBJ_CODIGO IN (SELECT CSOBJ_CODIGO 
			FROM SII.CGG_SEC_OBJETO 
			WHERE CSOBJ_RUTA = (
				SELECT CSOBJ_RUTA
				FROM SII.CGG_SEC_OBJETO 
				WHERE CSOBJ_CODIGO = IN_CSOBJ_CODIGO));
	
	IF (TMP_COUNT > 0) THEN
		TMP_AD := FALSE;
		TMP_AD_TEXT := '';
	ELSE
		TMP_AD := IN_CSBJR_ACCESO_DIRECTO;
		TMP_AD_TEXT := IN_CSBJR_ACCESO_DIRECTO_TEXTO;
	END IF;  
	
	IF (UPPER(IN_CSBJR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_SEC_OBJETO_ROL','CSBJR_CODIGO','CSBJR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CSBJR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_SEC_OBJETO_ROL(
		CSBJR_CODIGO, 
		CSROL_CODIGO, 
		CSOBJ_CODIGO, 
		CSBJR_ACCESO_DIRECTO, 
		CSBJR_ACCESO_DIRECTO_TEXTO, 
		CSBJR_ESTADO, 
		CSBJR_FECHA_INSERT, 
		CSBJR_USUARIO_INSERT, 
		CSBJR_FECHA_UPDATE, 
		CSBJR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CSROL_CODIGO, 
		IN_CSOBJ_CODIGO, 
		TMP_AD, 
		TMP_AD_TEXT, 
		IN_CSBJR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CSBJR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CSBJR_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_SEC_OBJETO_ROL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSBJR_CODIGO, 
		CSROL_CODIGO, 
		CSOBJ_CODIGO, 
		CSBJR_ACCESO_DIRECTO, 
		CSBJR_ACCESO_DIRECTO_TEXTO, 
		CSBJR_ESTADO, 
		CSBJR_FECHA_INSERT, 
		CSBJR_USUARIO_INSERT, 
		CSBJR_FECHA_UPDATE, 
		CSBJR_USUARIO_UPDATE
	FROM SII.CGG_SEC_OBJETO_ROL
	WHERE CSBJR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SEC_OBJETO_ROL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE ROL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_TYPE_OBJECT INT,
IN IN_CSROL_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		RBL.CSBJR_CODIGO, 
		RBL.CSROL_CODIGO, 
		RBL.CSOBJ_CODIGO,
		OBJ.CSOBJ_NOMBRE,
		OBJ.CSOBJ_RUTA,
		OBJ.CSOBJ_DESCRIPCION,
		RBL.CSBJR_ACCESO_DIRECTO, 
		RBL.CSBJR_ACCESO_DIRECTO_TEXTO, 
		RBL.CSBJR_ESTADO, 
		RBL.CSBJR_FECHA_INSERT, 
		RBL.CSBJR_USUARIO_INSERT, 
		RBL.CSBJR_FECHA_UPDATE, 
		RBL.CSBJR_USUARIO_UPDATE
	FROM SII.CGG_SEC_OBJETO_ROL RBL
	INNER JOIN SII.CGG_SEC_ROL ROL ON ROL.CSROL_CODIGO = RBL.CSROL_CODIGO AND ROL.CSROL_CODIGO = '||QUOTE_LITERAL(IN_CSROL_CODIGO)||'
	INNER JOIN SII.CGG_SEC_OBJETO OBJ ON OBJ.CSOBJ_CODIGO = RBL.CSOBJ_CODIGO AND OBJ.CSOBJ_TIPO = '||IN_TYPE_OBJECT||'
	WHERE CSBJR_ESTADO AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(OBJ.CSOBJ_NOMBRE, '''')||'' ''||COALESCE(OBJ.CSOBJ_RUTA, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_OBJETO_ROL
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_COUNT(
IN IN_TYPE_OBJECT INT,
IN IN_CSROL_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_OBJETO_ROL RBL
	INNER JOIN SII.CGG_SEC_OBJETO OBJ ON OBJ.CSOBJ_CODIGO = RBL.CSOBJ_CODIGO AND OBJ.CSOBJ_TIPO = IN_TYPE_OBJECT AND RBL.CSROL_CODIGO = IN_CSROL_CODIGO
	WHERE CSBJR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_OBJETO_ROL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_TYPE_OBJECT TIPO DE OBJETOS DEL SISTEMA. 0 - INTERFACE VISUAL, 1 - SERVICIOS WEB
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_TYPE_OBJECT INT,
IN IN_CSROL_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_OBJETO_ROL RBL
	INNER JOIN SII.CGG_SEC_OBJETO OBJ ON OBJ.CSOBJ_CODIGO = RBL.CSOBJ_CODIGO AND OBJ.CSOBJ_TIPO = IN_TYPE_OBJECT AND RBL.CSROL_CODIGO = IN_CSROL_CODIGO
	WHERE CSBJR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(OBJ.CSOBJ_NOMBRE, '')||' '||COALESCE(OBJ.CSOBJ_RUTA, '')||' '||COALESCE(OBJ.CSOBJ_DESCRIPCION, '')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_SEC_OBJETO_ROL
* @param IN_CSBJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO_ROL
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @param IN_CSBJR_ACCESO_DIRECTO SI TIENE ACCESO DIRECTO EN EL ESCRITORIO
* @param IN_CSBJR_ACCESO_DIRECTO_TEXTO TEXTO DEL ACCESO DIRECTO. SOLO ES APLICABLE A LOS OBJETOS VISUALES.
* @param IN_CSBJR_ESTADO ESTADO DEL REGISTRO
* @param IN_CSBJR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_UPDATE(
IN IN_CSBJR_CODIGO SII.CGG_SEC_OBJETO_ROL.CSBJR_CODIGO%TYPE,
IN IN_CSROL_CODIGO SII.CGG_SEC_OBJETO_ROL.CSROL_CODIGO%TYPE,
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO_ROL.CSOBJ_CODIGO%TYPE,
IN IN_CSBJR_ACCESO_DIRECTO SII.CGG_SEC_OBJETO_ROL.CSBJR_ACCESO_DIRECTO%TYPE,
IN IN_CSBJR_ACCESO_DIRECTO_TEXTO SII.CGG_SEC_OBJETO_ROL.CSBJR_ACCESO_DIRECTO_TEXTO%TYPE,
IN IN_CSBJR_ESTADO SII.CGG_SEC_OBJETO_ROL.CSBJR_ESTADO%TYPE,
IN IN_CSBJR_USUARIO_UPDATE SII.CGG_SEC_OBJETO_ROL.CSBJR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_OBJETO_ROL SET
		CSROL_CODIGO = IN_CSROL_CODIGO, 
		CSOBJ_CODIGO = IN_CSOBJ_CODIGO, 
		CSBJR_ACCESO_DIRECTO = IN_CSBJR_ACCESO_DIRECTO, 
		CSBJR_ACCESO_DIRECTO_TEXTO = IN_CSBJR_ACCESO_DIRECTO_TEXTO, 
		CSBJR_ESTADO = IN_CSBJR_ESTADO, 
		CSBJR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CSBJR_USUARIO_UPDATE = IN_CSBJR_USUARIO_UPDATE
	WHERE
		CSBJR_CODIGO = IN_CSBJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_SEC_OBJETO_ROL
* @param IN_CSBJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO_ROL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_SELECT(
IN IN_CSBJR_CODIGO SII.CGG_SEC_OBJETO_ROL.CSBJR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSBJR_CODIGO, 
		CSROL_CODIGO, 
		CSOBJ_CODIGO, 
		CSBJR_ACCESO_DIRECTO, 
		CSBJR_ACCESO_DIRECTO_TEXTO,
		CSBJR_ESTADO, 
		CSBJR_FECHA_INSERT, 
		CSBJR_USUARIO_INSERT, 
		CSBJR_FECHA_UPDATE, 
		CSBJR_USUARIO_UPDATE
	FROM SII.CGG_SEC_OBJETO_ROL
	WHERE CSBJR_ESTADO = TRUE AND 
		CSBJR_CODIGO = IN_CSBJR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_SEC_OBJETO_ROL
* @param IN_CSBJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO_ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_DELETE(
IN IN_CSBJR_CODIGO SII.CGG_SEC_OBJETO_ROL.CSBJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_OBJETO_ROL
	WHERE
		CSBJR_CODIGO = IN_CSBJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_SEC_OBJETO_ROL
* @param IN_CSBJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO_ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_DELETE_SOFT(
IN IN_CSBJR_CODIGO SII.CGG_SEC_OBJETO_ROL.CSBJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_OBJETO_ROL SET
		CSBJR_ESTADO = FALSE
	WHERE
		CSBJR_CODIGO = IN_CSBJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_S_CGG_SEC_ROL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_OBJETO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_S_CGG_SEC_ROL(
IN IN_CSROL_CODIGO SII.CGG_SEC_OBJETO_ROL.CSROL_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSBJR_CODIGO, 
		CSROL_CODIGO, 
		CSOBJ_CODIGO, 
		CSBJR_ACCESO_DIRECTO, 
		CSBJR_ACCESO_DIRECTO_TEXTO,
		CSBJR_ESTADO, 
		CSBJR_FECHA_INSERT, 
		CSBJR_USUARIO_INSERT, 
		CSBJR_FECHA_UPDATE, 
		CSBJR_USUARIO_UPDATE
	FROM SII.CGG_SEC_OBJETO_ROL
	WHERE CSBJR_ESTADO = TRUE AND 
		CSROL_CODIGO = IN_CSROL_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_D_CGG_SEC_ROL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_OBJETO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_D_CGG_SEC_ROL(
IN IN_CSROL_CODIGO SII.CGG_SEC_OBJETO_ROL.CSROL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_OBJETO_ROL
	WHERE
		CSROL_CODIGO = IN_CSROL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_D_CGG_SEC_ROL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_OBJETO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_ROL.
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ROL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_DS_CGG_SEC_ROL(
IN IN_CSROL_CODIGO SII.CGG_SEC_OBJETO_ROL.CSROL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_OBJETO_ROL SET
		csbjr_estado = false
	WHERE
		CSROL_CODIGO = IN_CSROL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_S_CGG_SEC_OBJETO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_OBJETO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_OBJETO.
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_S_CGG_SEC_OBJETO(
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO_ROL.CSOBJ_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSBJR_CODIGO, 
		CSROL_CODIGO, 
		CSOBJ_CODIGO, 
		CSBJR_ACCESO_DIRECTO, 
		CSBJR_ACCESO_DIRECTO_TEXTO,
		CSBJR_ESTADO, 
		CSBJR_FECHA_INSERT, 
		CSBJR_USUARIO_INSERT, 
		CSBJR_FECHA_UPDATE, 
		CSBJR_USUARIO_UPDATE
	FROM SII.CGG_SEC_OBJETO_ROL
	WHERE CSBJR_ESTADO = TRUE AND 
		CSOBJ_CODIGO = IN_CSOBJ_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_D_CGG_SEC_OBJETO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_OBJETO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_OBJETO.
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_D_CGG_SEC_OBJETO(
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO_ROL.CSOBJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_OBJETO_ROL
	WHERE
		CSOBJ_CODIGO = IN_CSOBJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_ROL_D_CGG_SEC_OBJETO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_OBJETO_ROL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SEC_OBJETO.
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_ROL_DS_CGG_SEC_OBJETO(
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO_ROL.CSOBJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_OBJETO_ROL SET
		csbjr_estado = false
	WHERE
		CSOBJ_CODIGO = IN_CSOBJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

