/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_REQUISITO_VACANTE
* @param IN_CGRVC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REQUISITO DE VACANTE
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VACANTE
* @param IN_CGRVC_REQUISITO NOMBRE DEL REQUISITO
* @param IN_CGRVC_OBLIGATORIO CAMPO DE OBLIGATORIEDAD DEL REQUISITO
* @param IN_CGRVC_ESTADO ESTADO DEL REGISTRO
* @param IN_CGRVC_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGRVC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_INSERT(
IN IN_CGRVC_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_CODIGO%TYPE, 
IN IN_CGVCN_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGVCN_CODIGO%TYPE, 
IN IN_CGRVC_REQUISITO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_REQUISITO%TYPE, 
IN IN_CGRVC_OBLIGATORIO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_OBLIGATORIO%TYPE, 
IN IN_CGRVC_ESTADO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_ESTADO%TYPE, 
IN IN_CGRVC_USUARIO_INSERT SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_USUARIO_INSERT%TYPE, 
IN IN_CGRVC_USUARIO_UPDATE SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGRVC_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_REQUISITO_VACANTE','CGRVC_CODIGO','CGRVC') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGRVC_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_REQUISITO_VACANTE(
		CGRVC_CODIGO, 
		CGVCN_CODIGO, 
		CGRVC_REQUISITO, 
		CGRVC_OBLIGATORIO, 
		CGRVC_ESTADO, 
		CGRVC_FECHA_INSERT, 
		CGRVC_USUARIO_INSERT, 
		CGRVC_FECHA_UPDATE, 
		CGRVC_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGVCN_CODIGO, 
		IN_CGRVC_REQUISITO, 
		IN_CGRVC_OBLIGATORIO, 
		IN_CGRVC_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGRVC_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGRVC_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_REQUISITO_VACANTE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGRVC_CODIGO, 
		CGVCN_CODIGO, 
		CGRVC_REQUISITO, 
		CGRVC_OBLIGATORIO, 
		CGRVC_ESTADO, 
		CGRVC_FECHA_INSERT, 
		CGRVC_USUARIO_INSERT, 
		CGRVC_FECHA_UPDATE, 
		CGRVC_USUARIO_UPDATE
	FROM SII.CGG_GEM_REQUISITO_VACANTE
	WHERE CGRVC_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_REQUISITO_VACANTE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGRVC_CODIGO, 
		CGVCN_CODIGO, 
		CGRVC_REQUISITO, 
		CGRVC_OBLIGATORIO, 
		CGRVC_ESTADO, 
		CGRVC_FECHA_INSERT, 
		CGRVC_USUARIO_INSERT, 
		CGRVC_FECHA_UPDATE, 
		CGRVC_USUARIO_UPDATE
	FROM SII.CGG_GEM_REQUISITO_VACANTE
	WHERE CGRVC_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGRVC_REQUISITO, '''')||'' ''||COALESCE(CGRVC_OBLIGATORIO, FALSE)||'' ''||COALESCE(CGRVC_ESTADO, FALSE)||'' ''||COALESCE(CGRVC_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGRVC_USUARIO_INSERT, '''')||'' ''||COALESCE(CGRVC_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGRVC_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_REQUISITO_VACANTE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_REQUISITO_VACANTE
	WHERE CGRVC_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_REQUISITO_VACANTE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_REQUISITO_VACANTE
	WHERE CGRVC_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGRVC_REQUISITO, '''')||' '||COALESCE(CGRVC_OBLIGATORIO, FALSE)||' '||COALESCE(CGRVC_ESTADO, FALSE)||' '||COALESCE(CGRVC_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGRVC_USUARIO_INSERT, '''')||' '||COALESCE(CGRVC_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGRVC_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_REQUISITO_VACANTE
* @param IN_CGRVC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REQUISITO DE VACANTE
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VACANTE
* @param IN_CGRVC_REQUISITO NOMBRE DEL REQUISITO
* @param IN_CGRVC_OBLIGATORIO CAMPO DE OBLIGATORIEDAD DEL REQUISITO
* @param IN_CGRVC_ESTADO ESTADO DEL REGISTRO
* @param IN_CGRVC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_UPDATE(
IN IN_CGRVC_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_CODIGO%TYPE, 
IN IN_CGVCN_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGVCN_CODIGO%TYPE, 
IN IN_CGRVC_REQUISITO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_REQUISITO%TYPE, 
IN IN_CGRVC_OBLIGATORIO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_OBLIGATORIO%TYPE, 
IN IN_CGRVC_ESTADO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_ESTADO%TYPE, 
IN IN_CGRVC_USUARIO_UPDATE SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_REQUISITO_VACANTE SET
		CGVCN_CODIGO = IN_CGVCN_CODIGO, 
		CGRVC_REQUISITO = IN_CGRVC_REQUISITO, 
		CGRVC_OBLIGATORIO = IN_CGRVC_OBLIGATORIO, 
		CGRVC_ESTADO = IN_CGRVC_ESTADO, 
		CGRVC_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGRVC_USUARIO_UPDATE = IN_CGRVC_USUARIO_UPDATE
	WHERE
		CGRVC_CODIGO = IN_CGRVC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_REQUISITO_VACANTE
* @param IN_CGRVC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REQUISITO DE VACANTE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_SELECT(
IN IN_CGRVC_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGRVC_CODIGO, 
		CGVCN_CODIGO, 
		CGRVC_REQUISITO, 
		CGRVC_OBLIGATORIO, 
		CGRVC_ESTADO, 
		CGRVC_FECHA_INSERT, 
		CGRVC_USUARIO_INSERT, 
		CGRVC_FECHA_UPDATE, 
		CGRVC_USUARIO_UPDATE
	FROM SII.CGG_GEM_REQUISITO_VACANTE
	WHERE CGRVC_ESTADO = TRUE AND 
		CGRVC_CODIGO = IN_CGRVC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_REQUISITO_VACANTE
* @param IN_CGRVC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REQUISITO DE VACANTE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_DELETE(
IN IN_CGRVC_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_REQUISITO_VACANTE
	WHERE
		CGRVC_CODIGO = IN_CGRVC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_REQUISITO_VACANTE
* @param IN_CGRVC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REQUISITO DE VACANTE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_DELETE_SOFT(
IN IN_CGRVC_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGRVC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_REQUISITO_VACANTE SET
		CGRVC_ESTADO = FALSE
	WHERE
		CGRVC_CODIGO = IN_CGRVC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_S_CGG_GEM_VACANTE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_REQUISITO_VACANTE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_VACANTE.
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VACANTE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_S_CGG_GEM_VACANTE(
IN IN_CGVCN_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGVCN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGRVC_CODIGO, 
		CGVCN_CODIGO, 
		CGRVC_REQUISITO, 
		CGRVC_OBLIGATORIO, 
		CGRVC_ESTADO, 
		CGRVC_FECHA_INSERT, 
		CGRVC_USUARIO_INSERT, 
		CGRVC_FECHA_UPDATE, 
		CGRVC_USUARIO_UPDATE
	FROM SII.CGG_GEM_REQUISITO_VACANTE
	WHERE CGRVC_ESTADO = TRUE AND 
		CGVCN_CODIGO = IN_CGVCN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_D_CGG_GEM_VACANTE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_REQUISITO_VACANTE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_VACANTE.
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VACANTE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_D_CGG_GEM_VACANTE(
IN IN_CGVCN_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGVCN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_REQUISITO_VACANTE
	WHERE
		CGVCN_CODIGO = IN_CGVCN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_REQUISITO_VACANTE_D_CGG_GEM_VACANTE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_REQUISITO_VACANTE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_VACANTE.
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VACANTE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_REQUISITO_VACANTE_DS_CGG_GEM_VACANTE(
IN IN_CGVCN_CODIGO SII.CGG_GEM_REQUISITO_VACANTE.CGVCN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_REQUISITO_VACANTE SET
		cgrvc_estado = false
	WHERE
		CGVCN_CODIGO = IN_CGVCN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

