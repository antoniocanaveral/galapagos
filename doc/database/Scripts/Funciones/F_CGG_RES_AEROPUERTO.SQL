/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_AEROPUERTO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CARPT_NOMBRE NOMBRE DEL AEROPUERTO
* @param IN_CARPT_TIPO_AEREOPUERTO IDENTIFICATIVO SI EL AEROPUERTO ES INTERNO O EXTERNO
0 - EXTERNO
1 - INTERNO
* @param IN_CARPT_ESTADO ESTADO DEL REGISTRO
* @param IN_CARPT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CARPT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_INSERT(
IN IN_CARPT_CODIGO SII.CGG_RES_AEROPUERTO.CARPT_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_RES_AEROPUERTO.CCTN_CODIGO%TYPE, 
IN IN_CARPT_NOMBRE SII.CGG_RES_AEROPUERTO.CARPT_NOMBRE%TYPE, 
IN IN_CARPT_TIPO_AEREOPUERTO SII.CGG_RES_AEROPUERTO.CARPT_TIPO_AEREOPUERTO%TYPE, 
IN IN_CARPT_ESTADO SII.CGG_RES_AEROPUERTO.CARPT_ESTADO%TYPE, 
IN IN_CARPT_USUARIO_INSERT SII.CGG_RES_AEROPUERTO.CARPT_USUARIO_INSERT%TYPE, 
IN IN_CARPT_USUARIO_UPDATE SII.CGG_RES_AEROPUERTO.CARPT_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN
	SELECT COUNT(CARPT_NOMBRE) INTO TMP_COUNT FROM SII.CGG_RES_AEROPUERTO WHERE UPPER (CARPT_NOMBRE) = UPPER(IN_CARPT_NOMBRE) AND CARPT_ESTADO = TRUE;
	IF (TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'El Aeropuerto ya se encuentra registrado.';
	END IF;
	IF (UPPER(IN_CARPT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_AEROPUERTO','CARPT_CODIGO','CARPT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CARPT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_AEROPUERTO(
		CARPT_CODIGO, 
		CCTN_CODIGO, 
		CARPT_NOMBRE, 
		CARPT_TIPO_AEREOPUERTO, 
		CARPT_ESTADO, 
		CARPT_FECHA_INSERT, 
		CARPT_USUARIO_INSERT, 
		CARPT_FECHA_UPDATE, 
		CARPT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CCTN_CODIGO, 
		IN_CARPT_NOMBRE, 
		IN_CARPT_TIPO_AEREOPUERTO, 
		IN_CARPT_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CARPT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CARPT_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_AEROPUERTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CARPT_CODIGO, 
		CCTN_CODIGO, 
		CARPT_NOMBRE, 
		CARPT_TIPO_AEREOPUERTO, 
		CARPT_ESTADO, 
		CARPT_FECHA_INSERT, 
		CARPT_USUARIO_INSERT, 
		CARPT_FECHA_UPDATE, 
		CARPT_USUARIO_UPDATE
	FROM SII.CGG_RES_AEROPUERTO
	WHERE CARPT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_AEROPUERTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CARPT_CODIGO, 
		CAN.CCTN_CODIGO, 
		CARPT_NOMBRE, 
		CARPT_TIPO_AEREOPUERTO, 
		CARPT_ESTADO, 
		CARPT_FECHA_INSERT, 
		CARPT_USUARIO_INSERT, 
		CARPT_FECHA_UPDATE, 
		CARPT_USUARIO_UPDATE,
		CCTN_NOMBRE AS CANTON
	FROM SII.CGG_RES_AEROPUERTO AER
	left join SII.CGG_CANTON CAN ON AER.CCTN_CODIGO = CAN.CCTN_CODIGO
	WHERE CARPT_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CARPT_NOMBRE, '''')||'' ''||COALESCE(CARPT_TIPO_AEREOPUERTO, 0)||'' ''||COALESCE(CARPT_ESTADO, FALSE)||'' ''||COALESCE(CARPT_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CARPT_USUARIO_INSERT, '''')||'' ''||COALESCE(CARPT_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CARPT_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_AEROPUERTO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_AEROPUERTO
	WHERE CARPT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_AEROPUERTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_AEROPUERTO
	WHERE CARPT_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CARPT_NOMBRE, '''')||' '||COALESCE(CARPT_TIPO_AEREOPUERTO, 0)||' '||COALESCE(CARPT_ESTADO, FALSE)||' '||COALESCE(CARPT_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CARPT_USUARIO_INSERT, '''')||' '||COALESCE(CARPT_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CARPT_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_AEROPUERTO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CARPT_NOMBRE NOMBRE DEL AEROPUERTO
* @param IN_CARPT_TIPO_AEREOPUERTO IDENTIFICATIVO SI EL AEROPUERTO ES INTERNO O EXTERNO
0 - EXTERNO
1 - INTERNO
* @param IN_CARPT_ESTADO ESTADO DEL REGISTRO
* @param IN_CARPT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_UPDATE(
IN IN_CARPT_CODIGO SII.CGG_RES_AEROPUERTO.CARPT_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_RES_AEROPUERTO.CCTN_CODIGO%TYPE, 
IN IN_CARPT_NOMBRE SII.CGG_RES_AEROPUERTO.CARPT_NOMBRE%TYPE, 
IN IN_CARPT_TIPO_AEREOPUERTO SII.CGG_RES_AEROPUERTO.CARPT_TIPO_AEREOPUERTO%TYPE, 
IN IN_CARPT_ESTADO SII.CGG_RES_AEROPUERTO.CARPT_ESTADO%TYPE, 
IN IN_CARPT_USUARIO_UPDATE SII.CGG_RES_AEROPUERTO.CARPT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
TMP_COUNT INT;
BEGIN
	UPDATE SII.CGG_RES_AEROPUERTO SET
		CCTN_CODIGO = IN_CCTN_CODIGO, 
		CARPT_NOMBRE = IN_CARPT_NOMBRE, 
		CARPT_TIPO_AEREOPUERTO = IN_CARPT_TIPO_AEREOPUERTO, 
		CARPT_ESTADO = IN_CARPT_ESTADO, 
		CARPT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CARPT_USUARIO_UPDATE = IN_CARPT_USUARIO_UPDATE
	WHERE
		CARPT_CODIGO = IN_CARPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_AEROPUERTO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_SELECT(
IN IN_CARPT_CODIGO SII.CGG_RES_AEROPUERTO.CARPT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CARPT_CODIGO, 
		CCTN_CODIGO, 
		CARPT_NOMBRE, 
		CARPT_TIPO_AEREOPUERTO, 
		CARPT_ESTADO, 
		CARPT_FECHA_INSERT, 
		CARPT_USUARIO_INSERT, 
		CARPT_FECHA_UPDATE, 
		CARPT_USUARIO_UPDATE
	FROM SII.CGG_RES_AEROPUERTO
	WHERE CARPT_ESTADO = TRUE AND 
		CARPT_CODIGO = IN_CARPT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_AEROPUERTO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_DELETE(
IN IN_CARPT_CODIGO SII.CGG_RES_AEROPUERTO.CARPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_AEROPUERTO
	WHERE
		CARPT_CODIGO = IN_CARPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_AEROPUERTO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_DELETE_SOFT(
IN IN_CARPT_CODIGO SII.CGG_RES_AEROPUERTO.CARPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_AEROPUERTO SET
		CARPT_ESTADO = FALSE
	WHERE
		CARPT_CODIGO = IN_CARPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_S_CGG_CANTON
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_AEROPUERTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_S_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_RES_AEROPUERTO.CCTN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CARPT_CODIGO, 
		CCTN_CODIGO, 
		CARPT_NOMBRE, 
		CARPT_TIPO_AEREOPUERTO, 
		CARPT_ESTADO, 
		CARPT_FECHA_INSERT, 
		CARPT_USUARIO_INSERT, 
		CARPT_FECHA_UPDATE, 
		CARPT_USUARIO_UPDATE
	FROM SII.CGG_RES_AEROPUERTO
	WHERE CARPT_ESTADO = TRUE AND 
		CCTN_CODIGO = IN_CCTN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_AEROPUERTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_D_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_RES_AEROPUERTO.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_AEROPUERTO
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_AEROPUERTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_DS_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_RES_AEROPUERTO.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_AEROPUERTO SET
		carpt_estado = false
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROPUERTO_SELECT_BY_TIPO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_AEROPUERTO DE ACUERDO AL TIPO DE AEREOPUERTO
* @param IN_CARPT_TIPO_AEREOPUERTO CRITERIO DE BUSQUEDA. TIPO DE AEREOPUERTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROPUERTO_SELECT_BY_TIPO(
IN IN_CARPT_TIPO_AEREOPUERTO SII.CGG_RES_AEROPUERTO.CARPT_TIPO_AEREOPUERTO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CARPT_CODIGO, 
		CCTN_CODIGO, 
		CARPT_NOMBRE, 
		CARPT_TIPO_AEREOPUERTO, 
		CARPT_ESTADO, 
		CARPT_FECHA_INSERT, 
		CARPT_USUARIO_INSERT, 
		CARPT_FECHA_UPDATE, 
		CARPT_USUARIO_UPDATE
	FROM SII.CGG_RES_AEROPUERTO
	WHERE CARPT_ESTADO = TRUE AND 
		CARPT_TIPO_AEREOPUERTO = IN_CARPT_TIPO_AEREOPUERTO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;