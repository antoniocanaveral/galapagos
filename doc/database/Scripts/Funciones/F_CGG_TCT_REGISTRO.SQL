/**
* FUNCION SII.F_CGG_TCT_REGISTRO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_TCT_REGISTRO
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO D EPERSONA
* @param IN_CTGTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE GRUPO DE TURISTAS
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO PARA SABER EL USUARIO QUE REALIZO LA IMPRESION DEL FORMULARIO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO AEROPUERTO DE ENTRADA
* @param IN_CGG_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AEROPUERTO DE SALIDA
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AEROLINEA
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE AL QUE CORRESPONDE EL REGISTRO DE TCT PARA EL CASO DE TRANSEUNTES.
* @param IN_CTREG_NUMERO NUMERO SECUENCIAL UNICO DEL REGISTRO DE TCT
* @param IN_CTREG_FECHA_PREREGISTRO FECHA DE RESERVA DEL TCT O PREREGISTRO
* @param IN_CTREG_FECHA_INGRESO FECHA DE INGRESO  A LA PROVINCIA POR TCT
* @param IN_CTREG_CODIGO_BARRAS CODIGO DE BARRAS GENERADO PARA EL REGISTRO DE TCT
* @param IN_CTREG_FECHA_SALIDA FECHA DE SALIDA DE LA PROVINCIA
* @param IN_CTREG_IMPRESION_ESPECIE FECHA DE IMPRESION DE LA ESPECIE DE TCT
* @param IN_CTREG_ESTADO_REGISTRO ESTADO DEL PROCESO DE REGISTRO DE TCT
0 - PREREGISTRADA
1 - IMPRESA
2 - ACTIVA
3 - ANULADA
* @param IN_CTREG_OBSERVACION INFORMACION ADICIONAL
* @param IN_CTREG_ESTADO ESTADO DEL REGISTRO
* @param IN_CTREG_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CTREG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_INSERT(
IN IN_CTREG_CODIGO SII.CGG_TCT_REGISTRO.CTREG_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_TCT_REGISTRO.CRPER_CODIGO%TYPE, 
IN IN_CTGTR_CODIGO SII.CGG_TCT_REGISTRO.CTGTR_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CGG_CUSU_CODIGO%TYPE, 
IN IN_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CARPT_CODIGO%TYPE, 
IN IN_CGG_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CGG_CARPT_CODIGO%TYPE, 
IN IN_CRALN_CODIGO SII.CGG_TCT_REGISTRO.CRALN_CODIGO%TYPE, 
IN IN_CRTRA_CODIGO SII.CGG_TCT_REGISTRO.CRTRA_CODIGO%TYPE, 
IN IN_CTREG_NUMERO SII.CGG_TCT_REGISTRO.CTREG_NUMERO%TYPE, 
IN IN_CTREG_FECHA_PREREGISTRO SII.CGG_TCT_REGISTRO.CTREG_FECHA_PREREGISTRO%TYPE, 
IN IN_CTREG_FECHA_INGRESO SII.CGG_TCT_REGISTRO.CTREG_FECHA_INGRESO%TYPE, 
IN IN_CTREG_CODIGO_BARRAS SII.CGG_TCT_REGISTRO.CTREG_CODIGO_BARRAS%TYPE, 
IN IN_CTREG_FECHA_SALIDA SII.CGG_TCT_REGISTRO.CTREG_FECHA_SALIDA%TYPE, 
IN IN_CTREG_IMPRESION_ESPECIE SII.CGG_TCT_REGISTRO.CTREG_IMPRESION_ESPECIE%TYPE, 
IN IN_CTREG_ESTADO_REGISTRO SII.CGG_TCT_REGISTRO.CTREG_ESTADO_REGISTRO%TYPE, 
IN IN_CTREG_OBSERVACION SII.CGG_TCT_REGISTRO.CTREG_OBSERVACION%TYPE,
IN IN_CTREG_ESTADO SII.CGG_TCT_REGISTRO.CTREG_ESTADO%TYPE, 
IN IN_CTREG_USUARIO_INSERT SII.CGG_TCT_REGISTRO.CTREG_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CTREG_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_TCT_REGISTRO','CTREG_CODIGO','CTREG') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CTREG_CODIGO;
	END IF;
	INSERT INTO SII.CGG_TCT_REGISTRO(
		CTREG_CODIGO, 
		CRPER_CODIGO, 
		CTGTR_CODIGO, 		
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRTRA_CODIGO, 
		CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION, 
		CTREG_ESTADO, 
		CTREG_FECHA_INSERT, 
		CTREG_USUARIO_INSERT, 
		CTREG_FECHA_UPDATE, 
		CTREG_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CTGTR_CODIGO, 		
		IN_CUSU_CODIGO, 
		IN_CGG_CUSU_CODIGO, 
		IN_CARPT_CODIGO, 
		IN_CGG_CARPT_CODIGO, 
		IN_CRALN_CODIGO, 
		IN_CRTRA_CODIGO, 
		IN_CTREG_NUMERO, 
		IN_CTREG_FECHA_PREREGISTRO, 
		IN_CTREG_FECHA_INGRESO, 
		IN_CTREG_CODIGO_BARRAS, 
		IN_CTREG_FECHA_SALIDA, 
		IN_CTREG_IMPRESION_ESPECIE, 
		IN_CTREG_ESTADO_REGISTRO, 
		IN_CTREG_OBSERVACION, 
		IN_CTREG_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CTREG_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CTREG_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_TCT_REGISTRO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTREG_CODIGO, 
		CRPER_CODIGO, 
		CTGTR_CODIGO, 		
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRTRA_CODIGO, 
		CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION, 
		CTREG_ESTADO, 
		CTREG_FECHA_INSERT, 
		CTREG_USUARIO_INSERT, 
		CTREG_FECHA_UPDATE, 
		CTREG_USUARIO_UPDATE
	FROM SII.CGG_TCT_REGISTRO
	WHERE CTREG_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_TCT_REGISTRO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_SELECT(
IN IN_USER_NAME CHARACTER VARYING, 
IN IN_START_INDEX INTEGER, 
IN IN_LIMIT INTEGER, 
IN IN_SORT_FIELD_NAME CHARACTER VARYING, 
IN IN_DIRECTION CHARACTER VARYING, 
IN IN_FIND_TEXT TEXT
) RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	TMP_TIPO_USUARIO BOOLEAN;
	TMP_DATOS CHARACTER VARYING;
	TMP_TIME_ZONE VARCHAR;
	TMP_QUERY VARCHAR;
BEGIN	
	SELECT CSSSN_ZONA_TIEMPO INTO TMP_TIME_ZONE
	FROM SII.CGG_SEC_SESION 
	WHERE CUSU_CODIGO = (SELECT CUSU_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME AND CUSU_ESTADO) AND
		CSSSN_ACTIVO
	ORDER BY CSSSN_FECHA_INICIO DESC LIMIT 1;
	
	IF (TMP_TIME_ZONE IS NULL OR LENGTH(TMP_TIME_ZONE) = 0) THEN
		SELECT ABS(EXTRACT(TIMEZONE FROM CURRENT_TIMESTAMP)/3600) INTO TMP_TIME_ZONE;
	END IF;
	
	IF (LENGTH(IN_FIND_TEXT) > 0) THEN
		TMP_QUERY = ' to_tsvector(
		COALESCE(GTR.CTGTR_NUMERO::VARCHAR,'''')||'' ''||
		COALESCE(PJR.CRPJR_RAZON_SOCIAL,'''')||'' ''||
		COALESCE(CRPER_NUM_DOC_IDENTIFIC,'''')||'' ''||
		COALESCE(CRPER.CRPER_NOMBRES,'''')||'' ''||
		COALESCE(CRPER.CRPER_APELLIDO_PATERNO, '''')||'' ''||
		COALESCE(CRPER.CRPER_APELLIDO_MATERNO, '''')) @@ plainto_tsquery('||QUOTE_LITERAL(IN_FIND_TEXT)||') AND';
	END IF;
	IF (TMP_QUERY IS NULL) THEN
		TMP_QUERY = '';
	END IF;
	SELECT CUSU_USUARIO_INTERNO INTO TMP_TIPO_USUARIO
	FROM SII.CGG_USUARIO
	WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME;
	TMP_DATOS:='SELECT 
		RS.CTREG_CODIGO, 		
		RS.CARPT_CODIGO, 
		ARO.CARPT_NOMBRE AEROPUER_ORIGEN,
		RS.CGG_CARPT_CODIGO, 
		ARD.CARPT_NOMBRE AEROPUER_DESTINO,
		RS.CRALN_CODIGO, 
		AL.CRALN_NOMBRE AEROLINEA,
		RS.CTGTR_CODIGO,
		RS.CRTRA_CODIGO, 
		(SELECT CRTRA_NUMERO FROM SII.CGG_RES_TRAMITE TA WHERE TA.CRTRA_CODIGO = RSD.CRTRA_CODIGO) NUMERO,
		RS.CTREG_NUMERO, 
		GTR.CTGTR_NUMERO,
		RS.CTREG_FECHA_PREREGISTRO, 
		RS.CTREG_FECHA_INGRESO, 
		RS.CTREG_CODIGO_BARRAS, 
		RS.CTREG_FECHA_SALIDA, 
		CASE WHEN CTREG_ESTADO_REGISTRO != 1 THEN NULL ELSE RS.CTREG_IMPRESION_ESPECIE AT TIME ZONE '||QUOTE_LITERAL('UTC+'||TMP_TIME_ZONE)||' END CTREG_IMPRESION_ESPECIE, 
		RS.CTREG_ESTADO_REGISTRO, 
		RS.CTREG_OBSERVACION, 
		RS.CTREG_ESTADO, 
		(PJR.CRPJR_RAZON_SOCIAL||'' - ''||US.CUSU_NOMBRE_USUARIO) CTAGV_NOMBRE,
		CRPER.CRPER_NUM_DOC_IDENTIFIC,
		COALESCE(CRPER.CRPER_NOMBRES,'''')||'' ''||COALESCE(CRPER.CRPER_APELLIDO_PATERNO,'''') AS CRPER_NOMBRES,
		RS.CTREG_FECHA_INSERT, 
		RS.CTREG_USUARIO_INSERT, 
		RS.CTREG_FECHA_UPDATE, 
		RS.CTREG_USUARIO_UPDATE,
		(SELECT COALESCE(CRPER_NOMBRES,'''')||'' ''||COALESCE(CRPER_APELLIDO_PATERNO,'''') FROM SII.CGG_RES_PERSONA WHERE CRPER_CODIGO = US.CRPER_CODIGO) USUARIO_UPDATE
	FROM SII.CGG_TCT_REGISTRO RS
	INNER JOIN SII.CGG_TCT_GRUPO_TURISTA GTR ON GTR.CTGTR_CODIGO = RS.CTGTR_CODIGO
	INNER JOIN SII.CGG_RES_AEROPUERTO ARO ON ARO.CARPT_CODIGO = RS.CARPT_CODIGO
	INNER JOIN SII.CGG_RES_AEROPUERTO ARD ON ARD.CARPT_CODIGO = RS.CGG_CARPT_CODIGO
	INNER JOIN SII.CGG_RES_AEROLINEA AL ON AL.CRALN_CODIGO = RS.CRALN_CODIGO
	INNER JOIN SII.CGG_RES_PERSONA CRPER ON (RS.CRPER_CODIGO = CRPER.CRPER_CODIGO)	
	LEFT JOIN SII.CGG_RES_RESIDENCIA RSD ON RSD.CRPER_CODIGO = CRPER.CRPER_CODIGO AND RSD.CRRSD_ESTADO AND RSD.CRRSD_VIGENTE AND RSD.CRRSD_FECHA_INICIO::DATE = RS.CTREG_FECHA_INGRESO::DATE AND 
			RSD.CRTST_CODIGO IN (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
			SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
			FROM CGG_CONFIGURACION
			WHERE CGCNF_CODIGO = ''05'') 
			UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
			WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
		) SELECT CRTST_CODIGO  FROM TIPO)
	LEFT JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = RS.CUSU_CODIGO
	LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA PJR ON PJR.CRPJR_CODIGO = US.CRPJR_CODIGO
	WHERE CTREG_ESTADO AND RS.CTREG_ESTADO_REGISTRO IN (0,1) AND '
		||TMP_QUERY||'
		NOT RS.CTREG_COMPLETO AND 
		('||TMP_TIPO_USUARIO||' OR US.CUSU_CODIGO IN (SELECT CUSU_CODIGO FROM SII.CGG_USUARIO WHERE CRPJR_CODIGO IN (SELECT CRPJR_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = '||QUOTE_LITERAL(IN_USER_NAME)||')))
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX ;
	
	OPEN TMP_REF FOR EXECUTE TMP_DATOS;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TCT_REGISTRO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APLICACIONES.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_COUNT(
IN IN_USER_NAME VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT;
TMP_TIPO_USUARIO BOOLEAN;
BEGIN
	SELECT CUSU_USUARIO_INTERNO INTO TMP_TIPO_USUARIO
	FROM SII.CGG_USUARIO
	WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME;
	
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_TCT_REGISTRO RGT
	INNER JOIN SII.CGG_TCT_GRUPO_TURISTA GTR ON GTR.CTGTR_CODIGO = RGT.CTGTR_CODIGO
	INNER JOIN SII.CGG_RES_PERSONA CRPER ON CRPER.CRPER_CODIGO = RGT.CRPER_CODIGO
	INNER JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = RGT.CUSU_CODIGO
	INNER JOIN SII.CGG_RES_AEROPUERTO ARO ON ARO.CARPT_CODIGO = RGT.CARPT_CODIGO
	INNER JOIN SII.CGG_RES_AEROPUERTO ARD ON ARD.CARPT_CODIGO = RGT.CGG_CARPT_CODIGO
	INNER JOIN SII.CGG_RES_AEROLINEA AL ON AL.CRALN_CODIGO = RGT.CRALN_CODIGO
	LEFT JOIN SII.CGG_RES_RESIDENCIA RSD ON RSD.CRPER_CODIGO = CRPER.CRPER_CODIGO AND RSD.CRRSD_ESTADO AND RSD.CRRSD_VIGENTE AND RSD.CRRSD_FECHA_INICIO::DATE = RGT.CTREG_FECHA_INGRESO::DATE AND 
			RSD.CRTST_CODIGO IN (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
			SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
			FROM CGG_CONFIGURACION
			WHERE CGCNF_CODIGO = '05') 
			UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
			WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
		) SELECT CRTST_CODIGO  FROM TIPO)
	LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA PJR ON PJR.CRPJR_CODIGO = US.CRPJR_CODIGO
	WHERE CTREG_ESTADO AND 
		NOT RGT.CTREG_COMPLETO AND
		RGT.CTREG_ESTADO_REGISTRO IN (0,1) AND		
		(LENGTH(IN_FIND_TEXT) = 0 OR to_tsvector(
		COALESCE(GTR.CTGTR_NUMERO::VARCHAR,'')||' '||
		COALESCE(PJR.CRPJR_RAZON_SOCIAL, '')||' '||
		COALESCE(CRPER_NUM_DOC_IDENTIFIC, '')||' '||
		COALESCE(CRPER.CRPER_NOMBRES, '')||' '||
		COALESCE(CRPER.CRPER_APELLIDO_PATERNO, '')||' '||
		COALESCE(CRPER.CRPER_APELLIDO_MATERNO, '')) @@ plainto_tsquery(IN_FIND_TEXT) ) AND
		(TMP_TIPO_USUARIO OR US.CUSU_CODIGO IN (SELECT CUSU_CODIGO FROM SII.CGG_USUARIO WHERE CRPJR_CODIGO IN (SELECT CRPJR_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME)));
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_TCT_REGISTRO
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO D EPERSONA
* @param IN_CTGTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE GRUPO DE TURISTAS
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO PARA SABER EL USUARIO QUE REALIZO LA IMPRESION DEL FORMULARIO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO AEROPUERTO DE ENTRADA
* @param IN_CGG_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AEROPUERTO DE SALIDA
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AEROLINEA
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE AL QUE CORRESPONDE EL REGISTRO DE TCT PARA EL CASO DE TRANSEUNTES.
* @param IN_CTREG_NUMERO NUMERO SECUENCIAL UNICO DEL REGISTRO DE TCT
* @param IN_CTREG_FECHA_PREREGISTRO FECHA DE RESERVA DEL TCT O PREREGISTRO
* @param IN_CTREG_FECHA_INGRESO FECHA DE INGRESO  A LA PROVINCIA POR TCT
* @param IN_CTREG_CODIGO_BARRAS CODIGO DE BARRAS GENERADO PARA EL REGISTRO DE TCT
* @param IN_CTREG_FECHA_SALIDA FECHA DE SALIDA DE LA PROVINCIA
* @param IN_CTREG_IMPRESION_ESPECIE FECHA DE IMPRESION DE LA ESPECIE DE TCT
* @param IN_CTREG_ESTADO_REGISTRO ESTADO DEL PROCESO DE REGISTRO DE TCT
0 - PREREGISTRADA
1 - IMPRESA
2 - ACTIVA
3 - ANULADA
* @param IN_CTREG_OBSERVACION INFORMACION ADICIONAL
* @param IN_CTREG_ESTADO ESTADO DEL REGISTRO
* @param IN_CTREG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_UPDATE(
IN IN_CTREG_CODIGO SII.CGG_TCT_REGISTRO.CTREG_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_TCT_REGISTRO.CRPER_CODIGO%TYPE, 
IN IN_CTGTR_CODIGO SII.CGG_TCT_REGISTRO.CTGTR_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CGG_CUSU_CODIGO%TYPE, 
IN IN_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CARPT_CODIGO%TYPE, 
IN IN_CGG_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CGG_CARPT_CODIGO%TYPE, 
IN IN_CRALN_CODIGO SII.CGG_TCT_REGISTRO.CRALN_CODIGO%TYPE, 
IN IN_CRTRA_CODIGO SII.CGG_TCT_REGISTRO.CRTRA_CODIGO%TYPE, 
IN IN_CTREG_NUMERO SII.CGG_TCT_REGISTRO.CTREG_NUMERO%TYPE, 
IN IN_CTREG_FECHA_PREREGISTRO SII.CGG_TCT_REGISTRO.CTREG_FECHA_PREREGISTRO%TYPE, 
IN IN_CTREG_FECHA_INGRESO SII.CGG_TCT_REGISTRO.CTREG_FECHA_INGRESO%TYPE, 
IN IN_CTREG_CODIGO_BARRAS SII.CGG_TCT_REGISTRO.CTREG_CODIGO_BARRAS%TYPE, 
IN IN_CTREG_FECHA_SALIDA SII.CGG_TCT_REGISTRO.CTREG_FECHA_SALIDA%TYPE, 
IN IN_CTREG_IMPRESION_ESPECIE SII.CGG_TCT_REGISTRO.CTREG_IMPRESION_ESPECIE%TYPE, 
IN IN_CTREG_ESTADO_REGISTRO SII.CGG_TCT_REGISTRO.CTREG_ESTADO_REGISTRO%TYPE, 
IN IN_CTREG_OBSERVACION SII.CGG_TCT_REGISTRO.CTREG_OBSERVACION%TYPE,
IN IN_CTREG_ESTADO SII.CGG_TCT_REGISTRO.CTREG_ESTADO%TYPE, 
IN IN_CTREG_USUARIO_UPDATE SII.CGG_TCT_REGISTRO.CTREG_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_REGISTRO SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CTGTR_CODIGO = IN_CTGTR_CODIGO, 		
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO, 
		CARPT_CODIGO = IN_CARPT_CODIGO, 
		CGG_CARPT_CODIGO = IN_CGG_CARPT_CODIGO, 
		CRALN_CODIGO = IN_CRALN_CODIGO, 
		CRTRA_CODIGO = IN_CRTRA_CODIGO, 
		CTREG_NUMERO = IN_CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO = IN_CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO = IN_CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS = IN_CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA = IN_CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE = IN_CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO = IN_CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION = IN_CTREG_OBSERVACION, 
		CTREG_ESTADO = IN_CTREG_ESTADO, 
		CTREG_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CTREG_USUARIO_UPDATE = IN_CTREG_USUARIO_UPDATE
	WHERE
		CTREG_CODIGO = IN_CTREG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_TCT_REGISTRO
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_SELECT(
IN IN_CTREG_CODIGO SII.CGG_TCT_REGISTRO.CTREG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTREG_CODIGO, 
		CRPER_CODIGO, 
		CTGTR_CODIGO, 		
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRTRA_CODIGO, 
		CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION, 
		CTREG_ESTADO, 
		CTREG_FECHA_INSERT, 
		CTREG_USUARIO_INSERT, 
		CTREG_FECHA_UPDATE, 
		CTREG_USUARIO_UPDATE
	FROM SII.CGG_TCT_REGISTRO
	WHERE CTREG_ESTADO = TRUE AND 
		CTREG_CODIGO = IN_CTREG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_TCT_REGISTRO
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_DELETE(
IN IN_CTREG_CODIGO SII.CGG_TCT_REGISTRO.CTREG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_REGISTRO
	WHERE
		CTREG_CODIGO = IN_CTREG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_TCT_REGISTRO
* @param IN_CTREG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TCT
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_DELETE_SOFT(
IN IN_CTREG_CODIGO SII.CGG_TCT_REGISTRO.CTREG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_REGISTRO SET
		CTREG_ESTADO = FALSE
	WHERE
		CTREG_CODIGO = IN_CTREG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_S_CGG_RES_TRAMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_S_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_TCT_REGISTRO.CRTRA_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTREG_CODIGO, 
		CRPER_CODIGO, 
		CTGTR_CODIGO, 	
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRTRA_CODIGO, 
		CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION, 
		CTREG_ESTADO, 
		CTREG_FECHA_INSERT, 
		CTREG_USUARIO_INSERT, 
		CTREG_FECHA_UPDATE, 
		CTREG_USUARIO_UPDATE
	FROM SII.CGG_TCT_REGISTRO
	WHERE CTREG_ESTADO = TRUE AND 
		CRTRA_CODIGO = IN_CRTRA_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_TCT_REGISTRO.CRTRA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_REGISTRO
	WHERE
		CRTRA_CODIGO = IN_CRTRA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_DS_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_TCT_REGISTRO.CRTRA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_REGISTRO SET
		ctreg_estado = false
	WHERE
		CRTRA_CODIGO = IN_CRTRA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_S_CGG_RES_AEROPUERTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_AEROPUERTO.
* @param IN_CGG_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_S_CGG_RES_AEROPUERTO(
IN IN_CGG_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CGG_CARPT_CODIGO%TYPE, 
IN IN_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CARPT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTREG_CODIGO, 
		CRPER_CODIGO, 
		CTGTR_CODIGO, 		
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRTRA_CODIGO, 
		CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION, 
		CTREG_ESTADO, 
		CTREG_FECHA_INSERT, 
		CTREG_USUARIO_INSERT, 
		CTREG_FECHA_UPDATE, 
		CTREG_USUARIO_UPDATE
	FROM SII.CGG_TCT_REGISTRO
	WHERE CTREG_ESTADO = TRUE AND 
		CGG_CARPT_CODIGO = IN_CGG_CARPT_CODIGO AND 
		CARPT_CODIGO = IN_CARPT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_AEROPUERTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_AEROPUERTO.
* @param IN_CGG_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_AEROPUERTO(
IN IN_CGG_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CGG_CARPT_CODIGO%TYPE, 
IN IN_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CARPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_REGISTRO
	WHERE
		CGG_CARPT_CODIGO = IN_CGG_CARPT_CODIGO AND 
		CARPT_CODIGO = IN_CARPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_AEROPUERTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_AEROPUERTO.
* @param IN_CGG_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_DS_CGG_RES_AEROPUERTO(
IN IN_CGG_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CGG_CARPT_CODIGO%TYPE, 
IN IN_CARPT_CODIGO SII.CGG_TCT_REGISTRO.CARPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_REGISTRO SET
		ctreg_estado = false
	WHERE
		CGG_CARPT_CODIGO = IN_CGG_CARPT_CODIGO AND 
		CARPT_CODIGO = IN_CARPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_S_CGG_TCT_GRUPO_TURISTA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_GRUPO_TURISTA.
* @param IN_CTGTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE GRUPO DE TURISTAS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_S_CGG_TCT_GRUPO_TURISTA(
IN IN_CTGTR_CODIGO SII.CGG_TCT_REGISTRO.CTGTR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTREG_CODIGO, 
		CRPER_CODIGO, 
		CTGTR_CODIGO, 		
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRTRA_CODIGO, 
		CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION, 
		CTREG_ESTADO, 
		CTREG_FECHA_INSERT, 
		CTREG_USUARIO_INSERT, 
		CTREG_FECHA_UPDATE, 
		CTREG_USUARIO_UPDATE
	FROM SII.CGG_TCT_REGISTRO
	WHERE CTREG_ESTADO = TRUE AND 
		CTGTR_CODIGO = IN_CTGTR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_TCT_GRUPO_TURISTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_GRUPO_TURISTA.
* @param IN_CTGTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE GRUPO DE TURISTAS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_D_CGG_TCT_GRUPO_TURISTA(
IN IN_CTGTR_CODIGO SII.CGG_TCT_REGISTRO.CTGTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_REGISTRO
	WHERE
		CTGTR_CODIGO = IN_CTGTR_CODIGO AND
		CTREG_ESTADO_REGISTRO = 0;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_DS_CGG_TCT_GRUPO_TURISTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_GRUPO_TURISTA.
* @param IN_CTGRT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE GRUPO DE TURISTAS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_DS_CGG_TCT_GRUPO_TURISTA(
IN IN_CTGTR_CODIGO SII.CGG_TCT_REGISTRO.CTGTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_REGISTRO SET
		ctreg_estado = false
	WHERE
		CTGTR_CODIGO = IN_CTGTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_S_CGG_RES_AEROLINEA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_AEROLINEA.
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_S_CGG_RES_AEROLINEA(
IN IN_CRALN_CODIGO SII.CGG_TCT_REGISTRO.CRALN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTREG_CODIGO, 
		CRPER_CODIGO, 
		CTGTR_CODIGO, 		
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRTRA_CODIGO, 
		CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION, 
		CTREG_ESTADO, 
		CTREG_FECHA_INSERT, 
		CTREG_USUARIO_INSERT, 
		CTREG_FECHA_UPDATE, 
		CTREG_USUARIO_UPDATE
	FROM SII.CGG_TCT_REGISTRO
	WHERE CTREG_ESTADO = TRUE AND 
		CRALN_CODIGO = IN_CRALN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_AEROLINEA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_AEROLINEA.
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_AEROLINEA(
IN IN_CRALN_CODIGO SII.CGG_TCT_REGISTRO.CRALN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_REGISTRO
	WHERE
		CRALN_CODIGO = IN_CRALN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_AEROLINEA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_AEROLINEA.
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_DS_CGG_RES_AEROLINEA(
IN IN_CRALN_CODIGO SII.CGG_TCT_REGISTRO.CRALN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_REGISTRO SET
		ctreg_estado = false
	WHERE
		CRALN_CODIGO = IN_CRALN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO D EPERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_TCT_REGISTRO.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTREG_CODIGO, 
		CRPER_CODIGO, 
		CTGTR_CODIGO, 		
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRTRA_CODIGO, 
		CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION, 
		CTREG_ESTADO, 
		CTREG_FECHA_INSERT, 
		CTREG_USUARIO_INSERT, 
		CTREG_FECHA_UPDATE, 
		CTREG_USUARIO_UPDATE
	FROM SII.CGG_TCT_REGISTRO
	WHERE CTREG_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO D EPERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_TCT_REGISTRO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_REGISTRO
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO D EPERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_TCT_REGISTRO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_REGISTRO SET
		ctreg_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO 
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CGG_CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTREG_CODIGO, 
		CRPER_CODIGO, 
		CTGTR_CODIGO, 		
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRTRA_CODIGO, 
		CTREG_NUMERO, 
		CTREG_FECHA_PREREGISTRO, 
		CTREG_FECHA_INGRESO, 
		CTREG_CODIGO_BARRAS, 
		CTREG_FECHA_SALIDA, 
		CTREG_IMPRESION_ESPECIE, 
		CTREG_ESTADO_REGISTRO, 
		CTREG_OBSERVACION, 
		CTREG_ESTADO, 
		CTREG_FECHA_INSERT, 
		CTREG_USUARIO_INSERT, 
		CTREG_FECHA_UPDATE, 
		CTREG_USUARIO_UPDATE
	FROM SII.CGG_TCT_REGISTRO
	WHERE CTREG_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO AND 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO 
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CGG_CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_REGISTRO
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO AND 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_REGISTRO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_REGISTRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO 
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_TCT_REGISTRO.CGG_CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_REGISTRO SET
		ctreg_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO AND 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*SELECCIONA TODOS LOS REGISTRO DE TRAMITES DE TRANSEUNTE CON PERSONA Y RESIDENCIA PARA UTILIZACION EN OFFLINE.
*@return CURSOR CON INFORMACION.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_OFFLINE_TRANSEUNTES(
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_CONF REFCURSOR;
	TMP_ROW RECORD;
	CGCNFCODIGO VARCHAR(20);
BEGIN
	
	SELECT CGCNF_VALOR_CADENA INTO CGCNFCODIGO FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '05';

	OPEN TMP_REF FOR
		WITH TIPO_TRANS AS (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '05')
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT CRTST_CODIGO  FROM TIPO)
		SELECT
			T.CRTRA_CODIGO, 
			T.CRPER_CODIGO, 
			T.CGG_CRPER_CODIGO, 
			T.CRTRA_ANIO,
			T.CRTRA_NUMERO, 
			T.CRTRA_GRUPO,
			T.CRTRA_ORDEN,
			R.CRRSD_CODIGO, 			
			R.CRRSD_FECHA_INICIO, 
			R.CRRSD_FECHA_CADUCIDAD, 
			R.CRRSD_VIGENTE,		
			P.CRDID_CODIGO,
			P.CGNCN_CODIGO,			
			P.CGG_CPAIS_CODIGO,
			P.CRPER_NOMBRES,
			P.CRPER_APELLIDO_PATERNO,
			P.CRPER_NUM_DOC_IDENTIFIC,
			P.CRPER_FECHA_NACIMIENTO,
			P.CRPER_GENERO	
	FROM SII.CGG_RES_TRAMITE T
	INNER JOIN SII.CGG_RES_RESIDENCIA R ON (T.CRTRA_CODIGO = R.CRTRA_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA P ON (R.CRPER_CODIGO = P.CRPER_CODIGO)
	WHERE T.CRTRA_ESTADO=TRUE AND T.CRTST_CODIGO IN (SELECT CRTST_CODIGO FROM TIPO_TRANS) AND (R.CRRSD_VIGENTE OR R.CRRSD_FECHA_INICIO::DATE>= CURRENT_DATE);
	
	RETURN NEXT TMP_REF;		
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*SELECCIONA TODOS LOS REGISTRO DE PERSONA NOTIFICADA QUE NO PUEDA INGRESAR A LA PROVINCIA UTILIZACION EN OFFLINE.
*@return CURSOR CON INFORMACION.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_OFFLINE_NOTIFICADOS(
)RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE	
		VALOR_DIAS INTEGER;		
		OUT_CURSOR REFCURSOR;
BEGIN	
	--EXTRAE EL VALOR DE LA CONFIGURACION DE LOS DIAS PERMITIDOS PARA REALIZAR UN AUDIENCIA.
	SELECT CGCNF_VALOR_NUMERICO INTO VALOR_DIAS FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO='CONF16';	
	
	OPEN OUT_CURSOR FOR
		SELECT 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION,
		CRPER_CODIGO, 
		CRNOT_FECHA_REGRESO,
		CRDID_CODIGO,
		CGNCN_CODIGO,			
		CGG_CPAIS_CODIGO,
		CRPER_NOMBRES,
		CRPER_APELLIDO_PATERNO,
		CRPER_NUM_DOC_IDENTIFIC,
		CRPER_FECHA_NACIMIENTO,
		CRPER_GENERO			
		FROM (
		SELECT NTF.CRNOT_FECHA_SALIDA_VOLUNT, 
			   NTF.CRNOT_FECHA_EXPULSION,
			   P.CRPER_CODIGO, 
			   P.CRDID_CODIGO,
			   P.CGNCN_CODIGO,			
			   P.CGG_CPAIS_CODIGO,
			   P.CRPER_NOMBRES,
			   P.CRPER_APELLIDO_PATERNO,
			   P.CRPER_NUM_DOC_IDENTIFIC,
			   P.CRPER_FECHA_NACIMIENTO,
			   P.CRPER_GENERO,	
			   CASE WHEN NTF.CRNOT_FECHA_EXPULSION IS NOT NULL THEN 
				DATE(NTF.CRNOT_FECHA_EXPULSION)+VALOR_DIAS				
			   ELSE 
				CURRENT_DATE+VALOR_DIAS
			   END CRNOT_FECHA_REGRESO						  
			FROM SII.CGG_RES_NOTIFICACION NTF 
			INNER JOIN SII.CGG_RES_PERSONA P ON (P.CRPER_CODIGO=NTF.CRPER_CODIGO) 
			WHERE (NTF.CRNOT_ESTADO_NOTIFICACION=3 OR NTF.CRNOT_ESTADO_NOTIFICACION=1) AND
				NTF.CRNOT_REGULARIZACION = '0'
		)AS NOTIFICADOS
		WHERE DATE(CRNOT_FECHA_REGRESO) >= DATE(NOW());		
	RETURN NEXT OUT_CURSOR;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;
  
/**
*SELECCIONA TODOS LOS REGISTRO DE PERSONA QUE HAN EXEDIDO EL PLAZO DE N DIAS DE PERMANENCIA EN LA PROVINCIA PARA TURISTAS Y TRANSEUNTES PARA UTILIZACION EN OFFLINE.
*@return CURSOR CON INFORMACION.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_OFFLINE_DIAS_PERMANENCIA(
)RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE										
		OUT_CURSOR REFCURSOR;		
BEGIN

	OPEN OUT_CURSOR FOR
		SELECT
		   E.CRPER_CODIGO,		   
		   E.CRDID_CODIGO,
		   E.CPEDI_DIAS_PERMANENCIA,
		   P.CGNCN_CODIGO,			
			P.CGG_CPAIS_CODIGO,
			P.CRPER_NOMBRES,
			P.CRPER_APELLIDO_PATERNO,
			P.CRPER_NUM_DOC_IDENTIFIC,
			P.CRPER_FECHA_NACIMIENTO,
			P.CRPER_GENERO			
	   FROM SII.CGG_PERSONA_EXCEDIDA_DIA E
	   INNER JOIN SII.CGG_RES_PERSONA P ON(E.CRPER_CODIGO = P.CRPER_CODIGO);		
	RETURN NEXT OUT_CURSOR;
END
$BODY$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;

/**
*SELECCION LOS GRUPOS Y REGISTRO DE TCT DE ESTADO PREREGISTRADO PARA UTILIZACION EN OFFLINE.
*@return CURSOR CON INFORMACION.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_REGISTRO_OFFLINE(
)RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE										
		OUT_CURSOR REFCURSOR;		
		DIAS INT;
		STMT TEXT;
BEGIN
	STMT:='';
	DIAS :=0;	
	
	SELECT CGCNF_VALOR_NUMERICO INTO DIAS FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '28';

	STMT := 'WITH GRUPO AS (
					   SELECT  
					    CTGTR_CODIGO, 
						CUSU_CODIGO, 
						CTADC_CODIGO, 
						CTGTR_NUMERO, 
						CTGTR_FECHA_RESERVA, 
						CTGTR_FECHA_INGRESO, 
						CTGTR_FECHA_SALIDA
					   FROM SII.CGG_TCT_GRUPO_TURISTA 
					   WHERE CTGTR_ESTADO = TRUE
					   AND DATE(CTGTR_FECHA_INSERT) BETWEEN CURRENT_DATE - INTERVAL '||QUOTE_LITERAL(DIAS::VARCHAR)||' DAY AND CURRENT_DATE ORDER BY CTGTR_NUMERO
					   ),
		GRUPO_HOSPEDAJE AS(
						   SELECT * FROM (
										  SELECT GH.CTGHJ_CODIGO,
										  GH.CTTHJ_CODIGO,
										  GH.CTGTR_CODIGO,
										  ROW_NUMBER() OVER(PARTITION BY GH.CTGTR_CODIGO) AS RANK 
										  FROM SII.CGG_TCT_GRUPO_HOSPEDAJE GH WHERE GH.CTGTR_CODIGO IN (SELECT CTGTR_CODIGO FROM GRUPO)
										  ) AS CH
						   WHERE CH.RANK = 1 
						   ),
		GRUPO_ACTIVIDAD AS(
						   SELECT * FROM (
										  SELECT GA.CTGAC_CODIGO,
										  GA.CTGTR_CODIGO,
										  GA.CTACT_CODIGO, 
										  ROW_NUMBER() OVER(PARTITION BY GA.CTGTR_CODIGO) AS RANK 
										  FROM SII.CGG_TCT_GRUPO_ACTIVIDAD GA WHERE GA.CTGTR_CODIGO IN (SELECT CTGTR_CODIGO FROM GRUPO)
										  ) AS CA
						   WHERE CA.RANK = 1 
						   )
		SELECT
		GT.CTGTR_CODIGO, 
		GT.CUSU_CODIGO, 
		GT.CTADC_CODIGO, 
		GT.CTGTR_NUMERO, 
		GT.CTGTR_FECHA_RESERVA, 
		GT.CTGTR_FECHA_INGRESO, 
		GT.CTGTR_FECHA_SALIDA,
		(SELECT GA.CTGAC_CODIGO FROM GRUPO_ACTIVIDAD GA WHERE GA.CTGTR_CODIGO = GT.CTGTR_CODIGO) CTGAC_CODIGO,
		(SELECT GA.CTACT_CODIGO FROM GRUPO_ACTIVIDAD GA WHERE GA.CTGTR_CODIGO = GT.CTGTR_CODIGO) CTACT_CODIGO,
		(SELECT GH.CTGHJ_CODIGO FROM GRUPO_HOSPEDAJE GH WHERE GH.CTGTR_CODIGO = GT.CTGTR_CODIGO) CTGHJ_CODIGO,
		(SELECT GH.CTTHJ_CODIGO FROM GRUPO_HOSPEDAJE GH WHERE GH.CTGTR_CODIGO = GT.CTGTR_CODIGO) CTTHJ_CODIGO, 
		R.CTREG_CODIGO, 
		R.CRPER_CODIGO, 
		R.CUSU_CODIGO, 
		R.CGG_CUSU_CODIGO, 
		R.CARPT_CODIGO, 
		R.CGG_CARPT_CODIGO, 
		R.CRALN_CODIGO, 
		R.CRTRA_CODIGO, 
		R.CTREG_NUMERO, 
		R.CTREG_FECHA_PREREGISTRO, 
		R.CTREG_FECHA_INGRESO, 
		R.CTREG_CODIGO_BARRAS, 
		R.CTREG_FECHA_SALIDA, 
		R.CTREG_IMPRESION_ESPECIE, 
		R.CTREG_ESTADO_REGISTRO, 
		R.CTREG_OBSERVACION, 
		V.CKESP_CODIGO,
		P.CRPER_CODIGO, 
		P.CRDID_CODIGO, 
		P.CGNCN_CODIGO, 
		P.CGG_CPAIS_CODIGO, 
		P.CRPER_NOMBRES, 
		P.CRPER_APELLIDO_PATERNO, 
		P.CRPER_NUM_DOC_IDENTIFIC, 
		P.CRPER_FECHA_NACIMIENTO, 
		P.CRPER_GENERO 
		FROM GRUPO GT
		INNER JOIN SII.CGG_TCT_REGISTRO R ON(GT.CTGTR_CODIGO = R.CTGTR_CODIGO AND R.CTREG_ESTADO = TRUE AND R.CTREG_ESTADO_REGISTRO = 0)
		INNER JOIN SII.CGG_RES_PERSONA P ON (R.CRPER_CODIGO = P.CRPER_CODIGO)
		INNER JOIN SII.CGG_KDX_VENTA_DETALLE V ON (V.CTREG_CODIGO = R.CTREG_CODIGO)		
		ORDER BY CTGTR_NUMERO, CTREG_NUMERO';
		
	OPEN OUT_CURSOR FOR EXECUTE STMT;		 				 			
	RETURN NEXT OUT_CURSOR;
END
$BODY$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;

/**
* OBTIENE INFORMACION DE LAS ESPECIES QUE FUERON IMPRESAS ASOCIADAS A UN REGISTRO DE TCT.
* @param IN_USER_NAME USUARIO DEL SERVIDOR DE APLICACIONES
* @param IN_CTREG_CODIGO CODIGO DEL REGISTRO DE TCT.
* @returns COLECCION DE DATOS
*/
CREATE OR REPLACE FUNCTION SII.F_ESPECIES_IMPRESAS(
IN IN_USER_NAME VARCHAR,
IN IN_CTREG_CODIGO VARCHAR
)RETURNS REFCURSOR AS
$$
DECLARE
	OUT_CURSOR REFCURSOR;
	TMP_TIME_ZONE VARCHAR;
BEGIN
	SELECT CSSSN_ZONA_TIEMPO INTO TMP_TIME_ZONE
	FROM SII.CGG_SEC_SESION 
	WHERE CUSU_CODIGO = (SELECT CUSU_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME AND CUSU_ESTADO) AND
		CSSSN_ACTIVO
	ORDER BY CSSSN_FECHA_INICIO DESC LIMIT 1;
	
	IF (TMP_TIME_ZONE IS NULL OR LENGTH(TMP_TIME_ZONE) = 0) THEN
		SELECT ABS(EXTRACT(TIMEZONE FROM CURRENT_TIMESTAMP)/3600) INTO TMP_TIME_ZONE;
	END IF;
	
	OPEN OUT_CURSOR FOR
		SELECT 
			PRS.CRPER_NOMBRES||' '||PRS.CRPER_APELLIDO_PATERNO USUARIO,
			(VD.CKVDT_FECHA_UPDATE AT TIME ZONE ('UTC+'||TMP_TIME_ZONE)) CKVDT_FECHA_UPDATE,
			VD.CKVDT_USUARIO_UPDATE
		FROM SII.CGG_KDX_VENTA_DETALLE VD
		INNER JOIN SII.CGG_USUARIO US ON US.CUSU_NOMBRE_USUARIO = VD.CKVDT_USUARIO_UPDATE
		INNER JOIN SII.CGG_RES_PERSONA PRS ON PRS.CRPER_CODIGO = US.CRPER_CODIGO
		WHERE VD.CKVDT_ESTADO AND VD.CTREG_CODIGO = IN_CTREG_CODIGO;
	RETURN OUT_CURSOR;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*DEVUELVE EL NUMERO DE GRUPO MAXIMO DE ACUERDO A UN CODIGO DE BARRAS PARA OFFLINE. PARA ESTE CASO EL CODIGO DE BARRAS VA A TENER EL PREFIJO DE NUMERO DE CODIGO DE USUARIO SEPARADO CON GUION Y EL NUMERO DE CODIGO DE BARRAS EJEM. 
*USUARIO JTERAN CUSU147 CODIGO DE BARRAS: 147-000000100000008
*@return NUMERO DE GRUPO.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_NUMERACION_OFFLINE(
	IN IN_CUSU_NUMERO VARCHAR
)RETURNS VARCHAR AS
$BODY$
DECLARE										
		TMP_CTGTR_NUMERO VARCHAR;
		TMP_TOTAL NUMERIC;
		TMP_LONGITUD NUMERIC;
		TMP_L NUMERIC;
		CONS_LONGITUD NUMERIC;
		I NUMERIC;
BEGIN

	TMP_LONGITUD:=0;
	TMP_L:=0;
	CONS_LONGITUD:=7;
	I:=0;

	SELECT COUNT(DISTINCT GT.CTGTR_CODIGO) INTO TMP_TOTAL
	FROM SII.CGG_TCT_REGISTRO R
	INNER JOIN SII.CGG_TCT_GRUPO_TURISTA GT ON (R.CTGTR_CODIGO = GT.CTGTR_CODIGO)
	WHERE SPLIT_PART(CTREG_CODIGO_BARRAS, '-', 1) = IN_CUSU_NUMERO;	
	
	IF(TMP_TOTAL>=1)THEN
		
		SELECT MAX(DISTINCT GT.CTGTR_NUMERO) INTO TMP_CTGTR_NUMERO
		FROM SII.CGG_TCT_REGISTRO R
		INNER JOIN SII.CGG_TCT_GRUPO_TURISTA GT ON (R.CTGTR_CODIGO = GT.CTGTR_CODIGO)
		WHERE SPLIT_PART(CTREG_CODIGO_BARRAS, '-', 1) = IN_CUSU_NUMERO;
		
		TMP_LONGITUD := LENGTH(TMP_CTGTR_NUMERO);
		TMP_L := CONS_LONGITUD - TMP_LONGITUD;
		FOR I IN 1..TMP_L LOOP
			TMP_CTGTR_NUMERO :='0'||TMP_CTGTR_NUMERO;
		END LOOP;
		
	ELSE 
		TMP_CTGTR_NUMERO = '0000001';
	END IF;
		
	RETURN TMP_CTGTR_NUMERO;
END
$BODY$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;

/**
*DEVUELVE EL NUMERO DE GRUPO MAXIMO DE ACUERDO A UN CODIGO DE BARRAS PARA OFFLINE. PARA ESTE CASO EL CODIGO DE BARRAS VA A TENER EL PREFIJO DE NUMERO DE CODIGO DE USUARIO SEPARADO CON GUION Y EL NUMERO DE CODIGO DE BARRAS EJEM. 
*USUARIO JTERAN CUSU147 CODIGO DE BARRAS: 147-000000100000008
*@return NUMERO DE GRUPO.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_REGISTRO_NUMERACION_OFFLINE(
	IN IN_CUSU_NUMERO VARCHAR
)RETURNS VARCHAR AS
$BODY$
DECLARE										
		TMP_CTREG_NUMERO VARCHAR;
		TMP_TOTAL NUMERIC;
		TMP_LONGITUD NUMERIC;
		TMP_L NUMERIC;
		CONS_LONGITUD NUMERIC;
		I NUMERIC;
BEGIN

	TMP_LONGITUD:=0;
	TMP_L:=0;
	CONS_LONGITUD:=8;
	I:=0;

	SELECT COUNT(DISTINCT R.CTREG_CODIGO) INTO TMP_TOTAL
	FROM SII.CGG_TCT_REGISTRO R	
	WHERE SPLIT_PART(CTREG_CODIGO_BARRAS, '-', 1) = '147';	
	
	IF(TMP_TOTAL>=1)THEN
		
		SELECT MAX(DISTINCT R.CTREG_NUMERO) INTO TMP_CTREG_NUMERO
		FROM SII.CGG_TCT_REGISTRO R		
		WHERE SPLIT_PART(CTREG_CODIGO_BARRAS, '-', 1) = '147';
		
		TMP_LONGITUD := LENGTH(TMP_CTREG_NUMERO);
		TMP_L := CONS_LONGITUD - TMP_LONGITUD;
		FOR I IN 1..TMP_L LOOP
			TMP_CTREG_NUMERO :='0'||TMP_CTREG_NUMERO;
		END LOOP;
		
	ELSE 
		TMP_CTREG_NUMERO = '0000001';
	END IF;
		
	RETURN TMP_CTREG_NUMERO;
END
$BODY$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;

CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_VALIDA_INFORMACION_OFFLINE(	
)RETURNS REFCURSOR AS
$BODY$
DECLARE
	OUT_CURSOR REFCURSOR;										
BEGIN
OPEN OUT_CURSOR FOR
		
		SELECT CRPER_NUM_DOC_IDENTIFIC FROM CGG_RES_PERSONA 
		WHERE CRPER_NOMBRES||' '||CRPER_APELLIDO_PATERNO||' '||CRPER_APELLIDO_MATERNO LIKE '%?%';
		
	RETURN OUT_CURSOR;		
END
$BODY$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;
