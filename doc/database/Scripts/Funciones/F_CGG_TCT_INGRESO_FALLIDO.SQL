/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_TCT_INGRESO_FALLIDO
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CTIGF_FECHA_INTENTO FECHA DE INTENTO DE INGRESO
* @param IN_CTIGF_TIPO_INGRESO_FALLIDO TIPO DE INGRESO FALLIDO
0 - NOTIFICACION
1 - ESTADIA
2 - OTROS
* @param IN_CTIGF_DESCRIPCION DESCRIPCION DEL INGRESO FALLIDO
* @param IN_CTIGF_ESTADO ESTADO DEL REGISTRO
* @param IN_CTIGF_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CTIGF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_INSERT(
IN IN_CTIGF_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CRPER_CODIGO%TYPE, 
IN IN_CARPT_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CARPT_CODIGO%TYPE, 
IN IN_CTIGF_FECHA_INTENTO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_FECHA_INTENTO%TYPE, 
IN IN_CTIGF_TIPO_INGRESO_FALLIDO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_TIPO_INGRESO_FALLIDO%TYPE, 
IN IN_CTIGF_DESCRIPCION SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_DESCRIPCION%TYPE, 
IN IN_CTIGF_ESTADO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_ESTADO%TYPE, 
IN IN_CTIGF_USUARIO_INSERT SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_USUARIO_INSERT%TYPE, 
IN IN_CTIGF_USUARIO_UPDATE SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CTIGF_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_TCT_INGRESO_FALLIDO','CTIGF_CODIGO','CTIGF') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CTIGF_CODIGO;
	END IF;
	INSERT INTO SII.CGG_TCT_INGRESO_FALLIDO(
		CTIGF_CODIGO, 
		CRPER_CODIGO, 
		CARPT_CODIGO, 
		CTIGF_FECHA_INTENTO, 
		CTIGF_TIPO_INGRESO_FALLIDO, 
		CTIGF_DESCRIPCION, 
		CTIGF_ESTADO, 
		CTIGF_FECHA_INSERT, 
		CTIGF_USUARIO_INSERT, 
		CTIGF_FECHA_UPDATE, 
		CTIGF_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CARPT_CODIGO, 
		IN_CTIGF_FECHA_INTENTO, 
		IN_CTIGF_TIPO_INGRESO_FALLIDO, 
		IN_CTIGF_DESCRIPCION, 
		IN_CTIGF_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CTIGF_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CTIGF_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_TCT_INGRESO_FALLIDO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTIGF_CODIGO, 
		CRPER_CODIGO, 
		CARPT_CODIGO, 
		CTIGF_FECHA_INTENTO, 
		CTIGF_TIPO_INGRESO_FALLIDO, 
		CTIGF_DESCRIPCION, 
		CTIGF_ESTADO, 
		CTIGF_FECHA_INSERT, 
		CTIGF_USUARIO_INSERT, 
		CTIGF_FECHA_UPDATE, 
		CTIGF_USUARIO_UPDATE
	FROM SII.CGG_TCT_INGRESO_FALLIDO
	WHERE CTIGF_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_TCT_INGRESO_FALLIDO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_TIME_ZONE VARCHAR;
	STMT TEXT;
	STMT_TMP TEXT;
BEGIN
	STMT:=' ';	
	STMT_TMP:=' ';	
	
	SELECT CSSSN_ZONA_TIEMPO INTO TMP_TIME_ZONE
	FROM SII.CGG_SEC_SESION 
	WHERE CUSU_CODIGO = (SELECT CUSU_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME AND CUSU_ESTADO) AND
		CSSSN_ACTIVO
	ORDER BY CSSSN_FECHA_INICIO DESC LIMIT 1;
	
	IF (TMP_TIME_ZONE IS NULL OR LENGTH(TMP_TIME_ZONE) = 0) THEN
		SELECT ABS(EXTRACT(TIMEZONE FROM CURRENT_TIMESTAMP)/3600) INTO TMP_TIME_ZONE;
	END IF;
	
	STMT_TMP:='SELECT
		IT.CTIGF_CODIGO, 
		IT.CRPER_CODIGO, 
		(COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')) AS CRPER_NOMBRE_PERSONA,
		PER.CRPER_NUM_DOC_IDENTIFIC,
		IT.CARPT_CODIGO,
		ART.CARPT_NOMBRE AS CARPT_NOMBRE_INGRESO, 
		IT.CTIGF_FECHA_INTENTO, 
		IT.CTIGF_TIPO_INGRESO_FALLIDO, 
		IT.CTIGF_DESCRIPCION, 
		IT.CTIGF_ESTADO, 
		IT.CTIGF_FECHA_INSERT, 
		IT.CTIGF_USUARIO_INSERT, 
		IT.CTIGF_FECHA_UPDATE, 
		IT.CTIGF_USUARIO_UPDATE		
	FROM SII.CGG_TCT_INGRESO_FALLIDO IT
	INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = IT.CRPER_CODIGO
	LEFT JOIN SII.CGG_RES_AEROPUERTO ART ON ART.CARPT_CODIGO=IT.CARPT_CODIGO
	WHERE IT.CTIGF_ESTADO AND (LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',
		COALESCE(PER.CRPER_NUM_DOC_IDENTIFIC,'''')||'' ''||
		COALESCE(IT.CTIGF_FECHA_INTENTO, CURRENT_TIMESTAMP)||'' ''||		
		COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||
		COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')) = 1)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	
	STMT :='WITH INGRESO_FALLIDO AS ('||STMT_TMP||'),
		FECHA_IMPRESION AS (
			SELECT CTIGF_CODIGO,CKVDT_FECHA_UPDATE FROM (
				SELECT 
					VDT.CTIGF_CODIGO,
					VDT.CKVDT_FECHA_UPDATE AT TIME ZONE '||QUOTE_LITERAL('UTC+6')||' CKVDT_FECHA_UPDATE,
					ROW_NUMBER() OVER(PARTITION BY VDT.CTIGF_CODIGO ORDER BY VDT.CKVDT_FECHA_UPDATE DESC) AS RANKI 		
				FROM SII.CGG_KDX_VENTA_DETALLE VDT 
				WHERE VDT.CTIGF_CODIGO IN (SELECT IFA.CTIGF_CODIGO FROM INGRESO_FALLIDO IFA)
			) AS FI
			WHERE FI.RANKI = 1 	  
		)
		SELECT 
		C1.CTIGF_CODIGO, 
				C1.CRPER_CODIGO, 
				C1.CRPER_NOMBRE_PERSONA,
				C1.CRPER_NUM_DOC_IDENTIFIC,
				C1.CARPT_CODIGO,
				C1.CARPT_NOMBRE_INGRESO, 
				C1.CTIGF_FECHA_INTENTO, 
				C1.CTIGF_TIPO_INGRESO_FALLIDO, 
				C1.CTIGF_DESCRIPCION, 
				C1.CTIGF_ESTADO, 
				C1.CTIGF_FECHA_INSERT, 
				C1.CTIGF_USUARIO_INSERT, 
				C1.CTIGF_FECHA_UPDATE, 
				C1.CTIGF_USUARIO_UPDATE,
				C2.CKVDT_FECHA_UPDATE
		 FROM INGRESO_FALLIDO C1
		LEFT JOIN FECHA_IMPRESION C2 ON (C2.CTIGF_CODIGO = C1.CTIGF_CODIGO)';	
	
	OPEN TMP_REF FOR EXECUTE STMT;
	
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TCT_INGRESO_FALLIDO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_TCT_INGRESO_FALLIDO IT
	INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = IT.CRPER_CODIGO
	WHERE CTIGF_ESTADO AND (LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT, 
		COALESCE(IT.CTIGF_FECHA_INTENTO, CURRENT_TIMESTAMP)||' '||
		COALESCE(PER.CRPER_NUM_DOC_IDENTIFIC,'')||' '||		
		COALESCE(PER.CRPER_NOMBRES,'')||' '||		
		COALESCE(PER.CRPER_APELLIDO_PATERNO,'')) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_TCT_INGRESO_FALLIDO
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CTIGF_FECHA_INTENTO FECHA DE INTENTO DE INGRESO
* @param IN_CTIGF_TIPO_INGRESO_FALLIDO TIPO DE INGRESO FALLIDO
0 - NOTIFICACION
1 - ESTADIA
2 - OTROS
* @param IN_CTIGF_DESCRIPCION DESCRIPCION DEL INGRESO FALLIDO
* @param IN_CTIGF_ESTADO ESTADO DEL REGISTRO
* @param IN_CTIGF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_UPDATE(
IN IN_CTIGF_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CRPER_CODIGO%TYPE, 
IN IN_CARPT_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CARPT_CODIGO%TYPE, 
IN IN_CTIGF_FECHA_INTENTO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_FECHA_INTENTO%TYPE, 
IN IN_CTIGF_TIPO_INGRESO_FALLIDO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_TIPO_INGRESO_FALLIDO%TYPE, 
IN IN_CTIGF_DESCRIPCION SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_DESCRIPCION%TYPE, 
IN IN_CTIGF_ESTADO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_ESTADO%TYPE, 
IN IN_CTIGF_USUARIO_UPDATE SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_INGRESO_FALLIDO SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CARPT_CODIGO = IN_CARPT_CODIGO, 
		CTIGF_FECHA_INTENTO = IN_CTIGF_FECHA_INTENTO, 
		CTIGF_TIPO_INGRESO_FALLIDO = IN_CTIGF_TIPO_INGRESO_FALLIDO, 
		CTIGF_DESCRIPCION = IN_CTIGF_DESCRIPCION, 
		CTIGF_ESTADO = IN_CTIGF_ESTADO, 
		CTIGF_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CTIGF_USUARIO_UPDATE = IN_CTIGF_USUARIO_UPDATE
	WHERE
		CTIGF_CODIGO = IN_CTIGF_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_TCT_INGRESO_FALLIDO
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_SELECT(
IN IN_CTIGF_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTIGF_CODIGO, 
		CRPER_CODIGO, 
		CARPT_CODIGO, 
		CTIGF_FECHA_INTENTO, 
		CTIGF_TIPO_INGRESO_FALLIDO, 
		CTIGF_DESCRIPCION, 
		CTIGF_ESTADO, 
		CTIGF_FECHA_INSERT, 
		CTIGF_USUARIO_INSERT, 
		CTIGF_FECHA_UPDATE, 
		CTIGF_USUARIO_UPDATE
	FROM SII.CGG_TCT_INGRESO_FALLIDO
	WHERE CTIGF_ESTADO = TRUE AND 
		CTIGF_CODIGO = IN_CTIGF_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_TCT_INGRESO_FALLIDO
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_DELETE(
IN IN_CTIGF_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_INGRESO_FALLIDO
	WHERE
		CTIGF_CODIGO = IN_CTIGF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_TCT_INGRESO_FALLIDO
* @param IN_CTIGF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_DELETE_SOFT(
IN IN_CTIGF_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CTIGF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_INGRESO_FALLIDO SET
		CTIGF_ESTADO = FALSE
	WHERE
		CTIGF_CODIGO = IN_CTIGF_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_S_CGG_RES_AEROPUERTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_INGRESO_FALLIDO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_AEROPUERTO.
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_S_CGG_RES_AEROPUERTO(
IN IN_CARPT_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CARPT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTIGF_CODIGO, 
		CRPER_CODIGO, 
		CARPT_CODIGO, 
		CTIGF_FECHA_INTENTO, 
		CTIGF_TIPO_INGRESO_FALLIDO, 
		CTIGF_DESCRIPCION, 
		CTIGF_ESTADO, 
		CTIGF_FECHA_INSERT, 
		CTIGF_USUARIO_INSERT, 
		CTIGF_FECHA_UPDATE, 
		CTIGF_USUARIO_UPDATE
	FROM SII.CGG_TCT_INGRESO_FALLIDO
	WHERE CTIGF_ESTADO = TRUE AND 
		CARPT_CODIGO = IN_CARPT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_D_CGG_RES_AEROPUERTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_INGRESO_FALLIDO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_AEROPUERTO.
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_D_CGG_RES_AEROPUERTO(
IN IN_CARPT_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CARPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_INGRESO_FALLIDO
	WHERE
		CARPT_CODIGO = IN_CARPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_D_CGG_RES_AEROPUERTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_INGRESO_FALLIDO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_AEROPUERTO.
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_DS_CGG_RES_AEROPUERTO(
IN IN_CARPT_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CARPT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_INGRESO_FALLIDO SET
		ctigf_estado = false
	WHERE
		CARPT_CODIGO = IN_CARPT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_INGRESO_FALLIDO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTIGF_CODIGO, 
		CRPER_CODIGO, 
		CARPT_CODIGO, 
		CTIGF_FECHA_INTENTO, 
		CTIGF_TIPO_INGRESO_FALLIDO, 
		CTIGF_DESCRIPCION, 
		CTIGF_ESTADO, 
		CTIGF_FECHA_INSERT, 
		CTIGF_USUARIO_INSERT, 
		CTIGF_FECHA_UPDATE, 
		CTIGF_USUARIO_UPDATE
	FROM SII.CGG_TCT_INGRESO_FALLIDO
	WHERE CTIGF_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_INGRESO_FALLIDO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_INGRESO_FALLIDO
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_INGRESO_FALLIDO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_INGRESO_FALLIDO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_INGRESO_FALLIDO_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_TCT_INGRESO_FALLIDO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_INGRESO_FALLIDO SET
		ctigf_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

