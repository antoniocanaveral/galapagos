/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_CGPPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERFIL PROFESIONAL
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @param IN_CGTPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @param IN_CGMDC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MODALIDAD DE CURSO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CGIEN_CODIGO NO ESPECIFICADO
* @param IN_CGPPR_NIVEL_APROBADO ULTIMO NIVEL QUE APROBO.
0 - APROBADO TODOS LOS NIVELES
* @param IN_CGPPR_FECHA_INICIO NO ESPECIFICADO
* @param IN_CGPPR_FECHA_FIN NO ESPECIFICADO
* @param IN_CGPPR_CONFIRMADO SI LA INFORMACIÓN YA FUE REVISADA POR ADMINISTRACION DE RESIDENCIA
SI
NO
* @param IN_CGPPR_FECHA_CONFIRMACION FECHA EN LA QUE SE COMPROBO LA VERACIDAD DE LA INFORMACION
* @param IN_CGPPR_PREDETERMINADO DETERMINA SI EL REGISTRO ES EL ULTIMO ALCANZADO
* @param IN_CGPPR_ESTADO ESTADO DEL REGISTRO
* @param IN_CGPPR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGPPR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_INSERT(
IN IN_CGPPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGPPR_CODIGO%TYPE,
IN IN_CGESP_CODIGO SII.CGG_GEM_PERFIL_PROF.CGESP_CODIGO%TYPE,
IN IN_CGTPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGTPR_CODIGO%TYPE,
IN IN_CGMDC_CODIGO SII.CGG_GEM_PERFIL_PROF.CGMDC_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_PERFIL_PROF.CRPER_CODIGO%TYPE,
IN IN_CGIEN_CODIGO SII.CGG_GEM_PERFIL_PROF.CGIEN_CODIGO%TYPE,
IN IN_CGPPR_NIVEL_APROBADO SII.CGG_GEM_PERFIL_PROF.CGPPR_NIVEL_APROBADO%TYPE,
IN IN_CGPPR_FECHA_INICIO SII.CGG_GEM_PERFIL_PROF.CGPPR_FECHA_INICIO%TYPE,
IN IN_CGPPR_FECHA_FIN SII.CGG_GEM_PERFIL_PROF.CGPPR_FECHA_FIN%TYPE,
IN IN_CGPPR_CONFIRMADO SII.CGG_GEM_PERFIL_PROF.CGPPR_CONFIRMADO%TYPE,
IN IN_CGPPR_FECHA_CONFIRMACION SII.CGG_GEM_PERFIL_PROF.CGPPR_FECHA_CONFIRMACION%TYPE,
IN IN_CGPPR_PREDETERMINADO SII.CGG_GEM_PERFIL_PROF.CGPPR_PREDETERMINADO%TYPE,
IN IN_CGPPR_ESTADO SII.CGG_GEM_PERFIL_PROF.CGPPR_ESTADO%TYPE,
IN IN_CGPPR_USUARIO_INSERT SII.CGG_GEM_PERFIL_PROF.CGPPR_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGPPR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_PERFIL_PROF','CGPPR_CODIGO','CGPPR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGPPR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_PERFIL_PROF(
		CGPPR_CODIGO, 
		CGESP_CODIGO, 
		CGTPR_CODIGO, 
		CGMDC_CODIGO, 
		CRPER_CODIGO, 
		CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO, 
		CGPPR_FECHA_INSERT, 
		CGPPR_USUARIO_INSERT, 
		CGPPR_FECHA_UPDATE, 
		CGPPR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGESP_CODIGO, 
		IN_CGTPR_CODIGO, 
		IN_CGMDC_CODIGO, 
		IN_CRPER_CODIGO, 
		IN_CGIEN_CODIGO, 
		IN_CGPPR_NIVEL_APROBADO, 
		IN_CGPPR_FECHA_INICIO, 
		IN_CGPPR_FECHA_FIN, 
		IN_CGPPR_CONFIRMADO, 
		IN_CGPPR_FECHA_CONFIRMACION, 
		IN_CGPPR_PREDETERMINADO, 
		IN_CGPPR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGPPR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGPPR_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPPR_CODIGO, 
		CGESP_CODIGO, 
		CGTPR_CODIGO, 
		CGMDC_CODIGO, 
		CRPER_CODIGO, 
		CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO, 
		CGPPR_FECHA_INSERT, 
		CGPPR_USUARIO_INSERT, 
		CGPPR_FECHA_UPDATE, 
		CGPPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGPPR_CODIGO, 
		CGESP_CODIGO, 
		CGTPR_CODIGO, 
		CGMDC_CODIGO, 
		CRPER_CODIGO, 
		CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO, 
		CGPPR_FECHA_INSERT, 
		CGPPR_USUARIO_INSERT, 
		CGPPR_FECHA_UPDATE, 
		CGPPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGPPR_NIVEL_APROBADO, 0)||'' ''||COALESCE(CGPPR_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPPR_FECHA_FIN, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPPR_CONFIRMADO, FALSE)||'' ''||COALESCE(CGPPR_FECHA_CONFIRMACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPPR_PREDETERMINADO, FALSE)||'' ''||COALESCE(CGPPR_ESTADO, FALSE)||'' ''||COALESCE(CGPPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPPR_USUARIO_INSERT, '''')||'' ''||COALESCE(CGPPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPPR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_PROF
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(IED.CGIED_NOMBRE, '''')||' '||COALESCE(TPR.CGTPR_DESCRIPCION, '''')||' '||COALESCE(ESP.CGESP_NOMBRE, '''')||' '||COALESCE(MCU.CGMDC_DESCRIPCION, '''')||' '||COALESCE(PER.CRPER_NOMBRES, '''')||' '||COALESCE(PER.CRPER_APELLIDO_PATERNO, '''')||' '||COALESCE(PER.CRPER_APELLIDO_MATERNO, '''')||' '||COALESCE(CGPPR_NIVEL_APROBADO, 0)||' '||COALESCE(CGPPR_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_FECHA_FIN, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_CONFIRMADO, FALSE)||' '||COALESCE(CGPPR_FECHA_CONFIRMACION, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_PREDETERMINADO, FALSE)||' '||COALESCE(CGPPR_ESTADO, FALSE)||' '||COALESCE(CGPPR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_USUARIO_INSERT, '''')||' '||COALESCE(CGPPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_PERFIL_PROF
* @param IN_CGPPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERFIL PROFESIONAL
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @param IN_CGTPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @param IN_CGMDC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MODALIDAD DE CURSO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CGIEN_CODIGO NO ESPECIFICADO
* @param IN_CGPPR_NIVEL_APROBADO ULTIMO NIVEL QUE APROBO.
0 - APROBADO TODOS LOS NIVELES
* @param IN_CGPPR_FECHA_INICIO NO ESPECIFICADO
* @param IN_CGPPR_FECHA_FIN NO ESPECIFICADO
* @param IN_CGPPR_CONFIRMADO SI LA INFORMACIÓN YA FUE REVISADA POR ADMINISTRACION DE RESIDENCIA
SI
NO
* @param IN_CGPPR_FECHA_CONFIRMACION FECHA EN LA QUE SE COMPROBO LA VERACIDAD DE LA INFORMACION
* @param IN_CGPPR_PREDETERMINADO DETERMINA SI EL REGISTRO ES EL ULTIMO ALCANZADO
* @param IN_CGPPR_ESTADO ESTADO DEL REGISTRO
* @param IN_CGPPR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_UPDATE(
IN IN_CGPPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGPPR_CODIGO%TYPE,
IN IN_CGESP_CODIGO SII.CGG_GEM_PERFIL_PROF.CGESP_CODIGO%TYPE,
IN IN_CGTPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGTPR_CODIGO%TYPE,
IN IN_CGMDC_CODIGO SII.CGG_GEM_PERFIL_PROF.CGMDC_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_PERFIL_PROF.CRPER_CODIGO%TYPE,
IN IN_CGIEN_CODIGO SII.CGG_GEM_PERFIL_PROF.CGIEN_CODIGO%TYPE,
IN IN_CGPPR_NIVEL_APROBADO SII.CGG_GEM_PERFIL_PROF.CGPPR_NIVEL_APROBADO%TYPE,
IN IN_CGPPR_FECHA_INICIO SII.CGG_GEM_PERFIL_PROF.CGPPR_FECHA_INICIO%TYPE,
IN IN_CGPPR_FECHA_FIN SII.CGG_GEM_PERFIL_PROF.CGPPR_FECHA_FIN%TYPE,
IN IN_CGPPR_CONFIRMADO SII.CGG_GEM_PERFIL_PROF.CGPPR_CONFIRMADO%TYPE,
IN IN_CGPPR_FECHA_CONFIRMACION SII.CGG_GEM_PERFIL_PROF.CGPPR_FECHA_CONFIRMACION%TYPE,
IN IN_CGPPR_PREDETERMINADO SII.CGG_GEM_PERFIL_PROF.CGPPR_PREDETERMINADO%TYPE,
IN IN_CGPPR_ESTADO SII.CGG_GEM_PERFIL_PROF.CGPPR_ESTADO%TYPE,
IN IN_CGPPR_USUARIO_UPDATE SII.CGG_GEM_PERFIL_PROF.CGPPR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PERFIL_PROF SET
		CGESP_CODIGO = IN_CGESP_CODIGO, 
		CGTPR_CODIGO = IN_CGTPR_CODIGO, 
		CGMDC_CODIGO = IN_CGMDC_CODIGO, 
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CGIEN_CODIGO = IN_CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO = IN_CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO = IN_CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN = IN_CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO = IN_CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION = IN_CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO = IN_CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO = IN_CGPPR_ESTADO, 
		CGPPR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGPPR_USUARIO_UPDATE = IN_CGPPR_USUARIO_UPDATE
	WHERE
		CGPPR_CODIGO = IN_CGPPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_CGPPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERFIL PROFESIONAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_SELECT(
IN IN_CGPPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGPPR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPPR_CODIGO, 
		CGESP_CODIGO, 
		CGTPR_CODIGO, 
		CGMDC_CODIGO, 
		CRPER_CODIGO, 
		CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO, 
		CGPPR_FECHA_INSERT, 
		CGPPR_USUARIO_INSERT, 
		CGPPR_FECHA_UPDATE, 
		CGPPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE AND 
		CGPPR_CODIGO = IN_CGPPR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_CGPPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERFIL PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_DELETE(
IN IN_CGPPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGPPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_PERFIL_PROF
	WHERE
		CGPPR_CODIGO = IN_CGPPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_PROF
* @param IN_CGPPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERFIL PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_DELETE_SOFT(
IN IN_CGPPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGPPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PERFIL_PROF SET
		CGPPR_ESTADO = FALSE
	WHERE
		CGPPR_CODIGO = IN_CGPPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_ESPECIALIDAD
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_ESPECIALIDAD(
IN IN_CGESP_CODIGO SII.CGG_GEM_PERFIL_PROF.CGESP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPPR_CODIGO, 
		CGESP_CODIGO, 
		CGTPR_CODIGO, 
		CGMDC_CODIGO, 
		CRPER_CODIGO, 
		CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO, 
		CGPPR_FECHA_INSERT, 
		CGPPR_USUARIO_INSERT, 
		CGPPR_FECHA_UPDATE, 
		CGPPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE AND 
		CGESP_CODIGO = IN_CGESP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_ESPECIALIDAD
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_ESPECIALIDAD(
IN IN_CGESP_CODIGO SII.CGG_GEM_PERFIL_PROF.CGESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_PERFIL_PROF
	WHERE
		CGESP_CODIGO = IN_CGESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_ESPECIALIDAD
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_DS_CGG_ESPECIALIDAD(
IN IN_CGESP_CODIGO SII.CGG_GEM_PERFIL_PROF.CGESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PERFIL_PROF SET
		cgppr_estado = false
	WHERE
		CGESP_CODIGO = IN_CGESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_INSTITUCION_NIVEL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_CGIEN_CODIGO NO ESPECIFICADO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_INSTITUCION_NIVEL(
IN IN_CGIEN_CODIGO SII.CGG_GEM_PERFIL_PROF.CGIEN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPPR_CODIGO, 
		CGESP_CODIGO, 
		CGTPR_CODIGO, 
		CGMDC_CODIGO, 
		CRPER_CODIGO, 
		CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO, 
		CGPPR_FECHA_INSERT, 
		CGPPR_USUARIO_INSERT, 
		CGPPR_FECHA_UPDATE, 
		CGPPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE AND 
		CGIEN_CODIGO = IN_CGIEN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_INSTITUCION_NIVEL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_CGIEN_CODIGO NO ESPECIFICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_INSTITUCION_NIVEL(
IN IN_CGIEN_CODIGO SII.CGG_GEM_PERFIL_PROF.CGIEN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_PERFIL_PROF
	WHERE
		CGIEN_CODIGO = IN_CGIEN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_INSTITUCION_NIVEL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_cgien_codigo NO ESPECIFICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_DS_CGG_INSTITUCION_NIVEL(
IN IN_CGIEN_CODIGO SII.CGG_GEM_PERFIL_PROF.CGIEN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PERFIL_PROF SET
		cgppr_estado = false
	WHERE
		CGIEN_CODIGO = IN_CGIEN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_MODALIDAD_CURSO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_MODALIDAD_CURSO.
* @param IN_CGMDC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MODALIDAD DE CURSO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_MODALIDAD_CURSO(
IN IN_CGMDC_CODIGO SII.CGG_GEM_PERFIL_PROF.CGMDC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPPR_CODIGO, 
		CGESP_CODIGO, 
		CGTPR_CODIGO, 
		CGMDC_CODIGO, 
		CRPER_CODIGO, 
		CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO, 
		CGPPR_FECHA_INSERT, 
		CGPPR_USUARIO_INSERT, 
		CGPPR_FECHA_UPDATE, 
		CGPPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE AND 
		CGMDC_CODIGO = IN_CGMDC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_MODALIDAD_CURSO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_MODALIDAD_CURSO.
* @param IN_CGMDC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MODALIDAD DE CURSO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_MODALIDAD_CURSO(
IN IN_CGMDC_CODIGO SII.CGG_GEM_PERFIL_PROF.CGMDC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_PERFIL_PROF
	WHERE
		CGMDC_CODIGO = IN_CGMDC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_MODALIDAD_CURSO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_MODALIDAD_CURSO.
* @param IN_CGMDC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MODALIDAD DE CURSO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_DS_CGG_MODALIDAD_CURSO(
IN IN_CGMDC_CODIGO SII.CGG_GEM_PERFIL_PROF.CGMDC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PERFIL_PROF SET
		cgppr_estado = false
	WHERE
		CGMDC_CODIGO = IN_CGMDC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_PERFIL_PROF.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPPR_CODIGO, 
		CGESP_CODIGO, 
		CGTPR_CODIGO, 
		CGMDC_CODIGO, 
		CRPER_CODIGO, 
		CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO, 
		CGPPR_FECHA_INSERT, 
		CGPPR_USUARIO_INSERT, 
		CGPPR_FECHA_UPDATE, 
		CGPPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_PERFIL_PROF.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_PERFIL_PROF
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_PERFIL_PROF.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PERFIL_PROF SET
		cgppr_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_TITULO_PROFESIONAL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TITULO_PROFESIONAL.
* @param IN_CGTPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_S_CGG_TITULO_PROFESIONAL(
IN IN_CGTPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGTPR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPPR_CODIGO, 
		CGESP_CODIGO, 
		CGTPR_CODIGO, 
		CGMDC_CODIGO, 
		CRPER_CODIGO, 
		CGIEN_CODIGO, 
		CGPPR_NIVEL_APROBADO, 
		CGPPR_FECHA_INICIO, 
		CGPPR_FECHA_FIN, 
		CGPPR_CONFIRMADO, 
		CGPPR_FECHA_CONFIRMACION, 
		CGPPR_PREDETERMINADO, 
		CGPPR_ESTADO, 
		CGPPR_FECHA_INSERT, 
		CGPPR_USUARIO_INSERT, 
		CGPPR_FECHA_UPDATE, 
		CGPPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_PROF
	WHERE CGPPR_ESTADO = TRUE AND 
		CGTPR_CODIGO = IN_CGTPR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_TITULO_PROFESIONAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TITULO_PROFESIONAL.
* @param IN_CGTPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_TITULO_PROFESIONAL(
IN IN_CGTPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGTPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_PERFIL_PROF
	WHERE
		CGTPR_CODIGO = IN_CGTPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_D_CGG_TITULO_PROFESIONAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_PROF QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TITULO_PROFESIONAL.
* @param IN_cgtpr_codigo IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_DS_CGG_TITULO_PROFESIONAL(
IN IN_CGTPR_CODIGO SII.CGG_GEM_PERFIL_PROF.CGTPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PERFIL_PROF SET
		cgppr_estado = false
	WHERE
		CGTPR_CODIGO = IN_CGTPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_EDUCACION_SELECTBYID
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_PROF
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_EDUCACION_SELECTBYID(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT	DISTINCT
		IED.CGIED_NOMBRE, 
		NES.CGNES_DESCRIPCION,
		ESP.CGESP_NOMBRE,
		TPR.CGTPR_DESCRIPCION,
		PPR.CGPPR_FECHA_INICIO,
		PPR.CGPPR_FECHA_FIN
	FROM SII.CGG_RES_PERSONA PER INNER JOIN SII.CGG_GEM_PERFIL_PROF PPR ON(PER.CRPER_CODIGO=PPR.CRPER_CODIGO)
		INNER JOIN SII.CGG_INSTITUCION_NIVEL IEN ON(PPR.CGIEN_CODIGO = IEN.CGIEN_CODIGO)
		INNER JOIN SII.CGG_INSTITUCION_EDUCATIVA IED ON(IEN.CGIED_CODIGO=IED.CGIED_CODIGO)
		INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(IEN.CGNES_CODIGO=NES.CGNES_CODIGO)
		INNER JOIN SII.CGG_ESPECIALIDAD ESP ON(PPR.CGESP_CODIGO=ESP.CGESP_CODIGO)
		INNER JOIN SII.CGG_TITULO_PROFESIONAL TPR ON(PPR.CGTPR_CODIGO=TPR.CGTPR_CODIGO)
	WHERE PPR.CGPPR_ESTADO = TRUE AND PER.CRPER_ESTADO = TRUE AND 
		PER.CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_EDUCACION_SELECTBYID
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_EDUCACION_SELECTBYID(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT	
		IED.CGIED_NOMBRE, 
		NES.CGNES_DESCRIPCION,
		ESP.CGESP_NOMBRE,
		TPR.CGTPR_DESCRIPCION,
		PPR.CGPPR_FECHA_INICIO,
		PPR.CGPPR_FECHA_FIN
	FROM SII.CGG_GEM_PERFIL_PROF PPR
		INNER JOIN SII.CGG_INSTITUCION_NIVEL IEN ON (IEN.CGIEN_CODIGO=PPR.CGIEN_CODIGO)		
		INNER JOIN SII.CGG_INSTITUCION_EDUCATIVA IED ON(IED.CGIED_CODIGO=IEN.CGIED_CODIGO)
		INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(NES.CGNES_CODIGO=IEN.CGNES_CODIGO)
		INNER JOIN SII.CGG_ESPECIALIDAD ESP ON(ESP.CGESP_CODIGO=PPR.CGESP_CODIGO)
		INNER JOIN SII.CGG_TITULO_PROFESIONAL TPR ON(TPR.CGTPR_CODIGO=PPR.CGTPR_CODIGO)
	WHERE PPR.CGPPR_ESTADO = TRUE AND  
		PPR.CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_SELECT_GENERAL
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CRPER_CODIGO CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_SELECT_GENERAL(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CRPER_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		PPR.CGPPR_CODIGO, 
		PPR.CGESP_CODIGO, 
		PPR.CGTPR_CODIGO, 
		PPR.CGMDC_CODIGO, 
		PPR.CRPER_CODIGO, 
		PPR.CGIEN_CODIGO, 
		PPR.CGPPR_NIVEL_APROBADO, 
		PPR.CGPPR_FECHA_INICIO, 
		PPR.CGPPR_FECHA_FIN, 
		PPR.CGPPR_CONFIRMADO, 
		PPR.CGPPR_FECHA_CONFIRMACION, 
		PPR.CGPPR_PREDETERMINADO, 
		PPR.CGPPR_ESTADO, 
		IED.CGIED_NOMBRE,
		TPR.CGTPR_DESCRIPCION,
		ESP.CGESP_NOMBRE,
		MCU.CGMDC_DESCRIPCION,
		PER.CRPER_NOMBRES,
		PER.CRPER_APELLIDO_PATERNO,
		PER.CRPER_APELLIDO_MATERNO,
		IEN.CGNES_CODIGO,
		NES.CGNES_DESCRIPCION,
		PPR.CGPPR_FECHA_INSERT, 
		PPR.CGPPR_USUARIO_INSERT, 
		PPR.CGPPR_FECHA_UPDATE, 
		PPR.CGPPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_PROF PPR INNER JOIN SII.CGG_ESPECIALIDAD ESP ON(ESP.CGESP_CODIGO=PPR.CGESP_CODIGO)
	INNER JOIN SII.CGG_TITULO_PROFESIONAL TPR ON(TPR.CGTPR_CODIGO=PPR.CGTPR_CODIGO)
	INNER JOIN SII.CGG_MODALIDAD_CURSO MCU ON(MCU.CGMDC_CODIGO=PPR.CGMDC_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=PPR.CRPER_CODIGO)
	INNER JOIN SII.CGG_INSTITUCION_NIVEL IEN ON(IEN.CGIEN_CODIGO=PPR.CGIEN_CODIGO)
	INNER JOIN SII.CGG_INSTITUCION_EDUCATIVA IED ON (IED.CGIED_CODIGO=IEN.CGIED_CODIGO)
	INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(NES.CGNES_CODIGO=IEN.CGNES_CODIGO)
	WHERE PPR.CGPPR_ESTADO = TRUE AND PPR.CRPER_CODIGO='''||IN_CRPER_CODIGO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(IED.CGIED_NOMBRE, '''')||'' ''||COALESCE(TPR.CGTPR_DESCRIPCION, '''')||'' ''||COALESCE(ESP.CGESP_NOMBRE, '''')||'' ''||COALESCE(MCU.CGMDC_DESCRIPCION, '''')||'' ''||COALESCE(PER.CRPER_NOMBRES, '''')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO, '''')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO, '''')||'' ''||COALESCE(PPR.CGPPR_NIVEL_APROBADO, 0)||'' ''||COALESCE(PPR.CGPPR_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||COALESCE(PPR.CGPPR_FECHA_FIN, CURRENT_TIMESTAMP)||'' ''||COALESCE(PPR.CGPPR_CONFIRMADO, FALSE)||'' ''||COALESCE(PPR.CGPPR_FECHA_CONFIRMACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(PPR.CGPPR_PREDETERMINADO, FALSE)||'' ''||COALESCE(PPR.CGPPR_ESTADO, FALSE)||'' ''||COALESCE(PPR.CGPPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(PPR.CGPPR_USUARIO_INSERT, '''')||'' ''||COALESCE(PPR.CGPPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(PPR.CGPPR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_SELECT_PERSONA
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_CRPER_CODIGO CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_SELECT_PERSONA(IN_CRPER_CODIGO CHARACTER VARYING)
  RETURNS SETOF refcursor AS
$$
DECLARE
      TMP_REF REFCURSOR;
BEGIN
   OPEN TMP_REF FOR
   SELECT
	PPR.CGPPR_CODIGO,
	PPR.CGESP_CODIGO,
	CGESP.CGESP_NOMBRE,
	PPR.CGTPR_CODIGO,
	CGTPR.CGTPR_DESCRIPCION,
	PPR.CGIEN_CODIGO,
	CGIED.CGIED_CODIGO,
	CGIED.CGIED_NOMBRE,
	PPR.CGMDC_CODIGO,
	CGMDC.CGMDC_DESCRIPCION,
	INI.CGNES_CODIGO,
	CGNES.CGNES_DESCRIPCION,
	PPR.CRPER_CODIGO,
	PPR.CGPPR_NIVEL_APROBADO,
	PPR.CGPPR_CONFIRMADO,
	PPR.CGPPR_FECHA_INICIO,
	PPR.CGPPR_FECHA_FIN,
	PPR.CGPPR_FECHA_CONFIRMACION,
	PPR.CGPPR_PREDETERMINADO
	FROM SII.CGG_GEM_PERFIL_PROF PPR
	INNER JOIN SII.CGG_ESPECIALIDAD CGESP ON CGESP.CGESP_CODIGO = PPR.CGESP_CODIGO
	INNER JOIN SII.CGG_TITULO_PROFESIONAL CGTPR ON CGTPR.CGTPR_CODIGO = PPR.CGTPR_CODIGO
	INNER JOIN SII.CGG_INSTITUCION_NIVEL INI ON(INI.CGIEN_CODIGO=PPR.CGIEN_CODIGO)
	INNER JOIN SII.CGG_INSTITUCION_EDUCATIVA CGIED ON  CGIED.CGIED_CODIGO = INI.CGIED_CODIGO
	INNER JOIN SII.CGG_MODALIDAD_CURSO CGMDC ON CGMDC.CGMDC_CODIGO = PPR.CGMDC_CODIGO
	INNER JOIN SII.CGG_NIVEL_ESTUDIO CGNES ON CGNES.CGNES_CODIGO = INI.CGNES_CODIGO	
	WHERE 
	PPR.CGPPR_ESTADO = TRUE AND 
	PPR.CRPER_CODIGO = IN_CRPER_CODIGO; 
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_PERFIL_PROF_COUNTBYID_PERSONA
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_PROF
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CRPER_CODIGO CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_PROF_COUNTBYID_PERSONA(
IN IN_FIND_TEXT TEXT,
IN IN_CRPER_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_PERFIL_PROF PPR INNER JOIN SII.CGG_ESPECIALIDAD ESP ON(ESP.CGESP_CODIGO=PPR.CGESP_CODIGO)
	INNER JOIN SII.CGG_TITULO_PROFESIONAL TPR ON(TPR.CGTPR_CODIGO=PPR.CGTPR_CODIGO)
	INNER JOIN SII.CGG_MODALIDAD_CURSO MCU ON(MCU.CGMDC_CODIGO=PPR.CGMDC_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=PPR.CRPER_CODIGO)
	INNER JOIN SII.CGG_INSTITUCION_NIVEL IEN ON(IEN.CGIEN_CODIGO=PPR.CGIEN_CODIGO)
	INNER JOIN SII.CGG_INSTITUCION_EDUCATIVA IED ON (IED.CGIED_CODIGO=IEN.CGIED_CODIGO)
	WHERE PPR.CGPPR_ESTADO = TRUE AND PPR.CRPER_CODIGO = IN_CRPER_CODIGO
	AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(IED.CGIED_NOMBRE, '''')||' '||COALESCE(TPR.CGTPR_DESCRIPCION, '''')||' '||COALESCE(ESP.CGESP_NOMBRE, '''')||' '||COALESCE(MCU.CGMDC_DESCRIPCION, '''')||' '||COALESCE(PER.CRPER_NOMBRES, '''')||' '||COALESCE(PER.CRPER_APELLIDO_PATERNO, '''')||' '||COALESCE(PER.CRPER_APELLIDO_MATERNO, '''')||' '||COALESCE(CGPPR_NIVEL_APROBADO, 0)||' '||COALESCE(CGPPR_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_FECHA_FIN, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_CONFIRMADO, FALSE)||' '||COALESCE(CGPPR_FECHA_CONFIRMACION, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_PREDETERMINADO, FALSE)||' '||COALESCE(CGPPR_ESTADO, FALSE)||' '||COALESCE(CGPPR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_USUARIO_INSERT, '''')||' '||COALESCE(CGPPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGPPR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION sii.F_CGG_GEM_PERFIL_DINAMICO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CODIGOS_NIVEL CRITERIO DE BUSQUEDA. CODIGOS DE NIVELES
* @param IN_CODIGOS_ESPECIALIDAD CRITERIO DE BUSQUEDA. CODIGOS DE ESPECIALIDADES
* @param IN_CODIGOS_TITULOS CRITERIO DE BUSQUEDA. CODIGOS DE TITULOS
* @param IN_CODIGOS_DESTREZAS CRITERIO DE BUSQUEDA. CODIGOS DE DESTREZAS
* @param IN_CODIGOS_IDIOMAS CRITERIO DE BUSQUEDA. CODIGOS DE IDIOMAS
* @param IN_CODIGOS_ISLAS CRITERIO DE BUSQUEDA. CODIGOS DE ISLAS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION sii.F_CGG_GEM_PERFIL_DINAMICO(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CODIGOS_NIVEL TEXT,
IN IN_CODIGOS_ESPECIALIDAD TEXT,
IN IN_CODIGOS_TITULOS TEXT,
IN IN_CODIGOS_DESTREZAS TEXT,
IN IN_CODIGOS_IDIOMAS TEXT,
IN IN_CODIGOS_ISLAS TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TOTALNIVELES INT;
	TOTALESPECIALIDADES INT;
	TOTALTITULOS INT;
	TOTALDESTREZAS INT;
	TOTALIDIOMAS INT;
	TOTALISLAS INT;
	CODIGONIVEL TEXT[];
	CODIGOESPECIALIDAD TEXT[];
	CODIGOTITULOS TEXT[];
	CODIGODESTREZAS TEXT[];
	CODIGOIDIOMAS TEXT[];
	CODIGOISLAS TEXT[];
	TMPWHERENIVELES TEXT;
	TMPWHEREESPECIALIDADES TEXT;
	TMPWHERETITULOS TEXT;
	TMPWHEREDESTREZAS TEXT;
	TMPWHEREIDIOMAS TEXT;
	TMPWHEREISLAS TEXT;
	TMP_SELECT TEXT;
BEGIN	
	CODIGONIVEL := STRING_TO_ARRAY(IN_CODIGOS_NIVEL, ';');
	CODIGOESPECIALIDAD := STRING_TO_ARRAY(IN_CODIGOS_ESPECIALIDAD, ';');
	CODIGOTITULOS := STRING_TO_ARRAY(IN_CODIGOS_TITULOS, ';');
	CODIGODESTREZAS := STRING_TO_ARRAY(IN_CODIGOS_DESTREZAS, ';');
	CODIGOIDIOMAS := STRING_TO_ARRAY(IN_CODIGOS_IDIOMAS, ';');
	CODIGOISLAS := STRING_TO_ARRAY(IN_CODIGOS_ISLAS, ';');
	
	TOTALNIVELES := ARRAY_LENGTH(CODIGONIVEL, 1);
	TOTALESPECIALIDADES := ARRAY_LENGTH(CODIGOESPECIALIDAD, 1);	
	TOTALTITULOS := ARRAY_LENGTH(CODIGOTITULOS, 1);
	TOTALDESTREZAS := ARRAY_LENGTH(CODIGODESTREZAS, 1);
	TOTALIDIOMAS := ARRAY_LENGTH(CODIGOIDIOMAS, 1);
	TOTALISLAS := ARRAY_LENGTH(CODIGOISLAS, 1);
	
	TMPWHERENIVELES := '';
	TMPWHEREESPECIALIDADES := '';
	TMPWHERETITULOS := '';
	TMPWHEREDESTREZAS := '';
	TMPWHEREIDIOMAS := '';
	TMPWHEREISLAS := '';
	IF TOTALNIVELES IS NULL THEN 
		TOTALNIVELES := 0;
	ELSE
		TMPWHERENIVELES := 'AND (';
	END IF;
	FOR I IN 1..TOTALNIVELES LOOP
			TMPWHERENIVELES := TMPWHERENIVELES||'NIV.CGNES_CODIGO='''||CODIGONIVEL[I]||'''';
			IF (I < TOTALNIVELES) THEN
				TMPWHERENIVELES := TMPWHERENIVELES||' OR ';
			END IF;
	END LOOP;
	IF (TOTALNIVELES >=1) THEN
		TMPWHERENIVELES := TMPWHERENIVELES||')';
	END IF;
	
	IF TOTALESPECIALIDADES IS NULL THEN 
		TOTALESPECIALIDADES := 0;
	ELSE
		TMPWHEREESPECIALIDADES := 'AND (';
	END IF;
	FOR I IN 1..TOTALESPECIALIDADES LOOP
			TMPWHEREESPECIALIDADES := TMPWHEREESPECIALIDADES||'PPR.CGESP_CODIGO='''||CODIGOESPECIALIDAD[I]||'''';
			IF (I < TOTALESPECIALIDADES) THEN
				TMPWHEREESPECIALIDADES := TMPWHEREESPECIALIDADES||' OR ';
			END IF;
	END LOOP;
	IF (TOTALESPECIALIDADES >=1) THEN
		TMPWHEREESPECIALIDADES := TMPWHEREESPECIALIDADES||')';
	END IF;
	IF TOTALTITULOS IS NULL THEN 
		TOTALTITULOS := 0;
	ELSE
		TMPWHERETITULOS := 'AND (';
	END IF;
	FOR I IN 1..TOTALTITULOS LOOP
			TMPWHERETITULOS := TMPWHERETITULOS||'PPR.CGTPR_CODIGO='''||CODIGOTITULOS[I]||'''';
			IF (I < TOTALTITULOS) THEN
				TMPWHERETITULOS := TMPWHERETITULOS||' OR ';
			END IF;
	END LOOP;
	IF (TOTALTITULOS >=1) THEN
		TMPWHERETITULOS := TMPWHERETITULOS||')';
	END IF;
	
	IF TOTALDESTREZAS IS NULL THEN 
		TOTALDESTREZAS := 0;
	ELSE
		TMPWHEREDESTREZAS := 'AND (';
	END IF;
	FOR I IN 1..TOTALDESTREZAS LOOP
			TMPWHEREDESTREZAS := TMPWHEREDESTREZAS||'DSP.CGDST_CODIGO='''||CODIGODESTREZAS[I]||'''';
			IF (I < TOTALDESTREZAS) THEN
				TMPWHEREDESTREZAS := TMPWHEREDESTREZAS||' OR ';
			END IF;
	END LOOP;
	IF (TOTALDESTREZAS >=1) THEN
		TMPWHEREDESTREZAS := TMPWHEREDESTREZAS||')';
	END IF;
	
	IF TOTALIDIOMAS IS NULL THEN 
		TOTALIDIOMAS := 0;
	ELSE
		TMPWHEREIDIOMAS := 'AND (';
	END IF;
	FOR I IN 1..TOTALIDIOMAS LOOP
			TMPWHEREIDIOMAS := TMPWHEREIDIOMAS||'IDP.CGIDM_CODIGO='''||CODIGOIDIOMAS[I]||'''';
			IF (I < TOTALIDIOMAS) THEN
				TMPWHEREIDIOMAS := TMPWHEREIDIOMAS||' OR ';
			END IF;
	END LOOP;
	IF (TOTALIDIOMAS >=1) THEN
		TMPWHEREIDIOMAS := TMPWHEREIDIOMAS||')';
	END IF;
	
	IF TOTALISLAS IS NULL THEN 
		TOTALISLAS := 0;
	ELSE
		TMPWHEREISLAS := 'AND (';
	END IF;
	FOR I IN 1..TOTALISLAS LOOP
			TMPWHEREISLAS := TMPWHEREISLAS||'ISL.CISLA_CODIGO='''||CODIGOISLAS[I]||'''';
			IF (I < TOTALISLAS) THEN
				TMPWHEREISLAS := TMPWHEREISLAS||' OR ';
			END IF;
	END LOOP;
	IF (TOTALISLAS >=1) THEN
		TMPWHEREISLAS := TMPWHEREISLAS||')';
	END IF;
	
	
	TMP_SELECT := 'SELECT DISTINCT
		USU.CUSU_CODIGO,
		PER.CRPER_CODIGO,
		PER.CRPER_NOMBRES,
		PER.CRPER_APELLIDO_PATERNO,
		PER.CRPER_APELLIDO_MATERNO,
		PER.CRPER_GENERO,
		PER.CRPER_NUM_DOC_IDENTIFIC,
		PER.CRPER_NUMERO_RESIDENCIA,
		NIV.CGNES_DESCRIPCION,
		ESP.CGESP_NOMBRE,
		TPR.CGTPR_DESCRIPCION,
		DES.CGDST_DESCRIPCION,
		IDI.CGIDM_NOMBRE,
		ISL.CISLA_NOMBRE,
		CGINF_CALIFICACION
	FROM (SELECT  DISTINCT PER1.CRPER_CODIGO, PER1.CCTN_CODIGO, PER1.CRPER_NOMBRES,PER1.CRPER_APELLIDO_PATERNO, PER1.CRPER_APELLIDO_MATERNO,PER1.CRPER_GENERO,PER1.CRPER_NUM_DOC_IDENTIFIC,PER1.CRPER_NUMERO_RESIDENCIA,PER1.CRPER_ESTADO FROM SII.CGG_RES_PERSONA PER1 
	INNER JOIN SII.CGG_USUARIO USU ON(USU.CRPER_CODIGO = PER1.CRPER_CODIGO)	
	INNER JOIN SII.CGG_SEC_USUARIO_ROL SUR ON(SUR.CUSU_CODIGO = USU.CUSU_CODIGO) WHERE SUR.CSROL_CODIGO = ''CSROL_GEAPL'') PER	
	LEFT JOIN SII.CGG_GEM_PERFIL_PROF	PPR ON(PPR.CRPER_CODIGO=PER.CRPER_CODIGO)
	LEFT JOIN SII.CGG_INSTITUCION_NIVEL INI ON(PPR.CGIEN_CODIGO=INI.CGIEN_CODIGO)
	LEFT JOIN SII.CGG_NIVEL_ESTUDIO NIV ON(INI.CGNES_CODIGO=NIV.CGNES_CODIGO)
	LEFT JOIN SII.CGG_ESPECIALIDAD ESP ON(PPR.CGESP_CODIGO=ESP.CGESP_CODIGO)
	LEFT JOIN SII.CGG_TITULO_PROFESIONAL TPR ON(PPR.CGTPR_CODIGO=TPR.CGTPR_CODIGO)
	LEFT JOIN SII.CGG_GEM_DESTREZA_PERSONA DSP ON(PER.CRPER_CODIGO = DSP.CRPER_CODIGO)
	LEFT JOIN SII.CGG_GEM_DESTREZA DES ON(DES.CGDST_CODIGO = DSP.CGDST_CODIGO)
	LEFT JOIN SII.CGG_GEM_IDIOMA_PERSONA IDP ON(PER.CRPER_CODIGO = IDP.CRPER_CODIGO)
	LEFT JOIN SII.CGG_GEM_IDIOMA IDI ON(IDI.CGIDM_CODIGO = IDP.CGIDM_CODIGO)
	LEFT JOIN SII.CGG_GEM_INFORMACION_LABORAL INF ON (PER.CRPER_CODIGO = INF.CRPER_CODIGO)
	--LEFT JOIN SII.CGG_CANTON CAN ON(CAN.CCTN_CODIGO = PER.CCTN_CODIGO)	
	INNER JOIN SII.CGG_USUARIO USU ON(USU.CRPER_CODIGO = PER.CRPER_CODIGO)
	INNER JOIN SII.CGG_ISLA ISL ON (ISL.CISLA_CODIGO = USU.CISLA_CODIGO)
	--INNER JOIN SII.CGG_SEC_USUARIO_ROL SUR ON(SUR.CUSU_CODIGO = USU.CUSU_CODIGO)	
	WHERE PER.CRPER_ESTADO = TRUE --AND PPR.CGPPR_PREDETERMINADO = TRUE 
	'||TMPWHERENIVELES||' '||TMPWHEREESPECIALIDADES||' '||TMPWHERETITULOS||' '||TMPWHEREDESTREZAS||'
	'||TMPWHEREIDIOMAS||' '||TMPWHEREISLAS||' AND 
	 SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(PER.CRPER_NOMBRES, '''')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO, '''')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO, '''')||'' ''||COALESCE(PER.CRPER_GENERO, 0)||'' ''||COALESCE(PER.CRPER_NUM_DOC_IDENTIFIC, '''')||'' ''||COALESCE(PER.CRPER_NUMERO_RESIDENCIA, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;

	OPEN TMP_REF FOR EXECUTE TMP_SELECT;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION sii.F_CGG_GEM_PERFIL_DINAMICO_COUNT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CODIGOS_NIVEL CRITERIO DE BUSQUEDA. CODIGOS DE NIVELES
* @param IN_CODIGOS_ESPECIALIDAD CRITERIO DE BUSQUEDA. CODIGOS DE ESPECIALIDADES
* @param IN_CODIGOS_TITULOS CRITERIO DE BUSQUEDA. CODIGOS DE TITULOS
* @param IN_CODIGOS_DESTREZAS CRITERIO DE BUSQUEDA. CODIGOS DE DESTREZAS
* @param IN_CODIGOS_IDIOMAS CRITERIO DE BUSQUEDA. CODIGOS DE IDIOMAS
* @param IN_CODIGOS_ISLAS CRITERIO DE BUSQUEDA. CODIGOS DE ISLAS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION sii.F_CGG_GEM_PERFIL_DINAMICO_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_CODIGOS_NIVEL TEXT,
IN IN_CODIGOS_ESPECIALIDAD TEXT,
IN IN_CODIGOS_TITULOS TEXT,
IN IN_CODIGOS_DESTREZAS TEXT,
IN IN_CODIGOS_IDIOMAS TEXT,
IN IN_CODIGOS_ISLAS TEXT
)RETURNS INT  AS
$$
DECLARE	
	TOTALNIVELES INT;
	TOTALESPECIALIDADES INT;
	TOTALTITULOS INT;
	TOTALDESTREZAS INT;
	TOTALIDIOMAS INT;
	TOTALISLAS INT;
	CODIGONIVEL TEXT[];
	CODIGOESPECIALIDAD TEXT[];
	CODIGOTITULOS TEXT[];
	CODIGODESTREZAS TEXT[];
	CODIGOIDIOMAS TEXT[];
	CODIGOISLAS TEXT[];
	TMPWHERENIVELES TEXT;
	TMPWHEREESPECIALIDADES TEXT;
	TMPWHERETITULOS TEXT;
	TMPWHEREDESTREZAS TEXT;
	TMPWHEREIDIOMAS TEXT;
	TMPWHEREISLAS TEXT;
	TMP_SELECT TEXT;
	TMP_ROWS INT4;
BEGIN	
	CODIGONIVEL := STRING_TO_ARRAY(IN_CODIGOS_NIVEL, ';');
	CODIGOESPECIALIDAD := STRING_TO_ARRAY(IN_CODIGOS_ESPECIALIDAD, ';');
	CODIGOTITULOS := STRING_TO_ARRAY(IN_CODIGOS_TITULOS, ';');
	CODIGODESTREZAS := STRING_TO_ARRAY(IN_CODIGOS_DESTREZAS, ';');
	CODIGOIDIOMAS := STRING_TO_ARRAY(IN_CODIGOS_IDIOMAS, ';');
	CODIGOISLAS := STRING_TO_ARRAY(IN_CODIGOS_ISLAS, ';');
	
	TOTALNIVELES := ARRAY_LENGTH(CODIGONIVEL, 1);
	TOTALESPECIALIDADES := ARRAY_LENGTH(CODIGOESPECIALIDAD, 1);	
	TOTALTITULOS := ARRAY_LENGTH(CODIGOTITULOS, 1);
	TOTALDESTREZAS := ARRAY_LENGTH(CODIGODESTREZAS, 1);
	TOTALIDIOMAS := ARRAY_LENGTH(CODIGOIDIOMAS, 1);
	TOTALISLAS := ARRAY_LENGTH(CODIGOISLAS, 1);
	
	TMPWHERENIVELES := '';
	TMPWHEREESPECIALIDADES := '';
	TMPWHERETITULOS := '';
	TMPWHEREDESTREZAS := '';
	TMPWHEREIDIOMAS := '';
	TMPWHEREISLAS := '';
	IF TOTALNIVELES IS NULL THEN 
		TOTALNIVELES := 0;
	ELSE
		TMPWHERENIVELES := 'AND (';
	END IF;
	FOR I IN 1..TOTALNIVELES LOOP
			TMPWHERENIVELES := TMPWHERENIVELES||'NIV.CGNES_CODIGO='''||CODIGONIVEL[I]||'''';
			IF (I < TOTALNIVELES) THEN
				TMPWHERENIVELES := TMPWHERENIVELES||' OR ';
			END IF;
	END LOOP;
	IF (TOTALNIVELES >=1) THEN
		TMPWHERENIVELES := TMPWHERENIVELES||')';
	END IF;
	
	IF TOTALESPECIALIDADES IS NULL THEN 
		TOTALESPECIALIDADES := 0;
	ELSE
		TMPWHEREESPECIALIDADES := 'AND (';
	END IF;
	FOR I IN 1..TOTALESPECIALIDADES LOOP
			TMPWHEREESPECIALIDADES := TMPWHEREESPECIALIDADES||'PPR.CGESP_CODIGO='''||CODIGOESPECIALIDAD[I]||'''';
			IF (I < TOTALESPECIALIDADES) THEN
				TMPWHEREESPECIALIDADES := TMPWHEREESPECIALIDADES||' OR ';
			END IF;
	END LOOP;
	IF (TOTALESPECIALIDADES >=1) THEN
		TMPWHEREESPECIALIDADES := TMPWHEREESPECIALIDADES||')';
	END IF;
	IF TOTALTITULOS IS NULL THEN 
		TOTALTITULOS := 0;
	ELSE
		TMPWHERETITULOS := 'AND (';
	END IF;
	FOR I IN 1..TOTALTITULOS LOOP
			TMPWHERETITULOS := TMPWHERETITULOS||'PPR.CGTPR_CODIGO='''||CODIGOTITULOS[I]||'''';
			IF (I < TOTALTITULOS) THEN
				TMPWHERETITULOS := TMPWHERETITULOS||' OR ';
			END IF;
	END LOOP;
	IF (TOTALTITULOS >=1) THEN
		TMPWHERETITULOS := TMPWHERETITULOS||')';
	END IF;
	
	IF TOTALDESTREZAS IS NULL THEN 
		TOTALDESTREZAS := 0;
	ELSE
		TMPWHEREDESTREZAS := 'AND (';
	END IF;
	FOR I IN 1..TOTALDESTREZAS LOOP
			TMPWHEREDESTREZAS := TMPWHEREDESTREZAS||'DSP.CGDST_CODIGO='''||CODIGODESTREZAS[I]||'''';
			IF (I < TOTALDESTREZAS) THEN
				TMPWHEREDESTREZAS := TMPWHEREDESTREZAS||' OR ';
			END IF;
	END LOOP;
	IF (TOTALDESTREZAS >=1) THEN
		TMPWHEREDESTREZAS := TMPWHEREDESTREZAS||')';
	END IF;
	
	IF TOTALIDIOMAS IS NULL THEN 
		TOTALIDIOMAS := 0;
	ELSE
		TMPWHEREIDIOMAS := 'AND (';
	END IF;
	FOR I IN 1..TOTALIDIOMAS LOOP
			TMPWHEREIDIOMAS := TMPWHEREIDIOMAS||'IDP.CGIDM_CODIGO='''||CODIGOIDIOMAS[I]||'''';
			IF (I < TOTALIDIOMAS) THEN
				TMPWHEREIDIOMAS := TMPWHEREIDIOMAS||' OR ';
			END IF;
	END LOOP;
	IF (TOTALIDIOMAS >=1) THEN
		TMPWHEREIDIOMAS := TMPWHEREIDIOMAS||')';
	END IF;
	
	IF TOTALISLAS IS NULL THEN 
		TOTALISLAS := 0;
	ELSE
		TMPWHEREISLAS := 'AND (';
	END IF;
	FOR I IN 1..TOTALISLAS LOOP
			TMPWHEREISLAS := TMPWHEREISLAS||'ISL.CISLA_CODIGO='''||CODIGOISLAS[I]||'''';
			IF (I < TOTALISLAS) THEN
				TMPWHEREISLAS := TMPWHEREISLAS||' OR ';
			END IF;
	END LOOP;
	IF (TOTALISLAS >=1) THEN
		TMPWHEREISLAS := TMPWHEREISLAS||')';
	END IF;
	
	
	TMP_SELECT := 'SELECT  COUNT(DISTINCT(PER.CRPER_CODIGO)) 		
	FROM (SELECT  DISTINCT PER1.CRPER_CODIGO, PER1.CCTN_CODIGO, PER1.CRPER_NOMBRES,PER1.CRPER_APELLIDO_PATERNO, PER1.CRPER_APELLIDO_MATERNO,PER1.CRPER_GENERO,PER1.CRPER_NUM_DOC_IDENTIFIC,PER1.CRPER_NUMERO_RESIDENCIA,PER1.CRPER_ESTADO FROM SII.CGG_RES_PERSONA PER1 
	INNER JOIN SII.CGG_USUARIO USU ON(USU.CRPER_CODIGO = PER1.CRPER_CODIGO)
	INNER JOIN SII.CGG_SEC_USUARIO_ROL SUR ON(SUR.CUSU_CODIGO = USU.CUSU_CODIGO) WHERE SUR.CSROL_CODIGO = ''CSROL_GEAPL'') PER	
	LEFT JOIN SII.CGG_GEM_PERFIL_PROF	PPR ON(PPR.CRPER_CODIGO=PER.CRPER_CODIGO)
	LEFT JOIN SII.CGG_INSTITUCION_NIVEL INI ON(PPR.CGIEN_CODIGO=INI.CGIEN_CODIGO)
	LEFT JOIN SII.CGG_NIVEL_ESTUDIO NIV ON(INI.CGNES_CODIGO=NIV.CGNES_CODIGO)
	LEFT JOIN SII.CGG_ESPECIALIDAD ESP ON(PPR.CGESP_CODIGO=ESP.CGESP_CODIGO)
	LEFT JOIN SII.CGG_TITULO_PROFESIONAL TPR ON(PPR.CGTPR_CODIGO=TPR.CGTPR_CODIGO)
	LEFT JOIN SII.CGG_GEM_DESTREZA_PERSONA DSP ON(PER.CRPER_CODIGO = DSP.CRPER_CODIGO)
	LEFT JOIN SII.CGG_GEM_IDIOMA_PERSONA IDP ON(PER.CRPER_CODIGO = IDP.CRPER_CODIGO)
	INNER JOIN SII.CGG_USUARIO USU ON(USU.CRPER_CODIGO = PER.CRPER_CODIGO)
	INNER JOIN SII.CGG_ISLA ISL ON (ISL.CISLA_CODIGO = USU.CISLA_CODIGO)
	--INNER JOIN SII.CGG_SEC_USUARIO_ROL SUR ON(SUR.CUSU_CODIGO = USU.CUSU_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE --AND PPR.CGPPR_PREDETERMINADO = TRUE 
	'||TMPWHERENIVELES||' '||TMPWHEREESPECIALIDADES||' '||TMPWHERETITULOS||' '||TMPWHEREDESTREZAS||'
	'||TMPWHEREIDIOMAS||' '||TMPWHEREISLAS||' 	
	AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(PER.CRPER_NOMBRES, '''')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO, '''')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO, '''')||'' ''||COALESCE(PER.CRPER_GENERO, 0)||'' ''||COALESCE(PER.CRPER_NUM_DOC_IDENTIFIC, '''')||'' ''||COALESCE(PER.CRPER_NUMERO_RESIDENCIA, '''')) = 1';
	EXECUTE TMP_SELECT INTO TMP_ROWS;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;