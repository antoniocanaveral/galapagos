/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA DENOMINACION
* @param IN_CKTPG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE PAGO
* @param IN_CKDNM_DENOMINACION NOMBRE DE LA DENOMINACION MONETARIA
* @param IN_CKDNM_OBSERVACION INFORMACION ADICIONAL
* @param IN_CKDNM_VALOR_MONETARIO VALOR MONETARIO QUE REPRESENTA LA DENOMINACION
* @param IN_CKDNM_ESTADO ESTADO DEL REGISTRO
* @param IN_CKDNM_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKDNM_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_INSERT(
IN IN_CKDNM_CODIGO SII.CGG_KDX_DENOMINACION.CKDNM_CODIGO%TYPE,
IN IN_CKTPG_CODIGO SII.CGG_KDX_DENOMINACION.CKTPG_CODIGO%TYPE,
IN IN_CKDNM_DENOMINACION SII.CGG_KDX_DENOMINACION.CKDNM_DENOMINACION%TYPE,
IN IN_CKDNM_OBSERVACION SII.CGG_KDX_DENOMINACION.CKDNM_OBSERVACION%TYPE,
IN IN_CKDNM_VALOR_MONETARIO SII.CGG_KDX_DENOMINACION.CKDNM_VALOR_MONETARIO%TYPE,
IN IN_CKDNM_ESTADO SII.CGG_KDX_DENOMINACION.CKDNM_ESTADO%TYPE,
IN IN_CKDNM_USUARIO_INSERT SII.CGG_KDX_DENOMINACION.CKDNM_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKDNM_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_DENOMINACION','CKDNM_CODIGO','CKDNM') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKDNM_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_DENOMINACION(
		CKDNM_CODIGO, 
		CKTPG_CODIGO, 
		CKDNM_DENOMINACION, 
		CKDNM_OBSERVACION, 
		CKDNM_VALOR_MONETARIO, 
		CKDNM_ESTADO, 
		CKDNM_FECHA_INSERT, 
		CKDNM_USUARIO_INSERT, 
		CKDNM_FECHA_UPDATE, 
		CKDNM_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKTPG_CODIGO, 
		IN_CKDNM_DENOMINACION, 
		IN_CKDNM_OBSERVACION, 
		IN_CKDNM_VALOR_MONETARIO, 
		IN_CKDNM_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKDNM_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKDNM_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKDNM_CODIGO, 
		CKTPG_CODIGO, 
		CKDNM_DENOMINACION, 
		CKDNM_OBSERVACION, 
		CKDNM_VALOR_MONETARIO, 
		CKDNM_ESTADO, 
		CKDNM_FECHA_INSERT, 
		CKDNM_USUARIO_INSERT, 
		CKDNM_FECHA_UPDATE, 
		CKDNM_USUARIO_UPDATE
	FROM SII.CGG_KDX_DENOMINACION
	WHERE CKDNM_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKDNM_CODIGO, 
		CKTPG_CODIGO, 
		CKDNM_DENOMINACION, 
		CKDNM_OBSERVACION, 
		CKDNM_VALOR_MONETARIO, 
		CKDNM_ESTADO, 
		CKDNM_FECHA_INSERT, 
		CKDNM_USUARIO_INSERT, 
		CKDNM_FECHA_UPDATE, 
		CKDNM_USUARIO_UPDATE
	FROM SII.CGG_KDX_DENOMINACION
	WHERE CKDNM_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKDNM_DENOMINACION, '''')||'' ''||COALESCE(CKDNM_OBSERVACION, '''')||'' ''||COALESCE(CKDNM_VALOR_MONETARIO, 0)||'' ''||COALESCE(CKDNM_ESTADO, FALSE)||'' ''||COALESCE(CKDNM_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKDNM_USUARIO_INSERT, '''')||'' ''||COALESCE(CKDNM_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKDNM_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_SELECT1
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_SELECT1(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKDNM_CODIGO, 
		CKTPG.CKTPG_CODIGO, 
		CKTPG.CKTPG_DESCRIPCION,
		CKDNM_DENOMINACION, 
		CKDNM_OBSERVACION, 
		CKDNM_VALOR_MONETARIO, 
		CKDNM_ESTADO	
	FROM SII.CGG_KDX_DENOMINACION CKDNM
	INNER JOIN SII.CGG_KDX_TIPO_PAGO CKTPG
	ON (CKDNM.CKTPG_CODIGO= CKTPG.CKTPG_CODIGO)
	WHERE CKDNM_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKDNM_DENOMINACION, '''')||'' ''||COALESCE(CKDNM_OBSERVACION, '''')||'' ''||COALESCE(CKDNM_VALOR_MONETARIO, 0)||'' ''||COALESCE(CKDNM_ESTADO, FALSE)||'' ''||COALESCE(CKDNM_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKDNM_USUARIO_INSERT, '''')||'' ''||COALESCE(CKDNM_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKDNM_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_DENOMINACION.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_DENOMINACION
	WHERE CKDNM_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_DENOMINACION
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_DENOMINACION
	WHERE CKDNM_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKDNM_DENOMINACION, '''')||' '||COALESCE(CKDNM_OBSERVACION, '''')||' '||COALESCE(CKDNM_VALOR_MONETARIO, 0)||' '||COALESCE(CKDNM_ESTADO, FALSE)||' '||COALESCE(CKDNM_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKDNM_USUARIO_INSERT, '''')||' '||COALESCE(CKDNM_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKDNM_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_COUNT1
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_DENOMINACION
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_COUNT1(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_DENOMINACION CKDNM
	INNER JOIN SII.CGG_KDX_TIPO_PAGO CKTPG
	ON (CKDNM.CKTPG_CODIGO= CKTPG.CKTPG_CODIGO)
	WHERE CKDNM_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKDNM_DENOMINACION, '''')||' '||COALESCE(CKDNM_OBSERVACION, '''')||' '||COALESCE(CKDNM_VALOR_MONETARIO, 0)||' '||COALESCE(CKDNM_ESTADO, FALSE)||' '||COALESCE(CKDNM_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKDNM_USUARIO_INSERT, '''')||' '||COALESCE(CKDNM_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKDNM_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_DENOMINACION.
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA DENOMINACION
* @param IN_CKTPG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE PAGO
* @param IN_CKDNM_DENOMINACION NOMBRE DE LA DENOMINACION MONETARIA
* @param IN_CKDNM_OBSERVACION INFORMACION ADICIONAL
* @param IN_CKDNM_VALOR_MONETARIO VALOR MONETARIO QUE REPRESENTA LA DENOMINACION
* @param IN_CKDNM_ESTADO ESTADO DEL REGISTRO
* @param IN_CKDNM_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_UPDATE(
IN IN_CKDNM_CODIGO SII.CGG_KDX_DENOMINACION.CKDNM_CODIGO%TYPE,
IN IN_CKTPG_CODIGO SII.CGG_KDX_DENOMINACION.CKTPG_CODIGO%TYPE,
IN IN_CKDNM_DENOMINACION SII.CGG_KDX_DENOMINACION.CKDNM_DENOMINACION%TYPE,
IN IN_CKDNM_OBSERVACION SII.CGG_KDX_DENOMINACION.CKDNM_OBSERVACION%TYPE,
IN IN_CKDNM_VALOR_MONETARIO SII.CGG_KDX_DENOMINACION.CKDNM_VALOR_MONETARIO%TYPE,
IN IN_CKDNM_ESTADO SII.CGG_KDX_DENOMINACION.CKDNM_ESTADO%TYPE,
IN IN_CKDNM_USUARIO_UPDATE SII.CGG_KDX_DENOMINACION.CKDNM_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_DENOMINACION SET
		CKTPG_CODIGO = IN_CKTPG_CODIGO, 
		CKDNM_DENOMINACION = IN_CKDNM_DENOMINACION, 
		CKDNM_OBSERVACION = IN_CKDNM_OBSERVACION, 
		CKDNM_VALOR_MONETARIO = IN_CKDNM_VALOR_MONETARIO, 
		CKDNM_ESTADO = IN_CKDNM_ESTADO, 
		CKDNM_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKDNM_USUARIO_UPDATE = IN_CKDNM_USUARIO_UPDATE
	WHERE
		CKDNM_CODIGO = IN_CKDNM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA DENOMINACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_SELECT(
IN IN_CKDNM_CODIGO SII.CGG_KDX_DENOMINACION.CKDNM_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKDNM_CODIGO, 
		CKTPG_CODIGO, 
		CKDNM_DENOMINACION, 
		CKDNM_OBSERVACION, 
		CKDNM_VALOR_MONETARIO, 
		CKDNM_ESTADO, 
		CKDNM_FECHA_INSERT, 
		CKDNM_USUARIO_INSERT, 
		CKDNM_FECHA_UPDATE, 
		CKDNM_USUARIO_UPDATE
	FROM SII.CGG_KDX_DENOMINACION
	WHERE CKDNM_ESTADO = TRUE AND 
		CKDNM_CODIGO = IN_CKDNM_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA DENOMINACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_DELETE(
IN IN_CKDNM_CODIGO SII.CGG_KDX_DENOMINACION.CKDNM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_DENOMINACION
	WHERE
		CKDNM_CODIGO = IN_CKDNM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA DENOMINACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_DELETE_SOFT(
IN IN_CKDNM_CODIGO SII.CGG_KDX_DENOMINACION.CKDNM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_DENOMINACION SET
		CKDNM_ESTADO = FALSE
	WHERE
		CKDNM_CODIGO = IN_CKDNM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_S_CGG_KDX_TIPO_PAGO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_DENOMINACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_TIPO_PAGO.
* @param IN_CKTPG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE PAGO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_S_CGG_KDX_TIPO_PAGO(
IN IN_CKTPG_CODIGO SII.CGG_KDX_DENOMINACION.CKTPG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKDNM_CODIGO, 
		CKTPG_CODIGO, 
		CKDNM_DENOMINACION, 
		CKDNM_OBSERVACION, 
		CKDNM_VALOR_MONETARIO, 
		CKDNM_ESTADO, 
		CKDNM_FECHA_INSERT, 
		CKDNM_USUARIO_INSERT, 
		CKDNM_FECHA_UPDATE, 
		CKDNM_USUARIO_UPDATE
	FROM SII.CGG_KDX_DENOMINACION
	WHERE CKDNM_ESTADO = TRUE AND 
		CKTPG_CODIGO = IN_CKTPG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_D_CGG_KDX_TIPO_PAGO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_DENOMINACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_TIPO_PAGO.
* @param IN_CKTPG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE PAGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_D_CGG_KDX_TIPO_PAGO(
IN IN_CKTPG_CODIGO SII.CGG_KDX_DENOMINACION.CKTPG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_DENOMINACION
	WHERE
		CKTPG_CODIGO = IN_CKTPG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_DENOMINACION_D_CGG_KDX_TIPO_PAGO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_DENOMINACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_TIPO_PAGO.
* @param IN_CKTPG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE PAGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_DENOMINACION_DS_CGG_KDX_TIPO_PAGO(
IN IN_CKTPG_CODIGO SII.CGG_KDX_DENOMINACION.CKTPG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_DENOMINACION SET
		ckdnm_estado = false
	WHERE
		CKTPG_CODIGO = IN_CKTPG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

