/**
* FUNCION SII.F_CGG_TITULO_PROFESIONAL_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_TITULO_PROFESIONAL
* @param IN_CGTPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @param IN_CGTPR_DESCRIPCION DESCRIPCION DEL TITULO PROFESIONAL
* @param IN_CGTPR_ESTADO ESTADO DEL REGISTRO
* @param IN_CGTPR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGTPR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @param IN_CGNES_CODIGO CODIGO DEL NIVEL DE EDUCACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_PROFESIONAL_INSERT(
IN IN_CGTPR_CODIGO SII.CGG_TITULO_PROFESIONAL.CGTPR_CODIGO%TYPE, 
IN IN_CGTPR_DESCRIPCION SII.CGG_TITULO_PROFESIONAL.CGTPR_DESCRIPCION%TYPE, 
IN IN_CGTPR_ESTADO SII.CGG_TITULO_PROFESIONAL.CGTPR_ESTADO%TYPE, 
IN IN_CGTPR_USUARIO_INSERT SII.CGG_TITULO_PROFESIONAL.CGTPR_USUARIO_INSERT%TYPE, 
IN IN_CGTPR_USUARIO_UPDATE SII.CGG_TITULO_PROFESIONAL.CGTPR_USUARIO_UPDATE%TYPE,
IN IN_CGNES_CODIGO SII.CGG_TITULO_PROFESIONAL.CGNES_CODIGO%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGTPR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_TITULO_PROFESIONAL','CGTPR_CODIGO','CGTPR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGTPR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_TITULO_PROFESIONAL(
		CGTPR_CODIGO, 
		CGNES_CODIGO,
		CGTPR_DESCRIPCION, 
		CGTPR_ESTADO, 
		CGTPR_FECHA_INSERT, 
		CGTPR_USUARIO_INSERT, 
		CGTPR_FECHA_UPDATE, 
		CGTPR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGNES_CODIGO,
		IN_CGTPR_DESCRIPCION, 
		IN_CGTPR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGTPR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGTPR_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TITULO_PROFESIONAL_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_PROFESIONAL_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGTPR_CODIGO, 
		CGTPR_DESCRIPCION, 
		CGTPR_ESTADO, 
		CGTPR_FECHA_INSERT, 
		CGTPR_USUARIO_INSERT, 
		CGTPR_FECHA_UPDATE, 
		CGTPR_USUARIO_UPDATE
	FROM SII.CGG_TITULO_PROFESIONAL
	WHERE CGTPR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TITULO_PROFESIONAL_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_PROFESIONAL_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		TPR.CGTPR_CODIGO, 
		TPR.CGTPR_DESCRIPCION, 
		TPR.CGTPR_ESTADO, 
		NES.CGNES_CODIGO,
		NES.CGNES_DESCRIPCION,
		TPR.CGTPR_FECHA_INSERT, 
		TPR.CGTPR_USUARIO_INSERT, 
		TPR.CGTPR_FECHA_UPDATE, 
		TPR.CGTPR_USUARIO_UPDATE
	FROM SII.CGG_TITULO_PROFESIONAL TPR INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(TPR.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE TPR.CGTPR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(NES.CGNES_DESCRIPCION, '''')||'' ''||COALESCE(TPR.CGTPR_DESCRIPCION, '''')||'' ''||COALESCE(TPR.CGTPR_ESTADO, FALSE)||'' ''||COALESCE(TPR.CGTPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(TPR.CGTPR_USUARIO_INSERT, '''')||'' ''||COALESCE(TPR.CGTPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(TPR.CGTPR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TITULO_PROFESIONAL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_PROFESIONAL_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_TITULO_PROFESIONAL
	WHERE CGTPR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TITULO_PROFESIONAL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_PROFESIONAL_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_TITULO_PROFESIONAL TPR INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(TPR.CGNES_CODIGO=NES.CGNES_CODIGO)	
	WHERE TPR.CGTPR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(NES.CGNES_DESCRIPCION, '''')||' '||COALESCE(TPR.CGTPR_DESCRIPCION, '''')||' '||COALESCE(TPR.CGTPR_ESTADO, FALSE)||' '||COALESCE(TPR.CGTPR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(TPR.CGTPR_USUARIO_INSERT, '''')||' '||COALESCE(TPR.CGTPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(TPR.CGTPR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TITULO_PROFESIONAL_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_TITULO_PROFESIONAL
* @param IN_CGTPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @param IN_CGTPR_DESCRIPCION DESCRIPCION DEL TITULO PROFESIONAL
* @param IN_CGTPR_ESTADO ESTADO DEL REGISTRO
* @param IN_CGTPR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO, CODIGO DEL NIVEL DE ESTUDIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_PROFESIONAL_UPDATE(
IN IN_CGTPR_CODIGO SII.CGG_TITULO_PROFESIONAL.CGTPR_CODIGO%TYPE, 
IN IN_CGTPR_DESCRIPCION SII.CGG_TITULO_PROFESIONAL.CGTPR_DESCRIPCION%TYPE, 
IN IN_CGTPR_ESTADO SII.CGG_TITULO_PROFESIONAL.CGTPR_ESTADO%TYPE, 
IN IN_CGTPR_USUARIO_UPDATE SII.CGG_TITULO_PROFESIONAL.CGTPR_USUARIO_UPDATE%TYPE,
IN IN_CGNES_CODIGO SII.CGG_TITULO_PROFESIONAL.CGNES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TITULO_PROFESIONAL SET
		CGNES_CODIGO = IN_CGNES_CODIGO, 
		CGTPR_DESCRIPCION = IN_CGTPR_DESCRIPCION, 
		CGTPR_ESTADO = IN_CGTPR_ESTADO, 
		CGTPR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGTPR_USUARIO_UPDATE = IN_CGTPR_USUARIO_UPDATE
	WHERE
		CGTPR_CODIGO = IN_CGTPR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TITULO_PROFESIONAL_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_TITULO_PROFESIONAL
* @param IN_CGTPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_PROFESIONAL_SELECT(
IN IN_CGTPR_CODIGO SII.CGG_TITULO_PROFESIONAL.CGTPR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGTPR_CODIGO, 
		CGTPR_DESCRIPCION, 
		CGTPR_ESTADO, 
		CGTPR_FECHA_INSERT, 
		CGTPR_USUARIO_INSERT, 
		CGTPR_FECHA_UPDATE, 
		CGTPR_USUARIO_UPDATE
	FROM SII.CGG_TITULO_PROFESIONAL
	WHERE CGTPR_ESTADO = TRUE AND 
		CGTPR_CODIGO = IN_CGTPR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TITULO_PROFESIONAL_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_TITULO_PROFESIONAL
* @param IN_CGTPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_PROFESIONAL_DELETE(
IN IN_CGTPR_CODIGO SII.CGG_TITULO_PROFESIONAL.CGTPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TITULO_PROFESIONAL
	WHERE
		CGTPR_CODIGO = IN_CGTPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TITULO_PROFESIONAL_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_TITULO_PROFESIONAL
* @param IN_CGTPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TITULO PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_PROFESIONAL_DELETE_SOFT(
IN IN_CGTPR_CODIGO SII.CGG_TITULO_PROFESIONAL.CGTPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TITULO_PROFESIONAL SET
		CGTPR_ESTADO = FALSE
	WHERE
		CGTPR_CODIGO = IN_CGTPR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION sii.F_CGG_TITULO_BYID_NIVELESTUDIO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CGNES_CODIGO CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION sii.F_CGG_TITULO_BYID_NIVELESTUDIO(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		TPR.CGTPR_CODIGO, 
		TPR.CGTPR_DESCRIPCION, 
		TPR.CGTPR_ESTADO, 
		TPR.CGNES_CODIGO,
		NES.CGNES_DESCRIPCION,
		TPR.CGTPR_FECHA_INSERT, 
		TPR.CGTPR_USUARIO_INSERT, 
		TPR.CGTPR_FECHA_UPDATE, 
		TPR.CGTPR_USUARIO_UPDATE
	FROM SII.CGG_TITULO_PROFESIONAL TPR INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(TPR.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE TPR.CGTPR_ESTADO = TRUE AND TPR.CGNES_CODIGO='''||IN_CGNES_CODIGO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(NES.CGNES_DESCRIPCION, '''')||'' ''||COALESCE(TPR.CGTPR_DESCRIPCION, '''')||'' ''||COALESCE(TPR.CGTPR_ESTADO, FALSE)||'' ''||COALESCE(TPR.CGTPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(TPR.CGTPR_USUARIO_INSERT, '''')||'' ''||COALESCE(TPR.CGTPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(TPR.CGTPR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TITULO_COUNT_BYID_NIVEL
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CGNES_CODIGO CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_COUNT_BYID_NIVEL(
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_TITULO_PROFESIONAL TPR INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(TPR.CGNES_CODIGO=NES.CGNES_CODIGO)	
	WHERE TPR.CGTPR_ESTADO = TRUE AND TPR.CGNES_CODIGO=IN_CGNES_CODIGO AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(NES.CGNES_DESCRIPCION, '''')||' '||COALESCE(TPR.CGTPR_DESCRIPCION, '''')||' '||COALESCE(TPR.CGTPR_ESTADO, FALSE)||' '||COALESCE(TPR.CGTPR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(TPR.CGTPR_USUARIO_INSERT, '''')||' '||COALESCE(TPR.CGTPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(TPR.CGTPR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION sii.F_CGG_TITULO_BYNIVELES
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CGNES_CODIGO CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION sii.F_CGG_TITULO_BYNIVELES(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TOTALCADENA INT;
	CODIGONIVEL TEXT[];
	TMPWHERE TEXT;
BEGIN
	CODIGONIVEL := STRING_TO_ARRAY(IN_CGNES_CODIGO, ';');
	TOTALCADENA := ARRAY_LENGTH(CODIGONIVEL, 1);	
	TMPWHERE:='';
	FOR I IN 1..TOTALCADENA LOOP
			TMPWHERE := TMPWHERE||'TPR.CGNES_CODIGO='''||CODIGONIVEL[I]||'''';
			IF (I < TOTALCADENA) THEN
				TMPWHERE := TMPWHERE||' OR ';
			END IF;
	END LOOP;	
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		TPR.CGTPR_CODIGO, 
		TPR.CGTPR_DESCRIPCION, 
		TPR.CGTPR_ESTADO, 
		TPR.CGNES_CODIGO,
		NES.CGNES_DESCRIPCION,
		TPR.CGTPR_FECHA_INSERT, 
		TPR.CGTPR_USUARIO_INSERT, 
		TPR.CGTPR_FECHA_UPDATE, 
		TPR.CGTPR_USUARIO_UPDATE
	FROM SII.CGG_TITULO_PROFESIONAL TPR INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(TPR.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE TPR.CGTPR_ESTADO = TRUE AND '||TMPWHERE||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(NES.CGNES_DESCRIPCION, '''')||'' ''||COALESCE(TPR.CGTPR_DESCRIPCION, '''')||'' ''||COALESCE(TPR.CGTPR_ESTADO, FALSE)||'' ''||COALESCE(TPR.CGTPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(TPR.CGTPR_USUARIO_INSERT, '''')||'' ''||COALESCE(TPR.CGTPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(TPR.CGTPR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;




/**
* FUNCION SII.F_CGG_TITULO_COUNT_BYNIVELES
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TITULO_PROFESIONAL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE NIVEL DE ESTUDIO.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TITULO_COUNT_BYNIVELES(
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO TEXT
)RETURNS INT AS
$$
DECLARE
	TMP_ROWS INT2;
	TOTALCADENA INT;
	CODIGONIVEL TEXT[];
	TMPWHERE TEXT;
	TMP TEXT;
BEGIN
	CODIGONIVEL := STRING_TO_ARRAY(IN_CGNES_CODIGO, ';');
	TOTALCADENA := ARRAY_LENGTH(CODIGONIVEL, 1);	
	TMPWHERE:='';
	FOR I IN 1..TOTALCADENA LOOP
			TMPWHERE := TMPWHERE||'TPR.CGNES_CODIGO='''||CODIGONIVEL[I]||'''';
			IF (I < TOTALCADENA) THEN
				TMPWHERE := TMPWHERE||' OR ';
			END IF;
	END LOOP;
	TMP='SELECT COUNT(*)
	FROM SII.CGG_TITULO_PROFESIONAL TPR INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(TPR.CGNES_CODIGO=NES.CGNES_CODIGO)	
	WHERE TPR.CGTPR_ESTADO = TRUE AND '||TMPWHERE||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(NES.CGNES_DESCRIPCION, '''')||'' ''||COALESCE(TPR.CGTPR_DESCRIPCION, '''')||'' ''||COALESCE(TPR.CGTPR_ESTADO, FALSE)||'' ''||COALESCE(TPR.CGTPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(TPR.CGTPR_USUARIO_INSERT, '''')||'' ''||COALESCE(TPR.CGTPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(TPR.CGTPR_USUARIO_UPDATE, '''')) = 1;';
	EXECUTE TMP INTO TMP_ROWS;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
