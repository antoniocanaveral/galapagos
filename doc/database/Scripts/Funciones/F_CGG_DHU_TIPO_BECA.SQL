/**
* FUNCION SII.F_CGG_DHU_TIPO_BECA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_BECA.
* @param IN_CDTBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE BECA
* @param IN_CDTBC_NOMBRE NOMBRE DE LA BECA
* @param IN_CDTBC_ABREVIATURA ABREVIATURA DE LA BECA
* @param IN_CDTBC_ESTADO_BECA ESTADO DE LA BECA
0 - ELIMINADO
1 - ACTIVO
2 - NO VIGENTE
* @param IN_CDTBC_ESTADO ESTADO DEL REGISTRO 
* @param IN_CDTBC_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDTBC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_BECA_INSERT(
IN IN_CDTBC_CODIGO SII.CGG_DHU_TIPO_BECA.CDTBC_CODIGO%TYPE, 
IN IN_CDTBC_NOMBRE SII.CGG_DHU_TIPO_BECA.CDTBC_NOMBRE%TYPE, 
IN IN_CDTBC_ABREVIATURA SII.CGG_DHU_TIPO_BECA.CDTBC_ABREVIATURA%TYPE, 
IN IN_CDTBC_ESTADO_BECA SII.CGG_DHU_TIPO_BECA.CDTBC_ESTADO_BECA%TYPE, 
IN IN_CDTBC_ESTADO SII.CGG_DHU_TIPO_BECA.CDTBC_ESTADO%TYPE, 
IN IN_CDTBC_USUARIO_INSERT SII.CGG_DHU_TIPO_BECA.CDTBC_USUARIO_INSERT%TYPE, 
IN IN_CDTBC_USUARIO_UPDATE SII.CGG_DHU_TIPO_BECA.CDTBC_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDTBC_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_TIPO_BECA','CDTBC_CODIGO','CDTBC') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDTBC_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_TIPO_BECA(
		CDTBC_CODIGO, 
		CDTBC_NOMBRE, 
		CDTBC_ABREVIATURA, 
		CDTBC_ESTADO_BECA, 
		CDTBC_ESTADO, 
		CDTBC_FECHA_INSERT, 
		CDTBC_USUARIO_INSERT, 
		CDTBC_FECHA_UPDATE, 
		CDTBC_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CDTBC_NOMBRE, 
		IN_CDTBC_ABREVIATURA, 
		IN_CDTBC_ESTADO_BECA, 
		IN_CDTBC_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDTBC_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDTBC_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_BECA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_BECA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_BECA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDTBC_CODIGO, 
		CDTBC_NOMBRE, 
		CDTBC_ABREVIATURA, 
		CDTBC_ESTADO_BECA, 
		CDTBC_ESTADO, 
		CDTBC_FECHA_INSERT, 
		CDTBC_USUARIO_INSERT, 
		CDTBC_FECHA_UPDATE, 
		CDTBC_USUARIO_UPDATE
	FROM SII.CGG_DHU_TIPO_BECA
	WHERE CDTBC_ESTADO = TRUE AND CDTBC_ESTADO_BECA=0;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_BECA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_BECA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_BECA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CDTBC_CODIGO, 
		CDTBC_NOMBRE, 
		CDTBC_ABREVIATURA, 
		CDTBC_ESTADO_BECA, 
		CDTBC_ESTADO, 
		CDTBC_FECHA_INSERT, 
		CDTBC_USUARIO_INSERT, 
		CDTBC_FECHA_UPDATE, 
		CDTBC_USUARIO_UPDATE
	FROM SII.CGG_DHU_TIPO_BECA
	WHERE CDTBC_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CDTBC_NOMBRE, '''')||'' ''||COALESCE(CDTBC_ABREVIATURA, '''')||'' ''||COALESCE(CDTBC_ESTADO_BECA, 0)||'' ''||COALESCE(CDTBC_ESTADO, FALSE)||'' ''||COALESCE(CDTBC_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CDTBC_USUARIO_INSERT, '''')||'' ''||COALESCE(CDTBC_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CDTBC_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_BECA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_BECA.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_BECA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_TIPO_BECA
	WHERE CDTBC_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_BECA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_BECA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_BECA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_TIPO_BECA
	WHERE CDTBC_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CDTBC_NOMBRE, '''')||' '||COALESCE(CDTBC_ABREVIATURA, '''')||' '||COALESCE(CDTBC_ESTADO_BECA, 0)||' '||COALESCE(CDTBC_ESTADO, FALSE)||' '||COALESCE(CDTBC_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CDTBC_USUARIO_INSERT, '''')||' '||COALESCE(CDTBC_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CDTBC_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_BECA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_TIPO_BECA
* @param IN_CDTBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE BECA
* @param IN_CDTBC_NOMBRE NOMBRE DE LA BECA
* @param IN_CDTBC_ABREVIATURA ABREVIATURA DE LA BECA
* @param IN_CDTBC_ESTADO_BECA ESTADO DE LA BECA
0 - ELIMINADO
1 - ACTIVO
2 - NO VIGENTE

* @param IN_CDTBC_ESTADO ESTADO DEL REGISTRO 

* @param IN_CDTBC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_BECA_UPDATE(
IN IN_CDTBC_CODIGO SII.CGG_DHU_TIPO_BECA.CDTBC_CODIGO%TYPE, 
IN IN_CDTBC_NOMBRE SII.CGG_DHU_TIPO_BECA.CDTBC_NOMBRE%TYPE, 
IN IN_CDTBC_ABREVIATURA SII.CGG_DHU_TIPO_BECA.CDTBC_ABREVIATURA%TYPE, 
IN IN_CDTBC_ESTADO_BECA SII.CGG_DHU_TIPO_BECA.CDTBC_ESTADO_BECA%TYPE, 
IN IN_CDTBC_ESTADO SII.CGG_DHU_TIPO_BECA.CDTBC_ESTADO%TYPE, 
IN IN_CDTBC_USUARIO_UPDATE SII.CGG_DHU_TIPO_BECA.CDTBC_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_TIPO_BECA SET
		CDTBC_NOMBRE = IN_CDTBC_NOMBRE, 
		CDTBC_ABREVIATURA = IN_CDTBC_ABREVIATURA, 
		CDTBC_ESTADO_BECA = IN_CDTBC_ESTADO_BECA, 
		CDTBC_ESTADO = IN_CDTBC_ESTADO, 
		CDTBC_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDTBC_USUARIO_UPDATE = IN_CDTBC_USUARIO_UPDATE
	WHERE
		CDTBC_CODIGO = IN_CDTBC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_BECA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_BECA.
* @param IN_CDTBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE BECA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_BECA_SELECT(
IN IN_CDTBC_CODIGO SII.CGG_DHU_TIPO_BECA.CDTBC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDTBC_CODIGO, 
		CDTBC_NOMBRE, 
		CDTBC_ABREVIATURA, 
		CDTBC_ESTADO_BECA, 
		CDTBC_ESTADO, 
		CDTBC_FECHA_INSERT, 
		CDTBC_USUARIO_INSERT, 
		CDTBC_FECHA_UPDATE, 
		CDTBC_USUARIO_UPDATE
	FROM SII.CGG_DHU_TIPO_BECA
	WHERE CDTBC_ESTADO = TRUE AND 
		CDTBC_CODIGO = IN_CDTBC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_BECA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_BECA.
* @param IN_CDTBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_BECA_DELETE(
IN IN_CDTBC_CODIGO SII.CGG_DHU_TIPO_BECA.CDTBC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_TIPO_BECA
	WHERE
		CDTBC_CODIGO = IN_CDTBC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_BECA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_BECA.
* @param IN_CDTBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_BECA_DELETE_SOFT(
IN IN_CDTBC_CODIGO SII.CGG_DHU_TIPO_BECA.CDTBC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_TIPO_BECA SET
		CDTBC_ESTADO = FALSE
	WHERE
		CDTBC_CODIGO = IN_CDTBC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

