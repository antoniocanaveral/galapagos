/**
* FUNCION SII.F_CGG_RES_CARNET_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_CARNET
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESIDENCIA
* @param IN_CRCPJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CUENTA BANCARIA EN LA QUE SE REALIZO EL DEPOSITO
* @param IN_CRCNT_SERIE CODIGO IDENTIFICATIVO DE SEGUIMIENTO DE ESPECIE
* @param IN_CRCNT_MOTIVO MOTIVO POR LA QUE SE EMITIO UNA NUEVA ESPECIE.
0 - NUEVO
1 - RENOVACION
2 - DETERIORO
3 - PERDIDA
* @param IN_CRCNT_FECHA_EMISION FECHA DE EMISION DEL CARNET
* @param IN_CRCNT_FECHA_APROBACION FECHA DE APROBACION DE LA RESIDENCIA O RENOVACION
* @param IN_CRCNT_FECHA_CADUCIDAD FECHA DE CADUCIDAD DE LA ESPECIE
* @param IN_CRCNT_FECHA_DEPOSITO FECHA DE REALIZACION DE DEPOSITO POR EL VALOR DE LA ESPECIE
* @param IN_CRCNT_CARNET_IMPRESO SI EL CARNET YA FUE IMPRESO
* @param IN_CRCNT_NUMERO_COMP NUMERO O SERIE DEL COMPROBANTE DE DEPOSITO
* @param IN_CRCNT_VALOR VALOR DEPOSITADO
* @param IN_CRCNT_OBSERVACION INFORMACION ADICIONAL
* @param IN_CRCNT_ESTADO ESTADO DEL CARNET 
ACTIVO
INACTIVO
* @param IN_CRCNT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRCNT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_INSERT(
IN IN_CRCNT_CODIGO SII.CGG_RES_CARNET.CRCNT_CODIGO%TYPE,
IN IN_CRCOM_CODIGO SII.CGG_RES_CARNET.CRCOM_CODIGO%TYPE,
IN IN_CRADJ_CODIGO SII.CGG_RES_CARNET.CRADJ_CODIGO%TYPE,
IN IN_CRRSD_CODIGO SII.CGG_RES_CARNET.CRRSD_CODIGO%TYPE,
IN IN_CRCPJ_CODIGO SII.CGG_RES_CARNET.CRCPJ_CODIGO%TYPE,
IN IN_CRCNT_SERIE SII.CGG_RES_CARNET.CRCNT_SERIE%TYPE,
IN IN_CRCNT_MOTIVO SII.CGG_RES_CARNET.CRCNT_MOTIVO%TYPE,
IN IN_CRCNT_FECHA_EMISION SII.CGG_RES_CARNET.CRCNT_FECHA_EMISION%TYPE,
IN IN_CRCNT_FECHA_APROBACION SII.CGG_RES_CARNET.CRCNT_FECHA_APROBACION%TYPE,
IN IN_CRCNT_FECHA_CADUCIDAD SII.CGG_RES_CARNET.CRCNT_FECHA_CADUCIDAD%TYPE,
IN IN_CRCNT_FECHA_DEPOSITO SII.CGG_RES_CARNET.CRCNT_FECHA_DEPOSITO%TYPE,
IN IN_CRCNT_CARNET_IMPRESO SII.CGG_RES_CARNET.CRCNT_CARNET_IMPRESO%TYPE,
IN IN_CRCNT_NUMERO_COMP SII.CGG_RES_CARNET.CRCNT_NUMERO_COMP%TYPE,
IN IN_CRCNT_VALOR SII.CGG_RES_CARNET.CRCNT_VALOR%TYPE,
IN IN_CRCNT_OBSERVACION SII.CGG_RES_CARNET.CRCNT_OBSERVACION%TYPE,
IN IN_CRCNT_ESTADO SII.CGG_RES_CARNET.CRCNT_ESTADO%TYPE,
IN IN_CRCNT_USUARIO_INSERT SII.CGG_RES_CARNET.CRCNT_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRCNT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_CARNET','CRCNT_CODIGO','CRCNT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRCNT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_CARNET(
		CRCNT_CODIGO, 
		CRCOM_CODIGO, 
		CRADJ_CODIGO, 
		CRRSD_CODIGO, 
		CRCPJ_CODIGO, 
		CRCNT_SERIE, 
		CRCNT_MOTIVO, 
		CRCNT_FECHA_EMISION, 
		CRCNT_FECHA_APROBACION, 
		CRCNT_FECHA_CADUCIDAD, 
		CRCNT_FECHA_DEPOSITO, 
		CRCNT_CARNET_IMPRESO, 
		CRCNT_NUMERO_COMP, 
		CRCNT_VALOR, 
		CRCNT_OBSERVACION, 
		CRCNT_ESTADO, 
		CRCNT_FECHA_INSERT, 
		CRCNT_USUARIO_INSERT, 
		CRCNT_FECHA_UPDATE, 
		CRCNT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRCOM_CODIGO, 
		IN_CRADJ_CODIGO, 
		IN_CRRSD_CODIGO, 
		IN_CRCPJ_CODIGO, 
		IN_CRCNT_SERIE, 
		IN_CRCNT_MOTIVO, 
		IN_CRCNT_FECHA_EMISION, 
		IN_CRCNT_FECHA_APROBACION, 
		IN_CRCNT_FECHA_CADUCIDAD, 
		IN_CRCNT_FECHA_DEPOSITO, 
		IN_CRCNT_CARNET_IMPRESO, 
		IN_CRCNT_NUMERO_COMP, 
		IN_CRCNT_VALOR, 
		IN_CRCNT_OBSERVACION, 
		IN_CRCNT_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRCNT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRCNT_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_CARNET
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCNT_CODIGO, 
		CRCOM_CODIGO, 
		CRADJ_CODIGO, 
		CRRSD_CODIGO, 
		CRCPJ_CODIGO, 
		CRCNT_SERIE, 
		CRCNT_MOTIVO, 
		CRCNT_FECHA_EMISION, 
		CRCNT_FECHA_APROBACION, 
		CRCNT_FECHA_CADUCIDAD, 
		CRCNT_FECHA_DEPOSITO, 
		CRCNT_CARNET_IMPRESO, 
		CRCNT_NUMERO_COMP, 
		CRCNT_VALOR, 
		CRCNT_OBSERVACION, 
		CRCNT_ESTADO, 
		CRCNT_FECHA_INSERT, 
		CRCNT_USUARIO_INSERT, 
		CRCNT_FECHA_UPDATE, 
		CRCNT_USUARIO_UPDATE
	FROM SII.CGG_RES_CARNET
	WHERE CRCNT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_CARNET
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRRSD_CODIGO IDENTIFICATIVO DE RESIDENCIA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CRRSD_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRN.CRCNT_CODIGO, 
		CRN.CRCOM_CODIGO, 
		CRN.CRADJ_CODIGO, 
		CRN.CRRSD_CODIGO, 
		CRN.CRCPJ_CODIGO, 
		CCPJ.CRPJR_RAZON_SOCIAL CUENTA,
		CRN.CRCNT_SERIE, 
		CRN.CRCNT_MOTIVO, 
		CRN.CRCNT_FECHA_EMISION, 
		CRN.CRCNT_FECHA_APROBACION, 
		CRN.CRCNT_FECHA_CADUCIDAD, 
		CRN.CRCNT_FECHA_DEPOSITO, 
		CRN.CRCNT_CARNET_IMPRESO, 
		CRN.CRCNT_NUMERO_COMP, 
		CRN.CRCNT_VALOR, 
		CRN.CRCNT_OBSERVACION, 
		CRN.CRCNT_ESTADO, 
		CRN.CRCNT_FECHA_INSERT, 
		CRN.CRCNT_FECHA_UPDATE, 
		ESP.CKESP_CODIGO,
		ESP.CKESP_REPORTE
	FROM SII.CGG_RES_CARNET CRN
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON RSD.CRRSD_CODIGO = CRN.CRRSD_CODIGO AND RSD.CRRSD_CODIGO = '||QUOTE_LITERAL(IN_CRRSD_CODIGO)||' AND RSD.CRRSD_VIGENTE AND RSD.CRRSD_ESTADO
	INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON TST.CRTST_CODIGO = RSD.CRTST_CODIGO
	LEFT JOIN SII.CGG_RES_CUENTA_PERSONAJURIDICA CPR ON CPR.CRCPJ_CODIGO = CRN.CRCPJ_CODIGO
	LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA CCPJ ON CCPJ.CRPJR_CODIGO = CPR.CGG_CRPJR_CODIGO
	LEFT JOIN SII.CGG_KDX_ESPECIE ESP ON ESP.CKESP_CODIGO = TST.CKESP_CODIGO
	WHERE CRCNT_ESTADO AND 
		(LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRCNT_SERIE, '''')||'' ''||COALESCE(CRCNT_MOTIVO, 0)||'' ''||COALESCE(CRCNT_FECHA_EMISION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRCNT_FECHA_APROBACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRCNT_FECHA_CADUCIDAD, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRCNT_FECHA_DEPOSITO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRCNT_CARNET_IMPRESO, FALSE)||'' ''||COALESCE(CRCNT_NUMERO_COMP, '''')||'' ''||COALESCE(CRCNT_VALOR, 0)||'' ''||COALESCE(CRCNT_OBSERVACION, '''')||'' ''||COALESCE(CRCNT_ESTADO, FALSE)||'' ''||COALESCE(CRCNT_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRCNT_USUARIO_INSERT, '''')||'' ''||COALESCE(CRCNT_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRCNT_USUARIO_UPDATE, '''')) = 1)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_CARNET
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_CARNET
	WHERE CRCNT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_CARNET
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_CRRSD_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_CARNET CRN
	WHERE CRCNT_ESTADO AND 
		CRRSD_CODIGO = IN_CRRSD_CODIGO AND
		(LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRCNT_SERIE, '''')||' '||COALESCE(CRCNT_MOTIVO, 0)||' '||COALESCE(CRCNT_FECHA_EMISION, CURRENT_TIMESTAMP)||' '||COALESCE(CRCNT_FECHA_APROBACION, CURRENT_TIMESTAMP)||' '||COALESCE(CRCNT_FECHA_CADUCIDAD, CURRENT_TIMESTAMP)||' '||COALESCE(CRCNT_FECHA_DEPOSITO, CURRENT_TIMESTAMP)||' '||COALESCE(CRCNT_CARNET_IMPRESO, FALSE)||' '||COALESCE(CRCNT_NUMERO_COMP, '''')||' '||COALESCE(CRCNT_VALOR, 0)||' '||COALESCE(CRCNT_OBSERVACION, '''')||' '||COALESCE(CRCNT_ESTADO, FALSE)||' '||COALESCE(CRCNT_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRCNT_USUARIO_INSERT, '''')||' '||COALESCE(CRCNT_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRCNT_USUARIO_UPDATE, '''')) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_CARNET
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESIDENCIA
* @param IN_CRCPJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CUENTA BANCARIA EN LA QUE SE REALIZO EL DEPOSITO
* @param IN_CRCNT_SERIE CODIGO IDENTIFICATIVO DE SEGUIMIENTO DE ESPECIE
* @param IN_CRCNT_MOTIVO MOTIVO POR LA QUE SE EMITIO UNA NUEVA ESPECIE.
0 - NUEVO
1 - RENOVACION
2 - DETERIORO
3 - PERDIDA
* @param IN_CRCNT_FECHA_EMISION FECHA DE EMISION DEL CARNET
* @param IN_CRCNT_FECHA_APROBACION FECHA DE APROBACION DE LA RESIDENCIA O RENOVACION
* @param IN_CRCNT_FECHA_CADUCIDAD FECHA DE CADUCIDAD DE LA ESPECIE
* @param IN_CRCNT_FECHA_DEPOSITO FECHA DE REALIZACION DE DEPOSITO POR EL VALOR DE LA ESPECIE
* @param IN_CRCNT_CARNET_IMPRESO SI EL CARNET YA FUE IMPRESO
* @param IN_CRCNT_NUMERO_COMP NUMERO O SERIE DEL COMPROBANTE DE DEPOSITO
* @param IN_CRCNT_VALOR VALOR DEPOSITADO
* @param IN_CRCNT_OBSERVACION INFORMACION ADICIONAL
* @param IN_CRCNT_ESTADO ESTADO DEL CARNET 
ACTIVO
INACTIVO
* @param IN_CRCNT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_UPDATE(
IN IN_CRCNT_CODIGO SII.CGG_RES_CARNET.CRCNT_CODIGO%TYPE,
IN IN_CRCOM_CODIGO SII.CGG_RES_CARNET.CRCOM_CODIGO%TYPE,
IN IN_CRADJ_CODIGO SII.CGG_RES_CARNET.CRADJ_CODIGO%TYPE,
IN IN_CRRSD_CODIGO SII.CGG_RES_CARNET.CRRSD_CODIGO%TYPE,
IN IN_CRCPJ_CODIGO SII.CGG_RES_CARNET.CRCPJ_CODIGO%TYPE,
IN IN_CRCNT_SERIE SII.CGG_RES_CARNET.CRCNT_SERIE%TYPE,
IN IN_CRCNT_MOTIVO SII.CGG_RES_CARNET.CRCNT_MOTIVO%TYPE,
IN IN_CRCNT_FECHA_EMISION SII.CGG_RES_CARNET.CRCNT_FECHA_EMISION%TYPE,
IN IN_CRCNT_FECHA_APROBACION SII.CGG_RES_CARNET.CRCNT_FECHA_APROBACION%TYPE,
IN IN_CRCNT_FECHA_CADUCIDAD SII.CGG_RES_CARNET.CRCNT_FECHA_CADUCIDAD%TYPE,
IN IN_CRCNT_FECHA_DEPOSITO SII.CGG_RES_CARNET.CRCNT_FECHA_DEPOSITO%TYPE,
IN IN_CRCNT_CARNET_IMPRESO SII.CGG_RES_CARNET.CRCNT_CARNET_IMPRESO%TYPE,
IN IN_CRCNT_NUMERO_COMP SII.CGG_RES_CARNET.CRCNT_NUMERO_COMP%TYPE,
IN IN_CRCNT_VALOR SII.CGG_RES_CARNET.CRCNT_VALOR%TYPE,
IN IN_CRCNT_OBSERVACION SII.CGG_RES_CARNET.CRCNT_OBSERVACION%TYPE,
IN IN_CRCNT_ESTADO SII.CGG_RES_CARNET.CRCNT_ESTADO%TYPE,
IN IN_CRCNT_USUARIO_UPDATE SII.CGG_RES_CARNET.CRCNT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_CARNET SET
		CRCOM_CODIGO = IN_CRCOM_CODIGO, 
		CRADJ_CODIGO = IN_CRADJ_CODIGO, 
		CRRSD_CODIGO = IN_CRRSD_CODIGO, 
		CRCPJ_CODIGO = IN_CRCPJ_CODIGO, 
		CRCNT_SERIE = IN_CRCNT_SERIE, 
		CRCNT_MOTIVO = IN_CRCNT_MOTIVO, 
		CRCNT_FECHA_EMISION = IN_CRCNT_FECHA_EMISION, 
		CRCNT_FECHA_APROBACION = IN_CRCNT_FECHA_APROBACION, 
		CRCNT_FECHA_CADUCIDAD = IN_CRCNT_FECHA_CADUCIDAD, 
		CRCNT_FECHA_DEPOSITO = IN_CRCNT_FECHA_DEPOSITO, 
		CRCNT_CARNET_IMPRESO = IN_CRCNT_CARNET_IMPRESO, 
		CRCNT_NUMERO_COMP = IN_CRCNT_NUMERO_COMP, 
		CRCNT_VALOR = IN_CRCNT_VALOR, 
		CRCNT_OBSERVACION = IN_CRCNT_OBSERVACION, 
		CRCNT_ESTADO = IN_CRCNT_ESTADO, 
		CRCNT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRCNT_USUARIO_UPDATE = IN_CRCNT_USUARIO_UPDATE
	WHERE
		CRCNT_CODIGO = IN_CRCNT_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_CARNET
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_SELECT(
IN IN_CRCNT_CODIGO SII.CGG_RES_CARNET.CRCNT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCNT_CODIGO, 
		CRCOM_CODIGO, 
		CRADJ_CODIGO, 
		CRRSD_CODIGO, 
		CRCPJ_CODIGO, 
		CRCNT_SERIE, 
		CRCNT_MOTIVO, 
		CRCNT_FECHA_EMISION, 
		CRCNT_FECHA_APROBACION, 
		CRCNT_FECHA_CADUCIDAD, 
		CRCNT_FECHA_DEPOSITO, 
		CRCNT_CARNET_IMPRESO, 
		CRCNT_NUMERO_COMP, 
		CRCNT_VALOR, 
		CRCNT_OBSERVACION, 
		CRCNT_ESTADO, 
		CRCNT_FECHA_INSERT, 
		CRCNT_USUARIO_INSERT, 
		CRCNT_FECHA_UPDATE, 
		CRCNT_USUARIO_UPDATE
	FROM SII.CGG_RES_CARNET
	WHERE CRCNT_ESTADO = TRUE AND 
		CRCNT_CODIGO = IN_CRCNT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_CARNET
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_DELETE(
IN IN_CRCNT_CODIGO SII.CGG_RES_CARNET.CRCNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_CARNET
	WHERE
		CRCNT_CODIGO = IN_CRCNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_CARNET
* @param IN_CRCNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARNET
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_DELETE_SOFT(
IN IN_CRCNT_CODIGO SII.CGG_RES_CARNET.CRCNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_CARNET SET
		CRCNT_ESTADO = FALSE
	WHERE
		CRCNT_CODIGO = IN_CRCNT_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_S_CGG_RES_ADJUNTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CARNET QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_ADJUNTO.
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_S_CGG_RES_ADJUNTO(
IN IN_CRADJ_CODIGO SII.CGG_RES_CARNET.CRADJ_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCNT_CODIGO, 
		CRCOM_CODIGO, 
		CRADJ_CODIGO, 
		CRRSD_CODIGO,
		CRCPJ_CODIGO, 		
		CRCNT_SERIE, 
		CRCNT_MOTIVO, 
		CRCNT_FECHA_EMISION, 
		CRCNT_FECHA_APROBACION, 
		CRCNT_FECHA_CADUCIDAD, 
		CRCNT_FECHA_DEPOSITO, 
		CRCNT_CARNET_IMPRESO, 
		CRCNT_NUMERO_COMP, 
		CRCNT_VALOR, 
		CRCNT_OBSERVACION, 
		CRCNT_ESTADO, 
		CRCNT_FECHA_INSERT, 
		CRCNT_USUARIO_INSERT, 
		CRCNT_FECHA_UPDATE, 
		CRCNT_USUARIO_UPDATE
	FROM SII.CGG_RES_CARNET
	WHERE CRCNT_ESTADO = TRUE AND 
		CRADJ_CODIGO = IN_CRADJ_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_D_CGG_RES_ADJUNTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CARNET QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_ADJUNTO.
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_D_CGG_RES_ADJUNTO(
IN IN_CRADJ_CODIGO SII.CGG_RES_CARNET.CRADJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_CARNET
	WHERE
		CRADJ_CODIGO = IN_CRADJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_D_CGG_RES_ADJUNTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CARNET QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_ADJUNTO.
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_DS_CGG_RES_ADJUNTO(
IN IN_CRADJ_CODIGO SII.CGG_RES_CARNET.CRADJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_CARNET SET
		crcnt_estado = false
	WHERE
		CRADJ_CODIGO = IN_CRADJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_S_CGG_RES_COMUNICADO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CARNET QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_COMUNICADO.
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_S_CGG_RES_COMUNICADO(
IN IN_CRCOM_CODIGO SII.CGG_RES_CARNET.CRCOM_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCNT_CODIGO, 
		CRCOM_CODIGO, 
		CRADJ_CODIGO, 
		CRRSD_CODIGO, 
		CRCPJ_CODIGO, 
		CRCNT_SERIE, 
		CRCNT_MOTIVO, 
		CRCNT_FECHA_EMISION, 
		CRCNT_FECHA_APROBACION, 
		CRCNT_FECHA_CADUCIDAD, 
		CRCNT_FECHA_DEPOSITO, 
		CRCNT_CARNET_IMPRESO, 
		CRCNT_NUMERO_COMP, 
		CRCNT_VALOR, 
		CRCNT_OBSERVACION, 
		CRCNT_ESTADO, 
		CRCNT_FECHA_INSERT, 
		CRCNT_USUARIO_INSERT, 
		CRCNT_FECHA_UPDATE, 
		CRCNT_USUARIO_UPDATE
	FROM SII.CGG_RES_CARNET
	WHERE CRCNT_ESTADO = TRUE AND 
		CRCOM_CODIGO = IN_CRCOM_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_D_CGG_RES_COMUNICADO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CARNET QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_COMUNICADO.
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_D_CGG_RES_COMUNICADO(
IN IN_CRCOM_CODIGO SII.CGG_RES_CARNET.CRCOM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_CARNET
	WHERE
		CRCOM_CODIGO = IN_CRCOM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_D_CGG_RES_COMUNICADO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CARNET QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_COMUNICADO.
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_DS_CGG_RES_COMUNICADO(
IN IN_CRCOM_CODIGO SII.CGG_RES_CARNET.CRCOM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_CARNET SET
		crcnt_estado = false
	WHERE
		CRCOM_CODIGO = IN_CRCOM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_S_CGG_RES_RESIDENCIA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CARNET QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESIDENCIA.
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESIDENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_S_CGG_RES_RESIDENCIA(
IN IN_CRRSD_CODIGO SII.CGG_RES_CARNET.CRRSD_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCNT_CODIGO, 
		CRCOM_CODIGO, 
		CRADJ_CODIGO, 
		CRRSD_CODIGO, 
		CRCPJ_CODIGO, 
		CRCNT_SERIE, 
		CRCNT_MOTIVO, 
		CRCNT_FECHA_EMISION, 
		CRCNT_FECHA_APROBACION, 
		CRCNT_FECHA_CADUCIDAD, 
		CRCNT_FECHA_DEPOSITO, 
		CRCNT_CARNET_IMPRESO, 
		CRCNT_NUMERO_COMP, 
		CRCNT_VALOR, 
		CRCNT_OBSERVACION, 
		CRCNT_ESTADO, 
		CRCNT_FECHA_INSERT, 
		CRCNT_USUARIO_INSERT, 
		CRCNT_FECHA_UPDATE, 
		CRCNT_USUARIO_UPDATE
	FROM SII.CGG_RES_CARNET
	WHERE CRCNT_ESTADO = TRUE AND 
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_D_CGG_RES_RESIDENCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CARNET QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESIDENCIA.
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_D_CGG_RES_RESIDENCIA(
IN IN_CRRSD_CODIGO SII.CGG_RES_CARNET.CRRSD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_CARNET
	WHERE
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_CARNET_D_CGG_RES_RESIDENCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_CARNET QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESIDENCIA.
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CARNET_DS_CGG_RES_RESIDENCIA(
IN IN_CRRSD_CODIGO SII.CGG_RES_CARNET.CRRSD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_CARNET SET
		crcnt_estado = false
	WHERE
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

