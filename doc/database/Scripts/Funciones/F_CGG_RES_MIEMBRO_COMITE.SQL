/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_MIEMBRO_COMITE
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGSITRO
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGSITRO
* @param IN_CRDID_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DOCUMENTO DE IDENTIFICACION
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRMBC_FECHA_INICIO_FUNCIONES FECHA DE DESIGNACION DEL MIEMBRO EN EL CARGO
* @param IN_CRMBC_FECHA_FIN_FUNCIONES FECHA DE CESE DE FUNCIONES 
* @param IN_CRMBC_TITULAR ESTADO QUE DEFINE SI ES DELEGADO TITULAR DE UNA INSTITUCION
* @param IN_CRMBC_AUTORIZADO ESTADO QUE DEFINE LA ACREDITACION PARA PARTICIPAR EN LA VOTACION
* @param IN_CRMBC_ESTADO ESTADO DEL REGISTRO QUE DETERMINA SI SE HALLA HABILITADO
SI / NO
* @param IN_CRMBC_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRMBC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_INSERT(
IN IN_CRMBC_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRMBC_CODIGO%TYPE, 
IN IN_CRCRG_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRCRG_CODIGO%TYPE, 
IN IN_CRDID_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRDID_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CUSU_CODIGO%TYPE, 
IN IN_CRMBC_FECHA_INICIO_FUNCIONES SII.CGG_RES_MIEMBRO_COMITE.CRMBC_FECHA_INICIO_FUNCIONES%TYPE, 
IN IN_CRMBC_FECHA_FIN_FUNCIONES SII.CGG_RES_MIEMBRO_COMITE.CRMBC_FECHA_FIN_FUNCIONES%TYPE, 
IN IN_CRMBC_TITULAR SII.CGG_RES_MIEMBRO_COMITE.CRMBC_TITULAR%TYPE, 
IN IN_CRMBC_AUTORIZADO SII.CGG_RES_MIEMBRO_COMITE.CRMBC_AUTORIZADO%TYPE, 
IN IN_CRMBC_ESTADO SII.CGG_RES_MIEMBRO_COMITE.CRMBC_ESTADO%TYPE, 
IN IN_CRMBC_USUARIO_INSERT SII.CGG_RES_MIEMBRO_COMITE.CRMBC_USUARIO_INSERT%TYPE, 
IN IN_CRMBC_USUARIO_UPDATE SII.CGG_RES_MIEMBRO_COMITE.CRMBC_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN
	
	SELECT COUNT(*) INTO TMP_COUNT FROM SII.CGG_RES_MIEMBRO_COMITE 
		WHERE CRMBC_ESTADO AND CRMBC_AUTORIZADO AND CUSU_CODIGO = IN_CUSU_CODIGO AND CRCRG_CODIGO IN (
			SELECT CRCRG_CODIGO FROM SII.CGG_RES_CARGO_COMITE CRG
			WHERE CRG.CRCOM_CODIGO = (SELECT CRC.CRCOM_CODIGO
				FROM SII.CGG_RES_CARGO_COMITE CRC WHERE CRC.CRCRG_CODIGO = IN_CRCRG_CODIGO));
	IF (TMP_COUNT>0) THEN
		RAISE EXCEPTION 'El usuario seleccionado ya tiene un cargo del comit&eacute;.';
	END IF;
	IF (UPPER(IN_CRMBC_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_MIEMBRO_COMITE','CRMBC_CODIGO','CRMBC') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRMBC_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_MIEMBRO_COMITE(
		CRMBC_CODIGO, 
		CRCRG_CODIGO, 
		CRDID_CODIGO, 
		CUSU_CODIGO, 
		CRMBC_FECHA_INICIO_FUNCIONES, 
		CRMBC_FECHA_FIN_FUNCIONES, 
		CRMBC_TITULAR, 
		CRMBC_AUTORIZADO, 
		CRMBC_ESTADO, 
		CRMBC_FECHA_INSERT, 
		CRMBC_USUARIO_INSERT, 
		CRMBC_FECHA_UPDATE, 
		CRMBC_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRCRG_CODIGO, 
		IN_CRDID_CODIGO, 
		IN_CUSU_CODIGO, 
		IN_CRMBC_FECHA_INICIO_FUNCIONES, 
		IN_CRMBC_FECHA_FIN_FUNCIONES, 
		IN_CRMBC_TITULAR, 
		IN_CRMBC_AUTORIZADO, 
		IN_CRMBC_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRMBC_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRMBC_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRMBC_CODIGO, 
		CRCRG_CODIGO, 
		CRDID_CODIGO, 
		CUSU_CODIGO, 
		CRMBC_FECHA_INICIO_FUNCIONES, 
		CRMBC_FECHA_FIN_FUNCIONES, 
		CRMBC_TITULAR, 
		CRMBC_AUTORIZADO, 
		CRMBC_ESTADO, 
		CRMBC_FECHA_INSERT, 
		CRMBC_USUARIO_INSERT, 
		CRMBC_FECHA_UPDATE, 
		CRMBC_USUARIO_UPDATE
	FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE CRMBC_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRMBC_CODIGO, 
		CRCRG_CODIGO, 
		CRDID_CODIGO, 
		CUSU_CODIGO, 
		CRMBC_FECHA_INICIO_FUNCIONES, 
		CRMBC_FECHA_FIN_FUNCIONES, 
		CRMBC_TITULAR, 
		CRMBC_AUTORIZADO, 
		CRMBC_ESTADO, 
		CRMBC_FECHA_INSERT, 
		CRMBC_USUARIO_INSERT, 
		CRMBC_FECHA_UPDATE, 
		CRMBC_USUARIO_UPDATE
	FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE CRMBC_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRMBC_FECHA_INICIO_FUNCIONES, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRMBC_FECHA_FIN_FUNCIONES, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRMBC_TITULAR, FALSE)||'' ''||COALESCE(CRMBC_AUTORIZADO, FALSE)||'' ''||COALESCE(CRMBC_ESTADO, FALSE)||'' ''||COALESCE(CRMBC_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRMBC_USUARIO_INSERT, '''')||'' ''||COALESCE(CRMBC_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRMBC_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE CRMBC_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE CRMBC_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRMBC_FECHA_INICIO_FUNCIONES, CURRENT_TIMESTAMP)||' '||COALESCE(CRMBC_FECHA_FIN_FUNCIONES, CURRENT_TIMESTAMP)||' '||COALESCE(CRMBC_TITULAR, FALSE)||' '||COALESCE(CRMBC_AUTORIZADO, FALSE)||' '||COALESCE(CRMBC_ESTADO, FALSE)||' '||COALESCE(CRMBC_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRMBC_USUARIO_INSERT, '''')||' '||COALESCE(CRMBC_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRMBC_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_MIEMBRO_COMITE
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGSITRO
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGSITRO
* @param IN_CRDID_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DOCUMENTO DE IDENTIFICACION
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRMBC_FECHA_INICIO_FUNCIONES FECHA DE DESIGNACION DEL MIEMBRO EN EL CARGO
* @param IN_CRMBC_FECHA_FIN_FUNCIONES FECHA DE CESE DE FUNCIONES 
* @param IN_CRMBC_TITULAR ESTADO QUE DEFINE SI ES DELEGADO TITULAR DE UNA INSTITUCION
* @param IN_CRMBC_AUTORIZADO ESTADO QUE DEFINE LA ACREDITACION PARA PARTICIPAR EN LA VOTACION
* @param IN_CRMBC_ESTADO ESTADO DEL REGISTRO QUE DETERMINA SI SE HALLA HABILITADO
SI / NO
* @param IN_CRMBC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_UPDATE(
IN IN_CRMBC_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRMBC_CODIGO%TYPE, 
IN IN_CRCRG_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRCRG_CODIGO%TYPE, 
IN IN_CRDID_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRDID_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CUSU_CODIGO%TYPE, 
IN IN_CRMBC_FECHA_INICIO_FUNCIONES SII.CGG_RES_MIEMBRO_COMITE.CRMBC_FECHA_INICIO_FUNCIONES%TYPE, 
IN IN_CRMBC_FECHA_FIN_FUNCIONES SII.CGG_RES_MIEMBRO_COMITE.CRMBC_FECHA_FIN_FUNCIONES%TYPE, 
IN IN_CRMBC_TITULAR SII.CGG_RES_MIEMBRO_COMITE.CRMBC_TITULAR%TYPE, 
IN IN_CRMBC_AUTORIZADO SII.CGG_RES_MIEMBRO_COMITE.CRMBC_AUTORIZADO%TYPE, 
IN IN_CRMBC_ESTADO SII.CGG_RES_MIEMBRO_COMITE.CRMBC_ESTADO%TYPE, 
IN IN_CRMBC_USUARIO_UPDATE SII.CGG_RES_MIEMBRO_COMITE.CRMBC_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
TMP_COUNT INT;
TMP_SW BOOLEAN;
BEGIN
	TMP_SW = FALSE;
	SELECT (COUNT(*) = 1) INTO TMP_SW 
	FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE CRMBC_ESTADO AND CRMBC_AUTORIZADO AND CUSU_CODIGO = IN_CUSU_CODIGO AND CRCRG_CODIGO = IN_CRCRG_CODIGO;
	IF (NOT TMP_SW) THEN
		SELECT COUNT(*) INTO TMP_COUNT FROM SII.CGG_RES_MIEMBRO_COMITE 
			WHERE CRMBC_ESTADO AND CRMBC_AUTORIZADO AND CUSU_CODIGO = IN_CUSU_CODIGO AND CRCRG_CODIGO IN (
				SELECT CRCRG_CODIGO FROM SII.CGG_RES_CARGO_COMITE CRG
				WHERE CRG.CRCOM_CODIGO = (SELECT CRC.CRCOM_CODIGO
					FROM SII.CGG_RES_CARGO_COMITE CRC WHERE CRC.CRCRG_CODIGO = IN_CRCRG_CODIGO));
		IF (TMP_COUNT>0) THEN
			RAISE EXCEPTION 'El usuario seleccionado ya tiene un cargo del comit&eacute;.';
		END IF;
	END IF;
	UPDATE SII.CGG_RES_MIEMBRO_COMITE SET
		CRCRG_CODIGO = IN_CRCRG_CODIGO, 
		CRDID_CODIGO = IN_CRDID_CODIGO, 
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CRMBC_FECHA_INICIO_FUNCIONES = IN_CRMBC_FECHA_INICIO_FUNCIONES, 
		CRMBC_FECHA_FIN_FUNCIONES = IN_CRMBC_FECHA_FIN_FUNCIONES, 
		CRMBC_TITULAR = IN_CRMBC_TITULAR, 
		CRMBC_AUTORIZADO = IN_CRMBC_AUTORIZADO, 
		CRMBC_ESTADO = IN_CRMBC_ESTADO, 
		CRMBC_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRMBC_USUARIO_UPDATE = IN_CRMBC_USUARIO_UPDATE
	WHERE
		CRMBC_CODIGO = IN_CRMBC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_MIEMBRO_COMITE
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_SELECT(
IN IN_CRMBC_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRMBC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRMBC_CODIGO, 
		CRCRG_CODIGO, 
		CRDID_CODIGO, 
		CUSU_CODIGO, 
		CRMBC_FECHA_INICIO_FUNCIONES, 
		CRMBC_FECHA_FIN_FUNCIONES, 
		CRMBC_TITULAR, 
		CRMBC_AUTORIZADO, 
		CRMBC_ESTADO, 
		CRMBC_FECHA_INSERT, 
		CRMBC_USUARIO_INSERT, 
		CRMBC_FECHA_UPDATE, 
		CRMBC_USUARIO_UPDATE
	FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE CRMBC_ESTADO = TRUE AND 
		CRMBC_CODIGO = IN_CRMBC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_MIEMBRO_COMITE
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_DELETE(
IN IN_CRMBC_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRMBC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE
		CRMBC_CODIGO = IN_CRMBC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_MIEMBRO_COMITE
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_DELETE_SOFT(
IN IN_CRMBC_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRMBC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_MIEMBRO_COMITE SET
		CRMBC_ESTADO = FALSE
	WHERE
		CRMBC_CODIGO = IN_CRMBC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_S_CGG_RES_DOCUMENTO_IDENTIFICACIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_DOCUMENTO_IDENTIFICACIO.
* @param IN_CRDID_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DOCUMENTO DE IDENTIFICACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_S_CGG_RES_DOCUMENTO_IDENTIFICACIO(
IN IN_CRDID_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRDID_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRMBC_CODIGO, 
		CRCRG_CODIGO, 
		CRDID_CODIGO, 
		CUSU_CODIGO, 
		CRMBC_FECHA_INICIO_FUNCIONES, 
		CRMBC_FECHA_FIN_FUNCIONES, 
		CRMBC_TITULAR, 
		CRMBC_AUTORIZADO, 
		CRMBC_ESTADO, 
		CRMBC_FECHA_INSERT, 
		CRMBC_USUARIO_INSERT, 
		CRMBC_FECHA_UPDATE, 
		CRMBC_USUARIO_UPDATE
	FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE CRMBC_ESTADO = TRUE AND 
		CRDID_CODIGO = IN_CRDID_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_D_CGG_RES_DOCUMENTO_IDENTIFICACIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_DOCUMENTO_IDENTIFICACIO.
* @param IN_CRDID_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DOCUMENTO DE IDENTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_D_CGG_RES_DOCUMENTO_IDENTIFICACIO(
IN IN_CRDID_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRDID_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE
		CRDID_CODIGO = IN_CRDID_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_D_CGG_RES_DOCUMENTO_IDENTIFICACIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_DOCUMENTO_IDENTIFICACIO.
* @param IN_CRDID_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DOCUMENTO DE IDENTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_DS_CGG_RES_DOCUMENTO_IDENTIFICACIO(
IN IN_CRDID_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRDID_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_MIEMBRO_COMITE SET
		crmbc_estado = false
	WHERE
		CRDID_CODIGO = IN_CRDID_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_S_CGG_RES_CARGO_COMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_CARGO_COMITE.
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGSITRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_S_CGG_RES_CARGO_COMITE(
IN IN_CRCRG_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRCRG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRMBC_CODIGO, 
		CRCRG_CODIGO, 
		CRDID_CODIGO, 
		CUSU_CODIGO, 
		CRMBC_FECHA_INICIO_FUNCIONES, 
		CRMBC_FECHA_FIN_FUNCIONES, 
		CRMBC_TITULAR, 
		CRMBC_AUTORIZADO, 
		CRMBC_ESTADO, 
		CRMBC_FECHA_INSERT, 
		CRMBC_USUARIO_INSERT, 
		CRMBC_FECHA_UPDATE, 
		CRMBC_USUARIO_UPDATE
	FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE CRMBC_ESTADO = TRUE AND 
		CRCRG_CODIGO = IN_CRCRG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_D_CGG_RES_CARGO_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_CARGO_COMITE.
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGSITRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_D_CGG_RES_CARGO_COMITE(
IN IN_CRCRG_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRCRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE
		CRCRG_CODIGO = IN_CRCRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_D_CGG_RES_CARGO_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_CARGO_COMITE.
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_DS_CGG_RES_CARGO_COMITE(
IN IN_CRCRG_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CRCRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_MIEMBRO_COMITE SET
		crmbc_estado = false
	WHERE
		CRCRG_CODIGO = IN_CRCRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRMBC_CODIGO, 
		CRCRG_CODIGO, 
		CRDID_CODIGO, 
		CUSU_CODIGO, 
		CRMBC_FECHA_INICIO_FUNCIONES, 
		CRMBC_FECHA_FIN_FUNCIONES, 
		CRMBC_TITULAR, 
		CRMBC_AUTORIZADO, 
		CRMBC_ESTADO, 
		CRMBC_FECHA_INSERT, 
		CRMBC_USUARIO_INSERT, 
		CRMBC_FECHA_UPDATE, 
		CRMBC_USUARIO_UPDATE
	FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE CRMBC_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_MIEMBRO_COMITE
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MIEMBRO_COMITE_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MIEMBRO_COMITE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MIEMBRO_COMITE_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_MIEMBRO_COMITE.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_MIEMBRO_COMITE SET
		crmbc_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

