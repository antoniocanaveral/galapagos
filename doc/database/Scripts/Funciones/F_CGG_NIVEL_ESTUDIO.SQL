/**
* FUNCION SII.F_CGG_NIVEL_ESTUDIO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_NIVEL_ESTUDIO
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGNES_DESCRIPCION DESCRIPCION DEL NIVEL DE ESTUDIO
* @param IN_CGNES_GRADO JERARQUIA DEL NIVEL DE ESTUDIO
* @param IN_CGNES_ESTADO ESTADO DEL REGISTRO
* @param IN_CGNES_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGNES_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NIVEL_ESTUDIO_INSERT(
IN IN_CGNES_CODIGO SII.CGG_NIVEL_ESTUDIO.CGNES_CODIGO%TYPE, 
IN IN_CGNES_DESCRIPCION SII.CGG_NIVEL_ESTUDIO.CGNES_DESCRIPCION%TYPE, 
IN IN_CGNES_GRADO SII.CGG_NIVEL_ESTUDIO.CGNES_GRADO%TYPE, 
IN IN_CGNES_ESTADO SII.CGG_NIVEL_ESTUDIO.CGNES_ESTADO%TYPE, 
IN IN_CGNES_USUARIO_INSERT SII.CGG_NIVEL_ESTUDIO.CGNES_USUARIO_INSERT%TYPE, 
IN IN_CGNES_USUARIO_UPDATE SII.CGG_NIVEL_ESTUDIO.CGNES_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGNES_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_NIVEL_ESTUDIO','CGNES_CODIGO','CGNES') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGNES_CODIGO;
	END IF;
	INSERT INTO SII.CGG_NIVEL_ESTUDIO(
		CGNES_CODIGO, 
		CGNES_DESCRIPCION, 
		CGNES_GRADO, 
		CGNES_ESTADO, 
		CGNES_FECHA_INSERT, 
		CGNES_USUARIO_INSERT, 
		CGNES_FECHA_UPDATE, 
		CGNES_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGNES_DESCRIPCION, 
		IN_CGNES_GRADO, 
		IN_CGNES_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGNES_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGNES_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_NIVEL_ESTUDIO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_NIVEL_ESTUDIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NIVEL_ESTUDIO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGNES_CODIGO, 
		CGNES_DESCRIPCION, 
		CGNES_GRADO, 
		CGNES_ESTADO, 
		CGNES_FECHA_INSERT, 
		CGNES_USUARIO_INSERT, 
		CGNES_FECHA_UPDATE, 
		CGNES_USUARIO_UPDATE
	FROM SII.CGG_NIVEL_ESTUDIO
	WHERE CGNES_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_NIVEL_ESTUDIO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_NIVEL_ESTUDIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NIVEL_ESTUDIO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGNES_CODIGO, 
		CGNES_DESCRIPCION, 
		CGNES_GRADO, 
		CGNES_ESTADO, 
		CGNES_FECHA_INSERT, 
		CGNES_USUARIO_INSERT, 
		CGNES_FECHA_UPDATE, 
		CGNES_USUARIO_UPDATE
	FROM SII.CGG_NIVEL_ESTUDIO
	WHERE CGNES_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CGNES_CODIGO IS NULL THEN '''' ELSE CGNES_CODIGO END ||'' ''||CASE WHEN CGNES_DESCRIPCION IS NULL THEN '''' ELSE CGNES_DESCRIPCION END ||'' ''||CASE WHEN CGNES_GRADO IS NULL THEN 0 ELSE CGNES_GRADO END ||'' ''||CASE WHEN CGNES_ESTADO IS NULL THEN FALSE ELSE CGNES_ESTADO END ||'' ''||CASE WHEN CGNES_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CGNES_FECHA_INSERT END ||'' ''||CASE WHEN CGNES_USUARIO_INSERT IS NULL THEN '''' ELSE CGNES_USUARIO_INSERT END ||'' ''||CASE WHEN CGNES_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CGNES_FECHA_UPDATE END ||'' ''||CASE WHEN CGNES_USUARIO_UPDATE IS NULL THEN '''' ELSE CGNES_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_NIVEL_ESTUDIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_NIVEL_ESTUDIO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NIVEL_ESTUDIO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_NIVEL_ESTUDIO
	WHERE CGNES_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_NIVEL_ESTUDIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_NIVEL_ESTUDIO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NIVEL_ESTUDIO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_NIVEL_ESTUDIO
	WHERE CGNES_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CGNES_CODIGO IS NULL THEN '''' ELSE CGNES_CODIGO END ||' '||CASE WHEN CGNES_DESCRIPCION IS NULL THEN '''' ELSE CGNES_DESCRIPCION END ||' '||CASE WHEN CGNES_GRADO IS NULL THEN 0 ELSE CGNES_GRADO END ||' '||CASE WHEN CGNES_ESTADO IS NULL THEN FALSE ELSE CGNES_ESTADO END ||' '||CASE WHEN CGNES_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CGNES_FECHA_INSERT END ||' '||CASE WHEN CGNES_USUARIO_INSERT IS NULL THEN '''' ELSE CGNES_USUARIO_INSERT END ||' '||CASE WHEN CGNES_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CGNES_FECHA_UPDATE END ||' '||CASE WHEN CGNES_USUARIO_UPDATE IS NULL THEN '''' ELSE CGNES_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_NIVEL_ESTUDIO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_NIVEL_ESTUDIO
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGNES_DESCRIPCION DESCRIPCION DEL NIVEL DE ESTUDIO
* @param IN_CGNES_GRADO JERARQUIA DEL NIVEL DE ESTUDIO
* @param IN_CGNES_ESTADO ESTADO DEL REGISTRO
* @param IN_CGNES_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NIVEL_ESTUDIO_UPDATE(
IN IN_CGNES_CODIGO SII.CGG_NIVEL_ESTUDIO.CGNES_CODIGO%TYPE, 
IN IN_CGNES_DESCRIPCION SII.CGG_NIVEL_ESTUDIO.CGNES_DESCRIPCION%TYPE, 
IN IN_CGNES_GRADO SII.CGG_NIVEL_ESTUDIO.CGNES_GRADO%TYPE, 
IN IN_CGNES_ESTADO SII.CGG_NIVEL_ESTUDIO.CGNES_ESTADO%TYPE, 
IN IN_CGNES_USUARIO_UPDATE SII.CGG_NIVEL_ESTUDIO.CGNES_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_NIVEL_ESTUDIO SET
		CGNES_DESCRIPCION = IN_CGNES_DESCRIPCION, 
		CGNES_GRADO = IN_CGNES_GRADO, 
		CGNES_ESTADO = IN_CGNES_ESTADO, 
		CGNES_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGNES_USUARIO_UPDATE = IN_CGNES_USUARIO_UPDATE
	WHERE
		CGNES_CODIGO = IN_CGNES_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_NIVEL_ESTUDIO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_NIVEL_ESTUDIO
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NIVEL_ESTUDIO_SELECT(
IN IN_CGNES_CODIGO SII.CGG_NIVEL_ESTUDIO.CGNES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGNES_CODIGO, 
		CGNES_DESCRIPCION, 
		CGNES_GRADO, 
		CGNES_ESTADO, 
		CGNES_FECHA_INSERT, 
		CGNES_USUARIO_INSERT, 
		CGNES_FECHA_UPDATE, 
		CGNES_USUARIO_UPDATE
	FROM SII.CGG_NIVEL_ESTUDIO
	WHERE CGNES_ESTADO = TRUE AND 
		CGNES_CODIGO = IN_CGNES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_NIVEL_ESTUDIO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_NIVEL_ESTUDIO
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NIVEL_ESTUDIO_DELETE(
IN IN_CGNES_CODIGO SII.CGG_NIVEL_ESTUDIO.CGNES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_NIVEL_ESTUDIO
	WHERE
		CGNES_CODIGO = IN_CGNES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_NIVEL_ESTUDIO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_NIVEL_ESTUDIO
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NIVEL_ESTUDIO_DELETE_SOFT(
IN IN_CGNES_CODIGO SII.CGG_NIVEL_ESTUDIO.CGNES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_NIVEL_ESTUDIO SET
		CGNES_ESTADO = FALSE
	WHERE
		CGNES_CODIGO = IN_CGNES_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

