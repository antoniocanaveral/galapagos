/**
* FUNCION SII.F_CGG_CONFIGURACION_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_CONFIGURACION.
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONFIGURACION
* @param IN_CGCNF_CONFIGURACION NOMBRE DEL VALOR DE CONFIGURACION
* @param IN_CGCNF_VALOR_CADENA VALOR DE CONFIGURACION TIPO TEXTO
* @param IN_CGCNF_VALOR_NUMERICO VALOR DE CONFIGURACION TIPO NUMERICO
* @param IN_CGCNF_ESTADO ESTADO DEL REGISTRO
* @param IN_CGCNF_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGCNF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_INSERT(
IN IN_CGCNF_CODIGO SII.CGG_CONFIGURACION.CGCNF_CODIGO%TYPE, 
IN IN_CGCNF_CONFIGURACION SII.CGG_CONFIGURACION.CGCNF_CONFIGURACION%TYPE, 
IN IN_CGCNF_VALOR_CADENA SII.CGG_CONFIGURACION.CGCNF_VALOR_CADENA%TYPE, 
IN IN_CGCNF_VALOR_NUMERICO SII.CGG_CONFIGURACION.CGCNF_VALOR_NUMERICO%TYPE, 
IN IN_CGCNF_ESTADO SII.CGG_CONFIGURACION.CGCNF_ESTADO%TYPE, 
IN IN_CGCNF_USUARIO_INSERT SII.CGG_CONFIGURACION.CGCNF_USUARIO_INSERT%TYPE, 
IN IN_CGCNF_USUARIO_UPDATE SII.CGG_CONFIGURACION.CGCNF_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGCNF_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_CONFIGURACION','CGCNF_CODIGO','CGCNF') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGCNF_CODIGO;
	END IF;
	INSERT INTO SII.CGG_CONFIGURACION(
		CGCNF_CODIGO, 
		CGCNF_CONFIGURACION, 
		CGCNF_VALOR_CADENA, 
		CGCNF_VALOR_NUMERICO, 
		CGCNF_ESTADO, 
		CGCNF_FECHA_INSERT, 
		CGCNF_USUARIO_INSERT, 
		CGCNF_FECHA_UPDATE, 
		CGCNF_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGCNF_CONFIGURACION, 
		IN_CGCNF_VALOR_CADENA, 
		IN_CGCNF_VALOR_NUMERICO, 
		IN_CGCNF_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGCNF_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGCNF_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CONFIGURACION_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_CONFIGURACION.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGCNF_CODIGO, 
		CGCNF_CONFIGURACION, 
		CGCNF_VALOR_CADENA, 
		CGCNF_VALOR_NUMERICO, 
		CGCNF_ESTADO, 
		CGCNF_FECHA_INSERT, 
		CGCNF_USUARIO_INSERT, 
		CGCNF_FECHA_UPDATE, 
		CGCNF_USUARIO_UPDATE
	FROM SII.CGG_CONFIGURACION
	WHERE CGCNF_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CONFIGURACION__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_CONFIGURACION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGCNF_CODIGO, 
		CGCNF_CONFIGURACION, 
		CGCNF_VALOR_CADENA, 
		CGCNF_VALOR_NUMERICO, 
		CGCNF_ESTADO, 
		CGCNF_FECHA_INSERT, 
		CGCNF_USUARIO_INSERT, 
		CGCNF_FECHA_UPDATE, 
		CGCNF_USUARIO_UPDATE
	FROM SII.CGG_CONFIGURACION
	WHERE CGCNF_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CGCNF_CODIGO IS NULL THEN '''' ELSE CGCNF_CODIGO END ||'' ''||CASE WHEN CGCNF_CONFIGURACION IS NULL THEN '''' ELSE CGCNF_CONFIGURACION END ||'' ''||CASE WHEN CGCNF_VALOR_CADENA IS NULL THEN '''' ELSE CGCNF_VALOR_CADENA END ||'' ''||CASE WHEN CGCNF_VALOR_NUMERICO IS NULL THEN 0 ELSE CGCNF_VALOR_NUMERICO END ||'' ''||CASE WHEN CGCNF_ESTADO IS NULL THEN FALSE ELSE CGCNF_ESTADO END ||'' ''||CASE WHEN CGCNF_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CGCNF_FECHA_INSERT END ||'' ''||CASE WHEN CGCNF_USUARIO_INSERT IS NULL THEN '''' ELSE CGCNF_USUARIO_INSERT END ||'' ''||CASE WHEN CGCNF_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CGCNF_FECHA_UPDATE END ||'' ''||CASE WHEN CGCNF_USUARIO_UPDATE IS NULL THEN '''' ELSE CGCNF_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CONFIGURACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_CONFIGURACION.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_CONFIGURACION
	WHERE CGCNF_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CONFIGURACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_CONFIGURACION.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_CONFIGURACION
	WHERE CGCNF_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CGCNF_CODIGO IS NULL THEN '''' ELSE CGCNF_CODIGO END ||' '||CASE WHEN CGCNF_CONFIGURACION IS NULL THEN '''' ELSE CGCNF_CONFIGURACION END ||' '||CASE WHEN CGCNF_VALOR_CADENA IS NULL THEN '''' ELSE CGCNF_VALOR_CADENA END ||' '||CASE WHEN CGCNF_VALOR_NUMERICO IS NULL THEN 0 ELSE CGCNF_VALOR_NUMERICO END ||' '||CASE WHEN CGCNF_ESTADO IS NULL THEN FALSE ELSE CGCNF_ESTADO END ||' '||CASE WHEN CGCNF_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CGCNF_FECHA_INSERT END ||' '||CASE WHEN CGCNF_USUARIO_INSERT IS NULL THEN '''' ELSE CGCNF_USUARIO_INSERT END ||' '||CASE WHEN CGCNF_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CGCNF_FECHA_UPDATE END ||' '||CASE WHEN CGCNF_USUARIO_UPDATE IS NULL THEN '''' ELSE CGCNF_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CONFIGURACION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_CONFIGURACION.
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONFIGURACION
* @param IN_CGCNF_CONFIGURACION NOMBRE DEL VALOR DE CONFIGURACION
* @param IN_CGCNF_VALOR_CADENA VALOR DE CONFIGURACION TIPO TEXTO
* @param IN_CGCNF_VALOR_NUMERICO VALOR DE CONFIGURACION TIPO NUMERICO
* @param IN_CGCNF_ESTADO ESTADO DEL REGISTRO
* @param IN_CGCNF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_UPDATE(
IN IN_CGCNF_CODIGO SII.CGG_CONFIGURACION.CGCNF_CODIGO%TYPE, 
IN IN_CGCNF_CONFIGURACION SII.CGG_CONFIGURACION.CGCNF_CONFIGURACION%TYPE, 
IN IN_CGCNF_VALOR_CADENA SII.CGG_CONFIGURACION.CGCNF_VALOR_CADENA%TYPE, 
IN IN_CGCNF_VALOR_NUMERICO SII.CGG_CONFIGURACION.CGCNF_VALOR_NUMERICO%TYPE, 
IN IN_CGCNF_ESTADO SII.CGG_CONFIGURACION.CGCNF_ESTADO%TYPE, 
IN IN_CGCNF_USUARIO_UPDATE SII.CGG_CONFIGURACION.CGCNF_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_CONFIGURACION SET
		CGCNF_CONFIGURACION = IN_CGCNF_CONFIGURACION, 
		CGCNF_VALOR_CADENA = IN_CGCNF_VALOR_CADENA, 
		CGCNF_VALOR_NUMERICO = IN_CGCNF_VALOR_NUMERICO, 
		CGCNF_ESTADO = IN_CGCNF_ESTADO, 
		CGCNF_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGCNF_USUARIO_UPDATE = IN_CGCNF_USUARIO_UPDATE
	WHERE
		CGCNF_CODIGO = IN_CGCNF_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CONFIGURACION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_CONFIGURACION.
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONFIGURACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_SELECT(
IN IN_CGCNF_CODIGO SII.CGG_CONFIGURACION.CGCNF_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGCNF_CODIGO, 
		CGCNF_CONFIGURACION, 
		CGCNF_VALOR_CADENA, 
		CGCNF_VALOR_NUMERICO, 
		CGCNF_ESTADO, 
		CGCNF_FECHA_INSERT, 
		CGCNF_USUARIO_INSERT, 
		CGCNF_FECHA_UPDATE, 
		CGCNF_USUARIO_UPDATE
	FROM SII.CGG_CONFIGURACION
	WHERE CGCNF_ESTADO = TRUE AND 
		CGCNF_CODIGO = IN_CGCNF_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CONFIGURACION_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_CONFIGURACION.
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONFIGURACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_DELETE(
IN IN_CGCNF_CODIGO SII.CGG_CONFIGURACION.CGCNF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_CONFIGURACION
	WHERE
		CGCNF_CODIGO = IN_CGCNF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CONFIGURACION_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_CONFIGURACION.
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONFIGURACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_DELETE_SOFT(
IN IN_CGCNF_CODIGO SII.CGG_CONFIGURACION.CGCNF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_CONFIGURACION SET
		CGCNF_ESTADO = FALSE
	WHERE
		CGCNF_CODIGO = IN_CGCNF_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION: SII.F_CGG_CONFIGURACION_SELECT1
* SELECCIONA UN REGISTRO DE LA TABLA DE CONFIGURACION POR SU VALOR DE CONFIGURACION.
* @param IN_CGCNF_CONFIGURACION VALOR DE CONFIGURACION
* @return CURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CONFIGURACION_SELECT1(
IN IN_CGCNF_CONFIGURACION SII.CGG_CONFIGURACION.CGCNF_CONFIGURACION%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGCNF_CODIGO, 
		CGCNF_CONFIGURACION, 
		CGCNF_VALOR_CADENA, 
		CGCNF_VALOR_NUMERICO, 
		CGCNF_ESTADO, 
		CGCNF_FECHA_INSERT, 
		CGCNF_USUARIO_INSERT, 
		CGCNF_FECHA_UPDATE, 
		CGCNF_USUARIO_UPDATE
	FROM SII.CGG_CONFIGURACION
	WHERE CGCNF_ESTADO = TRUE AND 
		CGCNF_CONFIGURACION = IN_CGCNF_CONFIGURACION;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

