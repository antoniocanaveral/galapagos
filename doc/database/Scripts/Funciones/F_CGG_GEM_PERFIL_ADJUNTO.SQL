/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO.
* @param IN_CGPFA_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO DE LA PERSONA 
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE LA PERSONA
* @param IN_CGPFA_DESCRIPCION CAMPO DE TEXTO DE UNA DESCRIPCION DE DOCUMENTO
* @param IN_CGPFA_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CGPFA_TIPO_ADJUNTO NO ESPECIFICADO
* @param IN_CGPFA_ADJUNTO CONTENIDO BINARIO DEL DOCUMENTO ADJUNTO
* @param IN_CGPFA_TIPO TIPO DE ARCHIVO
* @param IN_CGPFA_ESTADO ESTADO DEL REGISTRO
* @param IN_CGPFA_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGPFA_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_INSERT(
IN IN_CGPFA_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CRPER_CODIGO%TYPE,
IN IN_CGPFA_DESCRIPCION SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_DESCRIPCION%TYPE,
IN IN_CGPFA_NOMBRE_ADJUNTO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_NOMBRE_ADJUNTO%TYPE,
IN IN_CGPFA_TIPO_ADJUNTO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_TIPO_ADJUNTO%TYPE,
IN IN_CGPFA_ADJUNTO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_ADJUNTO%TYPE,
IN IN_CGPFA_TIPO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_TIPO%TYPE,
IN IN_CGPFA_ESTADO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_ESTADO%TYPE,
IN IN_CGPFA_USUARIO_INSERT SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGPFA_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_PERFIL_ADJUNTO','CGPFA_CODIGO','CGPFA') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGPFA_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_PERFIL_ADJUNTO(
		CGPFA_CODIGO, 
		CRPER_CODIGO, 
		CGPFA_DESCRIPCION, 
		CGPFA_NOMBRE_ADJUNTO, 
		CGPFA_TIPO_ADJUNTO, 
		CGPFA_ADJUNTO, 
		CGPFA_TIPO,
		CGPFA_ESTADO, 
		CGPFA_FECHA_INSERT, 
		CGPFA_USUARIO_INSERT, 
		CGPFA_FECHA_UPDATE, 
		CGPFA_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CGPFA_DESCRIPCION, 
		IN_CGPFA_NOMBRE_ADJUNTO, 
		IN_CGPFA_TIPO_ADJUNTO, 
		IN_CGPFA_ADJUNTO, 
		IN_CGPFA_TIPO,
		IN_CGPFA_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGPFA_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGPFA_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPFA_CODIGO, 
		CRPER_CODIGO, 
		CGPFA_DESCRIPCION, 
		CGPFA_NOMBRE_ADJUNTO, 
		CGPFA_TIPO_ADJUNTO, 
		CGPFA_ADJUNTO, 
		CGPFA_TIPO,
		CGPFA_ESTADO, 
		CGPFA_FECHA_INSERT, 
		CGPFA_USUARIO_INSERT, 
		CGPFA_FECHA_UPDATE, 
		CGPFA_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_ADJUNTO
	WHERE CGPFA_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGPFA_CODIGO, 
		CRPER_CODIGO, 
		CGPFA_DESCRIPCION, 
		CGPFA_NOMBRE_ADJUNTO, 
		CGPFA_TIPO_ADJUNTO, 
		CGPFA_ADJUNTO, 
		CGPFA_ESTADO, 
		CGPFA_FECHA_INSERT, 
		CGPFA_USUARIO_INSERT, 
		CGPFA_FECHA_UPDATE, 
		CGPFA_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_ADJUNTO
	WHERE CGPFA_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGPFA_DESCRIPCION, '''')||'' ''||COALESCE(CGPFA_NOMBRE_ADJUNTO, '''')||'' ''||COALESCE(CGPFA_TIPO_ADJUNTO, '''')||'' ''||COALESCE(CGPFA_ESTADO, FALSE)||'' ''||COALESCE(CGPFA_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPFA_USUARIO_INSERT, '''')||'' ''||COALESCE(CGPFA_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPFA_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_PERFIL_ADJUNTO
	WHERE CGPFA_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_PERFIL_ADJUNTO
	WHERE CGPFA_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGPFA_DESCRIPCION, '''')||' '||COALESCE(CGPFA_NOMBRE_ADJUNTO, '''')||' '||COALESCE(CGPFA_TIPO_ADJUNTO, '''')||' '||COALESCE(CGPFA_ESTADO, FALSE)||' '||COALESCE(CGPFA_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGPFA_USUARIO_INSERT, '''')||' '||COALESCE(CGPFA_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGPFA_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_PERFIL_ADJUNTO.
* @param IN_CGPFA_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO SOBRE EL PERFIL PROFESIONAL
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERFIL PROFESIONAL
* @param IN_CGPFA_DESCRIPCION CAMPO DE TEXTO DE UNA DESCRIPCION DE DOCUMENTO
* @param IN_CGPFA_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CGPFA_TIPO_ADJUNTO NO ESPECIFICADO
* @param IN_CGPFA_ADJUNTO CONTENIDO BINARIO DEL DOCUMENTO ADJUNTO
* @param IN_CGPFA_TIPO TIPO DE ADJUNTO
* @param IN_CGPFA_ESTADO ESTADO DEL REGISTRO
* @param IN_CGPFA_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_UPDATE(
IN IN_CGPFA_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CRPER_CODIGO%TYPE,
IN IN_CGPFA_DESCRIPCION SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_DESCRIPCION%TYPE,
IN IN_CGPFA_NOMBRE_ADJUNTO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_NOMBRE_ADJUNTO%TYPE,
IN IN_CGPFA_TIPO_ADJUNTO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_TIPO_ADJUNTO%TYPE,
IN IN_CGPFA_ADJUNTO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_ADJUNTO%TYPE,
IN IN_CGPFA_TIPO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_TIPO%TYPE,
IN IN_CGPFA_ESTADO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_ESTADO%TYPE,
IN IN_CGPFA_USUARIO_UPDATE SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	if(LENGTH(IN_CGPFA_ADJUNTO) > 0) then
		UPDATE SII.CGG_GEM_PERFIL_ADJUNTO SET			
			CGPFA_NOMBRE_ADJUNTO = IN_CGPFA_NOMBRE_ADJUNTO, 
			CGPFA_TIPO_ADJUNTO = IN_CGPFA_TIPO_ADJUNTO, 
			CGPFA_ADJUNTO = IN_CGPFA_ADJUNTO			
		WHERE
			CGPFA_CODIGO = IN_CGPFA_CODIGO;
	END IF;
	
	UPDATE SII.CGG_GEM_PERFIL_ADJUNTO SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CGPFA_DESCRIPCION = IN_CGPFA_DESCRIPCION,
		CGPFA_TIPO = IN_CGPFA_TIPO,
		CGPFA_ESTADO = IN_CGPFA_ESTADO, 
		CGPFA_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGPFA_USUARIO_UPDATE = IN_CGPFA_USUARIO_UPDATE
	WHERE
		CGPFA_CODIGO = IN_CGPFA_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO.
* @param IN_CGPFA_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO DE UNA BECA 
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_SELECT(
IN IN_CGPFA_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPFA_CODIGO, 
		CRPER_CODIGO, 
		CGPFA_DESCRIPCION, 
		CGPFA_NOMBRE_ADJUNTO, 
		CGPFA_TIPO_ADJUNTO, 
		CGPFA_ADJUNTO, 
		CGPFA_ESTADO, 
		CGPFA_FECHA_INSERT, 
		CGPFA_USUARIO_INSERT, 
		CGPFA_FECHA_UPDATE, 
		CGPFA_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_ADJUNTO
	WHERE CGPFA_ESTADO = TRUE AND 
		CGPFA_CODIGO = IN_CGPFA_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO.
* @param IN_CGPFA_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO DE UNA BECA 
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_DELETE(
IN IN_CGPFA_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_PERFIL_ADJUNTO
	WHERE
		CGPFA_CODIGO = IN_CGPFA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO
* @param IN_CGPFA_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO DE UNA BECA 

* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_DELETE_SOFT(
IN IN_CGPFA_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PERFIL_ADJUNTO SET
		CGPFA_ESTADO = FALSE
	WHERE
		CGPFA_CODIGO = IN_CGPFA_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_S_CGG_GEM_PERFIL_PROF
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_CGPPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERFIL PROFESIONAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_S_CGG_GEM_PERFIL_PROF(
IN IN_CGPPR_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPFA_CODIGO, 
		CRPER_CODIGO, 
		CGPFA_DESCRIPCION, 
		CGPFA_NOMBRE_ADJUNTO, 
		CGPFA_TIPO_ADJUNTO, 
		CGPFA_ADJUNTO, 
		CGPFA_ESTADO, 
		CGPFA_FECHA_INSERT, 
		CGPFA_USUARIO_INSERT, 
		CGPFA_FECHA_UPDATE, 
		CGPFA_USUARIO_UPDATE
	FROM SII.CGG_GEM_PERFIL_ADJUNTO
	WHERE CGPFA_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CGPPR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_D_CGG_GEM_PERFIL_PROF
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_CGPPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERFIL PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_D_CGG_GEM_PERFIL_PROF(
IN IN_CGPPR_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_PERFIL_ADJUNTO
	WHERE
		CRPER_CODIGO = IN_CGPPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_D_CGG_GEM_PERFIL_PROF
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_PERFIL_PROF.
* @param IN_CGPPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERFIL PROFESIONAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_DS_CGG_GEM_PERFIL_PROF(
IN IN_CGPPR_CODIGO SII.CGG_GEM_PERFIL_ADJUNTO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PERFIL_ADJUNTO SET
		cgpfa_estado = false
	WHERE
		CRPER_CODIGO = IN_CGPPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_PERFIL_ADJUNTO_BYIDPERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_PERFIL_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE LA PERSONA
* @param IN_CGPFA_TIPO TIPO DE ARCHIVO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERFIL_ADJUNTO_BYIDPERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE,
IN IN_CGPFA_TIPO SII.CGG_GEM_PERFIL_ADJUNTO.CGPFA_TIPO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		PFA.CGPFA_CODIGO, 
		PFA.CRPER_CODIGO, 
		PFA.CGPFA_DESCRIPCION, 
		PFA.CGPFA_NOMBRE_ADJUNTO, 
		PFA.CGPFA_TIPO_ADJUNTO,
		PFA.CGPFA_TIPO
	FROM SII.CGG_GEM_PERFIL_ADJUNTO PFA
	WHERE PFA.CGPFA_ESTADO = TRUE AND 
		PFA.CRPER_CODIGO = IN_CRPER_CODIGO AND PFA.CGPFA_TIPO = IN_CGPFA_TIPO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;