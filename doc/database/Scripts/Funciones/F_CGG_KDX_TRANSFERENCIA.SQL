/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_TRANSFERENCIA
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @param IN_CKTRN_NUMERO_TRANSFERENCIA NUMERO SECUENCIAL UNICO DE IDENTIFICACION DE LA TRANSFERENCIA
* @param IN_CKTRN_FECHA_RECEPCION FECHA DE RECEPCION DE LAS ESPECIES
* @param IN_CKTRN_CANTIDAD CANTIDAD DE ESPECIES
* @param IN_CKTRN_PRECIO_UNITARIO PRECIO DE VENTA DE LA ESPECIE
* @param IN_CKTRN_SERIE_INICIO SERIE DE INICIO DE LAS ESPECIES
* @param IN_CKTRN_SERIE_FIN SERIE DE FIN DE LAS ESPECIES
* @param IN_CKTRN_OBSERVACION COMENTARIO AFIN A LA TRANSFERENCIA
* @param IN_CKTRN_CANTIDAD_DISPONIBLE CANTIDAD DE ESPECIES DISPONIBLES PARA ASIGNACIONES
* @param IN_CKTRN_ESTADO_TRANSFERENCIA ESTADO PARA ADMINISTRACION DE INFORMACION DE TRANSFERENCIAS
* @param IN_CKTRN_ESTADO ESTADO DEL REGISTRO
* @param IN_CKTRN_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKTRN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_INSERT(
IN IN_CKTRN_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKTRN_CODIGO%TYPE,
IN IN_CKPVT_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKPVT_CODIGO%TYPE,
IN IN_CKESP_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKESP_CODIGO%TYPE,
IN IN_CKTRN_NUMERO_TRANSFERENCIA SII.CGG_KDX_TRANSFERENCIA.CKTRN_NUMERO_TRANSFERENCIA%TYPE,
IN IN_CKTRN_FECHA_RECEPCION SII.CGG_KDX_TRANSFERENCIA.CKTRN_FECHA_RECEPCION%TYPE,
IN IN_CKTRN_CANTIDAD SII.CGG_KDX_TRANSFERENCIA.CKTRN_CANTIDAD%TYPE,
IN IN_CKTRN_PRECIO_UNITARIO SII.CGG_KDX_TRANSFERENCIA.CKTRN_PRECIO_UNITARIO%TYPE,
IN IN_CKTRN_SERIE_INICIO SII.CGG_KDX_TRANSFERENCIA.CKTRN_SERIE_INICIO%TYPE,
IN IN_CKTRN_SERIE_FIN SII.CGG_KDX_TRANSFERENCIA.CKTRN_SERIE_FIN%TYPE,
IN IN_CKTRN_OBSERVACION SII.CGG_KDX_TRANSFERENCIA.CKTRN_OBSERVACION%TYPE,
IN IN_CKTRN_CANTIDAD_DISPONIBLE SII.CGG_KDX_TRANSFERENCIA.CKTRN_CANTIDAD_DISPONIBLE%TYPE,
IN IN_CKTRN_ESTADO_TRANSFERENCIA SII.CGG_KDX_TRANSFERENCIA.CKTRN_ESTADO_TRANSFERENCIA%TYPE,
IN IN_CKTRN_ESTADO SII.CGG_KDX_TRANSFERENCIA.CKTRN_ESTADO%TYPE,
IN IN_CKTRN_USUARIO_INSERT SII.CGG_KDX_TRANSFERENCIA.CKTRN_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKTRN_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_TRANSFERENCIA','CKTRN_CODIGO','CKTRN') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKTRN_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_TRANSFERENCIA(
		CKTRN_CODIGO, 
		CKPVT_CODIGO, 
		CKESP_CODIGO, 
		CKTRN_NUMERO_TRANSFERENCIA, 
		CKTRN_FECHA_RECEPCION, 
		CKTRN_CANTIDAD, 
		CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN, 
		CKTRN_OBSERVACION, 
		CKTRN_CANTIDAD_DISPONIBLE, 
		CKTRN_ESTADO_TRANSFERENCIA, 
		CKTRN_ESTADO, 
		CKTRN_FECHA_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_FECHA_UPDATE, 
		CKTRN_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKPVT_CODIGO, 
		IN_CKESP_CODIGO, 
		IN_CKTRN_NUMERO_TRANSFERENCIA, 
		IN_CKTRN_FECHA_RECEPCION, 
		IN_CKTRN_CANTIDAD, 
		IN_CKTRN_PRECIO_UNITARIO, 
		IN_CKTRN_SERIE_INICIO, 
		IN_CKTRN_SERIE_FIN, 
		IN_CKTRN_OBSERVACION, 
		IN_CKTRN_CANTIDAD_DISPONIBLE, 
		IN_CKTRN_ESTADO_TRANSFERENCIA, 
		IN_CKTRN_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKTRN_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKTRN_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_TRANSFERENCIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKTRN_CODIGO, 
		CKPVT_CODIGO, 
		CKESP_CODIGO, 
		CKTRN_NUMERO_TRANSFERENCIA, 
		CKTRN_FECHA_RECEPCION, 
		CKTRN_CANTIDAD, 
		CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN, 
		CKTRN_OBSERVACION, 
		CKTRN_CANTIDAD_DISPONIBLE, 
		CKTRN_ESTADO_TRANSFERENCIA, 
		CKTRN_ESTADO, 
		CKTRN_FECHA_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_FECHA_UPDATE, 
		CKTRN_USUARIO_UPDATE
	FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE CKTRN_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_TRANSFERENCIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKTRN_CODIGO, 
		CKPVT_CODIGO, 
		CKESP_CODIGO, 
		CKTRN_NUMERO_TRANSFERENCIA, 
		CKTRN_FECHA_RECEPCION, 
		CKTRN_CANTIDAD, 
		CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN, 
		CKTRN_OBSERVACION, 
		CKTRN_CANTIDAD_DISPONIBLE, 
		CKTRN_ESTADO_TRANSFERENCIA, 
		CKTRN_ESTADO, 
		CKTRN_FECHA_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_FECHA_UPDATE, 
		CKTRN_USUARIO_UPDATE
	FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE CKTRN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKTRN_NUMERO_TRANSFERENCIA, '''')||'' ''||COALESCE(CKTRN_FECHA_RECEPCION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_CANTIDAD, 0)||'' ''||COALESCE(CKTRN_PRECIO_UNITARIO, 0)||'' ''||COALESCE(CKTRN_SERIE_INICIO, 0)||'' ''||COALESCE(CKTRN_SERIE_FIN, 0)||'' ''||COALESCE(CKTRN_CANTIDAD_DISPONIBLE, 0)||'' ''||COALESCE(CKTRN_ESTADO, FALSE)||'' ''||COALESCE(CKTRN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_USUARIO_INSERT, '''')||'' ''||COALESCE(CKTRN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKTRN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_TRANSFERENCIA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE CKTRN_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_TRANSFERENCIA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE CKTRN_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKTRN_NUMERO_TRANSFERENCIA, '''')||' '||COALESCE(CKTRN_FECHA_RECEPCION, CURRENT_TIMESTAMP)||' '||COALESCE(CKTRN_CANTIDAD, 0)||' '||COALESCE(CKTRN_PRECIO_UNITARIO, 0)||' '||COALESCE(CKTRN_SERIE_INICIO, 0)||' '||COALESCE(CKTRN_SERIE_FIN, 0)||' '||COALESCE(CKTRN_CANTIDAD_DISPONIBLE, 0)||' '||COALESCE(CKTRN_ESTADO, FALSE)||' '||COALESCE(CKTRN_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKTRN_USUARIO_INSERT, '''')||' '||COALESCE(CKTRN_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKTRN_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_TRANSFERENCIA
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @param IN_CKTRN_NUMERO_TRANSFERENCIA NUMERO SECUENCIAL UNICO DE IDENTIFICACION DE LA TRANSFERENCIA
* @param IN_CKTRN_FECHA_RECEPCION FECHA DE RECEPCION DE LAS ESPECIES
* @param IN_CKTRN_CANTIDAD CANTIDAD DE ESPECIES
* @param IN_CKTRN_PRECIO_UNITARIO PRECIO DE VENTA DE LA ESPECIE
* @param IN_CKTRN_SERIE_INICIO SERIE DE INICIO DE LAS ESPECIES
* @param IN_CKTRN_SERIE_FIN SERIE DE FIN DE LAS ESPECIES
* @param IN_CKTRN_OBSERVACION COMENTARIO AFIN A LA TRANSFERENCIA
* @param IN_CKTRN_CANTIDAD_DISPONIBLE CANTIDAD DE ESPECIES DISPONIBLES PARA ASIGNACIONES
* @param IN_CKTRN_ESTADO_TRANSFERENCIA ESTADO PARA ADMINISTRACION DE INFORMACION DE TRANSFERENCIAS
* @param IN_CKTRN_ESTADO ESTADO DEL REGISTRO
* @param IN_CKTRN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_UPDATE(
IN IN_CKTRN_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKTRN_CODIGO%TYPE,
IN IN_CKPVT_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKPVT_CODIGO%TYPE,
IN IN_CKESP_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKESP_CODIGO%TYPE,
IN IN_CKTRN_NUMERO_TRANSFERENCIA SII.CGG_KDX_TRANSFERENCIA.CKTRN_NUMERO_TRANSFERENCIA%TYPE,
IN IN_CKTRN_FECHA_RECEPCION SII.CGG_KDX_TRANSFERENCIA.CKTRN_FECHA_RECEPCION%TYPE,
IN IN_CKTRN_CANTIDAD SII.CGG_KDX_TRANSFERENCIA.CKTRN_CANTIDAD%TYPE,
IN IN_CKTRN_PRECIO_UNITARIO SII.CGG_KDX_TRANSFERENCIA.CKTRN_PRECIO_UNITARIO%TYPE,
IN IN_CKTRN_SERIE_INICIO SII.CGG_KDX_TRANSFERENCIA.CKTRN_SERIE_INICIO%TYPE,
IN IN_CKTRN_SERIE_FIN SII.CGG_KDX_TRANSFERENCIA.CKTRN_SERIE_FIN%TYPE,
IN IN_CKTRN_OBSERVACION SII.CGG_KDX_TRANSFERENCIA.CKTRN_OBSERVACION%TYPE,
IN IN_CKTRN_CANTIDAD_DISPONIBLE SII.CGG_KDX_TRANSFERENCIA.CKTRN_CANTIDAD_DISPONIBLE%TYPE,
IN IN_CKTRN_ESTADO_TRANSFERENCIA SII.CGG_KDX_TRANSFERENCIA.CKTRN_ESTADO_TRANSFERENCIA%TYPE,
IN IN_CKTRN_ESTADO SII.CGG_KDX_TRANSFERENCIA.CKTRN_ESTADO%TYPE,
IN IN_CKTRN_USUARIO_UPDATE SII.CGG_KDX_TRANSFERENCIA.CKTRN_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_TRANSFERENCIA SET
		CKPVT_CODIGO = IN_CKPVT_CODIGO, 
		CKESP_CODIGO = IN_CKESP_CODIGO, 
		CKTRN_NUMERO_TRANSFERENCIA = IN_CKTRN_NUMERO_TRANSFERENCIA, 
		CKTRN_FECHA_RECEPCION = IN_CKTRN_FECHA_RECEPCION, 
		CKTRN_CANTIDAD = IN_CKTRN_CANTIDAD, 
		CKTRN_PRECIO_UNITARIO = IN_CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO = IN_CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN = IN_CKTRN_SERIE_FIN, 
		CKTRN_OBSERVACION = IN_CKTRN_OBSERVACION, 
		CKTRN_CANTIDAD_DISPONIBLE = IN_CKTRN_CANTIDAD_DISPONIBLE, 
		CKTRN_ESTADO_TRANSFERENCIA = IN_CKTRN_ESTADO_TRANSFERENCIA, 
		CKTRN_ESTADO = IN_CKTRN_ESTADO, 
		CKTRN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKTRN_USUARIO_UPDATE = IN_CKTRN_USUARIO_UPDATE
	WHERE
		CKTRN_CODIGO = IN_CKTRN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_TRANSFERENCIA
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_SELECT(
IN IN_CKTRN_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKTRN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKTRN_CODIGO, 
		CKPVT_CODIGO, 
		CKESP_CODIGO, 
		CKTRN_NUMERO_TRANSFERENCIA, 
		CKTRN_FECHA_RECEPCION, 
		CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN, 
		CKTRN_OBSERVACION, 
		CKTRN_CANTIDAD_DISPONIBLE, 
		CKTRN_ESTADO_TRANSFERENCIA, 
		CKTRN_ESTADO, 
		CKTRN_FECHA_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_FECHA_UPDATE, 
		CKTRN_USUARIO_UPDATE
	FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE CKTRN_ESTADO = TRUE AND 
		CKTRN_CODIGO = IN_CKTRN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_TRANSFERENCIA
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_DELETE(
IN IN_CKTRN_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKTRN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE
		CKTRN_CODIGO = IN_CKTRN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_TRANSFERENCIA
* @param IN_CKTRN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA TRANSFERENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_DELETE_SOFT(
IN IN_CKTRN_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKTRN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_TRANSFERENCIA SET
		CKTRN_ESTADO = FALSE
	WHERE
		CKTRN_CODIGO = IN_CKTRN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_S_CGG_KDX_ESPECIE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_TRANSFERENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_S_CGG_KDX_ESPECIE(
IN IN_CKESP_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKESP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKTRN_CODIGO, 
		CKPVT_CODIGO, 
		CKESP_CODIGO, 
		CKTRN_NUMERO_TRANSFERENCIA, 
		CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN, 
		CKTRN_OBSERVACION, 
		CKTRN_CANTIDAD_DISPONIBLE, 
		CKTRN_ESTADO_TRANSFERENCIA, 
		CKTRN_ESTADO, 
		CKTRN_FECHA_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_FECHA_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_FECHA_UPDATE, 
		CKTRN_USUARIO_UPDATE
	FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE CKTRN_ESTADO = TRUE AND 
		CKESP_CODIGO = IN_CKESP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_D_CGG_KDX_ESPECIE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_TRANSFERENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_D_CGG_KDX_ESPECIE(
IN IN_CKESP_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE
		CKESP_CODIGO = IN_CKESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_D_CGG_KDX_ESPECIE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_TRANSFERENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_DS_CGG_KDX_ESPECIE(
IN IN_CKESP_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_TRANSFERENCIA SET
		cktrn_estado = false
	WHERE
		CKESP_CODIGO = IN_CKESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_S_CGG_KDX_PUNTO_VENTA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_TRANSFERENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_PUNTO_VENTA.
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_S_CGG_KDX_PUNTO_VENTA(
IN IN_CKPVT_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKPVT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKTRN_CODIGO, 
		CKPVT_CODIGO, 
		CKESP_CODIGO, 
		CKTRN_NUMERO_TRANSFERENCIA, 
		CKTRN_PRECIO_UNITARIO, 
		CKTRN_SERIE_INICIO, 
		CKTRN_SERIE_FIN, 
		CKTRN_OBSERVACION, 
		CKTRN_CANTIDAD_DISPONIBLE, 
		CKTRN_ESTADO_TRANSFERENCIA, 
		CKTRN_ESTADO, 
		CKTRN_FECHA_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_FECHA_INSERT, 
		CKTRN_USUARIO_INSERT, 
		CKTRN_FECHA_UPDATE, 
		CKTRN_USUARIO_UPDATE
	FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE CKTRN_ESTADO = TRUE AND 
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_D_CGG_KDX_PUNTO_VENTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_TRANSFERENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_PUNTO_VENTA.
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_D_CGG_KDX_PUNTO_VENTA(
IN IN_CKPVT_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKPVT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_TRANSFERENCIA
	WHERE
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_TRANSFERENCIA_D_CGG_KDX_PUNTO_VENTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_TRANSFERENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_PUNTO_VENTA.
* @param IN_CKPVT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PUNTO DE VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_TRANSFERENCIA_DS_CGG_KDX_PUNTO_VENTA(
IN IN_CKPVT_CODIGO SII.CGG_KDX_TRANSFERENCIA.CKPVT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_TRANSFERENCIA SET
		cktrn_estado = false
	WHERE
		CKPVT_CODIGO = IN_CKPVT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

