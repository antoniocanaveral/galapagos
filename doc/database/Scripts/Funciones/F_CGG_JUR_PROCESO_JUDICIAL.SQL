/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGSITRO DE PERSONA JURIDICA
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CJPJU_NUMERO NUMERO SECUENCIAL UNICO DEL PROCESO JUDICIAL
* @param IN_CJPJU_TIPO_PROCESO TIPO DE PROCESO
0 - DEMANDA PLANTEADA
1 - DEMANDA RECIBIDA
* @param IN_CJPJU_TIPO_ADVERSARIO TIPO DE ADVERSARIO
0 - PERSONA NATURAL
1 - PERSONA JURIDICA
* @param IN_CJPJU_FECHA_INICIO FECHA DE INICIO DEL PROCESO
* @param IN_CJPJU_FECHA_FINALIZACION FECHA DE FINALIZACION DEL PROCESO
* @param IN_CJPJU_ESTADO_EJECUCION ESTADO DE LA EJECUCION DEL PROCESO
0 - PLANTEADO
1 - EN PROCESO
2 - FINALIZADO
3 - SUSPENDIDO
* @param IN_CJPJU_RESPONSABLE PERSONA ENCARGADA DE LA SUPERVISION DEL ACUERDO
* @param IN_CJPJU_OBSERVACION OBSERVACIONES DEL ACUERDO - HISTORIAL JSON
* @param IN_CJPJU_ESTADO ESTADO DEL REGISTRO DE PROCESO JUDICIAL
* @param IN_CJPJU_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CJPJU_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_INSERT(
IN IN_CJPJU_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_CODIGO%TYPE,
IN IN_CCTN_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CCTN_CODIGO%TYPE,
IN IN_CRPJR_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPJR_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPER_CODIGO%TYPE,
IN IN_CJPJU_NUMERO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_NUMERO%TYPE,
IN IN_CJPJU_TIPO_PROCESO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_TIPO_PROCESO%TYPE,
IN IN_CJPJU_TIPO_ADVERSARIO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_TIPO_ADVERSARIO%TYPE,
IN IN_CJPJU_FECHA_INICIO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_FECHA_INICIO%TYPE,
IN IN_CJPJU_FECHA_FINALIZACION SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_FECHA_FINALIZACION%TYPE,
IN IN_CJPJU_ESTADO_EJECUCION SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_ESTADO_EJECUCION%TYPE,
IN IN_CJPJU_RESPONSABLE SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_RESPONSABLE%TYPE,
IN IN_CJPJU_OBSERVACION SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_OBSERVACION%TYPE,
IN IN_CJPJU_ESTADO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_ESTADO%TYPE,
IN IN_CJPJU_USUARIO_INSERT SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CJPJU_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_JUR_PROCESO_JUDICIAL','CJPJU_CODIGO','CJPJU') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CJPJU_CODIGO;
	END IF;
	INSERT INTO SII.CGG_JUR_PROCESO_JUDICIAL(
		CJPJU_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_CODIGO, 
		CRPER_CODIGO, 
		CJPJU_NUMERO, 
		CJPJU_TIPO_PROCESO, 
		CJPJU_TIPO_ADVERSARIO, 
		CJPJU_FECHA_INICIO, 
		CJPJU_FECHA_FINALIZACION, 
		CJPJU_ESTADO_EJECUCION, 
		CJPJU_RESPONSABLE, 
		CJPJU_OBSERVACION, 
		CJPJU_ESTADO, 
		CJPJU_FECHA_INSERT, 
		CJPJU_USUARIO_INSERT, 
		CJPJU_FECHA_UPDATE, 
		CJPJU_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CCTN_CODIGO, 
		IN_CRPJR_CODIGO, 
		IN_CRPER_CODIGO, 
		IN_CJPJU_NUMERO, 
		IN_CJPJU_TIPO_PROCESO, 
		IN_CJPJU_TIPO_ADVERSARIO, 
		IN_CJPJU_FECHA_INICIO, 
		IN_CJPJU_FECHA_FINALIZACION, 
		IN_CJPJU_ESTADO_EJECUCION, 
		IN_CJPJU_RESPONSABLE, 
		IN_CJPJU_OBSERVACION, 
		IN_CJPJU_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CJPJU_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CJPJU_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJPJU_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_CODIGO, 
		CRPER_CODIGO, 
		CJPJU_NUMERO, 
		CJPJU_TIPO_PROCESO, 
		CJPJU_TIPO_ADVERSARIO, 
		CJPJU_FECHA_INICIO, 
		CJPJU_FECHA_FINALIZACION, 
		CJPJU_ESTADO_EJECUCION, 
		CJPJU_RESPONSABLE, 
		CJPJU_OBSERVACION, 
		CJPJU_ESTADO, 
		CJPJU_FECHA_INSERT, 
		CJPJU_USUARIO_INSERT, 
		CJPJU_FECHA_UPDATE, 
		CJPJU_USUARIO_UPDATE
	FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE CJPJU_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL
* @PARAM IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @PARAM IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @PARAM IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @PARAM IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @PARAM IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @PARAM IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @RETURN REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		PJ.CJPJU_CODIGO, 
		PJ.CCTN_CODIGO, 
		(SELECT CCTN_NOMBRE FROM CGG_CANTON CT WHERE (CT.CCTN_CODIGO = PJ.CCTN_CODIGO)) CANTON,		
		PJ.CRPJR_CODIGO, 
		PJA.CRPJR_RAZON_SOCIAL,		
		PJ.CRPER_CODIGO, 
		(PER.CRPER_NOMBRES||'' ''||PER.CRPER_APELLIDO_PATERNO||'' ''||PER.CRPER_APELLIDO_MATERNO) PERSONA,
		PJ.CJPJU_NUMERO, 
		PJ.CJPJU_TIPO_PROCESO, 
		PJ.CJPJU_TIPO_ADVERSARIO, 
		PJ.CJPJU_FECHA_INICIO, 
		PJ.CJPJU_FECHA_FINALIZACION, 
		PJ.CJPJU_ESTADO_EJECUCION, 
		PJ.CJPJU_RESPONSABLE, 
		PJ.CJPJU_OBSERVACION, 
		PJ.CJPJU_ESTADO, 
		PJ.CJPJU_FECHA_INSERT, 
		PJ.CJPJU_USUARIO_INSERT, 
		PJ.CJPJU_FECHA_UPDATE, 
		PJ.CJPJU_USUARIO_UPDATE
	FROM SII.CGG_JUR_PROCESO_JUDICIAL PJ
	LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA PJA ON(PJA.CRPJR_CODIGO = PJ.CRPJR_CODIGO)
	LEFT JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO = PJ.CRPER_CODIGO)
	WHERE CJPJU_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(PJA.CRPJR_RAZON_SOCIAL,'''')||'' ''||
	COALESCE(PER.CRPER_NOMBRES)||'' ''||
	COALESCE(PER.CRPER_APELLIDO_PATERNO)||'' ''||
	COALESCE(PER.CRPER_APELLIDO_MATERNO)||'' ''||
	COALESCE(CJPJU_NUMERO, '''')||'' ''||
	COALESCE(CJPJU_TIPO_PROCESO, 0)||'' ''||
	COALESCE(CJPJU_TIPO_ADVERSARIO, 0)||'' ''||
	COALESCE(CJPJU_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CJPJU_FECHA_FINALIZACION, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CJPJU_ESTADO_EJECUCION, 0)||'' ''||
	COALESCE(CJPJU_RESPONSABLE, '''')||'' ''||
	COALESCE(CJPJU_OBSERVACION, '''')||'' ''||
	COALESCE(CJPJU_ESTADO, FALSE)||'' ''||
	COALESCE(CJPJU_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CJPJU_USUARIO_INSERT, '''')||'' ''||
	COALESCE(CJPJU_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CJPJU_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE CJPJU_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE CJPJU_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CJPJU_NUMERO, '''')||' '||COALESCE(CJPJU_TIPO_PROCESO, 0)||' '||COALESCE(CJPJU_TIPO_ADVERSARIO, 0)||' '||COALESCE(CJPJU_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||COALESCE(CJPJU_FECHA_FINALIZACION, CURRENT_TIMESTAMP)||' '||COALESCE(CJPJU_ESTADO_EJECUCION, 0)||' '||COALESCE(CJPJU_RESPONSABLE, '''')||' '||COALESCE(CJPJU_OBSERVACION, '''')||' '||COALESCE(CJPJU_ESTADO, FALSE)||' '||COALESCE(CJPJU_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CJPJU_USUARIO_INSERT, '''')||' '||COALESCE(CJPJU_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CJPJU_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGSITRO DE PERSONA JURIDICA
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CJPJU_NUMERO NUMERO SECUENCIAL UNICO DEL PROCESO JUDICIAL
* @param IN_CJPJU_TIPO_PROCESO TIPO DE PROCESO
0 - DEMANDA PLANTEADA
1 - DEMANDA RECIBIDA
* @param IN_CJPJU_TIPO_ADVERSARIO TIPO DE ADVERSARIO
0 - PERSONA NATURAL
1 - PERSONA JURIDICA
* @param IN_CJPJU_FECHA_INICIO FECHA DE INICIO DEL PROCESO
* @param IN_CJPJU_FECHA_FINALIZACION FECHA DE FINALIZACION DEL PROCESO
* @param IN_CJPJU_ESTADO_EJECUCION ESTADO DE LA EJECUCION DEL PROCESO
0 - PLANTEADO
1 - EN PROCESO
2 - FINALIZADO
3 - SUSPENDIDO
* @param IN_CJPJU_RESPONSABLE PERSONA ENCARGADA DE LA SUPERVISION DEL ACUERDO
* @param IN_CJPJU_OBSERVACION OBSERVACIONES DEL ACUERDO - HISTORIAL JSON
* @param IN_CJPJU_ESTADO ESTADO DEL REGISTRO DE PROCESO JUDICIAL
* @param IN_CJPJU_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_UPDATE(
IN IN_CJPJU_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_CODIGO%TYPE,
IN IN_CCTN_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CCTN_CODIGO%TYPE,
IN IN_CRPJR_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPJR_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPER_CODIGO%TYPE,
IN IN_CJPJU_NUMERO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_NUMERO%TYPE,
IN IN_CJPJU_TIPO_PROCESO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_TIPO_PROCESO%TYPE,
IN IN_CJPJU_TIPO_ADVERSARIO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_TIPO_ADVERSARIO%TYPE,
IN IN_CJPJU_FECHA_INICIO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_FECHA_INICIO%TYPE,
IN IN_CJPJU_FECHA_FINALIZACION SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_FECHA_FINALIZACION%TYPE,
IN IN_CJPJU_ESTADO_EJECUCION SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_ESTADO_EJECUCION%TYPE,
IN IN_CJPJU_RESPONSABLE SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_RESPONSABLE%TYPE,
IN IN_CJPJU_OBSERVACION SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_OBSERVACION%TYPE,
IN IN_CJPJU_ESTADO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_ESTADO%TYPE,
IN IN_CJPJU_USUARIO_UPDATE SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_PROCESO_JUDICIAL SET
		CCTN_CODIGO = IN_CCTN_CODIGO, 
		CRPJR_CODIGO = IN_CRPJR_CODIGO, 
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CJPJU_NUMERO = IN_CJPJU_NUMERO, 
		CJPJU_TIPO_PROCESO = IN_CJPJU_TIPO_PROCESO, 
		CJPJU_TIPO_ADVERSARIO = IN_CJPJU_TIPO_ADVERSARIO, 
		CJPJU_FECHA_INICIO = IN_CJPJU_FECHA_INICIO, 
		CJPJU_FECHA_FINALIZACION = IN_CJPJU_FECHA_FINALIZACION, 
		CJPJU_ESTADO_EJECUCION = IN_CJPJU_ESTADO_EJECUCION, 
		CJPJU_RESPONSABLE = IN_CJPJU_RESPONSABLE, 
		CJPJU_OBSERVACION = IN_CJPJU_OBSERVACION, 
		CJPJU_ESTADO = IN_CJPJU_ESTADO, 
		CJPJU_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CJPJU_USUARIO_UPDATE = IN_CJPJU_USUARIO_UPDATE
	WHERE
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
END$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_SELECT(
IN IN_CJPJU_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJPJU_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_CODIGO, 
		CRPER_CODIGO, 
		CJPJU_NUMERO, 
		CJPJU_TIPO_PROCESO, 
		CJPJU_TIPO_ADVERSARIO, 
		CJPJU_FECHA_INICIO, 
		CJPJU_FECHA_FINALIZACION, 
		CJPJU_ESTADO_EJECUCION, 
		CJPJU_RESPONSABLE, 
		CJPJU_OBSERVACION, 
		CJPJU_ESTADO, 
		CJPJU_FECHA_INSERT, 
		CJPJU_USUARIO_INSERT, 
		CJPJU_FECHA_UPDATE, 
		CJPJU_USUARIO_UPDATE
	FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE CJPJU_ESTADO = TRUE AND 
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_DELETE(
IN IN_CJPJU_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_DELETE_SOFT(
IN IN_CJPJU_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CJPJU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_PROCESO_JUDICIAL SET
		CJPJU_ESTADO = FALSE
	WHERE
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
END$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_S_CGG_RES_PERSONA_JURIDICA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA_JURIDICA.
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGSITRO DE PERSONA JURIDICA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_S_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPJR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJPJU_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_CODIGO, 
		CRPER_CODIGO, 
		CJPJU_NUMERO, 
		CJPJU_TIPO_PROCESO, 
		CJPJU_TIPO_ADVERSARIO, 
		CJPJU_FECHA_INICIO, 
		CJPJU_FECHA_FINALIZACION, 
		CJPJU_ESTADO_EJECUCION, 
		CJPJU_RESPONSABLE, 
		CJPJU_OBSERVACION, 
		CJPJU_ESTADO, 
		CJPJU_FECHA_INSERT, 
		CJPJU_USUARIO_INSERT, 
		CJPJU_FECHA_UPDATE, 
		CJPJU_USUARIO_UPDATE
	FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE CJPJU_ESTADO = TRUE AND 
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_D_CGG_RES_PERSONA_JURIDICA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA_JURIDICA.
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGSITRO DE PERSONA JURIDICA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_D_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_D_CGG_RES_PERSONA_JURIDICA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA_JURIDICA.
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGSITRO DE PERSONA JURIDICA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_DS_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_PROCESO_JUDICIAL SET
		CJPJU_ESTADO = FALSE
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJPJU_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_CODIGO, 
		CRPER_CODIGO, 
		CJPJU_NUMERO, 
		CJPJU_TIPO_PROCESO, 
		CJPJU_TIPO_ADVERSARIO, 
		CJPJU_FECHA_INICIO, 
		CJPJU_FECHA_FINALIZACION, 
		CJPJU_ESTADO_EJECUCION, 
		CJPJU_RESPONSABLE, 
		CJPJU_OBSERVACION, 
		CJPJU_ESTADO, 
		CJPJU_FECHA_INSERT, 
		CJPJU_USUARIO_INSERT, 
		CJPJU_FECHA_UPDATE, 
		CJPJU_USUARIO_UPDATE
	FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE CJPJU_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_PROCESO_JUDICIAL SET
		CJPJU_ESTADO = FALSE
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_S_CGG_CANTON
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_S_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CCTN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJPJU_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_CODIGO, 
		CRPER_CODIGO, 
		CJPJU_NUMERO, 
		CJPJU_TIPO_PROCESO, 
		CJPJU_TIPO_ADVERSARIO, 
		CJPJU_FECHA_INICIO, 
		CJPJU_FECHA_FINALIZACION, 
		CJPJU_ESTADO_EJECUCION, 
		CJPJU_RESPONSABLE, 
		CJPJU_OBSERVACION, 
		CJPJU_ESTADO, 
		CJPJU_FECHA_INSERT, 
		CJPJU_USUARIO_INSERT, 
		CJPJU_FECHA_UPDATE, 
		CJPJU_USUARIO_UPDATE
	FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE CJPJU_ESTADO = TRUE AND 
		CCTN_CODIGO = IN_CCTN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_D_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_PROCESO_JUDICIAL
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_PROCESO_JUDICIAL_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_PROCESO_JUDICIAL_DS_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_JUR_PROCESO_JUDICIAL.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_PROCESO_JUDICIAL SET
		CJPJU_ESTADO = FALSE
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

