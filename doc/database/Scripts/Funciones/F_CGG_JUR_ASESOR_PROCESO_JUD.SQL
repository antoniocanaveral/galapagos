/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD.
* @param IN_CJASP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONVENIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CJASP_ACTIVO ESTADO QUE DETERMINA SI UN ENCARGADO SE HALLA ACTIVO SOBRE UN PROCESO
* @param IN_CJASP_ESTADO ESTADO DEL REGISTRO
* @param IN_CJASP_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CJASP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_INSERT(
IN IN_CJASP_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_CODIGO%TYPE, 
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJPJU_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CUSU_CODIGO%TYPE, 
IN IN_CJASP_ACTIVO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_ACTIVO%TYPE, 
IN IN_CJASP_ESTADO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_ESTADO%TYPE, 
IN IN_CJASP_USUARIO_INSERT SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_USUARIO_INSERT%TYPE, 
IN IN_CJASP_USUARIO_UPDATE SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CJASP_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_JUR_ASESOR_PROCESO_JUD','CJASP_CODIGO','CJASP') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CJASP_CODIGO;
	END IF;
	INSERT INTO SII.CGG_JUR_ASESOR_PROCESO_JUD(
		CJASP_CODIGO, 
		CJPJU_CODIGO, 
		CUSU_CODIGO, 
		CJASP_ACTIVO, 
		CJASP_ESTADO, 
		CJASP_FECHA_INSERT, 
		CJASP_USUARIO_INSERT, 
		CJASP_FECHA_UPDATE, 
		CJASP_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CJPJU_CODIGO, 
		IN_CUSU_CODIGO, 
		IN_CJASP_ACTIVO, 
		IN_CJASP_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CJASP_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CJASP_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJASP_CODIGO, 
		CJPJU_CODIGO, 
		CUSU_CODIGO, 
		CJASP_ACTIVO, 
		CJASP_ESTADO, 
		CJASP_FECHA_INSERT, 
		CJASP_USUARIO_INSERT, 
		CJASP_FECHA_UPDATE, 
		CJASP_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE CJASP_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CJASP_CODIGO, 
		CJPJU_CODIGO, 
		CUSU_CODIGO, 
		CJASP_ACTIVO, 
		CJASP_ESTADO, 
		CJASP_FECHA_INSERT, 
		CJASP_USUARIO_INSERT, 
		CJASP_FECHA_UPDATE, 
		CJASP_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE CJASP_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CJASP_CODIGO IS NULL THEN '''' ELSE CJASP_CODIGO END ||'' ''||CASE WHEN CJPJU_CODIGO IS NULL THEN '''' ELSE CJPJU_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CJASP_ACTIVO IS NULL THEN FALSE ELSE CJASP_ACTIVO END ||'' ''||CASE WHEN CJASP_ESTADO IS NULL THEN FALSE ELSE CJASP_ESTADO END ||'' ''||CASE WHEN CJASP_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CJASP_FECHA_INSERT END ||'' ''||CASE WHEN CJASP_USUARIO_INSERT IS NULL THEN '''' ELSE CJASP_USUARIO_INSERT END ||'' ''||CASE WHEN CJASP_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CJASP_FECHA_UPDATE END ||'' ''||CASE WHEN CJASP_USUARIO_UPDATE IS NULL THEN '''' ELSE CJASP_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE CJASP_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE CJASP_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CJASP_CODIGO IS NULL THEN '''' ELSE CJASP_CODIGO END ||' '||CASE WHEN CJPJU_CODIGO IS NULL THEN '''' ELSE CJPJU_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CJASP_ACTIVO IS NULL THEN FALSE ELSE CJASP_ACTIVO END ||' '||CASE WHEN CJASP_ESTADO IS NULL THEN FALSE ELSE CJASP_ESTADO END ||' '||CASE WHEN CJASP_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CJASP_FECHA_INSERT END ||' '||CASE WHEN CJASP_USUARIO_INSERT IS NULL THEN '''' ELSE CJASP_USUARIO_INSERT END ||' '||CASE WHEN CJASP_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CJASP_FECHA_UPDATE END ||' '||CASE WHEN CJASP_USUARIO_UPDATE IS NULL THEN '''' ELSE CJASP_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_JUR_ASESOR_PROCESO_JUD.
* @param IN_CJASP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONVENIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CJASP_ACTIVO ESTADO QUE DETERMINA SI UN ENCARGADO SE HALLA ACTIVO SOBRE UN PROCESO
* @param IN_CJASP_ESTADO ESTADO DEL REGISTRO
* @param IN_CJASP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_UPDATE(
IN IN_CJASP_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_CODIGO%TYPE, 
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJPJU_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CUSU_CODIGO%TYPE, 
IN IN_CJASP_ACTIVO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_ACTIVO%TYPE, 
IN IN_CJASP_ESTADO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_ESTADO%TYPE, 
IN IN_CJASP_USUARIO_UPDATE SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_ASESOR_PROCESO_JUD SET
		CJPJU_CODIGO = IN_CJPJU_CODIGO, 
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CJASP_ACTIVO = IN_CJASP_ACTIVO, 
		CJASP_ESTADO = IN_CJASP_ESTADO, 
		CJASP_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CJASP_USUARIO_UPDATE = IN_CJASP_USUARIO_UPDATE
	WHERE
		CJASP_CODIGO = IN_CJASP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD.
* @param IN_CJASP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_SELECT(
IN IN_CJASP_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJASP_CODIGO, 
		CJPJU_CODIGO, 
		CUSU_CODIGO, 
		CJASP_ACTIVO, 
		CJASP_ESTADO, 
		CJASP_FECHA_INSERT, 
		CJASP_USUARIO_INSERT, 
		CJASP_FECHA_UPDATE, 
		CJASP_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE CJASP_ESTADO = TRUE AND 
		CJASP_CODIGO = IN_CJASP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD.
* @param IN_CJASP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_DELETE(
IN IN_CJASP_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE
		CJASP_CODIGO = IN_CJASP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD.
* @param IN_CJASP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_DELETE_SOFT(
IN IN_CJASP_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJASP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_ASESOR_PROCESO_JUD SET
		CJASP_ESTADO = FALSE
	WHERE
		CJASP_CODIGO = IN_CJASP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJASP_CODIGO, 
		CJPJU_CODIGO, 
		CUSU_CODIGO, 
		CJASP_ACTIVO, 
		CJASP_ESTADO, 
		CJASP_FECHA_INSERT, 
		CJASP_USUARIO_INSERT, 
		CJASP_FECHA_UPDATE, 
		CJASP_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE CJASP_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_ASESOR_PROCESO_JUD SET
		cjasp_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_S_CGG_JUR_PROCESO_JUDICIAL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONVENIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_S_CGG_JUR_PROCESO_JUDICIAL(
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJPJU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJASP_CODIGO, 
		CJPJU_CODIGO, 
		CUSU_CODIGO, 
		CJASP_ACTIVO, 
		CJASP_ESTADO, 
		CJASP_FECHA_INSERT, 
		CJASP_USUARIO_INSERT, 
		CJASP_FECHA_UPDATE, 
		CJASP_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE CJASP_ESTADO = TRUE AND 
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_D_CGG_JUR_PROCESO_JUDICIAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONVENIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_D_CGG_JUR_PROCESO_JUDICIAL(
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJPJU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_ASESOR_PROCESO_JUD
	WHERE
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_D_CGG_JUR_PROCESO_JUDICIAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR_PROCESO_JUD QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONVENIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_PROCESO_JUD_DS_CGG_JUR_PROCESO_JUDICIAL(
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR_PROCESO_JUD.CJPJU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_ASESOR_PROCESO_JUD SET
		cjasp_estado = false
	WHERE
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

