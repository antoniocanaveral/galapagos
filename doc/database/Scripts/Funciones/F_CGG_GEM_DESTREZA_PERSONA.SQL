/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @param IN_CGDPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CGDST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGDPR_ESTADO ESTADO DEL REGISTRO
* @param IN_CGDPR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGDPR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_INSERT(
IN IN_CGDPR_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CRPER_CODIGO%TYPE, 
IN IN_CGDST_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CGDST_CODIGO%TYPE, 
IN IN_CGDPR_ESTADO SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_ESTADO%TYPE, 
IN IN_CGDPR_USUARIO_INSERT SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_USUARIO_INSERT%TYPE, 
IN IN_CGDPR_USUARIO_UPDATE SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
	TMP_COUNT INT2;
	OUT_KEY VARCHAR;
BEGIN
	SELECT COUNT(CRPER_CODIGO) INTO TMP_COUNT 
	FROM SII.CGG_GEM_DESTREZA_PERSONA	
	WHERE CRPER_CODIGO = IN_CRPER_CODIGO AND CGDST_CODIGO = IN_CGDST_CODIGO AND CGDPR_ESTADO = TRUE;
	
	IF (TMP_COUNT>0) THEN
		RAISE EXCEPTION 'No se puede ingresar la destreza ya que este datos ya fue ingresado';
	END IF;
	
	IF (UPPER(IN_CGDPR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_DESTREZA_PERSONA','CGDPR_CODIGO','CGDPR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGDPR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_DESTREZA_PERSONA(
		CGDPR_CODIGO, 
		CRPER_CODIGO, 
		CGDST_CODIGO, 
		CGDPR_ESTADO, 
		CGDPR_FECHA_INSERT, 
		CGDPR_USUARIO_INSERT, 
		CGDPR_FECHA_UPDATE, 
		CGDPR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CGDST_CODIGO, 
		IN_CGDPR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGDPR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGDPR_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGDPR_CODIGO, 
		CRPER_CODIGO, 
		CGDST_CODIGO, 
		CGDPR_ESTADO, 
		CGDPR_FECHA_INSERT, 
		CGDPR_USUARIO_INSERT, 
		CGDPR_FECHA_UPDATE, 
		CGDPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA_PERSONA
	WHERE CGDPR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGDPR_CODIGO, 
		CRPER_CODIGO, 
		CGDST_CODIGO, 
		CGDPR_ESTADO, 
		CGDPR_FECHA_INSERT, 
		CGDPR_USUARIO_INSERT, 
		CGDPR_FECHA_UPDATE, 
		CGDPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA_PERSONA
	WHERE CGDPR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGDST_CODIGO, '''')||'' ''||COALESCE(CGDPR_ESTADO, FALSE)||'' ''||COALESCE(CGDPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGDPR_USUARIO_INSERT, '''')||'' ''||COALESCE(CGDPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGDPR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_DESTREZA_PERSONA
	WHERE CGDPR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_DESTREZA_PERSONA
	WHERE CGDPR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGDST_CODIGO, '''')||' '||COALESCE(CGDPR_ESTADO, FALSE)||' '||COALESCE(CGDPR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGDPR_USUARIO_INSERT, '''')||' '||COALESCE(CGDPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGDPR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_DESTREZA_PERSONA,
* @param IN_CGDPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CGDST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGDPR_ESTADO ESTADO DEL REGISTRO
* @param IN_CGDPR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_UPDATE(
IN IN_CGDPR_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CRPER_CODIGO%TYPE, 
IN IN_CGDST_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CGDST_CODIGO%TYPE, 
IN IN_CGDPR_ESTADO SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_ESTADO%TYPE, 
IN IN_CGDPR_USUARIO_UPDATE SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_DESTREZA_PERSONA SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CGDST_CODIGO = IN_CGDST_CODIGO, 
		CGDPR_ESTADO = IN_CGDPR_ESTADO, 
		CGDPR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGDPR_USUARIO_UPDATE = IN_CGDPR_USUARIO_UPDATE
	WHERE
		CGDPR_CODIGO = IN_CGDPR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @param IN_CGDPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_SELECT(
IN IN_CGDPR_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGDPR_CODIGO, 
		CRPER_CODIGO, 
		CGDST_CODIGO, 
		CGDPR_ESTADO, 
		CGDPR_FECHA_INSERT, 
		CGDPR_USUARIO_INSERT, 
		CGDPR_FECHA_UPDATE, 
		CGDPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA_PERSONA
	WHERE CGDPR_ESTADO = TRUE AND 
		CGDPR_CODIGO = IN_CGDPR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @param IN_CGDPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_DELETE(
IN IN_CGDPR_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_DESTREZA_PERSONA
	WHERE
		CGDPR_CODIGO = IN_CGDPR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @param IN_CGDPR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_DELETE_SOFT(
IN IN_CGDPR_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CGDPR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_DESTREZA_PERSONA SET
		CGDPR_ESTADO = FALSE
	WHERE
		CGDPR_CODIGO = IN_CGDPR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGDPR_CODIGO, 
		CRPER_CODIGO, 
		CGDST_CODIGO, 
		CGDPR_ESTADO, 
		CGDPR_FECHA_INSERT, 
		CGDPR_USUARIO_INSERT, 
		CGDPR_FECHA_UPDATE, 
		CGDPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA_PERSONA
	WHERE CGDPR_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_DESTREZA_PERSONA
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_DESTREZA_PERSONA.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_DESTREZA_PERSONA SET
		cgdpr_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZAS_PERSONA_BYID
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZAS_PERSONA_BYID(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT	
		DES.CGDST_DESCRIPCION		
	FROM SII.CGG_RES_PERSONA PER INNER JOIN SII.CGG_GEM_DESTREZA_PERSONA DPE ON(PER.CRPER_CODIGO=DPE.CRPER_CODIGO) 
	INNER JOIN SII.CGG_GEM_DESTREZA DES ON(DES.CGDST_CODIGO=DPE.CGDST_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE AND 
		PER.CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_SELECTPAGE_BYID
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CRPER_CODIGO CRITERIO DE BUSQUEDA, CODIGO DE LA PERSONA A BUSCAR
* @param IN_CGDST_TIPO CRITERIO DE BUSQUEDA, TIPO DE REGISTRO DE LA TABLA DESTREZA TRUE - DESTREZA / FALSE - HABILIDAD
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_SELECTPAGE_BYID(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CRPER_CODIGO VARCHAR,
IN IN_CGDST_TIPO BOOL
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		DPE.CGDPR_CODIGO, 
		DPE.CRPER_CODIGO, 
		DPE.CGDST_CODIGO,
		DES.CGDST_DESCRIPCION,
		DPE.CGDPR_ESTADO, 
		DPE.CGDPR_FECHA_INSERT, 
		DPE.CGDPR_USUARIO_INSERT, 
		DPE.CGDPR_FECHA_UPDATE, 
		DPE.CGDPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA_PERSONA DPE INNER JOIN SII.CGG_GEM_DESTREZA DES ON(DPE.CGDST_CODIGO=DES.CGDST_CODIGO)
	WHERE DPE.CGDPR_ESTADO = TRUE AND DES.CGDST_TIPO = '''||IN_CGDST_TIPO||''' AND DPE.CRPER_CODIGO='''||IN_CRPER_CODIGO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(DES.CGDST_DESCRIPCION, '''')||'' ''||COALESCE(DPE.CGDST_CODIGO, '''')||'' ''||COALESCE(DPE.CGDPR_ESTADO, FALSE)||'' ''||COALESCE(DPE.CGDPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(DPE.CGDPR_USUARIO_INSERT, '''')||'' ''||COALESCE(DPE.CGDPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(DPE.CGDPR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_DESTREZA_PERSONA_COUNT_BYID
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CRPER_CODIGO CRITERIO DE BUSQUEDA, CODIGO DE LA PERSONA A BUSCAR
* @param IN_CGDST_TIPO CRITERIO DE BUSQUEDA, TIPO DE REGISTRO DE LA TABLA DESTREZA TRUE - DESTREZA / FALSE - HABILIDAD
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_PERSONA_COUNT_BYID(
IN IN_FIND_TEXT TEXT,
IN IN_CRPER_CODIGO VARCHAR,
IN IN_CGDST_TIPO BOOL
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_DESTREZA_PERSONA DPE INNER JOIN SII.CGG_GEM_DESTREZA DES ON(DPE.CGDST_CODIGO=DES.CGDST_CODIGO)
	WHERE DPE.CGDPR_ESTADO = TRUE AND DES.CGDST_TIPO=IN_CGDST_TIPO AND DPE.CRPER_CODIGO=IN_CRPER_CODIGO AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(DES.CGDST_DESCRIPCION, '''')||' '||COALESCE(DPE.CGDST_CODIGO, '''')||' '||COALESCE(DPE.CGDPR_ESTADO, FALSE)||' '||COALESCE(DPE.CGDPR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(DPE.CGDPR_USUARIO_INSERT, '''')||' '||COALESCE(DPE.CGDPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(DPE.CGDPR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_GEM_DESTREZA_HABILIDAD_PERSONA_SELECTPAGE_BYID
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CRPER_CODIGO CRITERIO DE BUSQUEDA, CODIGO DE LA PERSONA A BUSCAR
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_HABILIDAD_PERSONA_SELECTPAGE_BYID(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CRPER_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		DPE.CGDPR_CODIGO, 
		DPE.CRPER_CODIGO, 
		DPE.CGDST_CODIGO,
		DES.CGDST_DESCRIPCION,
		DES.CGDST_TIPO,
		DPE.CGDPR_ESTADO, 
		DPE.CGDPR_FECHA_INSERT, 
		DPE.CGDPR_USUARIO_INSERT, 
		DPE.CGDPR_FECHA_UPDATE, 
		DPE.CGDPR_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA_PERSONA DPE INNER JOIN SII.CGG_GEM_DESTREZA DES ON(DPE.CGDST_CODIGO=DES.CGDST_CODIGO)
	WHERE DPE.CGDPR_ESTADO = TRUE AND DPE.CRPER_CODIGO='''||IN_CRPER_CODIGO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(DES.CGDST_DESCRIPCION, '''')||'' ''||COALESCE(DPE.CGDST_CODIGO, '''')||'' ''||COALESCE(DPE.CGDPR_ESTADO, FALSE)||'' ''||COALESCE(DPE.CGDPR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(DPE.CGDPR_USUARIO_INSERT, '''')||'' ''||COALESCE(DPE.CGDPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(DPE.CGDPR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_HABILIDAD_PERSONA_COUNT_BYID
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA_PERSONA.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CRPER_CODIGO CRITERIO DE BUSQUEDA, CODIGO DE LA PERSONA A BUSCAR
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_HABILIDAD_PERSONA_COUNT_BYID(
IN IN_FIND_TEXT TEXT,
IN IN_CRPER_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_DESTREZA_PERSONA DPE INNER JOIN SII.CGG_GEM_DESTREZA DES ON(DPE.CGDST_CODIGO=DES.CGDST_CODIGO)
	WHERE DPE.CGDPR_ESTADO = TRUE AND DPE.CRPER_CODIGO=IN_CRPER_CODIGO AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(DES.CGDST_DESCRIPCION, '''')||' '||COALESCE(DPE.CGDST_CODIGO, '''')||' '||COALESCE(DPE.CGDPR_ESTADO, FALSE)||' '||COALESCE(DPE.CGDPR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(DPE.CGDPR_USUARIO_INSERT, '''')||' '||COALESCE(DPE.CGDPR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(DPE.CGDPR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;