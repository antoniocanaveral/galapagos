/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_PREREGISTRO_EMPRESA
* @param IN_CGPRE_CODIGO IDENTIFICATIVO UNICO DEL PRE-REGISTRO DE EMPRESAS
* @param IN_CGPRE_RAZON_SOCIAL DESCRIPCION SOBRE LA RAZON SOCIAL
* @param IN_CGPRE_RUC RUC ESPECIFICO DE LA EMPRESA
* @param IN_CGPRE_REPRESENTANTE REPRESENTANTE DE LA EMPRESA
* @param IN_CGPRE_FECHA_CREACION FECHA DE CREACION DE LA EMPRESA
* @param IN_CGPRE_ACTIVIDAD ACTIVIDAD A LA QUE SE DEDICA LA EMPRESA (ACTIVIDAD DEL RUC)
* @param IN_CGPRE_DIRECCION DIRECCION DE LA EMPRESA
* @param IN_CGPRE_SECTOR SECTOR DE LA EMPRESA
* @param IN_CGPRE_TIPO TIPO DE EMPRESA
* @param IN_CGPRE_NUMERO_EMPLEADO NUMERO DE EMPLEADOS QUE TIENE LA EMPRESA
* @param IN_CGPRE_TELEFONO CONTACTO TELEFONICO DE LA EMPRESA
* @param IN_CGPRE_EMAIL EMAIL DE LA EMPRESA
* @param IN_CGPRE_CEDULA CEDULA DE LA PERSONA RESPONSABLE DE PUBLICAR LAS OFERTAS
* @param IN_CGPRE_ADJUNTO ADJUNTO REFERENTE A LA EMPRESA
* @param IN_CGPRE_TIPO_ADJUNTO TIPO O EXTENCION DEL ARCHIVO ADJUNTO
* @param IN_CGPRE_NOMBRE_ADJUNTO NOMBRE DEL ARCHIVO ADJUNTO
* @param IN_CGPRE_CISLA_CODIGO CODIGO DE LA ISLA A LA QUE PERTENECE LA ISLA
* @param IN_CGPRE_ESTADO ESTADO DEL REGISTRO
* @param IN_CGPRE_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGPRE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_INSERT(
IN IN_CGPRE_CODIGO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_CODIGO%TYPE,
IN IN_CGPRE_RAZON_SOCIAL SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_RAZON_SOCIAL%TYPE,
IN IN_CGPRE_RUC SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_RUC%TYPE,
IN IN_CGPRE_REPRESENTANTE SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_REPRESENTANTE%TYPE,
IN IN_CGPRE_FECHA_CREACION SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_FECHA_CREACION%TYPE,
IN IN_CGPRE_ACTIVIDAD SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_ACTIVIDAD%TYPE,
IN IN_CGPRE_DIRECCION SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_DIRECCION%TYPE,
IN IN_CGPRE_SECTOR SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_SECTOR%TYPE,
IN IN_CGPRE_TIPO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_TIPO%TYPE,
IN IN_CGPRE_NUMERO_EMPLEADO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_NUMERO_EMPLEADO%TYPE,
IN IN_CGPRE_TELEFONO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_TELEFONO%TYPE,
IN IN_CGPRE_EMAIL SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_EMAIL%TYPE,
IN IN_CGPRE_CEDULA SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_CEDULA%TYPE,
IN IN_CGPRE_ADJUNTO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_ADJUNTO%TYPE,
IN IN_CGPRE_TIPO_ADJUNTO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_TIPO_ADJUNTO%TYPE,
IN IN_CGPRE_NOMBRE_ADJUNTO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_NOMBRE_ADJUNTO%TYPE,
IN IN_CGPRE_CISLA_CODIGO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_CISLA_CODIGO%TYPE,
IN IN_CGPRE_ESTADO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_ESTADO%TYPE,
IN IN_CGPRE_USUARIO_INSERT SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_CCTN_CODIGO VARCHAR;
TMP_DEST VARCHAR;
TMP_ISLA VARCHAR;
TMP_NOMBRES VARCHAR;
BEGIN
	IF (UPPER(IN_CGPRE_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_PREREGISTRO_EMPRESA','CGPRE_CODIGO','CGPRE') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGPRE_CODIGO;
	END IF;
	SELECT CCTN_CODIGO INTO TMP_CCTN_CODIGO
	FROM SII.CGG_USUARIO
	WHERE CUSU_NOMBRE_USUARIO = IN_CGPRE_USUARIO_INSERT;
	
	INSERT INTO SII.CGG_GEM_PREREGISTRO_EMPRESA(
		CGPRE_CODIGO, 
		CGPRE_RAZON_SOCIAL, 
		CGPRE_RUC, 
		CGPRE_REPRESENTANTE, 
		CGPRE_FECHA_CREACION, 
		CGPRE_ACTIVIDAD, 
		CGPRE_DIRECCION, 
		CGPRE_SECTOR, 
		CGPRE_TIPO, 
		CGPRE_NUMERO_EMPLEADO, 
		CGPRE_TELEFONO, 
		CGPRE_EMAIL, 
		CGPRE_CEDULA, 
		CGPRE_ADJUNTO, 
		CGPRE_TIPO_ADJUNTO, 
		CGPRE_NOMBRE_ADJUNTO, 
		CGPRE_CCTN_CODIGO,
		CGPRE_CISLA_CODIGO,
		CGPRE_ESTADO, 
		CGPRE_FECHA_INSERT, 
		CGPRE_USUARIO_INSERT, 
		CGPRE_FECHA_UPDATE, 
		CGPRE_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGPRE_RAZON_SOCIAL, 
		IN_CGPRE_RUC, 
		IN_CGPRE_REPRESENTANTE, 
		IN_CGPRE_FECHA_CREACION, 
		IN_CGPRE_ACTIVIDAD, 
		IN_CGPRE_DIRECCION, 
		IN_CGPRE_SECTOR, 
		IN_CGPRE_TIPO, 
		IN_CGPRE_NUMERO_EMPLEADO, 
		IN_CGPRE_TELEFONO, 
		IN_CGPRE_EMAIL, 
		IN_CGPRE_CEDULA, 
		IN_CGPRE_ADJUNTO, 
		IN_CGPRE_TIPO_ADJUNTO, 
		IN_CGPRE_NOMBRE_ADJUNTO, 
		TMP_CCTN_CODIGO,
		IN_CGPRE_CISLA_CODIGO,
		IN_CGPRE_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGPRE_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGPRE_USUARIO_INSERT
	);
	SELECT CISLA_NOMBRE INTO TMP_ISLA FROM SII.CGG_ISLA WHERE CISLA_CODIGO = IN_CGPRE_CISLA_CODIGO;
	SELECT CGCNF_VALOR_CADENA INTO TMP_DEST FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF52';
	SELECT COALESCE(CRPER_NOMBRES,'')||' '||COALESCE(CRPER_APELLIDO_PATERNO,'')||' '||COALESCE(CRPER_APELLIDO_MATERNO,'') INTO TMP_NOMBRES FROM SII.CGG_RES_PERSONA WHERE CRPER_CODIGO = IN_CGPRE_REPRESENTANTE;
	IF (TMP_NOMBRES IS NULL) THEN
		TMP_NOMBRES:='';
	END IF;
	SELECT SII.F_CGG_BUZON_CORREO_INSERT(
		'KEYGEN'::VARCHAR,		
		TMP_DEST, 
		('EMPRESA PREREGISTRADA('||TMP_ISLA||'): '|| IN_CGPRE_RAZON_SOCIAL)::TEXT, 
		(
			'Empresa:  '||IN_CGPRE_RAZON_SOCIAL||
			'<br> RUC: '||IN_CGPRE_RUC||
			'<br> Representante legal: '||TMP_NOMBRES||
			'<br> TELF.: '||IN_CGPRE_TELEFONO||
			'<br> Fecha de registro: '||to_char(current_date,'dd/mm/YYYY')||
			'<br> Isla: '||TMP_ISLA
		)::TEXT, 
		'text/html'::VARCHAR, 
		0, 
		FALSE,
		TRUE,
		IN_CGPRE_USUARIO_INSERT
	) INTO TMP_CCTN_CODIGO;
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_PREREGISTRO_EMPRESA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPRE_CODIGO, 
		CGPRE_RAZON_SOCIAL, 
		CGPRE_RUC, 
		CGPRE_REPRESENTANTE, 
		CGPRE_FECHA_CREACION, 
		CGPRE_ACTIVIDAD, 
		CGPRE_DIRECCION, 
		CGPRE_SECTOR, 
		CGPRE_TIPO, 
		CGPRE_NUMERO_EMPLEADO, 
		CGPRE_TELEFONO, 
		CGPRE_EMAIL, 
		CGPRE_CEDULA, 
		CGPRE_ADJUNTO, 
		CGPRE_TIPO_ADJUNTO, 
		CGPRE_NOMBRE_ADJUNTO, 
		CGPRE_CCTN_CODIGO,
		CGPRE_ESTADO, 
		CGPRE_FECHA_INSERT, 
		CGPRE_USUARIO_INSERT, 
		CGPRE_FECHA_UPDATE, 
		CGPRE_USUARIO_UPDATE
	FROM SII.CGG_GEM_PREREGISTRO_EMPRESA
	WHERE CGPRE_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_PREREGISTRO_EMPRESA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGPRE_CODIGO, 
		CGPRE_RAZON_SOCIAL, 
		CGPRE_RUC, 
		CGPRE_REPRESENTANTE, 
		CGPRE_FECHA_CREACION, 
		CGPRE_ACTIVIDAD, 
		CGPRE_DIRECCION, 
		CGPRE_SECTOR, 
		CGPRE_TIPO, 
		CGPRE_NUMERO_EMPLEADO, 
		CGPRE_TELEFONO, 
		CGPRE_EMAIL, 
		CGPRE_CEDULA, 
		
		CGPRE_TIPO_ADJUNTO, 
		CGPRE_NOMBRE_ADJUNTO, 
		CGPRE_CCTN_CODIGO,
		CGPRE_CISLA_CODIGO,
		CGPRE_ESTADO, 
		CGPRE_FECHA_INSERT, 
		CGPRE_USUARIO_INSERT, 
		CGPRE_FECHA_UPDATE, 
		CGPRE_USUARIO_UPDATE
	FROM SII.CGG_GEM_PREREGISTRO_EMPRESA
	WHERE CGPRE_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGPRE_RAZON_SOCIAL, '''')||'' ''||COALESCE(CGPRE_RUC, '''')||'' ''||COALESCE(CGPRE_REPRESENTANTE, '''')||'' ''||COALESCE(CGPRE_FECHA_CREACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPRE_ACTIVIDAD, '''')||'' ''||COALESCE(CGPRE_DIRECCION, '''')||'' ''||COALESCE(CGPRE_SECTOR, '''')||'' ''||COALESCE(CGPRE_TIPO, '''')||'' ''||COALESCE(CGPRE_NUMERO_EMPLEADO, 0)||'' ''||COALESCE(CGPRE_TELEFONO, '''')||'' ''||COALESCE(CGPRE_EMAIL, '''')||'' ''||COALESCE(CGPRE_CEDULA, '''')||'' ''||COALESCE(CGPRE_TIPO_ADJUNTO, '''')||'' ''||COALESCE(CGPRE_NOMBRE_ADJUNTO, '''')||'' ''||COALESCE(CGPRE_ESTADO, FALSE)||'' ''||COALESCE(CGPRE_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPRE_USUARIO_INSERT, '''')||'' ''||COALESCE(CGPRE_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGPRE_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_PREREGISTRO_EMPRESA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_PREREGISTRO_EMPRESA
	WHERE CGPRE_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_PREREGISTRO_EMPRESA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_PREREGISTRO_EMPRESA
	WHERE CGPRE_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGPRE_RAZON_SOCIAL, '''')||' '||COALESCE(CGPRE_RUC, '''')||' '||COALESCE(CGPRE_REPRESENTANTE, '''')||' '||COALESCE(CGPRE_FECHA_CREACION, CURRENT_TIMESTAMP)||' '||COALESCE(CGPRE_ACTIVIDAD, '''')||' '||COALESCE(CGPRE_DIRECCION, '''')||' '||COALESCE(CGPRE_SECTOR, '''')||' '||COALESCE(CGPRE_TIPO, '''')||' '||COALESCE(CGPRE_NUMERO_EMPLEADO, 0)||' '||COALESCE(CGPRE_TELEFONO, '''')||' '||COALESCE(CGPRE_EMAIL, '''')||' '||COALESCE(CGPRE_CEDULA, '''')||' '||COALESCE(CGPRE_TIPO_ADJUNTO, '''')||' '||COALESCE(CGPRE_NOMBRE_ADJUNTO, '''')||' '||COALESCE(CGPRE_ESTADO, FALSE)||' '||COALESCE(CGPRE_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGPRE_USUARIO_INSERT, '''')||' '||COALESCE(CGPRE_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGPRE_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_PREREGISTRO_EMPRESA
* @param IN_CGPRE_CODIGO IDENTIFICATIVO UNICO DEL PRE-REGISTRO DE EMPRESAS
* @param IN_CGPRE_RAZON_SOCIAL DESCRIPCION SOBRE LA RAZON SOCIAL
* @param IN_CGPRE_RUC RUC ESPECIFICO DE LA EMPRESA
* @param IN_CGPRE_REPRESENTANTE REPRESENTANTE DE LA EMPRESA
* @param IN_CGPRE_FECHA_CREACION FECHA DE CREACION DE LA EMPRESA
* @param IN_CGPRE_ACTIVIDAD ACTIVIDAD A LA QUE SE DEDICA LA EMPRESA (ACTIVIDAD DEL RUC)
* @param IN_CGPRE_DIRECCION DIRECCION DE LA EMPRESA
* @param IN_CGPRE_SECTOR SECTOR DE LA EMPRESA
* @param IN_CGPRE_TIPO TIPO DE EMPRESA
* @param IN_CGPRE_NUMERO_EMPLEADO NUMERO DE EMPLEADOS QUE TIENE LA EMPRESA
* @param IN_CGPRE_TELEFONO CONTACTO TELEFONICO DE LA EMPRESA
* @param IN_CGPRE_EMAIL EMAIL DE LA EMPRESA
* @param IN_CGPRE_CEDULA CEDULA DE LA PERSONA RESPONSABLE DE PUBLICAR LAS OFERTAS
* @param IN_CGPRE_ADJUNTO ADJUNTO REFERENTE A LA EMPRESA
* @param IN_CGPRE_TIPO_ADJUNTO TIPO O EXTENCION DEL ARCHIVO ADJUNTO
* @param IN_CGPRE_NOMBRE_ADJUNTO NOMBRE DEL ARCHIVO ADJUNTO
* @param IN_CGPRE_ESTADO ESTADO DEL REGISTRO
* @param IN_CGPRE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_UPDATE(
IN IN_CGPRE_CODIGO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_CODIGO%TYPE,
IN IN_CGPRE_RAZON_SOCIAL SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_RAZON_SOCIAL%TYPE,
IN IN_CGPRE_RUC SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_RUC%TYPE,
IN IN_CGPRE_REPRESENTANTE SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_REPRESENTANTE%TYPE,
IN IN_CGPRE_FECHA_CREACION SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_FECHA_CREACION%TYPE,
IN IN_CGPRE_ACTIVIDAD SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_ACTIVIDAD%TYPE,
IN IN_CGPRE_DIRECCION SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_DIRECCION%TYPE,
IN IN_CGPRE_SECTOR SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_SECTOR%TYPE,
IN IN_CGPRE_TIPO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_TIPO%TYPE,
IN IN_CGPRE_NUMERO_EMPLEADO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_NUMERO_EMPLEADO%TYPE,
IN IN_CGPRE_TELEFONO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_TELEFONO%TYPE,
IN IN_CGPRE_EMAIL SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_EMAIL%TYPE,
IN IN_CGPRE_CEDULA SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_CEDULA%TYPE,
IN IN_CGPRE_ADJUNTO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_ADJUNTO%TYPE,
IN IN_CGPRE_TIPO_ADJUNTO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_TIPO_ADJUNTO%TYPE,
IN IN_CGPRE_NOMBRE_ADJUNTO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_NOMBRE_ADJUNTO%TYPE,
IN IN_CGPRE_ESTADO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_ESTADO%TYPE,
IN IN_CGPRE_USUARIO_UPDATE SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PREREGISTRO_EMPRESA SET
		CGPRE_RAZON_SOCIAL = IN_CGPRE_RAZON_SOCIAL, 
		CGPRE_RUC = IN_CGPRE_RUC, 
		CGPRE_REPRESENTANTE = IN_CGPRE_REPRESENTANTE, 
		CGPRE_FECHA_CREACION = IN_CGPRE_FECHA_CREACION, 
		CGPRE_ACTIVIDAD = IN_CGPRE_ACTIVIDAD, 
		CGPRE_DIRECCION = IN_CGPRE_DIRECCION, 
		CGPRE_SECTOR = IN_CGPRE_SECTOR, 
		CGPRE_TIPO = IN_CGPRE_TIPO, 
		CGPRE_NUMERO_EMPLEADO = IN_CGPRE_NUMERO_EMPLEADO, 
		CGPRE_TELEFONO = IN_CGPRE_TELEFONO, 
		CGPRE_EMAIL = IN_CGPRE_EMAIL, 
		CGPRE_CEDULA = IN_CGPRE_CEDULA, 
		CGPRE_ADJUNTO = IN_CGPRE_ADJUNTO, 
		CGPRE_TIPO_ADJUNTO = IN_CGPRE_TIPO_ADJUNTO, 
		CGPRE_NOMBRE_ADJUNTO = IN_CGPRE_NOMBRE_ADJUNTO, 
		CGPRE_ESTADO = IN_CGPRE_ESTADO, 
		CGPRE_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGPRE_USUARIO_UPDATE = IN_CGPRE_USUARIO_UPDATE
	WHERE
		CGPRE_CODIGO = IN_CGPRE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_PREREGISTRO_EMPRESA
* @param IN_CGPRE_CODIGO IDENTIFICATIVO UNICO DEL PRE-REGISTRO DE EMPRESAS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_SELECT(
IN IN_CGPRE_CODIGO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGPRE_CODIGO, 
		CGPRE_RAZON_SOCIAL, 
		CGPRE_RUC, 
		CGPRE_REPRESENTANTE, 
		CGPRE_FECHA_CREACION, 
		CGPRE_ACTIVIDAD, 
		CGPRE_DIRECCION, 
		CGPRE_SECTOR, 
		CGPRE_TIPO, 
		CGPRE_NUMERO_EMPLEADO, 
		CGPRE_TELEFONO, 
		CGPRE_EMAIL, 
		CGPRE_CEDULA, 
		CGPRE_ADJUNTO, 
		CGPRE_TIPO_ADJUNTO, 
		CGPRE_NOMBRE_ADJUNTO, 
		CGPRE_ESTADO, 
		CGPRE_FECHA_INSERT, 
		CGPRE_USUARIO_INSERT, 
		CGPRE_FECHA_UPDATE, 
		CGPRE_USUARIO_UPDATE
	FROM SII.CGG_GEM_PREREGISTRO_EMPRESA
	WHERE  
		CGPRE_CODIGO = IN_CGPRE_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_PREREGISTRO_EMPRESA
* @param IN_CGPRE_CODIGO IDENTIFICATIVO UNICO DEL PRE-REGISTRO DE EMPRESAS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_DELETE(
IN IN_CGPRE_CODIGO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_PREREGISTRO_EMPRESA
	WHERE
		CGPRE_CODIGO = IN_CGPRE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_PREREGISTRO_EMPRESA
* @param IN_CGPRE_CODIGO IDENTIFICATIVO UNICO DEL PRE-REGISTRO DE EMPRESAS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_DELETE_SOFT(
IN IN_CGPRE_CODIGO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_PREREGISTRO_EMPRESA SET
		CGPRE_ESTADO = FALSE
	WHERE
		CGPRE_CODIGO = IN_CGPRE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_UPDATE_ADJUNTO
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_PREREGISTRO_EMPRESA
* @param IN_CGPRE_CODIGO IDENTIFICATIVO UNICO DEL PRE-REGISTRO DE EMPRESAS
* @param IN_CGPRE_ADJUNTO ADJUNTO REFERENTE A LA EMPRESA
* @param IN_CGPRE_TIPO_ADJUNTO TIPO O EXTENCION DEL ARCHIVO ADJUNTO
* @param IN_CGPRE_NOMBRE_ADJUNTO NOMBRE DEL ARCHIVO ADJUNTO
* @param IN_CGPRE_ESTADO ESTADO DEL REGISTRO
* @param IN_CGPRE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_UPDATE_ADJUNTO(
IN IN_CGPRE_CODIGO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_CODIGO%TYPE,
IN IN_CGPRE_ADJUNTO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_ADJUNTO%TYPE,
IN IN_CGPRE_TIPO_ADJUNTO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_TIPO_ADJUNTO%TYPE,
IN IN_CGPRE_NOMBRE_ADJUNTO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_NOMBRE_ADJUNTO%TYPE,
IN IN_CGPRE_ESTADO SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_ESTADO%TYPE,
IN IN_CGPRE_USUARIO_UPDATE SII.CGG_GEM_PREREGISTRO_EMPRESA.CGPRE_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	IF(LENGTH(IN_CGPRE_ADJUNTO) > 0) THEN
	UPDATE SII.CGG_GEM_PREREGISTRO_EMPRESA SET		 
		CGPRE_ADJUNTO = IN_CGPRE_ADJUNTO, 
		CGPRE_TIPO_ADJUNTO = IN_CGPRE_TIPO_ADJUNTO, 
		CGPRE_NOMBRE_ADJUNTO = IN_CGPRE_NOMBRE_ADJUNTO, 
		CGPRE_ESTADO = IN_CGPRE_ESTADO, 
		CGPRE_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGPRE_USUARIO_UPDATE = IN_CGPRE_USUARIO_UPDATE
	WHERE
		CGPRE_CODIGO = IN_CGPRE_CODIGO;
	END IF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;





/**
* FUNCION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_SELECTCODIGO_BYRUC
* DEVUELVE EL CODIGO DEL REGISTRO SEGUN EL PARAMETRO DE BUSQUEDA
* @param IN_CRPJR_RUC CRITERIO DE BUSQUEDA. RUC DE LA EMPRESA
* @return TMP_CODIGO CODIGO DEL REGISTRO
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PREREGISTRO_EMPRESA_SELECTCODIGO_BYRUC(
	IN IN_CRPJR_RUC VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
TMP_CODIGO VARCHAR;
BEGIN	
	SELECT CGPRE_CODIGO INTO TMP_CODIGO
	FROM SII.CGG_GEM_PREREGISTRO_EMPRESA
	WHERE CGPRE_RUC = IN_CRPJR_RUC;
	RETURN TMP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;