/**
* FUNCION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_INSTITUCION_RESPONSABLE.
* @param IN_CDITR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION RESPONSABLE
* @param IN_CDITR_NOMBRE NOMBRE DE LA INSTITUCION RESPONSABLE
* @param IN_CDITR_DESCRIPCION DESCRIPCION DE LA INSTITUCION RESPONSABLE
* @param IN_CDITR_ESTADO ESTADO DEL REGISTRO
* @param IN_CDITR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDITR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_INSERT(
IN IN_CDITR_CODIGO SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_CODIGO%TYPE, 
IN IN_CDITR_NOMBRE SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_NOMBRE%TYPE, 
IN IN_CDITR_DESCRIPCION SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_DESCRIPCION%TYPE, 
IN IN_CDITR_ESTADO SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_ESTADO%TYPE, 
IN IN_CDITR_USUARIO_INSERT SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_USUARIO_INSERT%TYPE, 
IN IN_CDITR_USUARIO_UPDATE SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDITR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_INSTITUCION_RESPONSABLE','CDITR_CODIGO','CDITR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDITR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_INSTITUCION_RESPONSABLE(
		CDITR_CODIGO, 
		CDITR_NOMBRE, 
		CDITR_DESCRIPCION, 
		CDITR_ESTADO, 
		CDITR_FECHA_INSERT, 
		CDITR_USUARIO_INSERT, 
		CDITR_FECHA_UPDATE, 
		CDITR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CDITR_NOMBRE, 
		IN_CDITR_DESCRIPCION, 
		IN_CDITR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDITR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDITR_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_INSTITUCION_RESPONSABLE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDITR_CODIGO, 
		CDITR_NOMBRE, 
		CDITR_DESCRIPCION, 
		CDITR_ESTADO, 
		CDITR_FECHA_INSERT, 
		CDITR_USUARIO_INSERT, 
		CDITR_FECHA_UPDATE, 
		CDITR_USUARIO_UPDATE
	FROM SII.CGG_DHU_INSTITUCION_RESPONSABLE
	WHERE CDITR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_INSTITUCION_RESPONSABLE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CDITR_CODIGO, 
		CDITR_NOMBRE, 
		CDITR_DESCRIPCION, 
		CDITR_ESTADO, 
		CDITR_FECHA_INSERT, 
		CDITR_USUARIO_INSERT, 
		CDITR_FECHA_UPDATE, 
		CDITR_USUARIO_UPDATE
	FROM SII.CGG_DHU_INSTITUCION_RESPONSABLE
	WHERE CDITR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CDITR_CODIGO IS NULL THEN '''' ELSE CDITR_CODIGO END ||'' ''||CASE WHEN CDITR_NOMBRE IS NULL THEN '''' ELSE CDITR_NOMBRE END ||'' ''||CASE WHEN CDITR_DESCRIPCION IS NULL THEN '''' ELSE CDITR_DESCRIPCION END ||'' ''||CASE WHEN CDITR_ESTADO IS NULL THEN FALSE ELSE CDITR_ESTADO END ||'' ''||CASE WHEN CDITR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDITR_FECHA_INSERT END ||'' ''||CASE WHEN CDITR_USUARIO_INSERT IS NULL THEN '''' ELSE CDITR_USUARIO_INSERT END ||'' ''||CASE WHEN CDITR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDITR_FECHA_UPDATE END ||'' ''||CASE WHEN CDITR_USUARIO_UPDATE IS NULL THEN '''' ELSE CDITR_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_INSTITUCION_RESPONSABLE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_INSTITUCION_RESPONSABLE
	WHERE CDITR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_INSTITUCION_RESPONSABLE.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_INSTITUCION_RESPONSABLE
	WHERE CDITR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CDITR_CODIGO IS NULL THEN '''' ELSE CDITR_CODIGO END ||' '||CASE WHEN CDITR_NOMBRE IS NULL THEN '''' ELSE CDITR_NOMBRE END ||' '||CASE WHEN CDITR_DESCRIPCION IS NULL THEN '''' ELSE CDITR_DESCRIPCION END ||' '||CASE WHEN CDITR_ESTADO IS NULL THEN FALSE ELSE CDITR_ESTADO END ||' '||CASE WHEN CDITR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDITR_FECHA_INSERT END ||' '||CASE WHEN CDITR_USUARIO_INSERT IS NULL THEN '''' ELSE CDITR_USUARIO_INSERT END ||' '||CASE WHEN CDITR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDITR_FECHA_UPDATE END ||' '||CASE WHEN CDITR_USUARIO_UPDATE IS NULL THEN '''' ELSE CDITR_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_INSTITUCION_RESPONSABLE.
* @param IN_CDITR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION RESPONSABLE
* @param IN_CDITR_NOMBRE NOMBRE DE LA INSTITUCION RESPONSABLE
* @param IN_CDITR_DESCRIPCION DESCRIPCION DE 
* @param IN_CDITR_ESTADO ESTADO DEL REGISTRO
* @param IN_CDITR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_UPDATE(
IN IN_CDITR_CODIGO SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_CODIGO%TYPE, 
IN IN_CDITR_NOMBRE SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_NOMBRE%TYPE, 
IN IN_CDITR_DESCRIPCION SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_DESCRIPCION%TYPE, 
IN IN_CDITR_ESTADO SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_ESTADO%TYPE, 
IN IN_CDITR_USUARIO_UPDATE SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_INSTITUCION_RESPONSABLE SET
		CDITR_NOMBRE = IN_CDITR_NOMBRE, 
		CDITR_DESCRIPCION = IN_CDITR_DESCRIPCION, 
		CDITR_ESTADO = IN_CDITR_ESTADO, 
		CDITR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDITR_USUARIO_UPDATE = IN_CDITR_USUARIO_UPDATE
	WHERE
		CDITR_CODIGO = IN_CDITR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_INSTITUCION_RESPONSABLE.
* @param IN_CDITR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION RESPONSABLE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_SELECT(
IN IN_CDITR_CODIGO SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDITR_CODIGO, 
		CDITR_NOMBRE, 
		CDITR_DESCRIPCION, 
		CDITR_ESTADO, 
		CDITR_FECHA_INSERT, 
		CDITR_USUARIO_INSERT, 
		CDITR_FECHA_UPDATE, 
		CDITR_USUARIO_UPDATE
	FROM SII.CGG_DHU_INSTITUCION_RESPONSABLE
	WHERE CDITR_ESTADO = TRUE AND 
		CDITR_CODIGO = IN_CDITR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_INSTITUCION_RESPONSABLE.
* @param IN_CDITR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION RESPONSABLE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_DELETE(
IN IN_CDITR_CODIGO SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_INSTITUCION_RESPONSABLE
	WHERE
		CDITR_CODIGO = IN_CDITR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_INSTITUCION_RESPONSABLE.
* @param IN_CDITR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION RESPONSABLE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_INSTITUCION_RESPONSABLE_DELETE_SOFT(
IN IN_CDITR_CODIGO SII.CGG_DHU_INSTITUCION_RESPONSABLE.CDITR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_INSTITUCION_RESPONSABLE SET
		CDITR_ESTADO = FALSE
	WHERE
		CDITR_CODIGO = IN_CDITR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

