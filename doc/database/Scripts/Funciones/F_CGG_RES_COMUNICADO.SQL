/**
* FUNCION SII.F_CGG_RES_COMUNICADO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_COMUNICADO
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA REMITENTE DEL COMUNICADO
* @param IN_CGG_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA DESTINATARIO DEL COMUNICADO
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA REMITENTE DEL COMUNICADO
* @param IN_CRCOM_DESTINATARIO PERSONA QUE RECIBE DEL COMUNICADO
* @param IN_CRCOM_ASUNTO ASUNTO DEL COMUNICADO
* @param IN_CRCOM_FECHA_RECEPCION FECHA DE RECEPCION DEL COMUNICADO
* @param IN_CRCOM_FECHA_REVISION FECHA DE REVISION 
* @param IN_CRCOM_NUMERO_DOCUMENTO NUMERO DE DOCUMENTO
* @param IN_CRCOM_DESCRIPCION DETALLE CORTO DEL COMUNICADO
* @param IN_CRCOM_OBSERVACION OBSERVACION DEL COMUNICADO
* @param IN_CRCOM_DESCRIPCION_ADJUNTO DESCRIPCION DEL DOCUMENTO ADJUNTO
* @param IN_CRCOM_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CRCOM_REMITENTE PERSONA QUE EMITE EL COMUNICADO
* @param IN_CRCOM_ADJUNTO ARCHIVO DIGITAL ANEXO
* @param IN_CRCOM_ESTADO_COMUNICADO ESTADO DE LA OPERACION QUE SE REALIZO CON EL COMUNICADO
0.- REGISTRADO
1.- OTROS

* @param IN_CRCOM_ESTADO ESTADO DEL REGISTRO


* @param IN_CRCOM_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRCOM_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_INSERT(
IN IN_CRCOM_CODIGO SII.CGG_RES_COMUNICADO.CRCOM_CODIGO%TYPE,
IN IN_CRRES_CODIGO SII.CGG_RES_COMUNICADO.CRRES_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CRPER_CODIGO%TYPE,
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CGG_CRPER_CODIGO%TYPE,
IN IN_CRPJR_CODIGO SII.CGG_RES_COMUNICADO.CRPJR_CODIGO%TYPE,
IN IN_CRCOM_DESTINATARIO SII.CGG_RES_COMUNICADO.CRCOM_DESTINATARIO%TYPE,
IN IN_CRCOM_ASUNTO SII.CGG_RES_COMUNICADO.CRCOM_ASUNTO%TYPE,
IN IN_CRCOM_FECHA_RECEPCION SII.CGG_RES_COMUNICADO.CRCOM_FECHA_RECEPCION%TYPE,
IN IN_CRCOM_FECHA_REVISION SII.CGG_RES_COMUNICADO.CRCOM_FECHA_REVISION%TYPE,
IN IN_CRCOM_NUMERO_DOCUMENTO SII.CGG_RES_COMUNICADO.CRCOM_NUMERO_DOCUMENTO%TYPE,
IN IN_CRCOM_DESCRIPCION SII.CGG_RES_COMUNICADO.CRCOM_DESCRIPCION%TYPE,
IN IN_CRCOM_OBSERVACION SII.CGG_RES_COMUNICADO.CRCOM_OBSERVACION%TYPE,
IN IN_CRCOM_DESCRIPCION_ADJUNTO SII.CGG_RES_COMUNICADO.CRCOM_DESCRIPCION_ADJUNTO%TYPE,
IN IN_CRCOM_NOMBRE_ADJUNTO SII.CGG_RES_COMUNICADO.CRCOM_NOMBRE_ADJUNTO%TYPE,
IN IN_CRCOM_REMITENTE SII.CGG_RES_COMUNICADO.CRCOM_REMITENTE%TYPE,
IN IN_CRCOM_ADJUNTO SII.CGG_RES_COMUNICADO.CRCOM_ADJUNTO%TYPE,
IN IN_CRCOM_ESTADO_COMUNICADO SII.CGG_RES_COMUNICADO.CRCOM_ESTADO_COMUNICADO%TYPE,
IN IN_CRCOM_ESTADO SII.CGG_RES_COMUNICADO.CRCOM_ESTADO%TYPE,
IN IN_CRCOM_USUARIO_INSERT SII.CGG_RES_COMUNICADO.CRCOM_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRCOM_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_COMUNICADO','CRCOM_CODIGO','CRCOM') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRCOM_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_COMUNICADO(
		CRCOM_CODIGO, 
		CRRES_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CRCOM_DESTINATARIO, 
		CRCOM_ASUNTO, 
		CRCOM_FECHA_RECEPCION, 
		CRCOM_FECHA_REVISION, 
		CRCOM_NUMERO_DOCUMENTO, 
		CRCOM_DESCRIPCION, 
		CRCOM_OBSERVACION, 
		CRCOM_DESCRIPCION_ADJUNTO, 
		CRCOM_NOMBRE_ADJUNTO, 
		CRCOM_REMITENTE, 
		CRCOM_ADJUNTO, 
		CRCOM_ESTADO_COMUNICADO, 
		CRCOM_ESTADO, 
		CRCOM_FECHA_INSERT, 
		CRCOM_USUARIO_INSERT, 
		CRCOM_FECHA_UPDATE, 
		CRCOM_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRRES_CODIGO, 
		IN_CRPER_CODIGO, 
		IN_CGG_CRPER_CODIGO, 
		IN_CRPJR_CODIGO, 
		IN_CRCOM_DESTINATARIO, 
		IN_CRCOM_ASUNTO, 
		IN_CRCOM_FECHA_RECEPCION, 
		IN_CRCOM_FECHA_REVISION, 
		IN_CRCOM_NUMERO_DOCUMENTO, 
		IN_CRCOM_DESCRIPCION, 
		IN_CRCOM_OBSERVACION, 
		IN_CRCOM_DESCRIPCION_ADJUNTO, 
		IN_CRCOM_NOMBRE_ADJUNTO, 
		IN_CRCOM_REMITENTE, 
		IN_CRCOM_ADJUNTO, 
		IN_CRCOM_ESTADO_COMUNICADO, 
		IN_CRCOM_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRCOM_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRCOM_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_COMUNICADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCOM_CODIGO, 
		CRRES_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CRCOM_DESTINATARIO, 
		CRCOM_ASUNTO, 
		CRCOM_FECHA_RECEPCION, 
		CRCOM_FECHA_REVISION, 
		CRCOM_NUMERO_DOCUMENTO, 
		CRCOM_DESCRIPCION, 
		CRCOM_OBSERVACION, 
		CRCOM_DESCRIPCION_ADJUNTO, 
		CRCOM_NOMBRE_ADJUNTO, 
		CRCOM_REMITENTE, 
		CRCOM_ADJUNTO, 
		CRCOM_ESTADO_COMUNICADO, 
		CRCOM_ESTADO, 
		CRCOM_FECHA_INSERT, 
		CRCOM_USUARIO_INSERT, 
		CRCOM_FECHA_UPDATE, 
		CRCOM_USUARIO_UPDATE
	FROM SII.CGG_RES_COMUNICADO
	WHERE CRCOM_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_COMUNICADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRCOM_CODIGO, 
		CRRES_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CRCOM_DESTINATARIO, 
		CRCOM_ASUNTO, 
		CRCOM_FECHA_RECEPCION, 
		CRCOM_FECHA_REVISION, 
		CRCOM_NUMERO_DOCUMENTO, 
		CRCOM_DESCRIPCION, 
		CRCOM_OBSERVACION, 
		CRCOM_DESCRIPCION_ADJUNTO, 
		CRCOM_NOMBRE_ADJUNTO, 
		CRCOM_REMITENTE, 
		CRCOM_ADJUNTO, 
		CRCOM_ESTADO_COMUNICADO, 
		CRCOM_ESTADO, 
		CRCOM_FECHA_INSERT, 
		CRCOM_USUARIO_INSERT, 
		CRCOM_FECHA_UPDATE, 
		CRCOM_USUARIO_UPDATE
	FROM SII.CGG_RES_COMUNICADO
	WHERE CRCOM_ESTADO AND (LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',
		COALESCE(CRCOM_DESTINATARIO, '''')||'' ''||
		COALESCE(CRCOM_ASUNTO, '''')||'' ''||
		COALESCE(CRCOM_FECHA_RECEPCION, CURRENT_TIMESTAMP)||'' ''||
		COALESCE(CRCOM_FECHA_REVISION, CURRENT_TIMESTAMP)||'' ''||
		COALESCE(CRCOM_NUMERO_DOCUMENTO, '''')||'' ''||
		COALESCE(CRCOM_DESCRIPCION, '''')||'' ''||
		COALESCE(CRCOM_OBSERVACION, '''')||'' ''||
		COALESCE(CRCOM_DESCRIPCION_ADJUNTO, '''')||'' ''||
		COALESCE(CRCOM_NOMBRE_ADJUNTO, '''')||'' ''||
		COALESCE(CRCOM_REMITENTE, '''')||'' ''||
		COALESCE(CRCOM_ESTADO_COMUNICADO, 0)) = 1)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_COMUNICADO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_COMUNICADO
	WHERE CRCOM_ESTADO AND 
		(LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRCOM_DESTINATARIO, '''')||' '||COALESCE(CRCOM_ASUNTO, '''')||' '||COALESCE(CRCOM_FECHA_RECEPCION, CURRENT_TIMESTAMP)||' '||COALESCE(CRCOM_FECHA_REVISION, CURRENT_TIMESTAMP)||' '||COALESCE(CRCOM_NUMERO_DOCUMENTO, '''')||' '||COALESCE(CRCOM_DESCRIPCION, '''')||' '||COALESCE(CRCOM_OBSERVACION, '''')||' '||COALESCE(CRCOM_DESCRIPCION_ADJUNTO, '''')||' '||COALESCE(CRCOM_NOMBRE_ADJUNTO, '''')||' '||COALESCE(CRCOM_REMITENTE, '''')||' '||COALESCE(CRCOM_ESTADO_COMUNICADO, 0)||' '||COALESCE(CRCOM_ESTADO, FALSE)||' '||COALESCE(CRCOM_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRCOM_USUARIO_INSERT, '''')||' '||COALESCE(CRCOM_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRCOM_USUARIO_UPDATE, '''')) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_COMUNICADO
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA REMITENTE DEL COMUNICADO
* @param IN_CGG_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA DESTINATARIO DEL COMUNICADO
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA REMITENTE DEL COMUNICADO
* @param IN_CRCOM_DESTINATARIO PERSONA QUE RECIBE DEL COMUNICADO
* @param IN_CRCOM_ASUNTO ASUNTO DEL COMUNICADO
* @param IN_CRCOM_FECHA_RECEPCION FECHA DE RECEPCION DEL COMUNICADO
* @param IN_CRCOM_FECHA_REVISION FECHA DE REVISION 
* @param IN_CRCOM_NUMERO_DOCUMENTO NUMERO DE DOCUMENTO
* @param IN_CRCOM_DESCRIPCION DETALLE CORTO DEL COMUNICADO
* @param IN_CRCOM_OBSERVACION OBSERVACION DEL COMUNICADO
* @param IN_CRCOM_DESCRIPCION_ADJUNTO DESCRIPCION DEL DOCUMENTO ADJUNTO
* @param IN_CRCOM_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CRCOM_REMITENTE PERSONA QUE EMITE EL COMUNICADO
* @param IN_CRCOM_ADJUNTO ARCHIVO DIGITAL ANEXO
* @param IN_CRCOM_ESTADO_COMUNICADO ESTADO DE LA OPERACION QUE SE REALIZO CON EL COMUNICADO
0.- REGISTRADO
1.- OTROS

* @param IN_CRCOM_ESTADO ESTADO DEL REGISTRO


* @param IN_CRCOM_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_UPDATE(
IN IN_CRCOM_CODIGO SII.CGG_RES_COMUNICADO.CRCOM_CODIGO%TYPE,
IN IN_CRRES_CODIGO SII.CGG_RES_COMUNICADO.CRRES_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CRPER_CODIGO%TYPE,
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CGG_CRPER_CODIGO%TYPE,
IN IN_CRPJR_CODIGO SII.CGG_RES_COMUNICADO.CRPJR_CODIGO%TYPE,
IN IN_CRCOM_DESTINATARIO SII.CGG_RES_COMUNICADO.CRCOM_DESTINATARIO%TYPE,
IN IN_CRCOM_ASUNTO SII.CGG_RES_COMUNICADO.CRCOM_ASUNTO%TYPE,
IN IN_CRCOM_FECHA_RECEPCION SII.CGG_RES_COMUNICADO.CRCOM_FECHA_RECEPCION%TYPE,
IN IN_CRCOM_FECHA_REVISION SII.CGG_RES_COMUNICADO.CRCOM_FECHA_REVISION%TYPE,
IN IN_CRCOM_NUMERO_DOCUMENTO SII.CGG_RES_COMUNICADO.CRCOM_NUMERO_DOCUMENTO%TYPE,
IN IN_CRCOM_DESCRIPCION SII.CGG_RES_COMUNICADO.CRCOM_DESCRIPCION%TYPE,
IN IN_CRCOM_OBSERVACION SII.CGG_RES_COMUNICADO.CRCOM_OBSERVACION%TYPE,
IN IN_CRCOM_DESCRIPCION_ADJUNTO SII.CGG_RES_COMUNICADO.CRCOM_DESCRIPCION_ADJUNTO%TYPE,
IN IN_CRCOM_NOMBRE_ADJUNTO SII.CGG_RES_COMUNICADO.CRCOM_NOMBRE_ADJUNTO%TYPE,
IN IN_CRCOM_REMITENTE SII.CGG_RES_COMUNICADO.CRCOM_REMITENTE%TYPE,
IN IN_CRCOM_ADJUNTO SII.CGG_RES_COMUNICADO.CRCOM_ADJUNTO%TYPE,
IN IN_CRCOM_ESTADO_COMUNICADO SII.CGG_RES_COMUNICADO.CRCOM_ESTADO_COMUNICADO%TYPE,
IN IN_CRCOM_ESTADO SII.CGG_RES_COMUNICADO.CRCOM_ESTADO%TYPE,
IN IN_CRCOM_USUARIO_UPDATE SII.CGG_RES_COMUNICADO.CRCOM_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_COMUNICADO SET
		CRRES_CODIGO = IN_CRRES_CODIGO, 
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CGG_CRPER_CODIGO = IN_CGG_CRPER_CODIGO, 
		CRPJR_CODIGO = IN_CRPJR_CODIGO, 
		CRCOM_DESTINATARIO = IN_CRCOM_DESTINATARIO, 
		CRCOM_ASUNTO = IN_CRCOM_ASUNTO, 
		CRCOM_FECHA_RECEPCION = IN_CRCOM_FECHA_RECEPCION, 
		CRCOM_FECHA_REVISION = IN_CRCOM_FECHA_REVISION, 
		CRCOM_NUMERO_DOCUMENTO = IN_CRCOM_NUMERO_DOCUMENTO, 
		CRCOM_DESCRIPCION = IN_CRCOM_DESCRIPCION, 
		CRCOM_OBSERVACION = IN_CRCOM_OBSERVACION, 
		CRCOM_DESCRIPCION_ADJUNTO = IN_CRCOM_DESCRIPCION_ADJUNTO, 
		CRCOM_NOMBRE_ADJUNTO = IN_CRCOM_NOMBRE_ADJUNTO, 
		CRCOM_REMITENTE = IN_CRCOM_REMITENTE, 
		CRCOM_ADJUNTO = IN_CRCOM_ADJUNTO, 
		CRCOM_ESTADO_COMUNICADO = IN_CRCOM_ESTADO_COMUNICADO, 
		CRCOM_ESTADO = IN_CRCOM_ESTADO, 
		CRCOM_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRCOM_USUARIO_UPDATE = IN_CRCOM_USUARIO_UPDATE
	WHERE
		CRCOM_CODIGO = IN_CRCOM_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_COMUNICADO
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_SELECT(
IN IN_CRCOM_CODIGO SII.CGG_RES_COMUNICADO.CRCOM_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCOM_CODIGO, 
		CRRES_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CRCOM_DESTINATARIO, 
		CRCOM_ASUNTO, 
		CRCOM_FECHA_RECEPCION, 
		CRCOM_FECHA_REVISION, 
		CRCOM_NUMERO_DOCUMENTO, 
		CRCOM_DESCRIPCION, 
		CRCOM_OBSERVACION, 
		CRCOM_DESCRIPCION_ADJUNTO, 
		CRCOM_NOMBRE_ADJUNTO, 
		CRCOM_REMITENTE, 
		CRCOM_ADJUNTO, 
		CRCOM_ESTADO_COMUNICADO, 
		CRCOM_ESTADO, 
		CRCOM_FECHA_INSERT, 
		CRCOM_USUARIO_INSERT, 
		CRCOM_FECHA_UPDATE, 
		CRCOM_USUARIO_UPDATE
	FROM SII.CGG_RES_COMUNICADO
	WHERE CRCOM_ESTADO = TRUE AND 
		CRCOM_CODIGO = IN_CRCOM_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_COMUNICADO
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_DELETE(
IN IN_CRCOM_CODIGO SII.CGG_RES_COMUNICADO.CRCOM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_COMUNICADO
	WHERE
		CRCOM_CODIGO = IN_CRCOM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_COMUNICADO
* @param IN_CRCOM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMUNICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_DELETE_SOFT(
IN IN_CRCOM_CODIGO SII.CGG_RES_COMUNICADO.CRCOM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_COMUNICADO SET
		CRCOM_ESTADO = FALSE
	WHERE
		CRCOM_CODIGO = IN_CRCOM_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_S_CGG_RES_PERSONA_JURIDICA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_COMUNICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA_JURIDICA.
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA REMITENTE DEL COMUNICADO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_S_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_RES_COMUNICADO.CRPJR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCOM_CODIGO, 
		CRRES_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CRCOM_DESTINATARIO, 
		CRCOM_ASUNTO, 
		CRCOM_FECHA_RECEPCION, 
		CRCOM_FECHA_REVISION, 
		CRCOM_NUMERO_DOCUMENTO, 
		CRCOM_DESCRIPCION, 
		CRCOM_OBSERVACION, 
		CRCOM_DESCRIPCION_ADJUNTO, 
		CRCOM_NOMBRE_ADJUNTO, 
		CRCOM_REMITENTE, 
		CRCOM_ADJUNTO, 
		CRCOM_ESTADO_COMUNICADO, 
		CRCOM_ESTADO, 
		CRCOM_FECHA_INSERT, 
		CRCOM_USUARIO_INSERT, 
		CRCOM_FECHA_UPDATE, 
		CRCOM_USUARIO_UPDATE
	FROM SII.CGG_RES_COMUNICADO
	WHERE CRCOM_ESTADO = TRUE AND 
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_D_CGG_RES_PERSONA_JURIDICA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_COMUNICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA_JURIDICA.
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA REMITENTE DEL COMUNICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_D_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_RES_COMUNICADO.CRPJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_COMUNICADO
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_D_CGG_RES_PERSONA_JURIDICA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_COMUNICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA_JURIDICA.
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA REMITENTE DEL COMUNICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_DS_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_RES_COMUNICADO.CRPJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_COMUNICADO SET
		crcom_estado = false
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_COMUNICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CGG_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA DESTINATARIO DEL COMUNICADO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA REMITENTE DEL COMUNICADO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_S_CGG_RES_PERSONA(
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CGG_CRPER_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCOM_CODIGO, 
		CRRES_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CRCOM_DESTINATARIO, 
		CRCOM_ASUNTO, 
		CRCOM_FECHA_RECEPCION, 
		CRCOM_FECHA_REVISION, 
		CRCOM_NUMERO_DOCUMENTO, 
		CRCOM_DESCRIPCION, 
		CRCOM_OBSERVACION, 
		CRCOM_DESCRIPCION_ADJUNTO, 
		CRCOM_NOMBRE_ADJUNTO, 
		CRCOM_REMITENTE, 
		CRCOM_ADJUNTO, 
		CRCOM_ESTADO_COMUNICADO, 
		CRCOM_ESTADO, 
		CRCOM_FECHA_INSERT, 
		CRCOM_USUARIO_INSERT, 
		CRCOM_FECHA_UPDATE, 
		CRCOM_USUARIO_UPDATE
	FROM SII.CGG_RES_COMUNICADO
	WHERE CRCOM_ESTADO = TRUE AND 
		CGG_CRPER_CODIGO = IN_CGG_CRPER_CODIGO AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_COMUNICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CGG_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA DESTINATARIO DEL COMUNICADO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA REMITENTE DEL COMUNICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_D_CGG_RES_PERSONA(
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CGG_CRPER_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_COMUNICADO
	WHERE
		CGG_CRPER_CODIGO = IN_CGG_CRPER_CODIGO AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_COMUNICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CGG_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA DESTINATARIO DEL COMUNICADO
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA REMITENTE DEL COMUNICADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_DS_CGG_RES_PERSONA(
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CGG_CRPER_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_COMUNICADO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_COMUNICADO SET
		crcom_estado = false
	WHERE
		CGG_CRPER_CODIGO = IN_CGG_CRPER_CODIGO AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_S_CGG_RES_RESOLUCION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_COMUNICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_S_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_COMUNICADO.CRRES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRCOM_CODIGO, 
		CRRES_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CRCOM_DESTINATARIO, 
		CRCOM_ASUNTO, 
		CRCOM_FECHA_RECEPCION, 
		CRCOM_FECHA_REVISION, 
		CRCOM_NUMERO_DOCUMENTO, 
		CRCOM_DESCRIPCION, 
		CRCOM_OBSERVACION, 
		CRCOM_DESCRIPCION_ADJUNTO, 
		CRCOM_NOMBRE_ADJUNTO, 
		CRCOM_REMITENTE, 
		CRCOM_ADJUNTO, 
		CRCOM_ESTADO_COMUNICADO, 
		CRCOM_ESTADO, 
		CRCOM_FECHA_INSERT, 
		CRCOM_USUARIO_INSERT, 
		CRCOM_FECHA_UPDATE, 
		CRCOM_USUARIO_UPDATE
	FROM SII.CGG_RES_COMUNICADO
	WHERE CRCOM_ESTADO = TRUE AND 
		CRRES_CODIGO = IN_CRRES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_D_CGG_RES_RESOLUCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_COMUNICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_D_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_COMUNICADO.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_COMUNICADO
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_COMUNICADO_D_CGG_RES_RESOLUCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_COMUNICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_COMUNICADO_DS_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_COMUNICADO.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_COMUNICADO SET
		crcom_estado = false
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

