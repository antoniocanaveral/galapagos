/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_VEH_CATEGORIA
* @param IN_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE CATEGORIA.
* @param IN_CGG_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO  DE CATEGORIA RELACIONADO.
* @param IN_CVCTG_NOMBRE NOMBRE DESCRIPTIVO DE LA CATEGORIA.
* @param IN_CVCTG_OBSERVACION INFORMACION ADICIONAL
* @param IN_CVCTG_ESTADO ESTADO DEL REGISTRO.
* @param IN_CVCTG_USUARIO_INSERT USUARIO QUE CREO EL REGISTRO.
* @param IN_CVCTG_USUARIO_UPDATE USUARIO QUE ACTUALIZO EL REGISTRO.
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_INSERT(
IN IN_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CVCTG_CODIGO%TYPE,
IN IN_CGG_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CGG_CVCTG_CODIGO%TYPE,
IN IN_CVCTG_NOMBRE SII.CGG_VEH_CATEGORIA.CVCTG_NOMBRE%TYPE,
IN IN_CVCTG_OBSERVACION SII.CGG_VEH_CATEGORIA.CVCTG_OBSERVACION%TYPE,
IN IN_CVCTG_ESTADO SII.CGG_VEH_CATEGORIA.CVCTG_ESTADO%TYPE,
IN IN_CVCTG_USUARIO_INSERT SII.CGG_VEH_CATEGORIA.CVCTG_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (IN_CGG_CVCTG_CODIGO = IN_CVCTG_CODIGO) THEN
		RAISE EXCEPTION 'No puede ser Categor%a padre de si mismo.', chr(237); 
	END IF;
	IF (UPPER(IN_CVCTG_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_VEH_CATEGORIA','CVCTG_CODIGO','CVCTG') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CVCTG_CODIGO;
	END IF;
	INSERT INTO SII.CGG_VEH_CATEGORIA(
		CVCTG_CODIGO, 
		CGG_CVCTG_CODIGO, 
		CVCTG_NOMBRE, 
		CVCTG_OBSERVACION, 
		CVCTG_ESTADO, 
		CVCTG_USUARIO_INSERT, 
		CVCTG_FECHA_INSERT, 
		CVCTG_USUARIO_UPDATE, 
		CVCTG_FECHA_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGG_CVCTG_CODIGO, 
		IN_CVCTG_NOMBRE, 
		IN_CVCTG_OBSERVACION, 
		IN_CVCTG_ESTADO, 
		IN_CVCTG_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CVCTG_USUARIO_INSERT, 
		CURRENT_TIMESTAMP
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_VEH_CATEGORIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVCTG_CODIGO, 
		CGG_CVCTG_CODIGO, 
		CVCTG_NOMBRE, 
		CVCTG_OBSERVACION, 
		CVCTG_ESTADO, 
		CVCTG_USUARIO_INSERT, 
		CVCTG_FECHA_INSERT, 
		CVCTG_USUARIO_UPDATE, 
		CVCTG_FECHA_UPDATE
	FROM SII.CGG_VEH_CATEGORIA
	WHERE CVCTG_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_VEH_CATEGORIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CVCTG_CODIGO, 
		CGG_CVCTG_CODIGO,
		(SELECT CVCTG_NOMBRE FROM SII.CGG_VEH_CATEGORIA WHERE CVCTG_CODIGO = CTG.CGG_CVCTG_CODIGO) CATEGORIA,
		CVCTG_NOMBRE, 
		CVCTG_OBSERVACION, 
		CVCTG_ESTADO, 
		CVCTG_USUARIO_INSERT, 
		CVCTG_FECHA_INSERT, 
		CVCTG_USUARIO_UPDATE, 
		CVCTG_FECHA_UPDATE
	FROM SII.CGG_VEH_CATEGORIA CTG
	WHERE CVCTG_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CVCTG_NOMBRE, '''')||'' ''||COALESCE(CVCTG_OBSERVACION, '''')||'' ''||COALESCE(CVCTG_ESTADO, FALSE)||'' ''||COALESCE(CVCTG_USUARIO_INSERT, '''')||'' ''||COALESCE(CVCTG_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVCTG_USUARIO_UPDATE, '''')||'' ''||COALESCE(CVCTG_FECHA_UPDATE, CURRENT_TIMESTAMP)) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_CATEGORIA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_CATEGORIA
	WHERE CVCTG_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_CATEGORIA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_CATEGORIA
	WHERE CVCTG_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CVCTG_NOMBRE, '''')||' '||COALESCE(CVCTG_OBSERVACION, '''')||' '||COALESCE(CVCTG_ESTADO, FALSE)||' '||COALESCE(CVCTG_USUARIO_INSERT, '''')||' '||COALESCE(CVCTG_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CVCTG_USUARIO_UPDATE, '''')||' '||COALESCE(CVCTG_FECHA_UPDATE, CURRENT_TIMESTAMP)) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_VEH_CATEGORIA
* @param IN_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE CATEGORIA.
* @param IN_CGG_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO  DE CATEGORIA RELACIONADO.
* @param IN_CVCTG_NOMBRE NOMBRE DESCRIPTIVO DE LA CATEGORIA.
* @param IN_CVCTG_OBSERVACION INFORMACION ADICIONAL
* @param IN_CVCTG_ESTADO ESTADO DEL REGISTRO.
* @param IN_CVCTG_USUARIO_UPDATE USUARIO QUE ACTUALIZO EL REGISTRO.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_UPDATE(
IN IN_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CVCTG_CODIGO%TYPE,
IN IN_CGG_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CGG_CVCTG_CODIGO%TYPE,
IN IN_CVCTG_NOMBRE SII.CGG_VEH_CATEGORIA.CVCTG_NOMBRE%TYPE,
IN IN_CVCTG_OBSERVACION SII.CGG_VEH_CATEGORIA.CVCTG_OBSERVACION%TYPE,
IN IN_CVCTG_ESTADO SII.CGG_VEH_CATEGORIA.CVCTG_ESTADO%TYPE,
IN IN_CVCTG_USUARIO_UPDATE SII.CGG_VEH_CATEGORIA.CVCTG_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	IF (IN_CGG_CVCTG_CODIGO = IN_CVCTG_CODIGO) THEN
		RAISE EXCEPTION 'No puede ser Categor%a padre de si mismo.', chr(237); 
	END IF;
	UPDATE SII.CGG_VEH_CATEGORIA SET
		CGG_CVCTG_CODIGO = IN_CGG_CVCTG_CODIGO, 
		CVCTG_NOMBRE = IN_CVCTG_NOMBRE, 
		CVCTG_OBSERVACION = IN_CVCTG_OBSERVACION, 
		CVCTG_ESTADO = IN_CVCTG_ESTADO, 
		CVCTG_USUARIO_UPDATE = IN_CVCTG_USUARIO_UPDATE, 
		CVCTG_FECHA_UPDATE = CURRENT_TIMESTAMP
	WHERE
		CVCTG_CODIGO = IN_CVCTG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_VEH_CATEGORIA
* @param IN_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE CATEGORIA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_SELECT(
IN IN_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CVCTG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVCTG_CODIGO, 
		CGG_CVCTG_CODIGO, 
		CVCTG_NOMBRE, 
		CVCTG_OBSERVACION, 
		CVCTG_ESTADO, 
		CVCTG_USUARIO_INSERT, 
		CVCTG_FECHA_INSERT, 
		CVCTG_USUARIO_UPDATE, 
		CVCTG_FECHA_UPDATE
	FROM SII.CGG_VEH_CATEGORIA
	WHERE CVCTG_ESTADO = TRUE AND 
		CVCTG_CODIGO = IN_CVCTG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_VEH_CATEGORIA
* @param IN_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE CATEGORIA.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_DELETE(
IN IN_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CVCTG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_CATEGORIA
	WHERE
		CVCTG_CODIGO = IN_CVCTG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_VEH_CATEGORIA
* @param IN_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE CATEGORIA.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_DELETE_SOFT(
IN IN_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CVCTG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_CATEGORIA SET
		CVCTG_ESTADO = FALSE
	WHERE
		CVCTG_CODIGO = IN_CVCTG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_S_CGG_VEH_CATEGORIA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_CATEGORIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_CATEGORIA.
* @param IN_CGG_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO  DE CATEGORIA RELACIONADO.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_S_CGG_VEH_CATEGORIA(
IN IN_CGG_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CGG_CVCTG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVCTG_CODIGO, 
		CGG_CVCTG_CODIGO, 
		CVCTG_NOMBRE, 
		CVCTG_OBSERVACION, 
		CVCTG_ESTADO, 
		CVCTG_USUARIO_INSERT, 
		CVCTG_FECHA_INSERT, 
		CVCTG_USUARIO_UPDATE, 
		CVCTG_FECHA_UPDATE
	FROM SII.CGG_VEH_CATEGORIA
	WHERE CVCTG_ESTADO = TRUE AND 
		CGG_CVCTG_CODIGO = IN_CGG_CVCTG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_D_CGG_VEH_CATEGORIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_CATEGORIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_CATEGORIA.
* @param IN_CGG_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO  DE CATEGORIA RELACIONADO.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_D_CGG_VEH_CATEGORIA(
IN IN_CGG_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CGG_CVCTG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_CATEGORIA
	WHERE
		CGG_CVCTG_CODIGO = IN_CGG_CVCTG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CATEGORIA_D_CGG_VEH_CATEGORIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_CATEGORIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_CATEGORIA.
* @param IN_CGG_CVCTG_CODIGO IDENTIFICADOR UNICO DE REGISTRO  DE CATEGORIA RELACIONADO.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CATEGORIA_DS_CGG_VEH_CATEGORIA(
IN IN_CGG_CVCTG_CODIGO SII.CGG_VEH_CATEGORIA.CGG_CVCTG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_CATEGORIA SET
		cvctg_estado = false
	WHERE
		CGG_CVCTG_CODIGO = IN_CGG_CVCTG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

