/**
* FUNCION SII.F_CGG_RES_DENUNCIA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_DENUNCIA
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRDEN_ANIO ANIO DE LA DENUNCIA
* @param IN_CRDEN_NUMERO NUMERO DE LA DENUNCIA
* @param IN_CRDEN_FECHA_RECEPCION FECHA DE RECEPCION DE LA  DENUNCIA
* @param IN_CRDEN_NUMERO_DOC_IDENT NUMERO DE DOCUMENTO DE IDENTIFICACION DEL DENUNCIANTE
* @param IN_CRDEN_NOMBRES NOMBRES DEL DENUNCIANTE
* @param IN_CRDEN_APELLIDOS APELLIDOS DEL DENUNCIANTE
* @param IN_CRDEN_DESCRIPCION MOTIVO DE LA DENUNCIA
* @param IN_CRDEN_CONTACTO PARA CORREO ELECTRONICO O NUMERO TELEFONICO DEL DENUNCIANTE
* @param IN_CRDEN_TIPO TIPO DE DENUNCIA
RESIDENCIA ->   0
GESTION EMPLEO ->  1
* @param IN_CRDEN_DENUNCIA ESTADO QUE DETERMINA EL ORIGEN DE LA INFORMACION
DENUNCIA/SUGERENCIA
* @param IN_CRDEN_SEGUIMIENTO CAMPO DE REGISTRO DE SEGUIMIENTO DE LA DENUNCIA
* @param IN_CRDEN_ESTADO_DENUNCIA ESTADO DEL REGISTRO, RECOGE INFORMACION PARA DETERMINAR SI ESTA:
REGISTRADA
REVISADA
DESCARTADA
* @param IN_CRDEN_ESTADO ESTADO DEL REGISTRO
* @param IN_CRDEN_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRDEN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_INSERT(
IN IN_CRDEN_CODIGO SII.CGG_RES_DENUNCIA.CRDEN_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_DENUNCIA.CUSU_CODIGO%TYPE, 
IN IN_CRDEN_ANIO SII.CGG_RES_DENUNCIA.CRDEN_ANIO%TYPE, 
IN IN_CRDEN_NUMERO SII.CGG_RES_DENUNCIA.CRDEN_NUMERO%TYPE, 
IN IN_CRDEN_FECHA_RECEPCION SII.CGG_RES_DENUNCIA.CRDEN_FECHA_RECEPCION%TYPE, 
IN IN_CRDEN_NUMERO_DOC_IDENT SII.CGG_RES_DENUNCIA.CRDEN_NUMERO_DOC_IDENT%TYPE, 
IN IN_CRDEN_NOMBRES SII.CGG_RES_DENUNCIA.CRDEN_NOMBRES%TYPE, 
IN IN_CRDEN_APELLIDOS SII.CGG_RES_DENUNCIA.CRDEN_APELLIDOS%TYPE, 
IN IN_CRDEN_DESCRIPCION SII.CGG_RES_DENUNCIA.CRDEN_DESCRIPCION%TYPE, 
IN IN_CRDEN_CONTACTO SII.CGG_RES_DENUNCIA.CRDEN_CONTACTO%TYPE, 
IN IN_CRDEN_TIPO SII.CGG_RES_DENUNCIA.CRDEN_TIPO%TYPE, 
IN IN_CRDEN_DENUNCIA SII.CGG_RES_DENUNCIA.CRDEN_DENUNCIA%TYPE, 
IN IN_CRDEN_SEGUIMIENTO SII.CGG_RES_DENUNCIA.CRDEN_SEGUIMIENTO%TYPE, 
IN IN_CRDEN_ESTADO_DENUNCIA SII.CGG_RES_DENUNCIA.CRDEN_ESTADO_DENUNCIA%TYPE, 
IN IN_CRDEN_ESTADO SII.CGG_RES_DENUNCIA.CRDEN_ESTADO%TYPE, 
IN IN_CRDEN_USUARIO_INSERT SII.CGG_RES_DENUNCIA.CRDEN_USUARIO_INSERT%TYPE, 
IN IN_CRDEN_USUARIO_UPDATE SII.CGG_RES_DENUNCIA.CRDEN_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_SECUENCIA VARCHAR;
TMP_ACRONIMO VARCHAR;
TMP_ANIO VARCHAR;
TMP_NUMERO VARCHAR;
BEGIN
	IF (UPPER(IN_CRDEN_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_DENUNCIA','CRDEN_CODIGO','CRDEN') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRDEN_CODIGO;
	END IF;

	SELECT SII.F_CGG_GENERA_NUM_DENUNCIA(IN_CRDEN_TIPO) INTO TMP_NUMERO;
	
	INSERT INTO SII.CGG_RES_DENUNCIA(
		CRDEN_CODIGO, 
		CUSU_CODIGO, 
		CRDEN_ANIO, 
		CRDEN_NUMERO, 
		CRDEN_FECHA_RECEPCION, 
		CRDEN_NUMERO_DOC_IDENT, 
		CRDEN_NOMBRES, 
		CRDEN_APELLIDOS, 
		CRDEN_DESCRIPCION, 
		CRDEN_CONTACTO, 
		CRDEN_TIPO, 
		CRDEN_DENUNCIA, 
		CRDEN_SEGUIMIENTO, 
		CRDEN_ESTADO_DENUNCIA, 
		CRDEN_ESTADO, 
		CRDEN_FECHA_INSERT, 
		CRDEN_USUARIO_INSERT, 
		CRDEN_FECHA_UPDATE, 
		CRDEN_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CUSU_CODIGO, 
		IN_CRDEN_ANIO, 
		TMP_NUMERO, 
		IN_CRDEN_FECHA_RECEPCION, 
		IN_CRDEN_NUMERO_DOC_IDENT, 
		IN_CRDEN_NOMBRES, 
		IN_CRDEN_APELLIDOS, 
		IN_CRDEN_DESCRIPCION, 
		IN_CRDEN_CONTACTO, 
		IN_CRDEN_TIPO, 
		IN_CRDEN_DENUNCIA, 
		IN_CRDEN_SEGUIMIENTO, 
		IN_CRDEN_ESTADO_DENUNCIA, 
		IN_CRDEN_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRDEN_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRDEN_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_DENUNCIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRDEN_CODIGO, 
		CUSU_CODIGO, 
		CRDEN_ANIO, 
		CRDEN_NUMERO, 
		CRDEN_FECHA_RECEPCION, 
		CRDEN_NUMERO_DOC_IDENT, 
		CRDEN_NOMBRES, 
		CRDEN_APELLIDOS, 
		CRDEN_DESCRIPCION, 
		CRDEN_CONTACTO, 
		CRDEN_TIPO, 
		CRDEN_DENUNCIA, 
		CRDEN_SEGUIMIENTO, 
		CRDEN_ESTADO_DENUNCIA, 
		CRDEN_ESTADO, 
		CRDEN_FECHA_INSERT, 
		CRDEN_USUARIO_INSERT, 
		CRDEN_FECHA_UPDATE, 
		CRDEN_USUARIO_UPDATE
	FROM SII.CGG_RES_DENUNCIA
	WHERE CRDEN_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_RES_DENUNCIA__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_DENUNCIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRDEN_CODIGO, 
		CUSU_CODIGO, 
		CRDEN_ANIO, 
		CRDEN_NUMERO, 
		CRDEN_FECHA_RECEPCION, 
		CRDEN_NUMERO_DOC_IDENT, 
		CRDEN_NOMBRES, 
		CRDEN_APELLIDOS, 
		CRDEN_DESCRIPCION, 
		CRDEN_CONTACTO, 
		CRDEN_TIPO, 
		CRDEN_DENUNCIA, 
		CRDEN_SEGUIMIENTO, 
		CRDEN_ESTADO_DENUNCIA, 
		CRDEN_ESTADO, 
		CRDEN_FECHA_INSERT, 
		CRDEN_USUARIO_INSERT, 
		CRDEN_FECHA_UPDATE, 
		CRDEN_USUARIO_UPDATE
	FROM SII.CGG_RES_DENUNCIA
	WHERE CRDEN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRDEN_CODIGO IS NULL THEN '''' ELSE CRDEN_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CRDEN_ANIO IS NULL THEN '''' ELSE CRDEN_ANIO END ||'' ''||CASE WHEN CRDEN_NUMERO IS NULL THEN '''' ELSE CRDEN_NUMERO END ||'' ''||CASE WHEN CRDEN_FECHA_RECEPCION IS NULL THEN CURRENT_TIMESTAMP ELSE CRDEN_FECHA_RECEPCION END ||'' ''||CASE WHEN CRDEN_NUMERO_DOC_IDENT IS NULL THEN '''' ELSE CRDEN_NUMERO_DOC_IDENT END ||'' ''||CASE WHEN CRDEN_NOMBRES IS NULL THEN '''' ELSE CRDEN_NOMBRES END ||'' ''||CASE WHEN CRDEN_APELLIDOS IS NULL THEN '''' ELSE CRDEN_APELLIDOS END ||'' ''||CASE WHEN CRDEN_DESCRIPCION IS NULL THEN '''' ELSE CRDEN_DESCRIPCION END ||'' ''||CASE WHEN CRDEN_CONTACTO IS NULL THEN '''' ELSE CRDEN_CONTACTO END ||'' ''||CASE WHEN CRDEN_TIPO IS NULL THEN 0 ELSE CRDEN_TIPO END ||'' ''||CASE WHEN CRDEN_DENUNCIA IS NULL THEN FALSE ELSE CRDEN_DENUNCIA END ||'' ''||CASE WHEN CRDEN_SEGUIMIENTO IS NULL THEN '''' ELSE CRDEN_SEGUIMIENTO END ||'' ''||CASE WHEN CRDEN_ESTADO_DENUNCIA IS NULL THEN 0 ELSE CRDEN_ESTADO_DENUNCIA END ||'' ''||CASE WHEN CRDEN_ESTADO IS NULL THEN FALSE ELSE CRDEN_ESTADO END ||'' ''||CASE WHEN CRDEN_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRDEN_FECHA_INSERT END ||'' ''||CASE WHEN CRDEN_USUARIO_INSERT IS NULL THEN '''' ELSE CRDEN_USUARIO_INSERT END ||'' ''||CASE WHEN CRDEN_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRDEN_FECHA_UPDATE END ||'' ''||CASE WHEN CRDEN_USUARIO_UPDATE IS NULL THEN '''' ELSE CRDEN_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_RES_DENUNCIA__SELECT_DIRECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_DENUNCIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_SELECT_DIRECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text,
IN IN_TIPO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRDEN_CODIGO, 
		CUSU_CODIGO, 
		CRDEN_ANIO, 
		CRDEN_NUMERO, 
		CRDEN_FECHA_RECEPCION, 
		CRDEN_NUMERO_DOC_IDENT, 
		CRDEN_NOMBRES, 
		CRDEN_APELLIDOS, 
		CRDEN_DESCRIPCION, 
		CRDEN_CONTACTO, 
		CRDEN_TIPO, 
		CRDEN_DENUNCIA, 
		CRDEN_SEGUIMIENTO, 
		CRDEN_ESTADO_DENUNCIA, 
		CRDEN_ESTADO, 
		CRDEN_FECHA_INSERT, 
		CRDEN_USUARIO_INSERT, 
		CRDEN_FECHA_UPDATE, 
		CRDEN_USUARIO_UPDATE
	FROM SII.CGG_RES_DENUNCIA
	WHERE CRDEN_ESTADO = TRUE AND CRDEN_TIPO='||IN_TIPO||'  AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRDEN_CODIGO IS NULL THEN '''' ELSE CRDEN_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CRDEN_ANIO IS NULL THEN '''' ELSE CRDEN_ANIO END ||'' ''||CASE WHEN CRDEN_NUMERO IS NULL THEN '''' ELSE CRDEN_NUMERO END ||'' ''||CASE WHEN CRDEN_FECHA_RECEPCION IS NULL THEN CURRENT_TIMESTAMP ELSE CRDEN_FECHA_RECEPCION END ||'' ''||CASE WHEN CRDEN_NUMERO_DOC_IDENT IS NULL THEN '''' ELSE CRDEN_NUMERO_DOC_IDENT END ||'' ''||CASE WHEN CRDEN_NOMBRES IS NULL THEN '''' ELSE CRDEN_NOMBRES END ||'' ''||CASE WHEN CRDEN_APELLIDOS IS NULL THEN '''' ELSE CRDEN_APELLIDOS END ||'' ''||CASE WHEN CRDEN_DESCRIPCION IS NULL THEN '''' ELSE CRDEN_DESCRIPCION END ||'' ''||CASE WHEN CRDEN_CONTACTO IS NULL THEN '''' ELSE CRDEN_CONTACTO END ||'' ''||CASE WHEN CRDEN_TIPO IS NULL THEN 0 ELSE CRDEN_TIPO END ||'' ''||CASE WHEN CRDEN_DENUNCIA IS NULL THEN FALSE ELSE CRDEN_DENUNCIA END ||'' ''||CASE WHEN CRDEN_SEGUIMIENTO IS NULL THEN '''' ELSE CRDEN_SEGUIMIENTO END ||'' ''||CASE WHEN CRDEN_ESTADO_DENUNCIA IS NULL THEN 0 ELSE CRDEN_ESTADO_DENUNCIA END) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_DENUNCIA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_DENUNCIA
	WHERE CRDEN_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_DENUNCIA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_TIPO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	IF (IN_TIPO = '0') THEN 
		SELECT COUNT(*) INTO TMP_ROWS
		FROM SII.CGG_RES_DENUNCIA
		WHERE CRDEN_ESTADO = TRUE 
		AND CRDEN_TIPO = 0
		AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRDEN_CODIGO IS NULL THEN '''' ELSE CRDEN_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CRDEN_ANIO IS NULL THEN '''' ELSE CRDEN_ANIO END ||' '||CASE WHEN CRDEN_NUMERO IS NULL THEN '''' ELSE CRDEN_NUMERO END ||' '||CASE WHEN CRDEN_FECHA_RECEPCION IS NULL THEN CURRENT_TIMESTAMP ELSE CRDEN_FECHA_RECEPCION END ||' '||CASE WHEN CRDEN_NUMERO_DOC_IDENT IS NULL THEN '''' ELSE CRDEN_NUMERO_DOC_IDENT END ||' '||CASE WHEN CRDEN_NOMBRES IS NULL THEN '''' ELSE CRDEN_NOMBRES END ||' '||CASE WHEN CRDEN_APELLIDOS IS NULL THEN '''' ELSE CRDEN_APELLIDOS END ||' '||CASE WHEN CRDEN_DESCRIPCION IS NULL THEN '''' ELSE CRDEN_DESCRIPCION END ||' '||CASE WHEN CRDEN_CONTACTO IS NULL THEN '''' ELSE CRDEN_CONTACTO END ||' '||CASE WHEN CRDEN_TIPO IS NULL THEN 0 ELSE CRDEN_TIPO END ||' '||CASE WHEN CRDEN_DENUNCIA IS NULL THEN FALSE ELSE CRDEN_DENUNCIA END ||' '||CASE WHEN CRDEN_SEGUIMIENTO IS NULL THEN '''' ELSE CRDEN_SEGUIMIENTO END ||' '||CASE WHEN CRDEN_ESTADO_DENUNCIA IS NULL THEN 0 ELSE CRDEN_ESTADO_DENUNCIA END) = 1;
	ELSIF (IN_TIPO = '1') THEN 
		SELECT COUNT(*) INTO TMP_ROWS
		FROM SII.CGG_RES_DENUNCIA
		WHERE CRDEN_ESTADO = TRUE 
		AND CRDEN_TIPO = 1
		AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRDEN_CODIGO IS NULL THEN '''' ELSE CRDEN_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CRDEN_ANIO IS NULL THEN '''' ELSE CRDEN_ANIO END ||' '||CASE WHEN CRDEN_NUMERO IS NULL THEN '''' ELSE CRDEN_NUMERO END ||' '||CASE WHEN CRDEN_FECHA_RECEPCION IS NULL THEN CURRENT_TIMESTAMP ELSE CRDEN_FECHA_RECEPCION END ||' '||CASE WHEN CRDEN_NUMERO_DOC_IDENT IS NULL THEN '''' ELSE CRDEN_NUMERO_DOC_IDENT END ||' '||CASE WHEN CRDEN_NOMBRES IS NULL THEN '''' ELSE CRDEN_NOMBRES END ||' '||CASE WHEN CRDEN_APELLIDOS IS NULL THEN '''' ELSE CRDEN_APELLIDOS END ||' '||CASE WHEN CRDEN_DESCRIPCION IS NULL THEN '''' ELSE CRDEN_DESCRIPCION END ||' '||CASE WHEN CRDEN_CONTACTO IS NULL THEN '''' ELSE CRDEN_CONTACTO END ||' '||CASE WHEN CRDEN_TIPO IS NULL THEN 0 ELSE CRDEN_TIPO END ||' '||CASE WHEN CRDEN_DENUNCIA IS NULL THEN FALSE ELSE CRDEN_DENUNCIA END ||' '||CASE WHEN CRDEN_SEGUIMIENTO IS NULL THEN '''' ELSE CRDEN_SEGUIMIENTO END ||' '||CASE WHEN CRDEN_ESTADO_DENUNCIA IS NULL THEN 0 ELSE CRDEN_ESTADO_DENUNCIA END) = 1;
	END IF;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_DENUNCIA
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRDEN_ANIO ANIO DE LA DENUNCIA
* @param IN_CRDEN_NUMERO NUMERO DE LA DENUNCIA
* @param IN_CRDEN_FECHA_RECEPCION FECHA DE RECEPCION DE LA  DENUNCIA
* @param IN_CRDEN_NUMERO_DOC_IDENT NUMERO DE DOCUMENTO DE IDENTIFICACION DEL DENUNCIANTE
* @param IN_CRDEN_NOMBRES NOMBRES DEL DENUNCIANTE
* @param IN_CRDEN_APELLIDOS APELLIDOS DEL DENUNCIANTE
* @param IN_CRDEN_DESCRIPCION MOTIVO DE LA DENUNCIA
* @param IN_CRDEN_CONTACTO PARA CORREO ELECTRONICO O NUMERO TELEFONICO DEL DENUNCIANTE
* @param IN_CRDEN_TIPO TIPO DE DENUNCIA
RESIDENCIA ->   0
GESTION EMPLEO ->  1
* @param IN_CRDEN_DENUNCIA ESTADO QUE DETERMINA EL ORIGEN DE LA INFORMACION
DENUNCIA/SUGERENCIA
* @param IN_CRDEN_SEGUIMIENTO CAMPO DE REGISTRO DE SEGUIMIENTO DE LA DENUNCIA
* @param IN_CRDEN_ESTADO_DENUNCIA ESTADO DEL REGISTRO, RECOGE INFORMACION PARA DETERMINAR SI ESTA:
REGISTRADA
REVISADA
DESCARTADA
* @param IN_CRDEN_ESTADO ESTADO DEL REGISTRO
* @param IN_CRDEN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_UPDATE(
IN IN_CRDEN_CODIGO SII.CGG_RES_DENUNCIA.CRDEN_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_DENUNCIA.CUSU_CODIGO%TYPE, 
IN IN_CRDEN_ANIO SII.CGG_RES_DENUNCIA.CRDEN_ANIO%TYPE, 
IN IN_CRDEN_NUMERO SII.CGG_RES_DENUNCIA.CRDEN_NUMERO%TYPE, 
IN IN_CRDEN_FECHA_RECEPCION SII.CGG_RES_DENUNCIA.CRDEN_FECHA_RECEPCION%TYPE, 
IN IN_CRDEN_NUMERO_DOC_IDENT SII.CGG_RES_DENUNCIA.CRDEN_NUMERO_DOC_IDENT%TYPE, 
IN IN_CRDEN_NOMBRES SII.CGG_RES_DENUNCIA.CRDEN_NOMBRES%TYPE, 
IN IN_CRDEN_APELLIDOS SII.CGG_RES_DENUNCIA.CRDEN_APELLIDOS%TYPE, 
IN IN_CRDEN_DESCRIPCION SII.CGG_RES_DENUNCIA.CRDEN_DESCRIPCION%TYPE, 
IN IN_CRDEN_CONTACTO SII.CGG_RES_DENUNCIA.CRDEN_CONTACTO%TYPE, 
IN IN_CRDEN_TIPO SII.CGG_RES_DENUNCIA.CRDEN_TIPO%TYPE, 
IN IN_CRDEN_DENUNCIA SII.CGG_RES_DENUNCIA.CRDEN_DENUNCIA%TYPE, 
IN IN_CRDEN_SEGUIMIENTO SII.CGG_RES_DENUNCIA.CRDEN_SEGUIMIENTO%TYPE, 
IN IN_CRDEN_ESTADO_DENUNCIA SII.CGG_RES_DENUNCIA.CRDEN_ESTADO_DENUNCIA%TYPE, 
IN IN_CRDEN_ESTADO SII.CGG_RES_DENUNCIA.CRDEN_ESTADO%TYPE, 
IN IN_CRDEN_USUARIO_UPDATE SII.CGG_RES_DENUNCIA.CRDEN_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_DENUNCIA SET
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CRDEN_ANIO = IN_CRDEN_ANIO, 
		CRDEN_NUMERO = IN_CRDEN_NUMERO, 
		CRDEN_FECHA_RECEPCION = IN_CRDEN_FECHA_RECEPCION, 
		CRDEN_NUMERO_DOC_IDENT = IN_CRDEN_NUMERO_DOC_IDENT, 
		CRDEN_NOMBRES = IN_CRDEN_NOMBRES, 
		CRDEN_APELLIDOS = IN_CRDEN_APELLIDOS, 
		CRDEN_DESCRIPCION = IN_CRDEN_DESCRIPCION, 
		CRDEN_CONTACTO = IN_CRDEN_CONTACTO, 
		CRDEN_TIPO = IN_CRDEN_TIPO, 
		CRDEN_DENUNCIA = IN_CRDEN_DENUNCIA, 
		CRDEN_SEGUIMIENTO = IN_CRDEN_SEGUIMIENTO, 
		CRDEN_ESTADO_DENUNCIA = IN_CRDEN_ESTADO_DENUNCIA, 
		CRDEN_ESTADO = IN_CRDEN_ESTADO, 
		CRDEN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRDEN_USUARIO_UPDATE = IN_CRDEN_USUARIO_UPDATE
	WHERE
		CRDEN_CODIGO = IN_CRDEN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_DENUNCIA
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_SELECT(
IN IN_CRDEN_CODIGO SII.CGG_RES_DENUNCIA.CRDEN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRDEN_CODIGO, 
		CUSU_CODIGO, 
		CRDEN_ANIO, 
		CRDEN_NUMERO, 
		CRDEN_FECHA_RECEPCION, 
		CRDEN_NUMERO_DOC_IDENT, 
		CRDEN_NOMBRES, 
		CRDEN_APELLIDOS, 
		CRDEN_DESCRIPCION, 
		CRDEN_CONTACTO, 
		CRDEN_TIPO, 
		CRDEN_DENUNCIA, 
		CRDEN_SEGUIMIENTO, 
		CRDEN_ESTADO_DENUNCIA, 
		CRDEN_ESTADO, 
		CRDEN_FECHA_INSERT, 
		CRDEN_USUARIO_INSERT, 
		CRDEN_FECHA_UPDATE, 
		CRDEN_USUARIO_UPDATE
	FROM SII.CGG_RES_DENUNCIA
	WHERE CRDEN_ESTADO = TRUE AND 
		CRDEN_CODIGO = IN_CRDEN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_DENUNCIA
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_DELETE(
IN IN_CRDEN_CODIGO SII.CGG_RES_DENUNCIA.CRDEN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_DENUNCIA
	WHERE
		CRDEN_CODIGO = IN_CRDEN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_DENUNCIA
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_DELETE_SOFT(
IN IN_CRDEN_CODIGO SII.CGG_RES_DENUNCIA.CRDEN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_DENUNCIA SET
		CRDEN_ESTADO = FALSE
	WHERE
		CRDEN_CODIGO = IN_CRDEN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_DENUNCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_DENUNCIA.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRDEN_CODIGO, 
		CUSU_CODIGO, 
		CRDEN_ANIO, 
		CRDEN_NUMERO, 
		CRDEN_FECHA_RECEPCION, 
		CRDEN_NUMERO_DOC_IDENT, 
		CRDEN_NOMBRES, 
		CRDEN_APELLIDOS, 
		CRDEN_DESCRIPCION, 
		CRDEN_CONTACTO, 
		CRDEN_TIPO, 
		CRDEN_DENUNCIA, 
		CRDEN_SEGUIMIENTO, 
		CRDEN_ESTADO_DENUNCIA, 
		CRDEN_ESTADO, 
		CRDEN_FECHA_INSERT, 
		CRDEN_USUARIO_INSERT, 
		CRDEN_FECHA_UPDATE, 
		CRDEN_USUARIO_UPDATE
	FROM SII.CGG_RES_DENUNCIA
	WHERE CRDEN_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_DENUNCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_DENUNCIA.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_DENUNCIA
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_DENUNCIA_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_DENUNCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DENUNCIA_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_DENUNCIA.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_DENUNCIA SET
		crden_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

