/**
* FUNCION SII.F_CGG_GER_INDICADOR_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GER_INDICADOR
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGGIT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
--* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGGIN_NOMBRE NOMBRE DEL INDICADOR
* @param IN_CGGIN_DESCRIPCION DESCRIPCION DEL INDICADOR
* @param IN_CGGIN_ESTADO ESTADO DEL REGISTRO
* @param IN_CGGIN_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGGIN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_INSERT(
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR.CGGIN_CODIGO%TYPE,
IN IN_CGGIT_CODIGO SII.CGG_GER_INDICADOR.CGGIT_CODIGO%TYPE,
/*IN IN_CUSU_CODIGO SII.CGG_GER_INDICADOR.CUSU_CODIGO%TYPE,
IN IN_CCTN_CODIGO SII.CGG_GER_INDICADOR.CCTN_CODIGO%TYPE,*/
IN IN_CGGIN_NOMBRE SII.CGG_GER_INDICADOR.CGGIN_NOMBRE%TYPE,
IN IN_CGGIN_DESCRIPCION SII.CGG_GER_INDICADOR.CGGIN_DESCRIPCION%TYPE,
IN IN_CGGIN_ESTADO SII.CGG_GER_INDICADOR.CGGIN_ESTADO%TYPE,
IN IN_CGGIN_USUARIO_INSERT SII.CGG_GER_INDICADOR.CGGIN_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGGIN_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GER_INDICADOR','CGGIN_CODIGO','CGGIN') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGGIN_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GER_INDICADOR(
		CGGIN_CODIGO, 
		CGGIT_CODIGO, 
		/*CUSU_CODIGO,
		CCTN_CODIGO,*/
		CGGIN_NOMBRE, 
		CGGIN_DESCRIPCION, 
		CGGIN_ESTADO, 
		CGGIN_FECHA_INSERT, 
		CGGIN_USUARIO_INSERT, 
		CGGIN_FECHA_UPDATE, 
		CGGIN_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGGIT_CODIGO, 
		/*IN_CUSU_CODIGO,
		IN_CCTN_CODIGO,*/
		IN_CGGIN_NOMBRE, 
		IN_CGGIN_DESCRIPCION, 
		IN_CGGIN_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGGIN_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGGIN_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GER_INDICADOR
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGGIN_CODIGO, 
		CGGIT_CODIGO, 
		/*CUSU_CODIGO, 
		CCTN_CODIGO,*/
		CGGIN_NOMBRE, 
		CGGIN_DESCRIPCION, 
		CGGIN_ESTADO, 
		CGGIN_FECHA_INSERT, 
		CGGIN_USUARIO_INSERT, 
		CGGIN_FECHA_UPDATE, 
		CGGIN_USUARIO_UPDATE
	FROM SII.CGG_GER_INDICADOR
	WHERE CGGIN_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GER_INDICADOR
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGGIN_CODIGO, 
		CGGIT_CODIGO, 
		/*CUSU_CODIGO,
		CCTN_CODIGO,*/
		CGGIN_NOMBRE, 
		CGGIN_DESCRIPCION, 
		CGGIN_ESTADO, 
		CGGIN_FECHA_INSERT, 
		CGGIN_USUARIO_INSERT, 
		CGGIN_FECHA_UPDATE, 
		CGGIN_USUARIO_UPDATE
	FROM SII.CGG_GER_INDICADOR
	WHERE CGGIN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGGIN_NOMBRE, '''')||'' ''||COALESCE(CGGIN_DESCRIPCION, '''')||'' ''||COALESCE(CGGIN_ESTADO, FALSE)||'' ''||COALESCE(CGGIN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGGIN_USUARIO_INSERT, '''')||'' ''||COALESCE(CGGIN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGGIN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GER_INDICADOR
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GER_INDICADOR
	WHERE CGGIN_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GER_INDICADOR
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GER_INDICADOR
	WHERE CGGIN_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGGIN_NOMBRE, '''')||' '||COALESCE(CGGIN_DESCRIPCION, '''')||' '||COALESCE(CGGIN_ESTADO, FALSE)||' '||COALESCE(CGGIN_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGGIN_USUARIO_INSERT, '''')||' '||COALESCE(CGGIN_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGGIN_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GER_INDICADOR
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGGIT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
--* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGGIN_NOMBRE NOMBRE DEL INDICADOR
* @param IN_CGGIN_DESCRIPCION DESCRIPCION DEL INDICADOR
* @param IN_CGGIN_ESTADO ESTADO DEL REGISTRO
* @param IN_CGGIN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_UPDATE(
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR.CGGIN_CODIGO%TYPE,
IN IN_CGGIT_CODIGO SII.CGG_GER_INDICADOR.CGGIT_CODIGO%TYPE,
/*IN IN_CUSU_CODIGO SII.CGG_GER_INDICADOR.CUSU_CODIGO%TYPE,
IN IN_CCTN_CODIGO SII.CGG_GER_INDICADOR.CCTN_CODIGO%TYPE,*/
IN IN_CGGIN_NOMBRE SII.CGG_GER_INDICADOR.CGGIN_NOMBRE%TYPE,
IN IN_CGGIN_DESCRIPCION SII.CGG_GER_INDICADOR.CGGIN_DESCRIPCION%TYPE,
IN IN_CGGIN_ESTADO SII.CGG_GER_INDICADOR.CGGIN_ESTADO%TYPE,
IN IN_CGGIN_USUARIO_UPDATE SII.CGG_GER_INDICADOR.CGGIN_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GER_INDICADOR SET
		CGGIT_CODIGO = IN_CGGIT_CODIGO, 
		/*CUSU_CODIGO = IN_CUSU_CODIGO, 
		CCTN_CODIGO = IN_CCTN_CODIGO,*/
		CGGIN_NOMBRE = IN_CGGIN_NOMBRE, 
		CGGIN_DESCRIPCION = IN_CGGIN_DESCRIPCION, 
		CGGIN_ESTADO = IN_CGGIN_ESTADO, 
		CGGIN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGGIN_USUARIO_UPDATE = IN_CGGIN_USUARIO_UPDATE
	WHERE
		CGGIN_CODIGO = IN_CGGIN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GER_INDICADOR
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_SELECT(
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR.CGGIN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGGIN_CODIGO, 
		CGGIT_CODIGO, 
		/*CUSU_CODIGO,
		CCTN_CODIGO,*/
		CGGIN_NOMBRE, 
		CGGIN_DESCRIPCION, 
		CGGIN_ESTADO, 
		CGGIN_FECHA_INSERT, 
		CGGIN_USUARIO_INSERT, 
		CGGIN_FECHA_UPDATE, 
		CGGIN_USUARIO_UPDATE
	FROM SII.CGG_GER_INDICADOR
	WHERE CGGIN_ESTADO = TRUE AND 
		CGGIN_CODIGO = IN_CGGIN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GER_INDICADOR
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_DELETE(
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR.CGGIN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GER_INDICADOR
	WHERE
		CGGIN_CODIGO = IN_CGGIN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GER_INDICADOR
* @param IN_CGGIN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_DELETE_SOFT(
IN IN_CGGIN_CODIGO SII.CGG_GER_INDICADOR.CGGIN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GER_INDICADOR SET
		CGGIN_ESTADO = FALSE
	WHERE
		CGGIN_CODIGO = IN_CGGIN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_S_CGG_GER_INDICADOR_TIPO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GER_INDICADOR_TIPO.
* @param IN_CGGIT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_S_CGG_GER_INDICADOR_TIPO(
IN IN_CGGIT_CODIGO SII.CGG_GER_INDICADOR.CGGIT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGGIN_CODIGO, 
		CGGIT_CODIGO, 
		/*CUSU_CODIGO,
		CCTN_CODIGO,*/
		CGGIN_NOMBRE, 
		CGGIN_DESCRIPCION, 
		CGGIN_ESTADO, 
		CGGIN_FECHA_INSERT, 
		CGGIN_USUARIO_INSERT, 
		CGGIN_FECHA_UPDATE, 
		CGGIN_USUARIO_UPDATE
	FROM SII.CGG_GER_INDICADOR
	WHERE CGGIN_ESTADO = TRUE AND 
		CGGIT_CODIGO = IN_CGGIT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_D_CGG_GER_INDICADOR_TIPO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GER_INDICADOR_TIPO.
* @param IN_CGGIT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_D_CGG_GER_INDICADOR_TIPO(
IN IN_CGGIT_CODIGO SII.CGG_GER_INDICADOR.CGGIT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GER_INDICADOR
	WHERE
		CGGIT_CODIGO = IN_CGGIT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GER_INDICADOR_D_CGG_GER_INDICADOR_TIPO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GER_INDICADOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GER_INDICADOR_TIPO.
* @param IN_CGGIT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GER_INDICADOR_DS_CGG_GER_INDICADOR_TIPO(
IN IN_CGGIT_CODIGO SII.CGG_GER_INDICADOR.CGGIT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GER_INDICADOR SET
		cggin_estado = false
	WHERE
		CGGIT_CODIGO = IN_CGGIT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

