/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_RESIDENCIA
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRTST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE SOLICITUD DE RESIDENCIA
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE
* @param IN_CGG_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE DE LA REVOCATORIA DE LA RESIDENCIA
* @param IN_CRRSD_NUMERO NUMERO DE RESIDENCIA
* @param IN_CRRSD_MODALIDAD ESTADO MIGRATORIO AUTORIZADO PARA LA PERSONA
0 - PERMANENTE
1 - TEMPORAL
* @param IN_CRRSD_FECHA_INICIO FECHA DE INICIO DEL PERMISO DE PERMANENCIA
* @param IN_CRRSD_FECHA_CADUCIDAD FECHA DE CADUCIDAD DEL PERMISO DE PERMANENCIA
* @param IN_CRRSD_REVOCADA SI LA RESIDENCIA ESTA REVOCADA
* @param IN_CRRSD_FECHA_REVOCATORIA FECHA DE REVOCATORIA DEL PERMISO DE RESIDENCIA
* @param IN_CRRSD_MOTIVO_REVOCATORIA DESCRIPCION DEL MOTIVO QUE GENERO UNA REVOCATORIA DE PERMISO DE RESIDENCIA
* @param IN_CRRSD_VIGENTE DETERMINA EL ESTADO ACTIVO DE LA RESIDENCIA
* @param IN_CRRSD_TRAMITE_PENDIENTE ESTADO QUE DETERMINA SI LA RESIDENCIA AUN TIENE UN TRAMITE POR CONCLUIR
SI
NO
* @param IN_CRRSD_ESTADO ESTADO DEL REGISTRO
* @param IN_CRRSD_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRRSD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_INSERT(
IN IN_CRRSD_CODIGO SII.CGG_RES_RESIDENCIA.CRRSD_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_RES_RESIDENCIA.CRPER_CODIGO%TYPE,
IN IN_CRTST_CODIGO SII.CGG_RES_RESIDENCIA.CRTST_CODIGO%TYPE,
IN IN_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CRTRA_CODIGO%TYPE,
IN IN_CGG_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CGG_CRTRA_CODIGO%TYPE,
IN IN_CRRSD_NUMERO SII.CGG_RES_RESIDENCIA.CRRSD_NUMERO%TYPE,
IN IN_CRRSD_MODALIDAD SII.CGG_RES_RESIDENCIA.CRRSD_MODALIDAD%TYPE,
IN IN_CRRSD_FECHA_INICIO SII.CGG_RES_RESIDENCIA.CRRSD_FECHA_INICIO%TYPE,
IN IN_CRRSD_FECHA_CADUCIDAD SII.CGG_RES_RESIDENCIA.CRRSD_FECHA_CADUCIDAD%TYPE,
IN IN_CRRSD_REVOCADA SII.CGG_RES_RESIDENCIA.CRRSD_REVOCADA%TYPE,
IN IN_CRRSD_FECHA_REVOCATORIA SII.CGG_RES_RESIDENCIA.CRRSD_FECHA_REVOCATORIA%TYPE,
IN IN_CRRSD_MOTIVO_REVOCATORIA SII.CGG_RES_RESIDENCIA.CRRSD_MOTIVO_REVOCATORIA%TYPE,
IN IN_CRRSD_VIGENTE SII.CGG_RES_RESIDENCIA.CRRSD_VIGENTE%TYPE,
IN IN_CRRSD_TRAMITE_PENDIENTE SII.CGG_RES_RESIDENCIA.CRRSD_TRAMITE_PENDIENTE%TYPE,
IN IN_CRRSD_ESTADO SII.CGG_RES_RESIDENCIA.CRRSD_ESTADO%TYPE,
IN IN_CRRSD_USUARIO_INSERT SII.CGG_RES_RESIDENCIA.CRRSD_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN
	TMP_COUNT := 0;
	SELECT COUNT(CRRSD_CODIGO) INTO TMP_COUNT FROM SII.CGG_RES_RESIDENCIA
	WHERE CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		CRTST_CODIGO = IN_CRTST_CODIGO;
	IF (TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'Ya existe una residencia generada del mismo tipo y con el mismo tramite.';
	END IF;
	
	IF (UPPER(IN_CRRSD_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_RESIDENCIA','CRRSD_CODIGO','CRRSD') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRRSD_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_RESIDENCIA(
		CRRSD_CODIGO, 
		CRPER_CODIGO, 
		CRTST_CODIGO, 
		CRTRA_CODIGO, 
		CGG_CRTRA_CODIGO, 
		CRRSD_NUMERO, 
		CRRSD_MODALIDAD, 
		CRRSD_FECHA_INICIO, 
		CRRSD_FECHA_CADUCIDAD, 
		CRRSD_REVOCADA, 
		CRRSD_FECHA_REVOCATORIA, 
		CRRSD_MOTIVO_REVOCATORIA, 
		CRRSD_VIGENTE, 
		CRRSD_TRAMITE_PENDIENTE, 
		CRRSD_ESTADO, 
		CRRSD_FECHA_INSERT, 
		CRRSD_USUARIO_INSERT, 
		CRRSD_FECHA_UPDATE, 
		CRRSD_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CRTST_CODIGO, 
		IN_CRTRA_CODIGO, 
		IN_CGG_CRTRA_CODIGO, 
		IN_CRRSD_NUMERO, 
		IN_CRRSD_MODALIDAD, 
		IN_CRRSD_FECHA_INICIO, 
		IN_CRRSD_FECHA_CADUCIDAD, 
		IN_CRRSD_REVOCADA, 
		IN_CRRSD_FECHA_REVOCATORIA, 
		IN_CRRSD_MOTIVO_REVOCATORIA, 
		IN_CRRSD_VIGENTE, 
		IN_CRRSD_TRAMITE_PENDIENTE, 
		IN_CRRSD_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRRSD_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRRSD_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_RESIDENCIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRRSD_CODIGO, 
		CRPER_CODIGO, 
		CRTST_CODIGO, 
		CRTRA_CODIGO, 
		CGG_CRTRA_CODIGO, 
		CRRSD_NUMERO, 
		CRRSD_MODALIDAD, 
		CRRSD_FECHA_INICIO, 
		CRRSD_FECHA_CADUCIDAD, 
		CRRSD_REVOCADA, 
		CRRSD_FECHA_REVOCATORIA, 
		CRRSD_MOTIVO_REVOCATORIA, 
		CRRSD_VIGENTE, 
		CRRSD_TRAMITE_PENDIENTE, 
		CRRSD_ESTADO, 
		CRRSD_FECHA_INSERT, 
		CRRSD_USUARIO_INSERT, 
		CRRSD_FECHA_UPDATE, 
		CRRSD_USUARIO_UPDATE
	FROM SII.CGG_RES_RESIDENCIA
	WHERE CRRSD_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_RESIDENCIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRRSD_CODIGO, 
		CRPER_CODIGO, 
		CRTST_CODIGO, 
		CRTRA_CODIGO, 
		CGG_CRTRA_CODIGO, 
		CRRSD_NUMERO, 
		CRRSD_MODALIDAD, 
		CRRSD_FECHA_INICIO, 
		CRRSD_FECHA_CADUCIDAD, 
		CRRSD_REVOCADA, 
		CRRSD_FECHA_REVOCATORIA, 
		CRRSD_MOTIVO_REVOCATORIA, 
		CRRSD_VIGENTE, 
		CRRSD_TRAMITE_PENDIENTE, 
		CRRSD_ESTADO, 
		CRRSD_FECHA_INSERT, 
		CRRSD_USUARIO_INSERT, 
		CRRSD_FECHA_UPDATE, 
		CRRSD_USUARIO_UPDATE
	FROM SII.CGG_RES_RESIDENCIA
	WHERE CRRSD_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRRSD_NUMERO, 0)||'' ''||COALESCE(CRRSD_MODALIDAD, 0)||'' ''||COALESCE(CRRSD_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRSD_FECHA_CADUCIDAD, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRSD_REVOCADA, FALSE)||'' ''||COALESCE(CRRSD_FECHA_REVOCATORIA, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRSD_MOTIVO_REVOCATORIA, '''')||'' ''||COALESCE(CRRSD_VIGENTE, FALSE)||'' ''||COALESCE(CRRSD_TRAMITE_PENDIENTE, FALSE)||'' ''||COALESCE(CRRSD_ESTADO, FALSE)||'' ''||COALESCE(CRRSD_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRSD_USUARIO_INSERT, '''')||'' ''||COALESCE(CRRSD_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRSD_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_RESIDENCIA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_RESIDENCIA
	WHERE CRRSD_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_RESIDENCIA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_RESIDENCIA
	WHERE CRRSD_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRRSD_NUMERO, 0)||' '||COALESCE(CRRSD_MODALIDAD, 0)||' '||COALESCE(CRRSD_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||COALESCE(CRRSD_FECHA_CADUCIDAD, CURRENT_TIMESTAMP)||' '||COALESCE(CRRSD_REVOCADA, FALSE)||' '||COALESCE(CRRSD_FECHA_REVOCATORIA, CURRENT_TIMESTAMP)||' '||COALESCE(CRRSD_MOTIVO_REVOCATORIA, '''')||' '||COALESCE(CRRSD_VIGENTE, FALSE)||' '||COALESCE(CRRSD_TRAMITE_PENDIENTE, FALSE)||' '||COALESCE(CRRSD_ESTADO, FALSE)||' '||COALESCE(CRRSD_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRRSD_USUARIO_INSERT, '''')||' '||COALESCE(CRRSD_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRRSD_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_RESIDENCIA
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRTST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE SOLICITUD DE RESIDENCIA
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE
* @param IN_CGG_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE DE LA REVOCATORIA DE LA RESIDENCIA
* @param IN_CRRSD_NUMERO NUMERO DE RESIDENCIA
* @param IN_CRRSD_MODALIDAD ESTADO MIGRATORIO AUTORIZADO PARA LA PERSONA
0 - PERMANENTE
1 - TEMPORAL
* @param IN_CRRSD_FECHA_INICIO FECHA DE INICIO DEL PERMISO DE PERMANENCIA
* @param IN_CRRSD_FECHA_CADUCIDAD FECHA DE CADUCIDAD DEL PERMISO DE PERMANENCIA
* @param IN_CRRSD_REVOCADA SI LA RESIDENCIA ESTA REVOCADA
* @param IN_CRRSD_FECHA_REVOCATORIA FECHA DE REVOCATORIA DEL PERMISO DE RESIDENCIA
* @param IN_CRRSD_MOTIVO_REVOCATORIA DESCRIPCION DEL MOTIVO QUE GENERO UNA REVOCATORIA DE PERMISO DE RESIDENCIA
* @param IN_CRRSD_VIGENTE DETERMINA EL ESTADO ACTIVO DE LA RESIDENCIA
* @param IN_CRRSD_TRAMITE_PENDIENTE ESTADO QUE DETERMINA SI LA RESIDENCIA AUN TIENE UN TRAMITE POR CONCLUIR
SI
NO
* @param IN_CRRSD_ESTADO ESTADO DEL REGISTRO
* @param IN_CRRSD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_UPDATE(
IN IN_CRRSD_CODIGO SII.CGG_RES_RESIDENCIA.CRRSD_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_RES_RESIDENCIA.CRPER_CODIGO%TYPE,
IN IN_CRTST_CODIGO SII.CGG_RES_RESIDENCIA.CRTST_CODIGO%TYPE,
IN IN_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CRTRA_CODIGO%TYPE,
IN IN_CGG_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CGG_CRTRA_CODIGO%TYPE,
IN IN_CRRSD_NUMERO SII.CGG_RES_RESIDENCIA.CRRSD_NUMERO%TYPE,
IN IN_CRRSD_MODALIDAD SII.CGG_RES_RESIDENCIA.CRRSD_MODALIDAD%TYPE,
IN IN_CRRSD_FECHA_INICIO SII.CGG_RES_RESIDENCIA.CRRSD_FECHA_INICIO%TYPE,
IN IN_CRRSD_FECHA_CADUCIDAD SII.CGG_RES_RESIDENCIA.CRRSD_FECHA_CADUCIDAD%TYPE,
IN IN_CRRSD_REVOCADA SII.CGG_RES_RESIDENCIA.CRRSD_REVOCADA%TYPE,
IN IN_CRRSD_FECHA_REVOCATORIA SII.CGG_RES_RESIDENCIA.CRRSD_FECHA_REVOCATORIA%TYPE,
IN IN_CRRSD_MOTIVO_REVOCATORIA SII.CGG_RES_RESIDENCIA.CRRSD_MOTIVO_REVOCATORIA%TYPE,
IN IN_CRRSD_VIGENTE SII.CGG_RES_RESIDENCIA.CRRSD_VIGENTE%TYPE,
IN IN_CRRSD_TRAMITE_PENDIENTE SII.CGG_RES_RESIDENCIA.CRRSD_TRAMITE_PENDIENTE%TYPE,
IN IN_CRRSD_ESTADO SII.CGG_RES_RESIDENCIA.CRRSD_ESTADO%TYPE,
IN IN_CRRSD_USUARIO_UPDATE SII.CGG_RES_RESIDENCIA.CRRSD_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESIDENCIA SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CRTST_CODIGO = IN_CRTST_CODIGO, 
		CRTRA_CODIGO = IN_CRTRA_CODIGO, 
		CGG_CRTRA_CODIGO = IN_CGG_CRTRA_CODIGO, 
		CRRSD_NUMERO = IN_CRRSD_NUMERO, 
		CRRSD_MODALIDAD = IN_CRRSD_MODALIDAD, 
		CRRSD_FECHA_INICIO = IN_CRRSD_FECHA_INICIO, 
		CRRSD_FECHA_CADUCIDAD = IN_CRRSD_FECHA_CADUCIDAD, 
		CRRSD_REVOCADA = IN_CRRSD_REVOCADA, 
		CRRSD_FECHA_REVOCATORIA = IN_CRRSD_FECHA_REVOCATORIA, 
		CRRSD_MOTIVO_REVOCATORIA = IN_CRRSD_MOTIVO_REVOCATORIA, 
		CRRSD_VIGENTE = IN_CRRSD_VIGENTE, 
		CRRSD_TRAMITE_PENDIENTE = IN_CRRSD_TRAMITE_PENDIENTE, 
		CRRSD_ESTADO = IN_CRRSD_ESTADO, 
		CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRRSD_USUARIO_UPDATE = IN_CRRSD_USUARIO_UPDATE
	WHERE
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_RESIDENCIA
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_SELECT(
IN IN_CRRSD_CODIGO SII.CGG_RES_RESIDENCIA.CRRSD_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRRSD_CODIGO, 
		CRPER_CODIGO, 
		CRTST_CODIGO, 
		CRTRA_CODIGO, 
		CGG_CRTRA_CODIGO, 
		CRRSD_NUMERO, 
		CRRSD_MODALIDAD, 
		CRRSD_FECHA_INICIO, 
		CRRSD_FECHA_CADUCIDAD, 
		CRRSD_REVOCADA, 
		CRRSD_FECHA_REVOCATORIA, 
		CRRSD_MOTIVO_REVOCATORIA, 
		CRRSD_VIGENTE, 
		CRRSD_TRAMITE_PENDIENTE, 
		CRRSD_ESTADO, 
		CRRSD_FECHA_INSERT, 
		CRRSD_USUARIO_INSERT, 
		CRRSD_FECHA_UPDATE, 
		CRRSD_USUARIO_UPDATE
	FROM SII.CGG_RES_RESIDENCIA
	WHERE CRRSD_ESTADO = TRUE AND 
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_RESIDENCIA
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_DELETE(
IN IN_CRRSD_CODIGO SII.CGG_RES_RESIDENCIA.CRRSD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_RESIDENCIA
	WHERE
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_RESIDENCIA
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_DELETE_SOFT(
IN IN_CRRSD_CODIGO SII.CGG_RES_RESIDENCIA.CRRSD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESIDENCIA SET
		CRRSD_ESTADO = FALSE
	WHERE
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_S_CGG_RES_TRAMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESIDENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE
* @param IN_CGG_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE DE LA REVOCATORIA DE LA RESIDENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_S_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CRTRA_CODIGO%TYPE, 
IN IN_CGG_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CGG_CRTRA_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRRSD_CODIGO, 
		CRPER_CODIGO, 
		CRTST_CODIGO, 
		CRTRA_CODIGO, 
		CGG_CRTRA_CODIGO, 
		CRRSD_NUMERO, 
		CRRSD_MODALIDAD, 
		CRRSD_FECHA_INICIO, 
		CRRSD_FECHA_CADUCIDAD, 
		CRRSD_REVOCADA, 
		CRRSD_FECHA_REVOCATORIA, 
		CRRSD_MOTIVO_REVOCATORIA, 
		CRRSD_VIGENTE, 
		CRRSD_TRAMITE_PENDIENTE, 
		CRRSD_ESTADO, 
		CRRSD_FECHA_INSERT, 
		CRRSD_USUARIO_INSERT, 
		CRRSD_FECHA_UPDATE, 
		CRRSD_USUARIO_UPDATE
	FROM SII.CGG_RES_RESIDENCIA
	WHERE CRRSD_ESTADO = TRUE AND 
		CRTRA_CODIGO = IN_CRTRA_CODIGO AND 
		CGG_CRTRA_CODIGO = IN_CGG_CRTRA_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_D_CGG_RES_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESIDENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE
* @param IN_CGG_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE DE LA REVOCATORIA DE LA RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_D_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CRTRA_CODIGO%TYPE, 
IN IN_CGG_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CGG_CRTRA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_RESIDENCIA
	WHERE
		CRTRA_CODIGO = IN_CRTRA_CODIGO AND 
		CGG_CRTRA_CODIGO = IN_CGG_CRTRA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_D_CGG_RES_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESIDENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE
* @param IN_CGG_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE DE LA REVOCATORIA DE LA RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_DS_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CRTRA_CODIGO%TYPE, 
IN IN_CGG_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CGG_CRTRA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESIDENCIA SET
		crrsd_estado = false
	WHERE
		CRTRA_CODIGO = IN_CRTRA_CODIGO AND 
		CGG_CRTRA_CODIGO = IN_CGG_CRTRA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_S_CGG_RES_TIPO_SOLICITUD_TRAMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESIDENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_SOLICITUD_TRAMITE.
* @param IN_CRTST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE SOLICITUD DE RESIDENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_S_CGG_RES_TIPO_SOLICITUD_TRAMITE(
IN IN_CRTST_CODIGO SII.CGG_RES_RESIDENCIA.CRTST_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRRSD_CODIGO, 
		CRPER_CODIGO, 
		CRTST_CODIGO, 
		CRTRA_CODIGO, 
		CGG_CRTRA_CODIGO, 
		CRRSD_NUMERO, 
		CRRSD_MODALIDAD, 
		CRRSD_FECHA_INICIO, 
		CRRSD_FECHA_CADUCIDAD, 
		CRRSD_REVOCADA, 
		CRRSD_FECHA_REVOCATORIA, 
		CRRSD_MOTIVO_REVOCATORIA, 
		CRRSD_VIGENTE, 
		CRRSD_TRAMITE_PENDIENTE, 
		CRRSD_ESTADO, 
		CRRSD_FECHA_INSERT, 
		CRRSD_USUARIO_INSERT, 
		CRRSD_FECHA_UPDATE, 
		CRRSD_USUARIO_UPDATE
	FROM SII.CGG_RES_RESIDENCIA
	WHERE CRRSD_ESTADO = TRUE AND 
		CRTST_CODIGO = IN_CRTST_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_D_CGG_RES_TIPO_SOLICITUD_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESIDENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_SOLICITUD_TRAMITE.
* @param IN_CRTST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE SOLICITUD DE RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_D_CGG_RES_TIPO_SOLICITUD_TRAMITE(
IN IN_CRTST_CODIGO SII.CGG_RES_RESIDENCIA.CRTST_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_RESIDENCIA
	WHERE
		CRTST_CODIGO = IN_CRTST_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_D_CGG_RES_TIPO_SOLICITUD_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESIDENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_SOLICITUD_TRAMITE.
* @param IN_CRTST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE SOLICITUD DE RESIDENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_DS_CGG_RES_TIPO_SOLICITUD_TRAMITE(
IN IN_CRTST_CODIGO SII.CGG_RES_RESIDENCIA.CRTST_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESIDENCIA SET
		crrsd_estado = false
	WHERE
		CRTST_CODIGO = IN_CRTST_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESIDENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_RESIDENCIA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRRSD_CODIGO, 
		CRPER_CODIGO, 
		CRTST_CODIGO, 
		CRTRA_CODIGO, 
		CGG_CRTRA_CODIGO, 
		CRRSD_NUMERO, 
		CRRSD_MODALIDAD, 
		CRRSD_FECHA_INICIO, 
		CRRSD_FECHA_CADUCIDAD, 
		CRRSD_REVOCADA, 
		CRRSD_FECHA_REVOCATORIA, 
		CRRSD_MOTIVO_REVOCATORIA, 
		CRRSD_VIGENTE, 
		CRRSD_TRAMITE_PENDIENTE, 
		CRRSD_ESTADO, 
		CRRSD_FECHA_INSERT, 
		CRRSD_USUARIO_INSERT, 
		CRRSD_FECHA_UPDATE, 
		CRRSD_USUARIO_UPDATE
	FROM SII.CGG_RES_RESIDENCIA
	WHERE CRRSD_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESIDENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_RESIDENCIA.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_RESIDENCIA
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESIDENCIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_RESIDENCIA.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESIDENCIA SET
		crrsd_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_GENERAR
* @param IN_USER_NAME USUARIO DEL SERVIDOR DE APLICACIONES
* @param IN_CRTRA_CODIGO CODIGO DEL REGISTRO DE TRAMITE
* @param IN_CRSEG_CODIGO CODIGO DEL SEGUIMIENTO
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_GENERAR(
IN IN_USER_NAME VARCHAR,
IN IN_CRTRA_CODIGO VARCHAR,
IN IN_CRSEG_CODIGO VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE 
TMP_CRTST_CODIGO VARCHAR;
TMP_PERMANENTE VARCHAR;
TMP_TEMPORAL VARCHAR;
TMP_TRANSEUNTE VARCHAR;
TMP_IS_PERMANENTE BOOLEAN;
TMP_IS_TEMPORAL BOOLEAN;
TMP_IS_TRANSEUNTE BOOLEAN;
--FECHA DE INGRESO
TMP_CRTRA_FECHA_INGRESO TIMESTAMP WITH TIME ZONE;
--CODIGO DE RESIDENCIA
TMP_CRRSD_CODIGO VARCHAR;
--CODIGO DE LA NUEVA RESIDENCIA
TMP_NEW_CRRSD_CODIGO VARCHAR;
--FECHA DE CADUCIDAD DE LA RESIDENCIA
TMP_CRRSD_FECHA_CADUCIDAD TIMESTAMP WITH TIME ZONE;
--CODIGO DEL AUSPICIANTE DEL TRAMITE
TMP_CRPER_CODIGO VARCHAR;
--MODALIDAD DE LA RESIDENCIA ACTUAL
TMP_CRRSD_MODALIDAD INT;
--NUMERO DE RESIDENCIA ACTUAL
TMP_CRRSD_NUMERO INT;
--CODIGO DEL BENEFICIARIO DEL TRAMITE
TMP_CGG_CRPER_CODIGO VARCHAR;
--DIAS DE AUTORIZACION DE PERMANENCIA DENTRO DE LA PROVINCIA
TMP_DIAS_AUTORIZADOS INT;
--FECHA DE CADUCIDAD DE LA AUTORIZACION DE PERMANENCIA DENTRO DE LA PROVINCIA
TMP_FECHA_CADUCIDAD TIMESTAMP WITH TIME ZONE;
--CODIGO DE LA RESOLUCION ASOCIADA AL TRAMITE
TMP_CRRES_CODIGO VARCHAR;
--ESTADO DE LA RESOLUCION ASOCIADA AL TRAMITE
TMP_CRRES_ESTADO_RESOLUCION INT;
--BUFFER PARA ALMANCENAR EL CODIGO ASIGNADO EN LA INSERCION DE UN NUEVO REGISTRO.
TMP_CODIGO VARCHAR;
--FECHA DE APROBACION DE LA RESOLUCION
TMP_CRRES_FECHA_EMISION TIMESTAMP WITH TIME ZONE;
--NUMERO DE RESIDENCIA MAXIMO
TMP_MAX_RESIDENCIA INT;
--INDICE DE LA ISLA DONDE SE PRESENTO EL TRAMITE
TMP_CISLA_INDICE INT;
--INDICE PARA TIPO DE SOLICITUD PERMANENTE
TMP_INDICE_PERM INT;
--INDICE DEL TIPO DE RESIDENCIA
TMP_INDICE INT;
--INDICE PARA TIPO DE SOLICITUD TEMPORAL
TMP_INDICE_TEMP INT;
--MODALIDAD DE LA RESIDENCIA PERMANENTE O TEMPORAL
TMP_MODALIDAD INT;
--REGISTRO DE TABLA DE SEGUIMIENTO
TMP_RSGM RECORD;
--ESTADO DEL TRAMITE
TMP_CRETT_CODIGO VARCHAR;
--SI EL TIPO DE SOLICITUD DEBE GENERAR TRANSEUNTE TEMPORAL
TMP_APLICA_OTRO BOOLEAN;
--OBTIENE EL ESTADO DE TRAMITE PARA CUANDO ESTA LISTO PARA TRATARSE EN COMITE
TMP_ESTADO_COMITE VARCHAR;
--SI LA RESIDENCIA TIENE UN TRAMITE PENDIENTE
TMP_CRRSD_TRAMITE_PENDIENTE BOOLEAN;
--REGISTRO DE FASE QUE ESTA CUMPLIENDO EL SEGUIMIENTO
TMP_RFS RECORD;
--ISLA DE PRESENTACION 
TMP_CISLA_CODIGO VARCHAR;
--ISLA DE LA OBTENCION DE LA RESIDENCIA
TMP_RSD_ISLA VARCHAR;
--CODIGO DE LA TABLA RESOL_TRAMITE
TMP_CRRST_CODIGO VARCHAR;
BEGIN
	TMP_CRRSD_TRAMITE_PENDIENTE := FALSE;
	
	--OBTIENE EL REGISTRO DEL TABLA SEGUIMIENTO
	SELECT * INTO TMP_RSGM 
	FROM SII.CGG_RES_SEGUIMIENTO 
	WHERE CRSEG_CODIGO = IN_CRSEG_CODIGO AND 
		CRTRA_CODIGO = IN_CRTRA_CODIGO;
		
	--OBTIENE LA FASE QUE ESTA CUMPLIENDO EL SEGUIMIENTO
	SELECT * INTO TMP_RFS
	FROM SII.CGG_RES_FASE
	WHERE CRFAS_CODIGO = TMP_RSGM.CRFAS_CODIGO;
	
	--OBTIENE EL TIPO DE SOLICITUD DEL TRAMITE
	SELECT TST.CRRES_CODIGO,
		TRM.CRTST_CODIGO, 
		TRM.CRPER_CODIGO, 
		TRM.CGG_CRPER_CODIGO,
		TRM.CRTRA_DIAS_PERMANENCIA,
		TRM.CRTRA_FECHA_INGRESO,
		TRM.CRTRA_FECHA_SALIDA,
		SL.CISLA_INDICE,
		TRM.CRETT_CODIGO,
		TST.CRTST_APLICA_OTRO,
		TRM.CISLA_CODIGO
	INTO TMP_CRRES_CODIGO,
		TMP_CRTST_CODIGO, 
		TMP_CRPER_CODIGO, 
		TMP_CGG_CRPER_CODIGO,
		TMP_DIAS_AUTORIZADOS,
		TMP_CRTRA_FECHA_INGRESO,
		TMP_FECHA_CADUCIDAD,
		TMP_CISLA_INDICE,
		TMP_CRETT_CODIGO,
		TMP_APLICA_OTRO,
		TMP_CISLA_CODIGO
	FROM SII.CGG_RES_TRAMITE TRM
	INNER JOIN SII.CGG_ISLA SL ON SL.CISLA_CODIGO = TRM.CISLA_CODIGO AND SL.CISLA_ESTADO
	INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON TST.CRTST_CODIGO = TRM.CRTST_CODIGO AND TST.CRTST_ESTADO
	WHERE TRM.CRTRA_CODIGO = IN_CRTRA_CODIGO;

	SELECT CRRST_CODIGO INTO TMP_CRRST_CODIGO 
	FROM SII.CGG_RES_RESOL_TRAMITE 
	WHERE CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		CRRST_ESTADO;
	
	IF (TMP_CRRES_CODIGO IS NOT NULL AND TMP_CRRST_CODIGO IS NULL) THEN
		SELECT SII.F_CGG_RES_RESOL_TRAMITE_INSERT(
			'KEYGEN'::VARCHAR,
			TMP_CRRES_CODIGO,
			IN_CRTRA_CODIGO,
			TRUE,
			IN_USER_NAME
		) INTO TMP_CODIGO;
	END IF;		
	
	--OBTIENE INFORMACION DE LA RESOLUCION ASOCIADA AL TRAMITE
	SELECT RSL.CRRES_CODIGO,
		RSL.CRRES_ESTADO_RESOLUCION,
		RSL.CRRES_FECHA_EMISION
	INTO TMP_CRRES_CODIGO,
		TMP_CRRES_ESTADO_RESOLUCION,
		TMP_CRRES_FECHA_EMISION
	FROM SII.CGG_RES_RESOL_TRAMITE RST 
	INNER JOIN SII.CGG_RES_RESOLUCION RSL ON RSL.CRRES_CODIGO = RST.CRRES_CODIGO AND RSL.CRRES_ESTADO
	WHERE RST.CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		RST.CRRST_ESTADO;
	
	--SI LA RESIDENCIA SE APRUEBA CON RESOLUCION ANTERIOR, SE ESCOGE LA FECHA DE APROBACION DEL SEGUIMIENTO
	IF (TMP_CODIGO IS NOT NULL OR TMP_CRRES_CODIGO IS NULL) THEN
		SELECT CRSEG_FECHA_DESPACHO INTO TMP_CRRES_FECHA_EMISION
		FROM SII.CGG_RES_SEGUIMIENTO SGM
		WHERE SGM.CRTRA_CODIGO = IN_CRTRA_CODIGO AND
			SGM.CRSEG_ESTADO
		ORDER BY CRSEG_FECHA_DESPACHO DESC
		LIMIT 1;
	END IF;
	
	--OBTIENE EL TIPO DE SOLICITUD PADRE PARA RESIDENCIA PERMANENTE
	SELECT CGCNF_VALOR_CADENA INTO TMP_PERMANENTE 
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '03';
	--OBTIENE EL INDICE DEL TIPO DE SOLICITUD DE TRAMITE PARA PERMANENTES
	SELECT CRTST_INDICE INTO TMP_INDICE_PERM 
	FROM SII.CGG_RES_TIPO_SOLICITUD_TRAMITE 
	WHERE CRTST_CODIGO = TMP_PERMANENTE;
	
	--OBTIENE EL TIPO DE SOLICITUD PADRE PARA RESIDENCIA TEMPORAL
	SELECT CGCNF_VALOR_CADENA INTO TMP_TEMPORAL
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '04';
	--OBTIENE EL INDICE DEL TIPO DE SOLICITUD DE TRAMITE PARA TEMPORALES
	SELECT CRTST_INDICE INTO TMP_INDICE_TEMP 
	FROM SII.CGG_RES_TIPO_SOLICITUD_TRAMITE 
	WHERE CRTST_CODIGO = TMP_TEMPORAL;
	
	--OBTIENE EL TIPO DE SOLICITUD PADRE PARA TRANSEUNTES
	SELECT CGCNF_VALOR_CADENA INTO TMP_TRANSEUNTE
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '05';
	
	--VERIFICA SI EL TIPO DE SOLICITUD DEL TRAMITE ES PARA RESIDENCIA PERMANENTE O TEMPORAL
	TMP_IS_PERMANENTE := SII.F_PARENT_OF(TMP_PERMANENTE, TMP_CRTST_CODIGO);
	TMP_IS_TEMPORAL := SII.F_PARENT_OF(TMP_TEMPORAL, TMP_CRTST_CODIGO);
	TMP_IS_TRANSEUNTE := SII.F_PARENT_OF(TMP_TRANSEUNTE, TMP_CRTST_CODIGO);
	
	--OBTIENE EL ESTADO DE TRAMITE QUE INDICA QUE EL TRAMITE ESTA LISTO PARA TRATARSE EN COMITE
	SELECT CGCNF_VALOR_CADENA INTO TMP_ESTADO_COMITE
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '01';
	
	IF (TMP_IS_TEMPORAL AND TMP_APLICA_OTRO AND (TMP_RFS.CRETT_CODIGO = TMP_ESTADO_COMITE OR TMP_RFS.CGG_CRETT_CODIGO = TMP_ESTADO_COMITE)) THEN
		TMP_IS_TEMPORAL = FALSE;
		TMP_IS_TRANSEUNTE = TRUE;
		TMP_CRTST_CODIGO := TMP_TRANSEUNTE;
		TMP_CRRSD_TRAMITE_PENDIENTE := TRUE;
	END IF;
	
	IF(NOT TMP_IS_PERMANENTE AND NOT TMP_IS_TEMPORAL AND NOT TMP_IS_TRANSEUNTE) THEN
		RETURN 'El tramite indicado no genera residencia para el beneficiario.';
	END IF;
	
	IF(TMP_IS_PERMANENTE)THEN
		TMP_MODALIDAD := 0;
		TMP_CRRSD_FECHA_CADUCIDAD := NULL;
		TMP_INDICE := TMP_INDICE_PERM;
	ELSIF(TMP_IS_TEMPORAL OR TMP_IS_TRANSEUNTE)THEN
		TMP_MODALIDAD := 1;
		TMP_INDICE := TMP_INDICE_TEMP;
		IF(TMP_DIAS_AUTORIZADOS <= 0 )THEN
			TMP_CRRSD_FECHA_CADUCIDAD := TMP_FECHA_CADUCIDAD::DATE;
		ELSE
			TMP_CRRSD_FECHA_CADUCIDAD := TMP_CRRES_FECHA_EMISION::DATE + TMP_DIAS_AUTORIZADOS;
		END IF;
		TMP_CRRSD_FECHA_CADUCIDAD := TMP_CRRSD_FECHA_CADUCIDAD + interval '23:59:00';
	END IF;
	
	--OBTIENE EL NUMERO DE RESIDENCIA MAXIMO DE ENTRE TODAS LAS RESIDENCIAS DE ACUERDO A LA MODALIDAD
	SELECT MAX(CRRSD_NUMERO) INTO TMP_MAX_RESIDENCIA
	FROM SII.CGG_RES_RESIDENCIA RSD
	WHERE CRRSD_MODALIDAD = TMP_MODALIDAD AND
		CISLA_CODIGO = TMP_CISLA_CODIGO AND
		CRRSD_ESTADO;
	
	IF (TMP_MAX_RESIDENCIA IS NULL) THEN
		TMP_MAX_RESIDENCIA := 0;
	END IF;
	
	IF (NOT TMP_IS_TRANSEUNTE) THEN
		TMP_MAX_RESIDENCIA := (TMP_MAX_RESIDENCIA + 1);
	ELSE 
		TMP_CRRES_FECHA_EMISION := TMP_CRTRA_FECHA_INGRESO::DATE;
		TMP_MAX_RESIDENCIA := NULL;
	END IF;
	
	--SELECCIONA LA RESIDENCIA DE LA PERSONA QUE HAYA SIDO DE LA MISMA MODALIDAD DE LA NUEVA RESIDENCIA
	SELECT CRRSD_CODIGO, CRRSD_MODALIDAD 
	INTO TMP_CRRSD_CODIGO, TMP_CRRSD_MODALIDAD
	FROM SII.CGG_RES_RESIDENCIA 
	WHERE CRPER_CODIGO = TMP_CGG_CRPER_CODIGO AND 
		CRTST_CODIGO IN (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '03') OR CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '04')) 
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT CRTST_CODIGO  FROM TIPO) AND
		CRRSD_ESTADO
	ORDER BY CRRSD_FECHA_INICIO DESC LIMIT 1;
	IF (TMP_CRRSD_CODIGO IS NOT NULL AND NOT TMP_IS_TRANSEUNTE) THEN
		IF(TMP_CRRSD_MODALIDAD = TMP_MODALIDAD)THEN
			SELECT CRRSD_NUMERO, CISLA_CODIGO INTO TMP_CRRSD_NUMERO, TMP_RSD_ISLA
			FROM SII.CGG_RES_RESIDENCIA 
			WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
			IF(TMP_CRRSD_NUMERO IS NOT NULL)THEN
				TMP_MAX_RESIDENCIA := TMP_CRRSD_NUMERO;
				TMP_CISLA_CODIGO := TMP_RSD_ISLA;
				SELECT CISLA_INDICE INTO TMP_CISLA_INDICE FROM SII.CGG_ISLA WHERE CISLA_CODIGO = TMP_CISLA_CODIGO;
			END IF;
		END IF;
	END IF;
	
	--SELECCIONA LA RESIDENCIA VIGENTE DEL BENEFICIARIO PARA CERRAR
	SELECT CRRSD_CODIGO INTO TMP_CRRSD_CODIGO
	FROM SII.CGG_RES_RESIDENCIA 
	WHERE CRPER_CODIGO = TMP_CGG_CRPER_CODIGO AND 
		CRRSD_VIGENTE AND
		CRRSD_ESTADO;
	IF (TMP_CRRSD_CODIGO IS NOT NULL AND CURRENT_DATE::DATE >= TMP_CRRES_FECHA_EMISION::DATE) THEN
		UPDATE SII.CGG_RES_RESIDENCIA SET CRRSD_VIGENTE = FALSE,
			--CRRSD_FECHA_CADUCIDAD = TMP_CRRES_FECHA_EMISION - interval '00:01:00',
			CRRSD_USUARIO_UPDATE = IN_USER_NAME,
			CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP
		WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
	END IF;
	
	--CREACION DE LA RESIDENCIA
	SELECT SII.F_CGG_RES_RESIDENCIA_INSERT(
		'KEYGEN'::VARCHAR,
		TMP_CGG_CRPER_CODIGO,
		TMP_CRTST_CODIGO,
		IN_CRTRA_CODIGO,
		NULL::VARCHAR,
		TMP_MAX_RESIDENCIA::INTEGER,
		TMP_MODALIDAD::SMALLINT,
		TMP_CRRES_FECHA_EMISION::TIMESTAMP WITH TIME ZONE,
		TMP_CRRSD_FECHA_CADUCIDAD::TIMESTAMP WITH TIME ZONE,
		FALSE,
		NULL::TIMESTAMP WITH TIME ZONE,
		NULL::VARCHAR,
		(TMP_CRRSD_CODIGO IS NULL OR CURRENT_DATE::DATE >= COALESCE(TMP_CRRES_FECHA_EMISION::DATE, CURRENT_DATE + 1) ), --VIGENTE
		TMP_CRRSD_TRAMITE_PENDIENTE,
		TRUE,
		IN_USER_NAME
	)INTO TMP_NEW_CRRSD_CODIGO;
	
	--ACTUALIZACION DE LA ISLA DE LA RESIDENCIA
	UPDATE SII.CGG_RES_RESIDENCIA SET CISLA_CODIGO = TMP_CISLA_CODIGO
	WHERE CRRSD_CODIGO = TMP_NEW_CRRSD_CODIGO;
	
	--ACTUALIZACION DEL NUMERO DE RESIDENCIA DE LA PERSONA
	IF (NOT TMP_IS_TRANSEUNTE) THEN
		UPDATE SII.CGG_RES_PERSONA SET 
			CRPER_NUMERO_RESIDENCIA = TMP_CISLA_INDICE::VARCHAR||TMP_INDICE::VARCHAR||LPAD(TMP_MAX_RESIDENCIA::VARCHAR,5,'0'),
			CRPER_USUARIO_UPDATE = IN_USER_NAME,
			CRPER_FECHA_UPDATE = CURRENT_TIMESTAMP
		WHERE CRPER_CODIGO = TMP_CGG_CRPER_CODIGO;
		UPDATE SII.CGG_RES_RESIDENCIA SET 
			CRRSD_NUMERO_RESIDENCIA = TMP_CISLA_INDICE::VARCHAR||TMP_INDICE::VARCHAR||LPAD(TMP_MAX_RESIDENCIA::VARCHAR,5,'0'),
			CRRSD_USUARIO_UPDATE = IN_USER_NAME,
			CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP
		WHERE CRPER_CODIGO = TMP_CGG_CRPER_CODIGO AND CRRSD_CODIGO = TMP_NEW_CRRSD_CODIGO;
	END IF;
	
	--CREA UN NUEVO USUARIO PARA EL RESIDENTE PERMANENTE
	IF (TMP_IS_PERMANENTE) THEN
		SELECT SII.F_CGG_RES_RESIDENCIA_USUARIO(IN_USER_NAME,TMP_CGG_CRPER_CODIGO,IN_CRTRA_CODIGO) INTO TMP_CODIGO;
	END IF;
	
	
	--CREA LOS REGISTRO DE SOPORTE SI LA PERSONA ESTA DENTRO DE LA PROVINCIA Y CAMBIA DE RESIDENCIA
	IF (CURRENT_DATE::DATE >= TMP_CRRES_FECHA_EMISION::DATE) THEN
		SELECT SII.F_CREAR_REGISTROS_SOPORTE(IN_USER_NAME, 
			TMP_CGG_CRPER_CODIGO, 
			TMP_NEW_CRRSD_CODIGO,
			TMP_CRRES_FECHA_EMISION, 
			TMP_CRRSD_FECHA_CADUCIDAD, 
			IN_CRTRA_CODIGO
		) INTO TMP_CODIGO;
	END IF;	
	RETURN 'TRUE';
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_REVOCAR
* REVOCA UNA RESIDENCIA UNA CONCEDIDA
* @param IN_USER_NAME USUARIO DEL SERVIDOR DE APLICACIONES
* @param IN_CRTRA_CODIGO CODIGO DEL REGISTRO DE TRAMITE
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_REVOCAR(
IN IN_USER_NAME VARCHAR,
IN IN_CRTRA_CODIGO VARCHAR,
IN IN_CRSEG_CODIGO VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
--REGISTRO DE SEGUIMIENTO
TMP_RSGM RECORD;
BEGIN
	--SELECCIONA EL REGISTRO DE SEGUIMIENTO ACTUAL DEL TRAMITE
	SELECT * INTO TMP_RSGM
	FROM SII.CGG_RES_SEGUIMIENTO SGM
	WHERE SGM.CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
		
	RETURN SII.F_CGG_RES_RESIDENCIA_REVOCAR(IN_USER_NAME,IN_CRTRA_CODIGO, IN_CRSEG_CODIGO, TMP_RSGM.CRSEG_TIPO_RESPUESTA::INT);
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_REVOCAR
* REVOCA UNA RESIDENCIA UNA CONCEDIDA
* @param IN_USER_NAME USUARIO DEL SERVIDOR DE APLICACIONES
* @param IN_CRTRA_CODIGO CODIGO DEL REGISTRO DE TRAMITE
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_REVOCAR(
IN IN_USER_NAME VARCHAR,
IN IN_CRTRA_CODIGO VARCHAR,
IN IN_CRSEG_CODIGO VARCHAR,
IN IN_CRSEG_TIPO_RESPUESTA INT
)RETURNS VARCHAR AS
$$
DECLARE 
TMP_CODIGO VARCHAR;
--REGISTRO DE SEGUIMIENTO
TMP_RSGM RECORD;
--REGISTRO DE TRAMITE
TMP_RTRM RECORD;
--CODIGO DE LA RESIDENCIA DE LA PERSONA
TMP_CRRSD_CODIGO VARCHAR;
BEGIN
	--SELECCIONA EL TRAMITE ACTUAL 
	SELECT * INTO TMP_RTRM
	FROM SII.CGG_RES_TRAMITE TRM
	WHERE TRM.CRTRA_CODIGO = IN_CRTRA_CODIGO;
	
	--SELECCIONA EL REGISTRO DE SEGUIMIENTO ACTUAL DEL TRAMITE
	SELECT * INTO TMP_RSGM
	FROM SII.CGG_RES_SEGUIMIENTO SGM
	WHERE SGM.CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
	
	IF (IN_CRSEG_TIPO_RESPUESTA = 1) THEN	
		SELECT CRRSD_CODIGO 
		INTO TMP_CRRSD_CODIGO
		FROM SII.CGG_RES_RESIDENCIA 
		WHERE CRPER_CODIGO = TMP_RTRM.CGG_CRPER_CODIGO AND 
			CRRSD_VIGENTE AND 
			CRRSD_ESTADO;
		IF (TMP_CRRSD_CODIGO IS NOT NULL) THEN
			--MARCA LA RESIDENCIA DE LA PERSONA COMO NO VIGENTE
			UPDATE SII.CGG_RES_RESIDENCIA SET 
				CGG_CRTRA_CODIGO = TMP_RTRM.CRTRA_CODIGO,
				CRRSD_USUARIO_UPDATE = IN_USER_NAME,
				CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP,
				CRRSD_REVOCADA = TRUE,
				CRRSD_VIGENTE = FALSE,
				CRRSD_MOTIVO_REVOCATORIA = 'Segun tramite No. '||TMP_RTRM.CRTRA_NUMERO::VARCHAR,
				CRRSD_FECHA_REVOCATORIA = TMP_RSGM.CRSEG_FECHA_DESPACHO
			WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
			
			--ACTUALIZACION DEL NUMERO DE RESIDENCIA DE LA PERSONA			
			UPDATE SII.CGG_RES_PERSONA SET 
				CRPER_NUMERO_RESIDENCIA = NULL,
				CRPER_USUARIO_UPDATE = IN_USER_NAME,
				CRPER_FECHA_UPDATE = CURRENT_TIMESTAMP
			WHERE CRPER_CODIGO = TMP_RTRM.CGG_CRPER_CODIGO;
			
			--CREA REGISTROS DE CIERRE DE RESIDENCIA
			SELECT SII.F_CREAR_REGISTROS_SOPORTE(IN_USER_NAME,
				TMP_RTRM.CGG_CRPER_CODIGO,
				NULL,
				CURRENT_TIMESTAMP,
				NULL::TIMESTAMP WITH TIME ZONE,
				NULL::VARCHAR
			) INTO TMP_CODIGO;
		ELSE
			RETURN 'La persona no tiene una residencia vigente.';
		END IF;
	ELSE
		RETURN 'La resoluci&oacute;n emitida por comite fue desfavorable.';
	END IF;
	RETURN 'TRUE';
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_TURISTA
* CREA UNA RESIDENCIA DE TURISTA PARA UNA PERSONA
* @param IN_USER_NAME USUARIO DEL SERVIDOR DE APLICACIONES
* @param IN_CRPER_CODIGO CODIGO DE LA PERSONA BENEFICIARIA DE LA RESIDENCIA
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_TURISTA(
IN IN_USER_NAME VARCHAR,
IN IN_CRPER_CODIGO VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
--CODIGO DEL TIPO DE SOLICITUD ASIGNADO A TURISTAS
TMP_TURISTA VARCHAR;
--DIAS DE PERMITIDOS DE LOS TURISTAS O TRANSEUNTES
TMP_DIAS_AUTORIZADOS INT;
--DIAS HABILES DE LA RESIDENCIA
TMP_DIAS_RESIDENCIA INT;
--CODIGO DE RESIDENCIA
TMP_NEW_CRRSD_CODIGO VARCHAR;
--DIAS DE ESTADIA DE LA PERSONA DENTRO DE LA PROVINCIA COMO TURISTA O TRANSEUNTE
TMP_DIAS_ESTADIA INT;
--FECHA DE CADUCIDAD DE LA RESIDENCIA
TMP_CRRSD_FECHA_CADUCIDAD TIMESTAMP WITH TIME ZONE;
BEGIN
	--OBTIENE EL TIPO DE SOLICITUD PADRE PARA RESIDENCIA TURISTAS
	SELECT CGCNF_VALOR_CADENA INTO TMP_TURISTA 
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '06';
	
	--OBTIENE LOS DIAS DE PERMANENCIA AUTORIZADOS PARA TURISTAS O TRANSEUNTES
	SELECT CGCNF_VALOR_NUMERICO INTO TMP_DIAS_AUTORIZADOS 
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = 'CONF18';
	
	SELECT SII.F_CALCULO_DIAS_ESTADIA(CURRENT_TIMESTAMP::TIMESTAMP WITH TIME ZONE, IN_CRPER_CODIGO) INTO TMP_DIAS_ESTADIA;
	
	TMP_DIAS_RESIDENCIA :=TMP_DIAS_AUTORIZADOS - TMP_DIAS_ESTADIA;
	IF (TMP_DIAS_RESIDENCIA < 0) THEN
		TMP_DIAS_RESIDENCIA := 0;
	END IF;
	
	TMP_CRRSD_FECHA_CADUCIDAD := CURRENT_TIMESTAMP::DATE + TMP_DIAS_RESIDENCIA;
	TMP_CRRSD_FECHA_CADUCIDAD := TMP_CRRSD_FECHA_CADUCIDAD + interval '23:59:00';
	
	--CREACION DE LA RESIDENCIA
	SELECT SII.F_CGG_RES_RESIDENCIA_INSERT(
		'KEYGEN'::VARCHAR,
		IN_CRPER_CODIGO,
		TMP_TURISTA,
		NULL::VARCHAR,
		NULL::VARCHAR,
		NULL::INTEGER,
		1::SMALLINT,
		CURRENT_TIMESTAMP,
		TMP_CRRSD_FECHA_CADUCIDAD::TIMESTAMP WITH TIME ZONE,
		FALSE, --REVOCADA
		NULL::TIMESTAMP WITH TIME ZONE, --FECHA DE REVOCADA
		NULL::VARCHAR, --MOTIVO REVOCADA
		TRUE,
		FALSE,
		TRUE,
		IN_USER_NAME
	)INTO TMP_NEW_CRRSD_CODIGO;
	RETURN TMP_NEW_CRRSD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_CONTROL
* CONTROL LAS RESIDENCIAS DE UNA PERSONA AL INGRESO O SALIDA DE LA PROVINCIA
* @param IN_CRMOV_CODIGO IDENTIFICATIVO UNICO DE MOVILIDAD.
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE PERSONA.
* @param IN_CRRSD_USUARIO_UPDATE IDENTIFICATIVO DEL USUARIO QUE ACTUALIZO 
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_CONTROL(
IN IN_CRMOV_CODIGO VARCHAR,
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE, 
IN IN_CRRSD_USUARIO_UPDATE SII.CGG_RES_RESIDENCIA.CRRSD_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
TMP_CODIGO VARCHAR;
--TIPO DE OPERACION; 0 = ENTRADA, 1 = SALIDA
TMP_CRMOV_TIPO_OPERACION SMALLINT;
--CODIGO DE LA RESIDENCIA
TMP_CRRSD_CODIGO VARCHAR;
--FECHA DE INICIO DE LA RESIDENCIA
TMP_CRRSD_FECHA_INICIO TIMESTAMP WITH TIME ZONE;
--FECHA DE CADUCIDAD DE LA RESIDENCIA
TMP_CRRSD_FECHA_CADUCIDAD TIMESTAMP WITH TIME ZONE;
--MODALIDAD DE LA RESIDENCIA; 0 = PERMANENTES, 1 = TEMPORALES
TMP_CRRSD_MODALIDAD SMALLINT;
--SI ESTA VIGENCIA LA RESIDENCIA
TMP_CRRSD_VIGENTE BOOLEAN;
--CODIGO DE TIPO DE SOLICITUD
TMP_CRRSD_CRTST_CODIGO VARCHAR;
--CODIGO DE TIPO DE SOLICITUD PARA PERMANENTES
TMP_PERMANENTE VARCHAR;
--CODIGO DE TIPO DE SOLICITUD PARA TEMPORAL
TMP_TEMPORAL VARCHAR;
--CODIGO DE TIPO DE SOLICITUD PARA TRANSEUNTE
TMP_TRANSEUNTE VARCHAR;
--CODIGO DE TIPO DE SOLICITUD PARA TURISTA
TMP_TURISTA VARCHAR;
--FECHA DE SALIDA DEL PRE REGISTRO DE TCT
TMP_CTREG_FECHA_SALIDA DATE;
--CODIGO DE NOTIFICACION
TMP_CRNOT_CODIGO VARCHAR;
--FORMA DE SALIDA DEL PERSONA
TMP_CRMOV_TIPO_SALIDA SMALLINT;
--FECHA DE REALIZACION DEL VIAJE
TMP_CRMOV_FECHA_VIAJE TIMESTAMP WITH TIME ZONE;
BEGIN
	SELECT CRMOV_TIPO_OPERACION, CTREG_FECHA_SALIDA, CRMOV_TIPO_SALIDA, CRMOV_FECHA_VIAJE
	INTO TMP_CRMOV_TIPO_OPERACION, TMP_CTREG_FECHA_SALIDA, TMP_CRMOV_TIPO_SALIDA, TMP_CRMOV_FECHA_VIAJE
	FROM SII.CGG_RES_MOVILIDAD MVL
	LEFT JOIN SII.CGG_TCT_REGISTRO TRG ON TRG.CTREG_CODIGO = MVL.CTREG_CODIGO
	WHERE MVL.CRMOV_CODIGO = IN_CRMOV_CODIGO;
	
	--SELECCION DEL TIPO DE SOLICITUD CORRESPONDIENTE A TURISTAS
	SELECT CGCNF_VALOR_CADENA 
	INTO TMP_TURISTA
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '06';
	
	--SELECCION DEL TIPO DE SOLICITUD CORRESPONDIENTE A TRANSEUNTES
	SELECT CGCNF_VALOR_CADENA 
	INTO TMP_TRANSEUNTE
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '05';
			
	--SELECCION DEL TIPO DE SOLICITUD CORRESPONDIENTE A TEMPORALES
	SELECT CGCNF_VALOR_CADENA 
	INTO TMP_TEMPORAL
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '04';
	
	--SELECCION DEL TIPO DE SOLICITUD CORRESPONDIENTE A PERMANENTES
	SELECT CGCNF_VALOR_CADENA 
	INTO TMP_PERMANENTE
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '03';
	
	--SELECCIONA LA RESIDENCIA VIGENTE DE UN PERSONA
	SELECT CRRSD_CODIGO, CRTST_CODIGO, CRRSD_FECHA_INICIO, CRRSD_FECHA_CADUCIDAD, CRRSD_MODALIDAD, CRRSD_VIGENTE
	INTO TMP_CRRSD_CODIGO, TMP_CRRSD_CRTST_CODIGO, TMP_CRRSD_FECHA_INICIO, TMP_CRRSD_FECHA_CADUCIDAD, TMP_CRRSD_MODALIDAD, TMP_CRRSD_VIGENTE
	FROM SII.CGG_RES_RESIDENCIA 
	WHERE CRRSD_ESTADO AND 
		CRRSD_VIGENTE AND
		NOT CRRSD_TRAMITE_PENDIENTE AND
		CRPER_CODIGO = IN_CRPER_CODIGO;
	
	--ENTRADAS A LA PROVINCIA
	IF (TMP_CRMOV_TIPO_OPERACION = 0) THEN
		TMP_CRRSD_CODIGO = NULL;
		--NO TIENE RESIDENCIA VIGENTE, INGRESA COMO TURISTA
		IF (TMP_CRRSD_CODIGO IS NULL) THEN
			--VERIFICA SI TIENE UNA RESIDENCIA COMO TRANSEUNTE CON TRAMITE DE RESIDENCIA TEMPORAL
			SELECT CRRSD_CODIGO, CRRSD_FECHA_INICIO, CRRSD_FECHA_CADUCIDAD
			INTO TMP_CRRSD_CODIGO, TMP_CRRSD_FECHA_INICIO, TMP_CRRSD_FECHA_CADUCIDAD
			FROM SII.CGG_RES_RESIDENCIA 
			WHERE CRRSD_ESTADO AND 
				CRRSD_MODALIDAD = 1 AND
				CRRSD_VIGENTE AND 
				CRRSD_FECHA_INICIO::DATE = TMP_CRMOV_FECHA_VIAJE::DATE AND
				CRRSD_TRAMITE_PENDIENTE AND
				SII.F_PARENT_OF(TMP_TRANSEUNTE, CRTST_CODIGO) AND
				CRPER_CODIGO = IN_CRPER_CODIGO;
		END IF;
		IF (TMP_CRRSD_CODIGO IS NULL) THEN
			--VERIFICA SI TIENE UNA RESIDENCIA COMO TRANSEUNTE
			SELECT CRRSD_CODIGO, CRRSD_FECHA_INICIO, CRRSD_FECHA_CADUCIDAD
			INTO TMP_CRRSD_CODIGO, TMP_CRRSD_FECHA_INICIO, TMP_CRRSD_FECHA_CADUCIDAD
			FROM SII.CGG_RES_RESIDENCIA 
			WHERE CRRSD_ESTADO AND 
				CRRSD_MODALIDAD = 1 AND
				CRRSD_VIGENTE AND 
				CRRSD_FECHA_INICIO::DATE = TMP_CRMOV_FECHA_VIAJE::DATE AND
				NOT CRRSD_TRAMITE_PENDIENTE AND
				SII.F_PARENT_OF(TMP_TRANSEUNTE, CRTST_CODIGO) AND
				CRPER_CODIGO = IN_CRPER_CODIGO;
		END IF;
		
		IF (TMP_CRRSD_CODIGO IS NULL) THEN
			--VERIFICA SI TIENE UNA RESIDENCIA VIGENTE COMO RESIDENTE PERMANENTE O TEMPORAL
			SELECT CRRSD_CODIGO, CRRSD_FECHA_INICIO, CRRSD_FECHA_CADUCIDAD
			INTO TMP_CRRSD_CODIGO, TMP_CRRSD_FECHA_INICIO, TMP_CRRSD_FECHA_CADUCIDAD
			FROM SII.CGG_RES_RESIDENCIA 
			WHERE CRPER_CODIGO = IN_CRPER_CODIGO AND
				CRRSD_ESTADO AND 
				CRRSD_VIGENTE AND 
				CRTST_CODIGO IN
				(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '03') OR CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
					FROM CGG_CONFIGURACION
					WHERE CGCNF_CODIGO = '04')) 
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT CRTST_CODIGO  FROM TIPO);
		END IF;
		
		IF (TMP_CRRSD_CODIGO IS NULL ) THEN
			--CIERRA UNA RESIDENCIA DE TRANSEUNTE QUE TIENE VIGENTE PERO QUE NO SE EJECUTO POR QUE NO INGRESO A LA FECHA
			SELECT CRRSD_CODIGO, CRRSD_FECHA_INICIO, CRRSD_FECHA_CADUCIDAD
			INTO TMP_CRRSD_CODIGO, TMP_CRRSD_FECHA_INICIO, TMP_CRRSD_FECHA_CADUCIDAD
			FROM SII.CGG_RES_RESIDENCIA 
			WHERE CRRSD_ESTADO AND 
				CRRSD_MODALIDAD = 1 AND
				CRRSD_VIGENTE AND 
				SII.F_PARENT_OF(TMP_TRANSEUNTE, CRTST_CODIGO) AND
				CRPER_CODIGO = IN_CRPER_CODIGO;
			
			IF (TMP_CRRSD_CODIGO IS NOT NULL) THEN
				UPDATE SII.CGG_RES_RESIDENCIA SET CRRSD_VIGENTE = FALSE,
					CRRSD_USUARIO_UPDATE = IN_CRRSD_USUARIO_UPDATE,
					CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP,
					CRRSD_FECHA_CADUCIDAD = CRRSD_FECHA_INICIO
				WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
			END IF;
			
			SELECT SII.F_CGG_RES_RESIDENCIA_INSERT(
				'KEYGEN'::VARCHAR,
				IN_CRPER_CODIGO,
				TMP_TURISTA,
				NULL::VARCHAR,
				NULL::VARCHAR,
				0::INTEGER,
				1::SMALLINT,
				TMP_CRMOV_FECHA_VIAJE,
				(TMP_CTREG_FECHA_SALIDA + INTERVAL '23:59:00'),
				FALSE,
				NULL::TIMESTAMP WITH TIME ZONE,
				NULL::VARCHAR,
				TRUE,
				FALSE,
				TRUE,
				IN_CRRSD_USUARIO_UPDATE
			) INTO TMP_CODIGO;
			
			UPDATE SII.CGG_RES_MOVILIDAD SET 
				CRRSD_CODIGO = TMP_CODIGO,
				CRMOV_FECHA_UPDATE = CURRENT_TIMESTAMP,
				CRMOV_USUARIO_UPDATE = IN_CRRSD_USUARIO_UPDATE
			WHERE CRMOV_CODIGO = IN_CRMOV_CODIGO;
		END IF;
	--SALIDA DE LA PROVINCIA
	ELSIF (TMP_CRMOV_TIPO_OPERACION = 1) THEN
	
		SELECT CRNOT_CODIGO INTO TMP_CRNOT_CODIGO
		FROM SII.CGG_RES_NOTIFICACION 
		WHERE CRNOT_ESTADO AND 
			CRNOT_ESTADO_NOTIFICACION = 1 AND 
			CRPER_CODIGO = IN_CRPER_CODIGO;
		IF (TMP_CRNOT_CODIGO IS NOT NULL) THEN			
			UPDATE SII.CGG_RES_NOTIFICACION SET
				CRNOT_USUARIO_UPDATE = IN_CRRSD_USUARIO_UPDATE,
				CRNOT_FECHA_UPDATE = CURRENT_TIMESTAMP,
				CRNOT_FECHA_EXPULSION = TMP_CRMOV_FECHA_VIAJE,
				CRNOT_ESTADO_NOTIFICACION = 3
			WHERE CRNOT_CODIGO = TMP_CRNOT_CODIGO;
		END IF;
		--CIERRA UNA RESIDENCIA VIGENTE COMO TURISTA O TRANSEUNTE
		IF (TMP_CRRSD_CODIGO IS NOT NULL AND 
			NOT SII.F_PARENT_OF(TMP_TEMPORAL,TMP_CRRSD_CRTST_CODIGO) AND
			NOT SII.F_PARENT_OF(TMP_PERMANENTE,TMP_CRRSD_CRTST_CODIGO) AND
			TMP_CRRSD_MODALIDAD = 1) THEN
			UPDATE SII.CGG_RES_RESIDENCIA SET 
				CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP,
				CRRSD_USUARIO_UPDATE = IN_CRRSD_USUARIO_UPDATE,
				CRRSD_VIGENTE = FALSE
			WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
		--CIERRA UNA RESIDENCIA VIGENTE COMO TEMPORAL
		ELSIF (TMP_CRRSD_CODIGO IS NOT NULL AND 
			TMP_CRRSD_CRTST_CODIGO = TMP_TEMPORAL AND 
			TMP_CRRSD_MODALIDAD = 1 AND 
			TMP_CRRSD_FECHA_CADUCIDAD::DATE <= CURRENT_DATE) THEN
			UPDATE SII.CGG_RES_RESIDENCIA SET 
				CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP,
				CRRSD_USUARIO_UPDATE = IN_CRRSD_USUARIO_UPDATE,
				CRRSD_VIGENTE = FALSE
			WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
		END IF;
	END IF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CREAR_PREREGISTRO_TCT
* CREA LOS REGISTROS DE TCT PARA DAR SOPORTE EL INGRESO DE UNA PERSONA POR CAMBIO DE RESIDENCIA
* @param IN_USER_NAME NOMBRE DEL USUARIO DEL SERVIDOR DE APLICACIONES.
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE PERSONA.
* @param IN_FECHA_VIAJE FECHA EN LA CUAL SE REALIZA EL VIAJE.
* @param IN_FECHA_SALIDA FECHA EN LA CUAL SE REALIZA LA SALIDA.
* @param IN_CARPT_CODIGO IDENTIFICATIVO UNICO DE AEROPUERTO.
* @param IN_CGG_CARPT_CODIGO IDENTIFICATIVO UNICO DE AEROPUERTO.
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE AEROLINEA.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE TRAMITE.
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CREAR_PREREGISTRO_TCT(
IN IN_USER_NAME VARCHAR,
IN IN_CRPER_CODIGO VARCHAR,
IN IN_FECHA_VIAJE TIMESTAMP WITH TIME ZONE,
IN IN_FECHA_SALIDA TIMESTAMP WITH TIME ZONE,
IN IN_CARPT_CODIGO VARCHAR,
IN IN_CGG_CARPT_CODIGO VARCHAR,
IN IN_CRALN_CODIGO VARCHAR,
IN IN_CRTRA_CODIGO VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
TMP_CODIGO VARCHAR;
--CODIGO DE USUARIO
TMP_CUSU_CODIGO VARCHAR;
--CODIGO DE PRE-REGISTRO
TMP_CTREG_CODIGO VARCHAR;
BEGIN

	SELECT CUSU_CODIGO INTO TMP_CUSU_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME;
	
	SELECT SII.F_CGG_TCT_GRUPO_TURISTA_INSERT('KEYGEN',
		TMP_CUSU_CODIGO,
		NULL::VARCHAR,
		-1,
		CURRENT_TIMESTAMP,
		IN_FECHA_VIAJE,
		IN_FECHA_VIAJE,
		TRUE,
		IN_USER_NAME,
		IN_USER_NAME
	) INTO TMP_CODIGO;
	
	SELECT SII.F_CGG_TCT_REGISTRO_INSERT(
		'KEYGEN'::VARCHAR,
		IN_CRPER_CODIGO,
		TMP_CODIGO,
		TMP_CUSU_CODIGO,
		NULL::VARCHAR,
		IN_CARPT_CODIGO,
		IN_CGG_CARPT_CODIGO,
		IN_CRALN_CODIGO,
		IN_CRTRA_CODIGO,
		-1::BIGINT,
		IN_FECHA_VIAJE,
		IN_FECHA_VIAJE,
		NULL::VARCHAR,
		IN_FECHA_SALIDA,
		NULL::TIMESTAMP WITH TIME ZONE,
		4::SMALLINT,
		'Pre-registro por corte residencia'::VARCHAR,
		TRUE::BOOLEAN,
		IN_USER_NAME
	) INTO TMP_CTREG_CODIGO;	
	
	RETURN TMP_CTREG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CREAR_REGISTROS_SOPORTE
* CREAR REGISTRO DE SALIDA Y ENTRADA CUANDO CADUCA LA RESIDENCIA DE UNA PERSONA QUE PERMANECE DENTRO DE LA PROVINCIA
* @param IN_USER_NAME USUARIO DEL SERVIDOR DE APLICACIONES
* @param IN_CRPER_CODIGO CODIGO DE LA PERSONA
* @param IN_CRRSD_CODIGO CODIGO DE LA RESIDENCIA NUEVA DE LA PERSONA
* @param IN_FECHA_CORTE FECHA DE INICIO DE LA NUEVA RESIDENCIA
* @param IN_FECHA_CADUCIDAD FECHA DE CADUCIDAD DE LA NUEVA RESIDENCIA
* @param IN_CRTRA_CODIGO CODIGO DE TRAMITE PARA RESIDENCIAS DIFERENTES DE TURISTAS
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CREAR_REGISTROS_SOPORTE(
IN IN_USER_NAME VARCHAR,
IN IN_CRPER_CODIGO VARCHAR,
IN IN_CRRSD_CODIGO VARCHAR,
IN IN_FECHA_CORTE TIMESTAMP WITH TIME ZONE,
IN IN_FECHA_CADUCIDAD TIMESTAMP WITH TIME ZONE,
IN IN_CRTRA_CODIGO VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
TMP_TRANSEUNTE VARCHAR;
TMP_TURISTA VARCHAR;
TMP_IS_TRANSEUNTE BOOLEAN;
TMP_IS_TURISTA BOOLEAN;
TMP_CODIGO VARCHAR;
--CODIGO DE TIPO DE SOLICITUD
TMP_CRTST_CODIGO VARCHAR;
TMP_RECORD RECORD;
--CODIGO DE RESIDENCIA
TMP_CRRSD_CODIGO VARCHAR;
--FECHA DE CADUCIDAD DE LA RESIDENCIA
TMP_CRRSD_FECHA_CADUCIDAD TIMESTAMP WITH TIME ZONE;
TMP_FECHA_CORTE TIMESTAMP WITH TIME ZONE;
BEGIN
	TMP_FECHA_CORTE = (IN_FECHA_CORTE::DATE||' '||TO_CHAR(CURRENT_TIMESTAMP, 'HH24:MI'))::TIMESTAMP WITH TIME ZONE;
	TMP_CRRSD_CODIGO := IN_CRRSD_CODIGO;
	TMP_CRRSD_FECHA_CADUCIDAD := IN_FECHA_CADUCIDAD;
	
	--OBTIENE EL TIPO DE SOLICITUD PADRE PARA TRANSEUNTES
	SELECT CGCNF_VALOR_CADENA INTO TMP_TRANSEUNTE
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '05';
	
	--OBTIENE EL TIPO DE SOLICITUD PADRE PARA TURISTAS
	SELECT CGCNF_VALOR_CADENA INTO TMP_TURISTA
	FROM SII.CGG_CONFIGURACION 
	WHERE CGCNF_CODIGO = '06';
	
	--CIERRE DE RESIDENCIAS
	--SELECCIONA EL ULTIMO REGISTRO DE DESPLAZAMIENTO
	SELECT CRRSD_CODIGO, 
		CRMOV_TIPO_OPERACION, 
		CTREG_CODIGO, 
		CARPT_CODIGO, 
		CGG_CARPT_CODIGO, 
		CRALN_CODIGO, 
		CRMOV_NUMERO_VUELO,
		CRMOV_FECHA_VIAJE
	INTO TMP_RECORD 
	FROM SII.CGG_RES_MOVILIDAD
	WHERE CRMOV_ESTADO AND 
		CRPER_CODIGO = IN_CRPER_CODIGO
	ORDER BY CRMOV_FECHA_VIAJE DESC, CRMOV_TIPO_OPERACION DESC LIMIT 1;
	
	IF (TMP_FECHA_CORTE <= TMP_RECORD.CRMOV_FECHA_VIAJE) THEN
		TMP_FECHA_CORTE = CURRENT_TIMESTAMP + interval '00:02:00';
	END IF;
	
	--REGISTRO DE SALIDA CON LA RESIDENCIA CADUCADA
	IF (TMP_RECORD.CRMOV_TIPO_OPERACION IS NOT NULL AND TMP_RECORD.CRMOV_TIPO_OPERACION = 0) THEN
		SELECT SII.F_CGG_RES_MOVILIDAD_INSERT (
			'KEYGEN',
			TMP_RECORD.CRALN_CODIGO,
			TMP_RECORD.CGG_CARPT_CODIGO,
			NULL::VARCHAR,
			IN_CRPER_CODIGO,
			TMP_RECORD.CTREG_CODIGO,
			TMP_RECORD.CRRSD_CODIGO,
			TMP_FECHA_CORTE - interval '00:01:00',
			1::SMALLINT,
			NULL::VARCHAR,
			'Salida por corte de residencia.',
			0::SMALLINT,
			TRUE,
			TRUE,
			TRUE,
			IN_USER_NAME
		) INTO TMP_CODIGO;
		
		--SI LA PERSONA ESTA DENTRO DE LA PROVINCIA CREA UNA RESIDENCIA DE TURISTA
		IF(TMP_CRRSD_CODIGO IS NULL) THEN
			SELECT SII.F_CGG_RES_RESIDENCIA_TURISTA(IN_USER_NAME, IN_CRPER_CODIGO) INTO TMP_CRRSD_CODIGO;
		END IF;
	END IF;
	
	--OBTIENE EL TIPO DE SOLICITUD DE LA NUEVA RESIDENCIA
	SELECT CRTST_CODIGO, CRRSD_FECHA_CADUCIDAD 
	INTO TMP_CRTST_CODIGO, TMP_CRRSD_FECHA_CADUCIDAD 
	FROM SII.CGG_RES_RESIDENCIA WHERE CRRSD_CODIGO = TMP_CRRSD_CODIGO;
	
	TMP_IS_TRANSEUNTE := SII.F_PARENT_OF(TMP_TRANSEUNTE, TMP_CRTST_CODIGO);
	TMP_IS_TURISTA := SII.F_PARENT_OF(TMP_TURISTA, TMP_CRTST_CODIGO);
	
	--CREACION DE GRUPO Y PREREGISTRO DE TCT SOLO CUANDO PASA DE TURISTA A TRANSEUNTE O VICEVERSA ESTANDO DENTRO DE LA PROVINCIA
	TMP_CODIGO := NULL;
	IF ((TMP_IS_TRANSEUNTE OR TMP_IS_TURISTA) AND TMP_RECORD.CRMOV_TIPO_OPERACION IS NOT NULL AND TMP_RECORD.CRMOV_TIPO_OPERACION = 0) THEN
		SELECT SII.F_CREAR_PREREGISTRO_TCT(
			IN_USER_NAME,
			IN_CRPER_CODIGO, 
			TMP_FECHA_CORTE, 
			TMP_CRRSD_FECHA_CADUCIDAD,
			TMP_RECORD.CARPT_CODIGO, 
			TMP_RECORD.CGG_CARPT_CODIGO,
			TMP_RECORD.CRALN_CODIGO,
			IN_CRTRA_CODIGO
		) INTO TMP_CODIGO;
	END IF;
	
	--REGISTRO DE ENTRADA CON LA NUEVA RESIDENCIA
	IF(TMP_RECORD.CRMOV_TIPO_OPERACION IS NOT NULL AND TMP_RECORD.CRMOV_TIPO_OPERACION = 0 AND TMP_CRRSD_CODIGO IS NOT NULL)THEN
		SELECT SII.F_CGG_RES_MOVILIDAD_INSERT (
			'KEYGEN'::VARCHAR,
			TMP_RECORD.CRALN_CODIGO,
			TMP_RECORD.CARPT_CODIGO,
			TMP_RECORD.CGG_CARPT_CODIGO,
			IN_CRPER_CODIGO,
			TMP_CODIGO,
			TMP_CRRSD_CODIGO,
			TMP_FECHA_CORTE,
			0::SMALLINT,
			TMP_RECORD.CRMOV_NUMERO_VUELO,
			'Entrada por corte de residencia.'::VARCHAR,
			0::SMALLINT,
			TRUE,
			TRUE, --SOPORTE POR CORTE DE RESIDENCIA
			TRUE,
			IN_USER_NAME
		) INTO TMP_CODIGO;
	END IF;
	RETURN '';
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* SELECCIONA LOS REGISTROS DE RESIDENCIA DE TRANSEUNTES.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_TRANSEUNTE(
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;	
	SQL_STMT TEXT;	
	CRTST_CODIGO_TRANSEUNTE VARCHAR;
BEGIN
		
	SELECT CGCNF_VALOR_CADENA INTO CRTST_CODIGO_TRANSEUNTE FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO='05';
	
	SQL_STMT := 'SELECT
		CRRSD_CODIGO,
		CRTRA_CODIGO,
		CRPER_CODIGO,
		CRPER_TAUSPICIANTE,		
		CRPJR_CODIGO,
		CRPJR_NOMBRES,        
		CGG_CRPER_CODIGO,
		CRPER_NUM_DOC_IDENTIFIC, 
		CRPER_TBENEFICIARIO,		
		CRPRO_CODIGO, 
		CRTST_CODIGO,
		CRTST_DESCRIPCION,				
		CRETT_CODIGO, 
		CISLA_CODIGO,
		CISLA_NOMBRE,
		CRTRA_ANIO, 
		CRTRA_NUMERO, 
		CRTRA_FECHA_RECEPCION, 
		CRTRA_ACTIVIDAD_RESIDENCIA, 		
		ACTIVIDAD_RESIDENCIA,
		CRTRA_OBSERVACION 													
	    CRTRA_GRUPO,
		CRTRA_ORDEN,
		--CRTST_CODIGO_PADRE,
		CRRSD_FECHA_INICIO,
		CRRSD_FECHA_CADUCIDAD,
		CRRSD_VIGENTE,
		CRTST_APLICA_OTRO
	FROM ( WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
				SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO in (SELECT CGCNF_VALOR_CADENA
				FROM CGG_CONFIGURACION
				WHERE CGCNF_CODIGO IN (''05''))) 
				UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
				WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
		) 		 	
	    SELECT	
		R.CRRSD_CODIGO,
	   	T.CRTRA_CODIGO, 
		T.CRPER_CODIGO,
		CRPER1.CRPER_NOMBRES||'' ''||CRPER1.CRPER_APELLIDO_PATERNO  CRPER_TAUSPICIANTE,		
		T.CRPJR_CODIGO,
		PJ.CRPJR_RAZON_SOCIAL  CRPJR_NOMBRES,
		T.CGG_CRPER_CODIGO,
		CRPER.CRPER_NUM_DOC_IDENTIFIC, 
		COALESCE(CRPER.CRPER_NOMBRES,'''')||'' ''||COALESCE(CRPER.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(CRPER.CRPER_APELLIDO_MATERNO,'''') CRPER_TBENEFICIARIO,
		T.CRPRO_CODIGO, 
		T.CRTST_CODIGO,
		S.CRTST_DESCRIPCION, 				
		T.CRETT_CODIGO, 
		T.CISLA_CODIGO,
	    (SELECT CISLA_NOMBRE FROM SII.CGG_ISLA I WHERE  I.CISLA_CODIGO = T.CISLA_CODIGO) CISLA_NOMBRE, 
		T.CRTRA_ANIO, 
		T.CRTRA_NUMERO, 
		T.CRTRA_FECHA_RECEPCION, 
		T.CRTRA_ACTIVIDAD_RESIDENCIA, 
		CR.CGCRG_NOMBRE ACTIVIDAD_RESIDENCIA,
		T.CRTRA_OBSERVACION,  
		T.CRTRA_GRUPO,
		T.CRTRA_ORDEN,
		R.CRRSD_FECHA_INICIO,
		R.CRRSD_FECHA_CADUCIDAD,
		R.CRRSD_VIGENTE,
		S.CRTST_APLICA_OTRO
	    FROM SII.CGG_RES_RESIDENCIA R
	    INNER JOIN SII.CGG_RES_TRAMITE T ON (R.CRTRA_CODIGO = T.CRTRA_CODIGO)
	    INNER JOIN CGG_RES_PERSONA CRPER ON (CRPER.CRPER_CODIGO = R.CRPER_CODIGO)
	    INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE S ON(S.CRTST_CODIGO = R.CRTST_CODIGO)
	    LEFT JOIN CGG_RES_PERSONA CRPER1 ON (CRPER1.CRPER_CODIGO = T.CRPER_CODIGO)	    
	    LEFT JOIN cgg_res_persona_juridica PJ ON (T.CRPJR_CODIGO = PJ.CRPJR_CODIGO)
	    LEFT JOIN CGG_GEM_CARGO CR ON (CR.CGCRG_CODIGO = T.CRTRA_ACTIVIDAD_RESIDENCIA)
	    WHERE T.CRTRA_ESTADO=TRUE AND (R.CRRSD_VIGENTE OR R.CRRSD_FECHA_INICIO::DATE> CURRENT_DATE OR R.CRRSD_FECHA_INICIO IS NULL)
	    AND R.CRTST_CODIGO IN (SELECT CRTST_CODIGO FROM TIPO)	
	    ) AS TRA
	WHERE SII.F_STRING_IN('||QUOTE_LITERAL(IN_FIND_TEXT)||',		
	COALESCE(TRA.CRPER_TAUSPICIANTE,'''')||'' ''||
	COALESCE(TRA.CRPJR_NOMBRES,'''')||'' ''||	
	COALESCE(TRA.CRPER_NUM_DOC_IDENTIFIC,'''')||'' ''||	
	COALESCE(TRA.CRPER_TBENEFICIARIO,'''')||'' ''||		
	COALESCE(TRA.CRTST_DESCRIPCION,'''')||'' ''||			
	COALESCE(TRA.CISLA_NOMBRE,'''')||'' ''||	
	COALESCE(TRA.CRTRA_ANIO,0)||'' ''||
	COALESCE(TRA.CRTRA_NUMERO,0)||'' ''||
	COALESCE(TO_CHAR(TRA.CRTRA_FECHA_RECEPCION,''DD/MM/YY''),'' '')||'' ''||
	COALESCE(TRA.ACTIVIDAD_RESIDENCIA,'''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;	
	OPEN TMP_REF FOR EXECUTE SQL_STMT;	
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_TRANSEUNTE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS NUMERIC AS
$$
DECLARE
	TMP_REF REFCURSOR;	
	SQL_STMT TEXT;	
	CRTST_CODIGO_TRANSEUNTE	VARCHAR(20);
	TMP_COUNT NUMERIC;
BEGIN
		
	SELECT CGCNF_VALOR_CADENA INTO CRTST_CODIGO_TRANSEUNTE FROM CGG_CONFIGURACION WHERE CGCNF_CODIGO='05';
	TMP_COUNT:=0;
	
	SQL_STMT := 'SELECT
		COALESCE(COUNT(RES.CRTRA_CODIGO),0)
	FROM (	
		WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
				SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO in (SELECT CGCNF_VALOR_CADENA
				FROM CGG_CONFIGURACION
				WHERE CGCNF_CODIGO IN (''05''))) 
				UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
				WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
		) 			
	    SELECT	
		R.CRRSD_CODIGO,
	   	T.CRTRA_CODIGO, 
		T.CRPER_CODIGO,
		CRPER1.CRPER_NOMBRES||'' ''||CRPER1.CRPER_APELLIDO_PATERNO  CRPER_TAUSPICIANTE,
		T.CRPJR_CODIGO,
		 PJ.CRPJR_RAZON_SOCIAL CRPJR_NOMBRES,
		T.CGG_CRPER_CODIGO,
		CRPER.CRPER_NUM_DOC_IDENTIFIC, 
		COALESCE(CRPER.CRPER_NOMBRES,'''')||'' ''||COALESCE(CRPER.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(CRPER.CRPER_APELLIDO_MATERNO,'''') CRPER_TBENEFICIARIO,
		T.CRPRO_CODIGO, 
		T.CRTST_CODIGO,
		S.CRTST_DESCRIPCION, 				
		T.CRETT_CODIGO, 
		T.CISLA_CODIGO,
	       (SELECT CISLA_NOMBRE FROM SII.CGG_ISLA I WHERE  I.CISLA_CODIGO = T.CISLA_CODIGO) CISLA_NOMBRE, 
		T.CRTRA_ANIO, 
		T.CRTRA_NUMERO, 
		T.CRTRA_FECHA_RECEPCION, 
		T.CRTRA_ACTIVIDAD_RESIDENCIA, 
		CR.CGCRG_NOMBRE ACTIVIDAD_RESIDENCIA,
		T.CRTRA_OBSERVACION,  
		T.CRTRA_GRUPO,
		T.CRTRA_ORDEN,
		R.CRRSD_FECHA_INICIO,
		R.CRRSD_FECHA_CADUCIDAD,
		R.CRRSD_VIGENTE,
		S.CRTST_APLICA_OTRO
	    FROM SII.CGG_RES_RESIDENCIA R
	    INNER JOIN SII.CGG_RES_TRAMITE T ON (R.CRTRA_CODIGO = T.CRTRA_CODIGO)
	    INNER JOIN CGG_RES_PERSONA CRPER ON (CRPER.CRPER_CODIGO = R.CRPER_CODIGO)
	    INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE S ON(S.CRTST_CODIGO = R.CRTST_CODIGO)
	    LEFT JOIN CGG_RES_PERSONA CRPER1 ON (CRPER1.CRPER_CODIGO = T.CRPER_CODIGO)	    
	    LEFT JOIN cgg_res_persona_juridica PJ ON (T.CRPJR_CODIGO = PJ.CRPJR_CODIGO)
	    LEFT JOIN CGG_GEM_CARGO CR ON (CR.CGCRG_CODIGO = T.CRTRA_ACTIVIDAD_RESIDENCIA)
	    WHERE T.CRTRA_ESTADO=TRUE AND (R.CRRSD_VIGENTE OR R.CRRSD_FECHA_INICIO::DATE> CURRENT_DATE OR R.CRRSD_FECHA_INICIO IS NULL)
	    AND R.CRTST_CODIGO IN (SELECT CRTST_CODIGO FROM TIPO)		    
	    ) AS RES
	WHERE SII.F_STRING_IN('||QUOTE_LITERAL(IN_FIND_TEXT)||',		
	COALESCE(RES.CRPER_TAUSPICIANTE,'''')||'' ''||
	COALESCE(RES.CRPJR_NOMBRES,'''')||'' ''||
	COALESCE(RES.CRPER_NUM_DOC_IDENTIFIC,'''')||'' ''||		
	COALESCE(RES.CRPER_TBENEFICIARIO,'''')||'' ''||		
	COALESCE(RES.CRTST_DESCRIPCION,'''')||'' ''||			
	COALESCE(RES.CISLA_NOMBRE,'''')||'' ''||	
	COALESCE(RES.CRTRA_ANIO,0)||'' ''||
	COALESCE(RES.CRTRA_NUMERO,0)||'' ''||
	COALESCE(TO_CHAR(RES.CRTRA_FECHA_RECEPCION,''DD/MM/YY''),'' '')||'' ''||
	COALESCE(RES.ACTIVIDAD_RESIDENCIA,'''')) = 1';		
	EXECUTE SQL_STMT INTO TMP_COUNT;	
	RETURN TMP_COUNT;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* ESTABLECE TODAS LA VIGENCIAS DE UNA PERSONAL A INVALIDAS.
*@param IN_CRPER_NUM_DOC_IDENTIFIC NUMERO DE DOCUMENTO DE PERSONA.
*@param IN_MENSAJE MENSAJE DE MOTIVO DE ANULACION DE RESIDENCIAS.
*@param IN_USER_NAME NOMBRE DE USUARIO.
*@return 0-NO SE REALIZO LA OPERACION / 1 - SE REALIZO LA OPERACION
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ANULAR_RESIDENCIAS(
IN IN_CRPER_NUM_DOC_IDENTIFIC VARCHAR,
IN IN_MENSAJE TEXT,
IN IN_USER_NAME VARCHAR
)RETURNS NUMERIC AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_ROW RECORD;
BEGIN
	FOR TMP_ROW IN
		SELECT
			R.CRRSD_CODIGO, 
			P.CRPER_CODIGO, 
			R.CRTST_CODIGO, 
			R.CRTRA_CODIGO, 
			R.CGG_CRTRA_CODIGO, 
			R.CRRSD_NUMERO, 
			R.CRRSD_MODALIDAD, 
			R.CRRSD_FECHA_INICIO, 
			R.CRRSD_FECHA_CADUCIDAD, 
			R.CRRSD_REVOCADA, 
			R.CRRSD_FECHA_REVOCATORIA, 
			R.CRRSD_MOTIVO_REVOCATORIA, 
			R.CRRSD_VIGENTE, 
			R.CRRSD_TRAMITE_PENDIENTE, 
			R.CRRSD_ESTADO, 
			R.CRRSD_FECHA_INSERT, 
			R.CRRSD_USUARIO_INSERT, 
			R.CRRSD_FECHA_UPDATE, 
			R.CRRSD_USUARIO_UPDATE
		FROM SII.CGG_RES_RESIDENCIA R 
		INNER JOIN SII.CGG_RES_PERSONA P ON (R.CRPER_CODIGO = P.CRPER_CODIGO)
		WHERE CRRSD_ESTADO AND 
		P.CRPER_NUM_DOC_IDENTIFIC = IN_CRPER_NUM_DOC_IDENTIFIC AND
		R.CRRSD_VIGENTE
	LOOP
		UPDATE SII.CGG_RES_RESIDENCIA SET 
			CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP,
			CRRSD_USUARIO_UPDATE = IN_USER_NAME,
			CRRSD_VIGENTE = FALSE, 
			CRRSD_FECHA_CADUCIDAD = CURRENT_DATE,
			CRRSD_MOTIVO_REVOCATORIA = IN_MENSAJE 
		WHERE R.CRRSD_CODIGO = TMP_ROW.CRRSD_CODIGO;	
	END LOOP;
	RETURN 1;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_INSERT1
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_RESIDENCIA SIN FECHA DE REVOCATORIA
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRTST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE SOLICITUD DE RESIDENCIA
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE
* @param IN_CRRSD_MODALIDAD ESTADO MIGRATORIO AUTORIZADO PARA LA PERSONA
0 - PERMANENTE
1 - TEMPORAL
* @param IN_CRRSD_FECHA_INICIO FECHA DE INICIO DEL PERMISO DE PERMANENCIA
* @param IN_CRRSD_FECHA_CADUCIDAD FECHA DE CADUCIDAD DEL PERMISO DE PERMANENCIA
* @param IN_CRRSD_MOTIVO_REVOCATORIA DESCRIPCION DEL MOTIVO QUE GENERO UNA REVOCATORIA DE PERMISO DE RESIDENCIA
* @param IN_CRRSD_VIGENTE DETERMINA EL ESTADO ACTIVO DE LA RESIDENCIA
* @param IN_CRRSD_TRAMITE_PENDIENTE ESTADO QUE DETERMINA SI LA RESIDENCIA AUN TIENE UN TRAMITE POR CONCLUIR
SI
NO
* @param IN_CRRSD_ESTADO ESTADO DEL REGISTRO
* @param IN_CRRSD_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRRSD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_INSERT1(
IN IN_CRRSD_CODIGO SII.CGG_RES_RESIDENCIA.CRRSD_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_RESIDENCIA.CRPER_CODIGO%TYPE, 
IN IN_CRTST_CODIGO SII.CGG_RES_RESIDENCIA.CRTST_CODIGO%TYPE, 
IN IN_CRTRA_CODIGO SII.CGG_RES_RESIDENCIA.CRTRA_CODIGO%TYPE, 
IN IN_CRRSD_MODALIDAD SII.CGG_RES_RESIDENCIA.CRRSD_MODALIDAD%TYPE, 
IN IN_CRRSD_FECHA_INICIO SII.CGG_RES_RESIDENCIA.CRRSD_FECHA_INICIO%TYPE, 
IN IN_CRRSD_FECHA_CADUCIDAD SII.CGG_RES_RESIDENCIA.CRRSD_FECHA_CADUCIDAD%TYPE, 
IN IN_CRRSD_MOTIVO_REVOCATORIA SII.CGG_RES_RESIDENCIA.CRRSD_MOTIVO_REVOCATORIA%TYPE, 
IN IN_CRRSD_VIGENTE SII.CGG_RES_RESIDENCIA.CRRSD_VIGENTE%TYPE, 
IN IN_CRRSD_TRAMITE_PENDIENTE SII.CGG_RES_RESIDENCIA.CRRSD_TRAMITE_PENDIENTE%TYPE, 
IN IN_CRRSD_ESTADO SII.CGG_RES_RESIDENCIA.CRRSD_ESTADO%TYPE, 
IN IN_CRRSD_USUARIO_INSERT SII.CGG_RES_RESIDENCIA.CRRSD_USUARIO_INSERT%TYPE, 
IN IN_CRRSD_USUARIO_UPDATE SII.CGG_RES_RESIDENCIA.CRRSD_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRRSD_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_RESIDENCIA','CRRSD_CODIGO','CRRSD') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRRSD_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_RESIDENCIA(
		CRRSD_CODIGO, 
		CRPER_CODIGO, 
		CRTST_CODIGO, 
		CRTRA_CODIGO, 
		CRRSD_MODALIDAD, 
		CRRSD_FECHA_INICIO, 
		CRRSD_FECHA_CADUCIDAD, 
		CRRSD_MOTIVO_REVOCATORIA, 
		CRRSD_VIGENTE, 
		CRRSD_TRAMITE_PENDIENTE, 
		CRRSD_ESTADO, 
		CRRSD_FECHA_INSERT, 
		CRRSD_USUARIO_INSERT, 
		CRRSD_FECHA_UPDATE, 
		CRRSD_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CRTST_CODIGO, 
		IN_CRTRA_CODIGO, 
		IN_CRRSD_MODALIDAD, 
		IN_CRRSD_FECHA_INICIO, 
		IN_CRRSD_FECHA_CADUCIDAD, 
		IN_CRRSD_MOTIVO_REVOCATORIA, 
		IN_CRRSD_VIGENTE, 
		IN_CRRSD_TRAMITE_PENDIENTE, 
		IN_CRRSD_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRRSD_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRRSD_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_USUARIO
* CREA UN USUARIO PARA UN PERSONA QUE SE LE HA CONCEDIDO UNA RESIDENCIA PERMANENTE
* @param IN_CRPER_CODIGO CODIGO DE LA PERSONA
* @param IN_USER_NAME NOMBRE DEL USUARIO DEL SERVIDOR DE APLICACIONES.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE TRAMITE.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_USUARIO(
IN IN_USER_NAME VARCHAR,
IN IN_CRPER_CODIGO VARCHAR,
IN IN_CRTRA_CODIGO VARCHAR
)RETURNS VOID AS
$$
DECLARE
TMP_CUSU_CODIGO VARCHAR;
TMP_CODIGO VARCHAR;
TMP_RTRM RECORD;
--CODIGO DEL CANTON DONDE SE PRESENTO EL TRAMITE
TMP_CCTN_CODIGO VARCHAR;
--NUMERO DE DOCUMENTO DE IDENTIFICACION DE LA PERSONA
TMP_CRPER_NUM_DOC_IDENTIFIC VARCHAR;
--NUMERO DE RESIDENCIA DE LA PERSONA
TMP_CRPER_NUMERO_RESIDENCIA VARCHAR;
TMP_RANDOM INT;
--NOMBRE DE USUARIO DE ACCESO
TMP_CUSU_NOMRE_USUARIO VARCHAR;
--CLAVE DE ACCESO DEL USUARIO
TMP_CUSU_CLAVE_ACCESO VARCHAR;
--CORREOS ELECTRONICOS DE LA PERSONA
TMP_CORREOS VARCHAR[];
TMP_CORREOS_COUNT INT;
C INT;
TMP_EXIST INT;
TMP_DEFAULT_WWW VARCHAR;
BEGIN
	SELECT CGCNF_VALOR_CADENA INTO TMP_DEFAULT_WWW 
	FROM SII.CGG_CONFIGURACION
	WHERE CGCNF_CODIGO = 'CONF40';
	
	SELECT (random()*10000)::INT INTO TMP_RANDOM;
	
	SELECT CRPER_NUM_DOC_IDENTIFIC,CRPER_NUMERO_RESIDENCIA INTO TMP_CRPER_NUM_DOC_IDENTIFIC,TMP_CRPER_NUMERO_RESIDENCIA
	FROM SII.CGG_RES_PERSONA
	WHERE CRPER_CODIGO = IN_CRPER_CODIGO;
	
	SELECT * INTO TMP_RTRM
	FROM SII.CGG_RES_TRAMITE TRM
	WHERE TRM.CRTRA_CODIGO = IN_CRTRA_CODIGO;
	
	SELECT CCTN_CODIGO INTO TMP_CCTN_CODIGO 
	FROM SII.CGG_ISLA SL 
	WHERE SL.CISLA_CODIGO = TMP_RTRM.CISLA_CODIGO;
	
	TMP_CUSU_NOMRE_USUARIO = TMP_CRPER_NUM_DOC_IDENTIFIC;
	TMP_CUSU_CLAVE_ACCESO = TMP_CRPER_NUMERO_RESIDENCIA;
	
	SELECT COUNT(CUSU_CODIGO) INTO TMP_EXIST FROM SII.CGG_USUARIO WHERE UPPER(CUSU_NOMBRE_USUARIO) = UPPER(TMP_CUSU_NOMRE_USUARIO);
	IF (TMP_EXIST > 0) THEN	
		--ACTIVA EL ESTADO DEL USUARIO YA CREADO
		UPDATE SII.CGG_USUARIO SET
			CUSU_CLAVE_ACCESO = encode(digest(TMP_CUSU_CLAVE_ACCESO,'md5'),'base64'),
			CUSU_ACTIVO = TRUE,
			CUSU_ESTADO = TRUE,
			CUSU_FECHA_UPDATE = CURRENT_TIMESTAMP, 
			CUSU_USUARIO_UPDATE = IN_USER_NAME
		WHERE UPPER(CUSU_NOMBRE_USUARIO) = UPPER(TMP_CUSU_NOMRE_USUARIO);
	ELSE
		--CREA EL USUARIO 
		SELECT SII.F_CGG_USUARIO_INSERT(
			'KEYGEN'::VARCHAR,
			NULL::VARCHAR,
			IN_CRPER_CODIGO,
			NULL::VARCHAR,
			TMP_CCTN_CODIGO,
			TMP_RTRM.CISLA_CODIGO,
			TMP_CUSU_NOMRE_USUARIO,
			encode(digest(TMP_CUSU_CLAVE_ACCESO,'md5'),'base64'),
			FALSE, --USUARIO INTERNO
			FALSE, --CADUCA CLAVE
			NULL::TIMESTAMP WITH TIME ZONE,
			TRUE, --ACTIVO
			TRUE, --CAMBIAR CLAVE
			TRUE,
			IN_USER_NAME
		) INTO TMP_CUSU_CODIGO;
		
		--ASIGNA EL ROL DE USUARIO 
		SELECT SII.F_CGG_SEC_USUARIO_ROL_INSERT(
			'KEYGEN'::VARCHAR,
			'2'::VARCHAR,
			TMP_CUSU_CODIGO,
			TRUE,
			IN_USER_NAME,
			IN_USER_NAME
		) INTO TMP_CODIGO;
		SELECT SII.F_CGG_SEC_USUARIO_ROL_INSERT(
			'KEYGEN'::VARCHAR,
			'3'::VARCHAR,
			TMP_CUSU_CODIGO,
			TRUE,
			IN_USER_NAME,
			IN_USER_NAME
		) INTO TMP_CODIGO;
		SELECT SII.F_CGG_SEC_USUARIO_ROL_INSERT(
			'KEYGEN'::VARCHAR,
			'CSROL_GEAPL'::VARCHAR,  
			TMP_CUSU_CODIGO,
			TRUE,
			IN_USER_NAME,
			IN_USER_NAME
		) INTO TMP_CODIGO;
	END IF;
	--OBTIENE LOS EMAILS DE LA PERSONA BENEFICIADA DE LA RESIDENCIA
	SELECT SII.F_CGG_RES_PERSONA_EMAILS(IN_CRPER_CODIGO,0) INTO TMP_CORREOS;
	TMP_CORREOS_COUNT = ARRAY_NDIMS(TMP_CORREOS);
	IF (TMP_CORREOS_COUNT IS NOT NULL)THEN
		FOR C IN 1..TMP_CORREOS_COUNT LOOP
			SELECT SII.F_CGG_BUZON_CORREO_INSERT(
				'KEYGEN'::VARCHAR,
				TMP_CORREOS[C],
				'Control de acceso'::VARCHAR,
				('Bienvenido al SII. Su cuenta de acceso es "'||TMP_CUSU_NOMRE_USUARIO||'" con clave "'||TMP_CUSU_CLAVE_ACCESO||
					'". Para disfrutar de los nuevos servicios por favor visite '||TMP_DEFAULT_WWW
				)::VARCHAR,
				'text/plain'::VARCHAR,
				0::INT,
				FALSE,
				TRUE,
				IN_USER_NAME
			) INTO TMP_CODIGO;
		END LOOP;
	END IF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
*FUNCION  SII.F_CGG_RES_RESIDENCIA_TRANSEUNTE_USUARIO_ATC
*SELECCIONA EL TRAMITE DE  RESIDENCIA DE TRANSEUNTES AUTORIZADO PARA UNA PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_TRANSEUNTE_USUARIO_ATC(
IN IN_USER_ATC_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR	
		SELECT CRTRA.CRTRA_CODIGO FROM CGG_RES_TRAMITE CRTRA
		INNER JOIN CGG_RES_RESIDENCIA CRRES ON (CRTRA.CRTRA_CODIGO = CRRES.CRTRA_CODIGO)
		INNER JOIN CGG_USUARIO CUSU ON (CRTRA.CRPER_CODIGO = CUSU.CRPER_CODIGO)
		WHERE (SELECT CGCNF_VALOR_CADENA FROM CGG_CONFIGURACION 
		WHERE CGCNF_CODIGO = '05')  = SII.F_TIPO_SOLICITUD_PADRE(CRTRA.CRTST_CODIGO) 
		AND DATE(CRRES.CRRSD_FECHA_INICIO) >= CURRENT_DATE
		AND CUSU.CUSU_NOMBRE_USUARIO = IN_USER_ATC_NAME
		AND  CRRES.CRRSD_VIGENTE
		LIMIT 1;	
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_RES_RESIDENCIA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_RESIDENCIA
* @param IN_CRRSD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @param IN_CRRSD_FECHA_INICIO FECHA DE INICIO DEL PERMISO DE PERMANENCIA
* @param IN_CRRSD_ESTADO ESTADO DEL REGISTRO
* @param IN_CRRSD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_UPDATE_FECHA_INICIO(
IN IN_CRRSD_CODIGO SII.CGG_RES_RESIDENCIA.CRRSD_CODIGO%TYPE,
IN IN_CRRSD_FECHA_INICIO SII.CGG_RES_RESIDENCIA.CRRSD_FECHA_INICIO%TYPE,
IN IN_CRRSD_ESTADO SII.CGG_RES_RESIDENCIA.CRRSD_ESTADO%TYPE,
IN IN_CRRSD_USUARIO_UPDATE SII.CGG_RES_RESIDENCIA.CRRSD_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESIDENCIA SET
		CRRSD_FECHA_INICIO = IN_CRRSD_FECHA_INICIO, 
		CRRSD_ESTADO = IN_CRRSD_ESTADO, 
		CRRSD_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRRSD_USUARIO_UPDATE = IN_CRRSD_USUARIO_UPDATE
	WHERE
		CRRSD_CODIGO = IN_CRRSD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* SELECCIONA TODOS LAS RESIDENCIAS ACTIVDAS PARA EXPORTACION PARA AEROLINEAS.
* @param IN_TIPO_RESIDENCIA IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE RESIDENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESIDENCIA_EXPORTABLE(
IN IN_TIPO_RESIDENCIA NUMERIC
)RETURNS TEXT AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP VARCHAR;	
	STMT TEXT;
BEGIN

TMP :='';
STMT:='';

IF(IN_TIPO_RESIDENCIA  = 0)THEN
	TMP = QUOTE_LITERAL('03');
ELSIF(IN_TIPO_RESIDENCIA  = 1)THEN
TMP = QUOTE_LITERAL('04');
ELSIF(IN_TIPO_RESIDENCIA  = 2)THEN
TMP = QUOTE_LITERAL('03')||','||QUOTE_LITERAL('04');
END IF;

STMT := 'SELECT
		C1.NOMBRES,	
		C1.CRPER_NUM_DOC_IDENTIFIC,
		C1.CRPER_NUMERO_RESIDENCIA,
		C1.CRPER_FECHA_NACIMIENTO,
		C1.CRRSD_FECHA_INICIO,
		C1.CRRSD_FECHA_CADUCIDAD
FROM (
	WITH CONFIG AS(
		SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO  IN ('||TMP||' )
	),RES1 AS(
		SELECT 
			C2.CRTST_CODIGO,
		    C2.CRPER_CODIGO,
			C2.CRRSD_FECHA_INICIO,
			C2.CRRSD_FECHA_CADUCIDAD	
		 FROM ( SELECT F_TIPO_SOLICITUD_PADRE(CRTST_CODIGO) CRTST_CODIGO_PADRE,
				CRTST_CODIGO,
				CRPER_CODIGO,
				CRRSD_FECHA_INICIO,
				CRRSD_FECHA_CADUCIDAD	
			 FROM SII.CGG_RES_RESIDENCIA
			 WHERE CRRSD_ESTADO = TRUE
			 AND CRRSD_VIGENTE = TRUE		            
		) AS C2
		WHERE C2.CRTST_CODIGO_PADRE IN( SELECT CGCNF_VALOR_CADENA FROM CONFIG)
	)	 
	SELECT     
		TRIM(COALESCE(PER.CRPER_NOMBRES,'' '')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO,'' '')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,'' '')) NOMBRES,	
		TRIM(REPLACE(PER.CRPER_NUM_DOC_IDENTIFIC,''-'','''')) CRPER_NUM_DOC_IDENTIFIC,
		SUBSTRING(PER.CRPER_NUMERO_RESIDENCIA FOR 7) CRPER_NUMERO_RESIDENCIA,
		TO_CHAR(PER.CRPER_FECHA_NACIMIENTO,''YYYYMMDD'') CRPER_FECHA_NACIMIENTO,
		TO_CHAR(RSD.CRRSD_FECHA_INICIO,''YYYYMMDD'') CRRSD_FECHA_INICIO,
		TO_CHAR(RSD.CRRSD_FECHA_CADUCIDAD,''YYYYMMDD'') CRRSD_FECHA_CADUCIDAD      
	 FROM RES1 RSD
	 JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=RSD.CRPER_CODIGO)	   
) AS C1';

RETURN STMT;

END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

