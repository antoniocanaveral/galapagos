/**
* FUNCION SII.F_CGG_RES_PERSONA_UPDATE1
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_PERSONA EXCLUYENDO LOS ARCHIVOS BINARIOS
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRECV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL ESTADO CIVIL
* @param IN_CRDID_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DOCUMENTO DE IDENTIFICACION
* @param IN_CRTSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO SANQUINEO
* @param IN_CGNCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NACIONALIDAD
* @param IN_CPRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARROQUIA
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CGG_CCTN_CODIGO CIUDAD DE ORIGEN EN EL ECUADOR CONTINENTAL DE UN RESIDENTE
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS DE NACIMIENTO
* @param IN_CGG_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS DE RESIDENCIA
* @param IN_CRPER_NOMBRES NOMBRES DE LA PERSONA
* @param IN_CRPER_APELLIDO_PATERNO APELLIDO PATERNO
* @param IN_CRPER_APELLIDO_MATERNO APELLIDO MATERNO
* @param IN_CRPER_NUM_DOC_IDENTIFIC NUMERO DE DOCUEMNTO DE IDENTIFICACION
* @param IN_CRPER_FECHA_NACIMIENTO FECHA DE NACIMIENTO
* @param IN_CRPER_LUGAR_NACIMIENTO LUGAR DE NACIMIENTO
* @param IN_CRPER_GENERO GENERO DE LA PERSONA
0 - MASCULINO
1 - FEMENINO
* @param IN_CRPER_OBSERVACIONES OBSERVACIONES O COMENTARIOS PARA CON LA PERSONA

* @param IN_CRPER_NUMERO_RESIDENCIA NUMERO UNICO DE IDENTIFICACION DE RESIDENCIA
* @param IN_CRPER_AUTORIZADO ESTADO DEL REGISTRO QUE DEFINE SI UNA PERSONA TIENE AUTORIZADO SU INGRESO A LA PROVINCIA
* @param IN_CRPER_NUMERO_EXPEDIENTE NUMERO DE EXPEDIENTE UNICO
* @param IN_CRPER_FECHA_ARCHIVO FECHA DE ARCHIVO DE LA DOCUMENTACION DE LA PERSONA
* @param IN_CRPER_EMPLEADO ESTADO LABORAL DE LA PERSONA
* @param IN_CRPER_FECHA_ULTIMO_EMPLEO FECHA DE INICIO DEL ULTIMO EMPLEO
* @param IN_CRPER_ASPIRACION_SALARIAL SALARIO ESPERADO POR CUMPLIR CON UN DETERMINADO TRABAJO
* @param IN_CRPER_CUPO_VEHICULAR SI TIENE DISPONIBLE UN CUPO VEHICULAR
* @param IN_CRPER_TIPO_PERSONA CAMPO QUE IDENTIPFICA EL TIPO DE PERSONA
0 - CAPACIDADES ESPECIALES
1 - DISCAPACIDAD FISICA
2 - NORMAL
* @param IN_CRPER_ESTADO_INTERFECTO CAMPO QUE VERIFICA EL ESTADO INTERFECTO DE LA PERSONA

* @param IN_CRPER_FECHA_DEFUNCION FECHA DE DEFUNCION
* @param IN_CRPER_NUMERO_ACTA NUMERO DE ACTA DE DEFUNCION
* @param IN_CRPER_TIPO ALMACENA INFORMACION QUE PERMITE DEFINIR SI LA PERSONA ESTA REGISTRADA COMO PARTE DE LA ADMINSITRACION DE RESIDENCIA
0 - REGULAR
1 - IRREGULAR
* @param IN_CRPER_ATENCION_CLIENTE SI LA INFORMACION FUE REGISTRADA DESDE ATENCION AL CLIENTE
* @param IN_CRPER_ESTADO ESTADO DEL REGISTRO
* @param IN_CRPER_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_UPDATE1(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE, 
IN IN_CRECV_CODIGO SII.CGG_RES_PERSONA.CRECV_CODIGO%TYPE, 
IN IN_CRDID_CODIGO SII.CGG_RES_PERSONA.CRDID_CODIGO%TYPE, 
IN IN_CRTSG_CODIGO SII.CGG_RES_PERSONA.CRTSG_CODIGO%TYPE, 
IN IN_CGNCN_CODIGO SII.CGG_RES_PERSONA.CGNCN_CODIGO%TYPE, 
IN IN_CPRR_CODIGO SII.CGG_RES_PERSONA.CPRR_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_RES_PERSONA.CCTN_CODIGO%TYPE, 
IN IN_CGG_CCTN_CODIGO SII.CGG_RES_PERSONA.CGG_CCTN_CODIGO%TYPE,
IN IN_CPAIS_CODIGO SII.CGG_RES_PERSONA.CPAIS_CODIGO%TYPE,
IN IN_CGG_CPAIS_CODIGO SII.CGG_RES_PERSONA.CGG_CPAIS_CODIGO%TYPE, 
IN IN_CRPER_NOMBRES SII.CGG_RES_PERSONA.CRPER_NOMBRES%TYPE, 
IN IN_CRPER_APELLIDO_PATERNO SII.CGG_RES_PERSONA.CRPER_APELLIDO_PATERNO%TYPE, 
IN IN_CRPER_APELLIDO_MATERNO SII.CGG_RES_PERSONA.CRPER_APELLIDO_MATERNO%TYPE, 
IN IN_CRPER_NUM_DOC_IDENTIFIC SII.CGG_RES_PERSONA.CRPER_NUM_DOC_IDENTIFIC%TYPE, 
IN IN_CRPER_FECHA_NACIMIENTO SII.CGG_RES_PERSONA.CRPER_FECHA_NACIMIENTO%TYPE, 
IN IN_CRPER_LUGAR_NACIMIENTO SII.CGG_RES_PERSONA.CRPER_LUGAR_NACIMIENTO%TYPE, 
IN IN_CRPER_GENERO SII.CGG_RES_PERSONA.CRPER_GENERO%TYPE, 
IN IN_CRPER_OBSERVACIONES SII.CGG_RES_PERSONA.CRPER_OBSERVACIONES%TYPE, 
IN IN_CRPER_NUMERO_RESIDENCIA SII.CGG_RES_PERSONA.CRPER_NUMERO_RESIDENCIA%TYPE, 
IN IN_CRPER_AUTORIZADO SII.CGG_RES_PERSONA.CRPER_AUTORIZADO%TYPE, 
IN IN_CRPER_NUMERO_EXPEDIENTE SII.CGG_RES_PERSONA.CRPER_NUMERO_EXPEDIENTE%TYPE, 
IN IN_CRPER_FECHA_ARCHIVO SII.CGG_RES_PERSONA.CRPER_FECHA_ARCHIVO%TYPE, 
IN IN_CRPER_EMPLEADO SII.CGG_RES_PERSONA.CRPER_EMPLEADO%TYPE, 
IN IN_CRPER_FECHA_ULTIMO_EMPLEO SII.CGG_RES_PERSONA.CRPER_FECHA_ULTIMO_EMPLEO%TYPE, 
IN IN_CRPER_ASPIRACION_SALARIAL SII.CGG_RES_PERSONA.CRPER_ASPIRACION_SALARIAL%TYPE, 
IN IN_CRPER_CUPO_VEHICULAR SII.CGG_RES_PERSONA.CRPER_CUPO_VEHICULAR%TYPE, 
IN IN_CRPER_TIPO_PERSONA SII.CGG_RES_PERSONA.CRPER_TIPO_PERSONA%TYPE, 
IN IN_CRPER_ESTADO_INTERFECTO SII.CGG_RES_PERSONA.CRPER_ESTADO_INTERFECTO%TYPE, 
IN IN_CRPER_FECHA_DEFUNCION SII.CGG_RES_PERSONA.CRPER_FECHA_DEFUNCION%TYPE, 
IN IN_CRPER_NUMERO_ACTA SII.CGG_RES_PERSONA.CRPER_NUMERO_ACTA%TYPE, 
IN IN_CRPER_TIPO SII.CGG_RES_PERSONA.CRPER_TIPO%TYPE, 
IN IN_CRPER_ATENCION_CLIENTE SII.CGG_RES_PERSONA.CRPER_ATENCION_CLIENTE%TYPE, 
IN IN_CRPER_ESTADO SII.CGG_RES_PERSONA.CRPER_ESTADO%TYPE, 
IN IN_CRPER_USUARIO_UPDATE SII.CGG_RES_PERSONA.CRPER_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
	TMP_RECORD RECORD;
BEGIN
	UPDATE SII.CGG_RES_PERSONA SET
		CRECV_CODIGO = IN_CRECV_CODIGO, 
		CRDID_CODIGO = IN_CRDID_CODIGO, 
		CRTSG_CODIGO = IN_CRTSG_CODIGO, 
		CGNCN_CODIGO = IN_CGNCN_CODIGO, 
		CPRR_CODIGO = IN_CPRR_CODIGO, 
		CCTN_CODIGO = IN_CCTN_CODIGO, 
		CGG_CCTN_CODIGO = IN_CGG_CCTN_CODIGO,
		CPAIS_CODIGO = IN_CPAIS_CODIGO, 
		CGG_CPAIS_CODIGO = IN_CGG_CPAIS_CODIGO, 
		CRPER_NOMBRES = IN_CRPER_NOMBRES, 
		CRPER_APELLIDO_PATERNO = IN_CRPER_APELLIDO_PATERNO, 
		CRPER_APELLIDO_MATERNO = IN_CRPER_APELLIDO_MATERNO, 
		CRPER_NUM_DOC_IDENTIFIC = IN_CRPER_NUM_DOC_IDENTIFIC, 
		CRPER_FECHA_NACIMIENTO = IN_CRPER_FECHA_NACIMIENTO, 
		CRPER_LUGAR_NACIMIENTO = IN_CRPER_LUGAR_NACIMIENTO, 
		CRPER_GENERO = IN_CRPER_GENERO, 
		CRPER_OBSERVACIONES = IN_CRPER_OBSERVACIONES, 
		CRPER_NUMERO_RESIDENCIA = IN_CRPER_NUMERO_RESIDENCIA, 
		CRPER_AUTORIZADO = IN_CRPER_AUTORIZADO, 
		CRPER_NUMERO_EXPEDIENTE = IN_CRPER_NUMERO_EXPEDIENTE, 
		CRPER_FECHA_ARCHIVO = IN_CRPER_FECHA_ARCHIVO, 
		CRPER_EMPLEADO = IN_CRPER_EMPLEADO, 
		CRPER_FECHA_ULTIMO_EMPLEO = IN_CRPER_FECHA_ULTIMO_EMPLEO, 
		CRPER_ASPIRACION_SALARIAL = IN_CRPER_ASPIRACION_SALARIAL, 
		CRPER_CUPO_VEHICULAR = IN_CRPER_CUPO_VEHICULAR, 
		CRPER_TIPO_PERSONA = IN_CRPER_TIPO_PERSONA, 
		CRPER_ESTADO_INTERFECTO = IN_CRPER_ESTADO_INTERFECTO, 
		CRPER_FECHA_DEFUNCION = IN_CRPER_FECHA_DEFUNCION, 
		CRPER_NUMERO_ACTA = IN_CRPER_NUMERO_ACTA, 
		CRPER_TIPO = IN_CRPER_TIPO, 
		CRPER_ATENCION_CLIENTE = IN_CRPER_ATENCION_CLIENTE, 
		CRPER_ESTADO = IN_CRPER_ESTADO, 
		CRPER_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRPER_USUARIO_UPDATE = IN_CRPER_USUARIO_UPDATE
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
		
	FOR TMP_RECORD IN (SELECT 
		CRPER_CODIGO,
		CRPER_NOMBRES,
		CRPER_APELLIDO_PATERNO,
		CRPER_APELLIDO_MATERNO,
		CRPER_NUM_DOC_IDENTIFIC,
		CRPER_FECHA_NACIMIENTO,
		CRPER_LUGAR_NACIMIENTO,
		CRPER_OBSERVACIONES,
		CRPER_NUMERO_RESIDENCIA,
		CRPER_NUMERO_EXPEDIENTE,
		CRPER_FECHA_ARCHIVO,
		CRPER_FECHA_ULTIMO_EMPLEO,
		CRPER_ASPIRACION_SALARIAL,
		CRPER_FECHA_DEFUNCION,
		CRPER_NUMERO_ACTA
		FROM SII.CGG_RES_PERSONA WHERE CRPER_CODIGO = IN_CRPER_CODIGO ) LOOP
		UPDATE SII.CGG_RES_PERSONA SET CRPER_INDEX = TO_TSVECTOR(TMP_RECORD::VARCHAR)
			WHERE CRPER_CODIGO = TMP_RECORD.CRPER_CODIGO;
	END LOOP;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_RES_PERSONA_SELECT_LITE
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CRTST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE SOLICITUD DE TRAMITE
* @param IN_CARNET CONSIDERA SOLO LAS PERSONAS QUE TIENEN UN TRAMITE DE CARNETIZACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_SELECT_LITE(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CRTST_CODIGO VARCHAR,
IN IN_CARNET BOOLEAN,
IN IN_IDENTIFICACION VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
TMP_REF REFCURSOR;
--CODIGO DEL ESTADO DE TRAMITE PARA CARNETIZAR
TMP_ESTADO_CRNT VARCHAR;
--CODIGO TIPO DE TRAMITE PARA RESIDENCIA PERMANENTE
TMP_PERMANENTE VARCHAR;
--CODIGO TIPO DE TRAMITE PARA RESIDENCIA TEMPORAL
TMP_TEMPORAL VARCHAR;
TMP_TEXT_ARRAY TEXT[];
TMP_SQL TEXT;
TMP_FT_LENGTH INT;
TMP_SQL_RESIDENCIAS VARCHAR;
TMP_SQL_TIPOS VARCHAR;
TMP_SW_SIN BOOLEAN;
BEGIN
	TMP_SQL_RESIDENCIAS = '';
	TMP_SQL := '';
	TMP_SW_SIN = FALSE;
	TMP_SQL_TIPOS ='';
	IF (IN_CARNET) THEN
		SELECT CGCNF_VALOR_CADENA INTO TMP_ESTADO_CRNT FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '02';
		SELECT CGCNF_VALOR_CADENA INTO TMP_PERMANENTE FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '03';
		SELECT CGCNF_VALOR_CADENA INTO TMP_TEMPORAL FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '04';
	ELSE
		TMP_ESTADO_CRNT := '';
		TMP_PERMANENTE := '';
		TMP_TEMPORAL := '';
	END IF;
	
	TMP_TEXT_ARRAY := STRING_TO_ARRAY(UPPER(IN_CRTST_CODIGO), ' ');
	TMP_FT_LENGTH := ARRAY_LENGTH(TMP_TEXT_ARRAY, 1);
	
	IF (TMP_FT_LENGTH > 0) THEN
		FOR I IN 1..TMP_FT_LENGTH LOOP
			IF (I > 2) THEN
				TMP_SQL_TIPOS := TMP_SQL_TIPOS||' OR ';
			END IF;
			IF(TMP_TEXT_ARRAY[I] = 'SIN') THEN
				TMP_SW_SIN := TRUE;
			ELSE
				TMP_SQL_TIPOS := ' CRTST_CODIGO = '||QUOTE_LITERAL(TMP_TEXT_ARRAY[I]);
			END IF;
		END LOOP;
	END IF;
	IF(IN_CRTST_CODIGO IS NOT NULL AND LENGTH(IN_CRTST_CODIGO) > 0) THEN
		TMP_SQL_RESIDENCIAS = 'OR RSD.CRRSD_CODIGO IS NOT NULL AND RSD.CRTST_CODIGO IN (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE '||TMP_SQL_TIPOS||'UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT CRTST_CODIGO  FROM TIPO)';
	END IF;
	IF (TMP_SW_SIN) THEN
		IF (TMP_SQL_RESIDENCIAS IS NULL) THEN
			TMP_SQL_RESIDENCIAS = '';
		END IF;
		TMP_SQL_RESIDENCIAS = TMP_SQL_RESIDENCIAS||' OR RSD.CRRSD_CODIGO IS NULL';
	END IF;
	
	TMP_SQL := 'SELECT DISTINCT(PRS.CRPER_CODIGO),
			CRPER_NOMBRES, 
			CRPER_APELLIDO_PATERNO, 
			CRPER_APELLIDO_MATERNO, 
			CRPER_NUM_DOC_IDENTIFIC, 
			CRPER_FECHA_NACIMIENTO, 
			CRPER_LUGAR_NACIMIENTO, 
			CRPER_GENERO, 
			CRPER_OBSERVACIONES, 
			CRPER_NUMERO_RESIDENCIA, 
			CRPER_AUTORIZADO, 
			CRPER_NUMERO_EXPEDIENTE, 
			CRPER_FECHA_ARCHIVO
	FROM SII.CGG_RES_PERSONA PRS 
	LEFT JOIN SII.CGG_RES_RESIDENCIA RSD ON RSD.CRPER_CODIGO = PRS.CRPER_CODIGO AND RSD.CRRSD_VIGENTE
	WHERE CRPER_ESTADO AND (NOT CRPER_ESTADO_INTERFECTO OR CRPER_ESTADO_INTERFECTO IS NULL) AND
		(NOT '||IN_CARNET||' OR PRS.CRPER_NUMERO_RESIDENCIA IS NOT NULL) AND
		(LENGTH('||QUOTE_LITERAL(IN_IDENTIFICACION)||') = 0 OR PRS.CRPER_NUMERO_RESIDENCIA = '||QUOTE_LITERAL(IN_IDENTIFICACION)||' OR PRS.CRPER_NUM_DOC_IDENTIFIC = '||QUOTE_LITERAL(IN_IDENTIFICACION)||') AND
		('||QUOTE_LITERAL(IN_CRTST_CODIGO)||' IS NULL OR LENGTH('||QUOTE_LITERAL(IN_CRTST_CODIGO)||') = 0 '||TMP_SQL_RESIDENCIAS||') AND
		('||QUOTE_LITERAL(IN_FIND_TEXT)||' IS NULL OR LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR crper_index @@ plainto_tsquery('||QUOTE_LITERAL(IN_FIND_TEXT)||'))
	 LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
		
	OPEN TMP_REF FOR EXECUTE TMP_SQL;
	
	 --ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_COUNT_LITE
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_PERSONA.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_COUNT_LITE(
IN IN_FIND_TEXT TEXT,
IN IN_CRTST_CODIGO VARCHAR,
IN IN_CARNET BOOLEAN,
IN IN_IDENTIFICACION VARCHAR
)RETURNS NUMERIC AS
$$
DECLARE
TMP_ROWS NUMERIC;
--CODIGO DEL ESTADO DE TRAMITE PARA CARNETIZAR
TMP_ESTADO_CRNT VARCHAR;
--CODIGO TIPO DE TRAMITE PARA RESIDENCIA PERMANENTE
TMP_PERMANENTE VARCHAR;
--CODIGO TIPO DE TRAMITE PARA RESIDENCIA TEMPORAL
TMP_TEMPORAL VARCHAR;
STMT_SQL TEXT;
TMP_TEXT_ARRAY TEXT[];
TMP_FT_LENGTH INT;
TMP_SQL_RESIDENCIAS VARCHAR;
TMP_SQL_TIPOS VARCHAR;
TMP_SW_SIN BOOLEAN;
BEGIN

	STMT_SQL:='';
	TMP_PERMANENTE:='';
	TMP_TEMPORAL:='';
	TMP_SQL_RESIDENCIAS = '';
	TMP_SW_SIN = FALSE;
	IF (IN_CARNET) THEN
		SELECT CGCNF_VALOR_CADENA INTO TMP_ESTADO_CRNT FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '02';
		SELECT CGCNF_VALOR_CADENA INTO TMP_PERMANENTE FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '03';
		SELECT CGCNF_VALOR_CADENA INTO TMP_TEMPORAL FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '04';
	END IF;
	
	TMP_TEXT_ARRAY := STRING_TO_ARRAY(UPPER(IN_CRTST_CODIGO), ' ');
	TMP_FT_LENGTH := ARRAY_LENGTH(TMP_TEXT_ARRAY, 1);
	
	IF (TMP_FT_LENGTH > 0) THEN
		FOR I IN 1..TMP_FT_LENGTH LOOP
			IF (I > 2) THEN
				TMP_SQL_TIPOS = TMP_SQL_TIPOS||' OR ';
			END IF;
			IF(TMP_TEXT_ARRAY[I] = 'SIN') THEN
				TMP_SW_SIN = TRUE;
			ELSE
				TMP_SQL_TIPOS = 'CRTST_CODIGO = '||QUOTE_LITERAL(TMP_TEXT_ARRAY[I]);
			END IF;
		END LOOP;
	END IF;
	IF(IN_CRTST_CODIGO IS NOT NULL AND LENGTH(IN_CRTST_CODIGO) > 0) THEN
		TMP_SQL_RESIDENCIAS = 'OR RSD.CRRSD_CODIGO IS NOT NULL AND RSD.CRTST_CODIGO IN (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE '||TMP_SQL_TIPOS||'UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT CRTST_CODIGO  FROM TIPO)';
	END IF;
	IF (TMP_SW_SIN) THEN
		IF (TMP_SQL_RESIDENCIAS IS NULL) THEN
			TMP_SQL_RESIDENCIAS = '';
		END IF;
		TMP_SQL_RESIDENCIAS = TMP_SQL_RESIDENCIAS||' OR RSD.CRRSD_CODIGO IS NULL';
	END IF;
	STMT_SQL:='SELECT COUNT(DISTINCT(PRS.CRPER_CODIGO)) 
	FROM SII.CGG_RES_PERSONA PRS 
	LEFT JOIN SII.CGG_RES_RESIDENCIA RSD ON RSD.CRPER_CODIGO = PRS.CRPER_CODIGO AND RSD.CRRSD_VIGENTE
	WHERE CRPER_ESTADO AND (NOT CRPER_ESTADO_INTERFECTO OR CRPER_ESTADO_INTERFECTO IS NULL) AND
		(NOT '||IN_CARNET||' OR PRS.CRPER_NUMERO_RESIDENCIA IS NOT NULL) AND
		(LENGTH('||QUOTE_LITERAL(IN_IDENTIFICACION)||') = 0 OR PRS.CRPER_NUMERO_RESIDENCIA = '||QUOTE_LITERAL(IN_IDENTIFICACION)||' OR PRS.CRPER_NUM_DOC_IDENTIFIC = '||QUOTE_LITERAL(IN_IDENTIFICACION)||') AND
		('||QUOTE_LITERAL(IN_CRTST_CODIGO)||' IS NULL OR LENGTH('||QUOTE_LITERAL(IN_CRTST_CODIGO)||') = 0 '||TMP_SQL_RESIDENCIAS||') AND
		('||QUOTE_LITERAL(IN_FIND_TEXT)||' IS NULL OR LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR PRS.crper_index @@ plainto_tsquery('||QUOTE_LITERAL(IN_FIND_TEXT)||'))';
	
	EXECUTE STMT_SQL INTO TMP_ROWS;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRPER_HUELLA_IMAGEN IMAGEN EN FORMATO JPG DE LAS HUELLAS DACTILARES DE LA PERSONA. LAS IMAGENES ESTAN ORDENADAS CONFORME A UNA MATRIZ DE 5X2. SUPERIOR: MANO DERECHA, INFERIOR: MANO IZQUIERDA; DE IZQUIERDA A DERECHA DESDE PULGAR A MENIQUE; RESOLUCION: 248x292 PXL CADA IMAGEN.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_UPDATE_HUELLA_IMG(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE,
IN IN_CRPER_HUELLA_DACTILAR SII.CGG_RES_PERSONA.CRPER_HUELLA_DACTILAR%TYPE,
IN IN_CRPER_HUELLA_IMAGEN SII.CGG_RES_PERSONA.CRPER_HUELLA_IMAGEN%TYPE,
IN IN_CRPER_HUELLA_CADENA SII.CGG_RES_PERSONA.CRPER_HUELLA_CADENA%TYPE

)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA SET
		CRPER_HUELLA_DACTILAR = IN_CRPER_HUELLA_DACTILAR, 
		CRPER_HUELLA_IMAGEN = IN_CRPER_HUELLA_IMAGEN, 
		CRPER_HUELLA_CADENA = IN_CRPER_HUELLA_CADENA
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_RES_PERSONA_SELECT_NUM_DOC
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA EN BASE A SU NUMERO DE IDENTIFICADION UNICO.
* @param IN_CRPER_NUM_DOC_IDENTIFIC NUMERO DE DOCUMENTO DE IDENTIFICACON DE LA PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_SELECT_NUM_DOC(
IN IN_CRPER_NUM_DOC_IDENTIFIC SII.CGG_RES_PERSONA.CRPER_NUM_DOC_IDENTIFIC%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPER_CODIGO, 
		CRECV_CODIGO, 
		CRDID_CODIGO, 
		CRTSG_CODIGO, 
		CGNCN_CODIGO, 
		CPRR_CODIGO, 
		CCTN_CODIGO, 
		CGG_CCTN_CODIGO, 
		CRPER_NOMBRES, 
		CRPER_APELLIDO_PATERNO, 
		CRPER_APELLIDO_MATERNO, 
		CRPER_NUM_DOC_IDENTIFIC, 
		CRPER_FECHA_NACIMIENTO, 
		CRPER_LUGAR_NACIMIENTO, 
		CRPER_GENERO, 
		CRPER_OBSERVACIONES, 
		CRPER_NUMERO_RESIDENCIA, 
		CRPER_FOTO, 
		CRPER_FOTO_CURRICULUM, 
		CRPER_HUELLA_DACTILAR, 
		CRPER_FIRMA, 
		CRPER_AUTORIZADO, 
		CRPER_NUMERO_EXPEDIENTE, 
		CRPER_FECHA_ARCHIVO, 
		CRPER_EMPLEADO, 
		CRPER_FECHA_ULTIMO_EMPLEO, 
		CRPER_ASPIRACION_SALARIAL, 
		CRPER_CUPO_VEHICULAR, 
		CRPER_TIPO_PERSONA, 
		CRPER_ESTADO_INTERFECTO, 
		CRPER_FECHA_DEFUNCION, 
		CRPER_NUMERO_ACTA, 
		CRPER_TIPO, 
		CRPER_ATENCION_CLIENTE, 
		CRPER_ESTADO, 
		CRPER_FECHA_INSERT, 
		CRPER_USUARIO_INSERT, 
		CRPER_FECHA_UPDATE, 
		CRPER_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA
	WHERE CRPER_ESTADO = TRUE AND 
		CRPER_NUM_DOC_IDENTIFIC = IN_CRPER_NUM_DOC_IDENTIFIC;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION F_CGG_RES_PERSONA_SELECT_NOMBRES
*SELECCION EL NOMBRE Y APELLIDOS DE UNA PERSONAL POR SU CODIGO.
*@param IN_CRPER_CODIGO CODIGO DE PERSONA
*@return NOMBRE DE LA PERSONA.
*/
CREATE OR REPLACE FUNCTION F_CGG_RES_PERSONA_SELECT_NOMBRES(IN_CRPER_CODIGO CHARACTER VARYING)
  RETURNS CHARACTER VARYING AS
$BODY$
DECLARE
	TMP_CRPER_AUSPICIANTE VARCHAR(500);
BEGIN
    SELECT COALESCE(P.CRPER_NOMBRES,'')||' '||COALESCE(P.CRPER_APELLIDO_PATERNO,'')||' '||COALESCE(P.CRPER_APELLIDO_MATERNO,'') 		
	INTO TMP_CRPER_AUSPICIANTE
	FROM SII.CGG_RES_PERSONA P 
	WHERE P.CRPER_CODIGO= IN_CRPER_CODIGO;
	RETURN TMP_CRPER_AUSPICIANTE;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;


/**
* FUNCION SII.F_CGG_RES_DATOS_PERSONALES_BYID
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_DATOS_PERSONALES_BYID_ANT(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT		
		PER.CRPER_NOMBRES,
		PER.CRPER_APELLIDO_PATERNO,
		PER.CRPER_APELLIDO_MATERNO,
		PER.CRPER_NUM_DOC_IDENTIFIC,
		PER.CRPER_FECHA_NACIMIENTO,
		PER.CRPER_GENERO,
		PER.CRPER_NUMERO_RESIDENCIA,
		TSA.CRTSG_DESCRPCION,
		ECI.CRECV_DESCRPCION,		
		NAC.CGNCN_NACIONALIDAD,
		PAI.CPAIS_NOMBRE,
		PRO.CGPRV_NOMBRE,
		CAN.CCTN_NOMBRE,
		PER.CRPER_EMPLEADO,
		PER.CRPER_ASPIRACION_SALARIAL,
		PER.CRPER_NUMERO_RESIDENCIA,
		ILA.CGINF_HIJOS	
	FROM SII.CGG_RES_PERSONA PER LEFT JOIN SII.CGG_RES_ESTADO_CIVIL ECI ON(PER.CRECV_CODIGO=ECI.CRECV_CODIGO)
		LEFT JOIN SII.CGG_NACIONALIDAD NAC ON(NAC.CGNCN_CODIGO=PER.CGNCN_CODIGO)
		LEFT JOIN SII.CGG_PARROQUIA PAR ON(PAR.CPRR_CODIGO=PER.CPRR_CODIGO)
		LEFT JOIN SII.CGG_CANTON CAN ON (CAN.CCTN_CODIGO=PAR.CCTN_CODIGO)
		LEFT JOIN SII.CGG_PROVINCIA PRO ON(PRO.CGPRV_CODIGO=CAN.CGPRV_CODIGO)
		LEFT JOIN SII.CGG_PAIS PAI ON(PAI.CPAIS_CODIGO=PRO.CPAIS_CODIGO)
		LEFT JOIN SII.CGG_RES_TIPO_SANGUINEO TSA ON(TSA.CRTSG_CODIGO=PER.CRTSG_CODIGO)
		LEFT  JOIN SII.CGG_GEM_INFORMACION_LABORAL ILA ON(ILA.CRPER_CODIGO=PER.CRPER_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE AND 
		PER.CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_SELECTFOTOBYID
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_SELECTFOTOBYID(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT		
		encode(CRPER_FOTO_CURRICULUM,'base64') AS FOTO_CURRICULUM		
	FROM SII.CGG_RES_PERSONA
	WHERE CRPER_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_SELECT_HUELLAS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_PERSONA QUE TENGAN REGISTRADO LA HUELLA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_SELECT_HUELLAS(
)RETURNS REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPER_HUELLA_DACTILAR, 
		CRPER_NUM_DOC_IDENTIFIC IDENTIFICADOR
	FROM SII.CGG_RES_PERSONA
	WHERE CRPER_ESTADO AND
		LENGTH(CRPER_HUELLA_DACTILAR) > 0;
	RETURN TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_SELECT_HUELLAS
* SELECCIONA EL REGISTRO DE LA TABLA SII.CGG_RES_PERSONA QUE TENGA REGISTRADO LA HUELLA Y COINCIDA CON EL CRITERIO DE BUSQUEDA.
* @param IN_IDENTIFICACION INFORMACION QUE IDENTIFICA A UNA PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_SELECT_HUELLAS(
IN IN_IDENTIFICACION VARCHAR
)RETURNS REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPER_CODIGO,
		CRPER_NUMERO_RESIDENCIA, 
		CRPER_NUM_DOC_IDENTIFIC,
		CRPER_HUELLA_DACTILAR
	FROM SII.CGG_RES_PERSONA
	WHERE CRPER_ESTADO AND
		LENGTH(CRPER_HUELLA_DACTILAR) > 0 AND 
		(CRPER_NUMERO_RESIDENCIA = IN_IDENTIFICACION OR CRPER_NUM_DOC_IDENTIFIC = IN_IDENTIFICACION);
	RETURN TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
/**
* FUNCION SII.F_CGG_RES_PERSONA_SELECT_OBSERVADO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA QUE TENGAN REGISTRADA UNA OBSERVACION.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_SELECT_OBSERVADO(IN_USER_NAME CHARACTER VARYING,
IN_START_INDEX INTEGER,
IN_LIMIT INTEGER,
IN_SORT_FIELD_NAME CHARACTER VARYING, 
IN_DIRECTION CHARACTER VARYING,
IN_FIND_TEXT TEXT)
  RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		DISTINCT
		CRPER.CRPER_CODIGO, 
		CRPER.CRPER_NOMBRES, 
		CRPER.CRPER_APELLIDO_PATERNO, 
		CRPER.CRPER_APELLIDO_MATERNO, 
		CRPER.CRPER_NUM_DOC_IDENTIFIC, 
		CRPER.CRPER_FECHA_NACIMIENTO, 
		CRPER.CRPER_LUGAR_NACIMIENTO, 
		CRDID.CRDID_DESCRIPCION,
		CRPER.CRPER_GENERO, 
		CRPER.CRPER_OBSERVACIONES, 
		CRPER.CRPER_NUMERO_RESIDENCIA, 
		CRPER.CRPER_AUTORIZADO, 
		CRPER.CRPER_NUMERO_EXPEDIENTE, 
		CRPER.CRPER_FECHA_ARCHIVO ,
		CRRSD.CRTST_CODIGO,
		CRRSD.CRRSD_MODALIDAD,
		CRTST.CRTST_DESCRIPCION TIPO_RESIDENCIA
	FROM CGG_RES_OBSERVADO CROBS
	INNER JOIN CGG_RES_PERSONA CRPER ON (CROBS.CRPER_CODIGO = CRPER.CRPER_CODIGO AND CROBS.CROBS_RESUELTO = 0 AND CRPER.CRPER_ESTADO = TRUE )
	LEFT JOIN CGG_RES_DOCUMENTO_IDENTIFICACIO CRDID ON (CRPER.CRDID_CODIGO = CRDID.CRDID_CODIGO)
	LEFT JOIN CGG_RES_RESIDENCIA CRRSD ON (CRPER.CRPER_CODIGO = CRRSD.CRPER_CODIGO AND CRRSD.CRRSD_ESTADO = TRUE AND CRRSD.CRRSD_VIGENTE = TRUE)
	LEFT JOIN CGG_RES_TIPO_SOLICITUD_TRAMITE CRTST ON (CRTST.CRTST_CODIGO = CRRSD.CRTST_CODIGO)
	WHERE SII.F_STRING_IN('''||IN_FIND_TEXT||''',	
	COALESCE(CRPER.CRPER_NOMBRES,'''')||'' ''||
	COALESCE(CRPER.CRPER_APELLIDO_PATERNO,'''')||'' ''||
	COALESCE(CRPER.CRPER_APELLIDO_MATERNO,'''')||'' ''||
	COALESCE(CRPER.CRPER_NUM_DOC_IDENTIFIC,'''')
	) = 1
	 LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	--ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_RES_PERSONA_COUNT_OBSERVADO
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_PERSONA QUE TENGAN REGISTRADA UNA OBSERVACION.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_COUNT_OBSERVADO(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(distinct CRPER.CRPER_CODIGO) INTO TMP_ROWS
	FROM CGG_RES_OBSERVADO CROBS
	INNER JOIN CGG_RES_PERSONA CRPER ON (CROBS.CRPER_CODIGO = CRPER.CRPER_CODIGO AND CROBS.CROBS_RESUELTO = 0 AND CRPER.CRPER_ESTADO = TRUE )
	LEFT JOIN CGG_RES_DOCUMENTO_IDENTIFICACIO CRDID ON (CRPER.CRDID_CODIGO = CRDID.CRDID_CODIGO)
	LEFT JOIN CGG_RES_RESIDENCIA CRRSD ON (CRPER.CRPER_CODIGO = CRRSD.CRPER_CODIGO AND CRRSD.CRRSD_ESTADO = TRUE AND CRRSD.CRRSD_VIGENTE = TRUE)
	LEFT JOIN CGG_RES_TIPO_SOLICITUD_TRAMITE CRTST ON (CRTST.CRTST_CODIGO = CRRSD.CRTST_CODIGO)
	WHERE SII.F_STRING_IN(IN_FIND_TEXT,	
	COALESCE(CRPER.CRPER_NOMBRES,'')||' '||
	COALESCE(CRPER.CRPER_APELLIDO_PATERNO,'')||' '||
	COALESCE(CRPER.CRPER_APELLIDO_MATERNO,'')||' '||
	COALESCE(CRPER.CRPER_NUM_DOC_IDENTIFIC,'')
	) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_RES_PERSONA_UPDATE_FIRMA
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRPER_FIRMA IMAGEN EN FORMATO JPG DE LA FIRMA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_UPDATE_FIRMA(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE,
IN IN_CRPER_FIRMA SII.CGG_RES_PERSONA.CRPER_FIRMA%TYPE

)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA SET
		CRPER_FIRMA = IN_CRPER_FIRMA
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_UPDATE_FOTO
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRPER_FOTO IMAGEN EN FORMATO JPG DE LA FOTO.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_UPDATE_FOTO(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE,
IN IN_CRPER_FOTO SII.CGG_RES_PERSONA.CRPER_FOTO%TYPE

)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA SET
		CRPER_FOTO = IN_CRPER_FOTO
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_RES_PERSONA_SELECT_ADJUNTOS_IDENTIFICACION_BYID
* SELECCIONA LOS CAMPOS DE FOTOGRAFIA, HUELLA Y FIRMA  EN LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_SELECT_ADJUNTOS_IDENTIFICACION_BYID(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT		
		encode(CRPER_FOTO,'base64') AS CRPER_FOTO,
		encode(CRPER_FIRMA,'base64') AS CRPER_FIRMA,
		encode(CRPER_HUELLA_IMAGEN,'base64') AS CRPER_HUELLA_IMAGEN,
		CRPER_HUELLA_DACTILAR,
		CRPER_HUELLA_CADENA
	FROM SII.CGG_RES_PERSONA
	WHERE CRPER_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_RES_PERSONA_SELECT_DATOS_AUSPICIANTE
* SELECCIONA LOS DATOS DE PERSONA DE ACUERSO A SU NOMBRE DE USUARIO.
* @param IN_USER_NAME NOMBRE DE USUARIO IDENTIFICATIVO DE LA PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_SELECT_DATOS_AUSPICIANTE(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT CASE 
		WHEN CUSU.CRPJR_CODIGO IS NOT NULL THEN TRUE
		ELSE FALSE
		END CRPJR_IS_USER,
		CRPER.CRPER_CODIGO,
		CRPJR.CRPJR_CODIGO,
		CRPER_NUM_DOC_IDENTIFIC,
		CRPER_NUMERO_RESIDENCIA,
		CRPER_NOMBRES||' '||CRPER_APELLIDO_PATERNO||' '||CRPER_APELLIDO_MATERNO AS CRPER_NOMBRES,
		CRECV.CRECV_DESCRPCION,
		CGNCN.CGNCN_NACIONALIDAD,
		CPAIS.CPAIS_NOMBRE AS CPAIS_RESIDENCIA,
		CRDID.CRDID_DESCRIPCION,
		CRPJR.CRPJR_RAZON_SOCIAL,
		CRPER.CRPER_FECHA_NACIMIENTO::DATE
		FROM CGG_RES_PERSONA CRPER
		INNER JOIN CGG_USUARIO CUSU ON (CRPER.CRPER_CODIGO = CUSU.CRPER_CODIGO)
		LEFT JOIN CGG_RES_PERSONA_JURIDICA CRPJR ON (CRPJR.CRPJR_CODIGO = CUSU.CRPJR_CODIGO)
		LEFT JOIN CGG_RES_ESTADO_CIVIL CRECV ON (CRECV.CRECV_CODIGO = CRPER.CRECV_CODIGO)
		LEFT JOIN CGG_NACIONALIDAD CGNCN ON (CGNCN.CGNCN_CODIGO = CRPER.CGNCN_CODIGO)
		LEFT JOIN CGG_RES_DOCUMENTO_IDENTIFICACIO CRDID ON (CRDID.CRDID_CODIGO = CRPER.CRDID_CODIGO)
		LEFT JOIN CGG_PAIS CPAIS ON (CPAIS.CPAIS_CODIGO = CRPER.CGG_CPAIS_CODIGO)
		WHERE CUSU.CUSU_NOMBRE_USUARIO = IN_USER_NAME;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
