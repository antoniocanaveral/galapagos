/**
* FUNCION F_CGG_DHU_ASISTENTE_CURSO_SELECT_PAGE
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_ASISTENTE_CURSO, RELACIONADA CON LAS TABLAS CGG_RES_TRAMITE,CGG_RES_RESIDENCIA,CGG_RES_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ASISTENTE_CURSO_SELECT_PAGE(IN_USER_NAME CHARACTER VARYING, IN_START_INDEX INTEGER, IN_LIMIT INTEGER, IN_SORT_FIELD_NAME CHARACTER VARYING, IN_DIRECTION CHARACTER VARYING, IN_FIND_TEXT TEXT)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT AC.CRPER_CODIGO,
		AC.CDASC_CODIGO, 
		AC.CDCUR_CODIGO, 
		CR.CDCUR_DESCRIPCION,
		AC.CSCTP_CODIGO, 
		SP.CSCTP_NOMBRE,
		AC.CUSU_CODIGO, 
	       (SELECT TDI.CRDID_DESCRIPCION FROM SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI WHERE TDI.CRDID_CODIGO =PER.CRDID_CODIGO)AS CRDID_TIPO,
	       (SELECT CGNCN_NACIONALIDAD FROM SII.CGG_NACIONALIDAD WHERE CGNCN_CODIGO=PER.CGNCN_CODIGO)AS NACIONALIDAD,
	       PER.CRPER_NOMBRES,
	       PER.CRPER_APELLIDO_PATERNO,
	       PER.CRPER_APELLIDO_MATERNO,
	       PER.CRPER_NUM_DOC_IDENTIFIC,
	       PER.CRPER_FECHA_NACIMIENTO,
	       PER.CRPER_LUGAR_NACIMIENTO,
	       PER.CRPER_NUMERO_RESIDENCIA,
	       PER.CRPER_EMPLEADO,
	       (SELECT PR.CRPER_NOMBRES||'' ''||PR.CRPER_APELLIDO_PATERNO||'' ''||PR.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PR WHERE PR.CRPER_CODIGO=TRA.CRPER_CODIGO)AS CRPER_AUSPICIANTE,
	       /*(SELECT CGCNF_CONFIGURACION 
	       FROM CGG_CONFIGURACION C
	       WHERE CGCNF_VALOR_CADENA = (SELECT ST.CRTST_CODIGO FROM CGG_RES_TIPO_SOLICITUD_TRAMITE ST 
	       INNER JOIN CGG_RES_RESIDENCIA RS ON (RS.CRTST_CODIGO = ST.CRTST_CODIGO)
	       WHERE RS.CRRSD_VIGENTE = TRUE  AND RS.CRPER_CODIGO=PER.CRPER_CODIGO)OR CGCNF_VALOR_CADENA = (SELECT ST.CGG_CRTST_CODIGO FROM CGG_RES_TIPO_SOLICITUD_TRAMITE ST 
	       INNER JOIN CGG_RES_RESIDENCIA RS ON (RS.CRTST_CODIGO = ST.CRTST_CODIGO)
	       WHERE RS.CRRSD_VIGENTE = TRUE AND RS.CRPER_CODIGO=PER.CRPER_CODIGO))TIPO_RESIDENCIA,*/
		   SII.F_TRAMITE_TIPO(RS.CRTST_CODIGO) TIPO_RESIDENCIA,
	       AC.CDASC_ACTIVIDAD_REALIZADA, 
		AC.CDASC_NOTA_FINAL, 
		AC.CDASC_NUMERO_CERTIFICADO, 
		AC.CDASC_FECHA_EMISION_CERTIFICADO, 
		AC.CDASC_ESTADO_INSCRIPCION, 
		TC.CDTCR_CODIGO,
		AC.CDASC_APROBADO, 
		AC.CDASC_ESTADO, 
		AC.CDASC_FECHA_INSERT, 
		AC.CDASC_USUARIO_INSERT, 
		AC.CDASC_FECHA_UPDATE, 
		AC.CDASC_USUARIO_UPDATE 	
	       FROM SII.CGG_DHU_ASISTENTE_CURSO AC
	       INNER JOIN SII.CGG_DHU_CURSO CR ON(AC.CDCUR_CODIGO=CR.CDCUR_CODIGO)
		   INNER JOIN SII.CGG_DHU_TIPO_CURSO TC ON (CR.CDTCR_CODIGO = TC.CDTCR_CODIGO)
	       INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=AC.CRPER_CODIGO)
	       INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=AC.CSCTP_CODIGO)							
	       INNER JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO)
	       INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = RS.CRTST_CODIGO)	
	       LEFT JOIN SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI ON(TDI.CRDID_CODIGO=PER.CRDID_CODIGO)
	       LEFT JOIN SII.CGG_RES_TRAMITE TRA ON(TRA.CRTRA_CODIGO=RS.CRTRA_CODIGO)
	WHERE AC.CDASC_ESTADO= TRUE 
	AND RS.CRRSD_VIGENTE = TRUE 
	AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN CR.CDCUR_DESCRIPCION IS NULL THEN '''' ELSE CR.CDCUR_DESCRIPCION END ||'' ''||
	CASE WHEN PER.CRPER_NUM_DOC_IDENTIFIC IS NULL THEN '''' ELSE PER.CRPER_NUM_DOC_IDENTIFIC END ||'' ''||
	CASE WHEN PER.CRPER_NOMBRES IS NULL THEN '''' ELSE PER.CRPER_NOMBRES END ||'' ''||
	CASE WHEN PER.CRPER_APELLIDO_PATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_PATERNO END ||'' ''||
	CASE WHEN PER.CRPER_APELLIDO_MATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_MATERNO END ||'' ''||
	
	CASE WHEN AC.CDASC_CODIGO IS NULL THEN '''' ELSE AC.CDASC_CODIGO END ||'' ''||
	CASE WHEN AC.CRPER_CODIGO IS NULL THEN '''' ELSE AC.CRPER_CODIGO END ||'' ''||
	CASE WHEN AC.CDCUR_CODIGO IS NULL THEN '''' ELSE AC.CDCUR_CODIGO END ||'' ''||
	CASE WHEN AC.CSCTP_CODIGO IS NULL THEN '''' ELSE AC.CSCTP_CODIGO END ||'' ''||
	CASE WHEN AC.CUSU_CODIGO IS NULL THEN '''' ELSE AC.CUSU_CODIGO END ||'' ''||
	CASE WHEN AC.CDASC_ACTIVIDAD_REALIZADA IS NULL THEN '''' ELSE AC.CDASC_ACTIVIDAD_REALIZADA END ||'' ''||
	CASE WHEN AC.CDASC_NOTA_FINAL IS NULL THEN 0 ELSE AC.CDASC_NOTA_FINAL END ||'' ''||
	CASE WHEN AC.CDASC_NUMERO_CERTIFICADO IS NULL THEN '''' ELSE AC.CDASC_NUMERO_CERTIFICADO END ||'' ''||
	CASE WHEN AC.CDASC_FECHA_EMISION_CERTIFICADO IS NULL THEN CURRENT_TIMESTAMP ELSE AC.CDASC_FECHA_EMISION_CERTIFICADO END ||'' ''||
	CASE WHEN AC.CDASC_ESTADO_INSCRIPCION IS NULL THEN 0 ELSE AC.CDASC_ESTADO_INSCRIPCION END ||'' ''||
	CASE WHEN AC.CDASC_APROBADO IS NULL THEN 0 ELSE AC.CDASC_APROBADO END ||'' ''||
	CASE WHEN AC.CDASC_ESTADO IS NULL THEN FALSE ELSE AC.CDASC_ESTADO END ||'' ''||
	CASE WHEN AC.CDASC_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE AC.CDASC_FECHA_INSERT END ||'' ''||
	CASE WHEN AC.CDASC_USUARIO_INSERT IS NULL THEN '''' ELSE AC.CDASC_USUARIO_INSERT END ||'' ''||
	CASE WHEN AC.CDASC_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE AC.CDASC_FECHA_UPDATE END ||'' ''||
	CASE WHEN AC.CDASC_USUARIO_UPDATE IS NULL THEN '''' ELSE AC.CDASC_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;

/**
* FUNCION F_CGG_DHU_CURSO_INSCRIPCION_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_CURSO. 
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION F_CGG_DHU_CURSO_INSCRIPCION_SELECT(
IN_USER_NAME CHARACTER VARYING, 
IN_START_INDEX INTEGER, 
IN_LIMIT INTEGER, 
IN_SORT_FIELD_NAME CHARACTER VARYING, 
IN_DIRECTION CHARACTER VARYING, 
IN_FIND_TEXT TEXT, 
IN_CDTCR_CODIGO CHARACTER VARYING)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	TOTALCADENA INT;
	CODIGOCURSO TEXT[];
	TMPWHERE TEXT;
BEGIN
	CODIGOCURSO := STRING_TO_ARRAY(IN_CDTCR_CODIGO, ';');
	TOTALCADENA := ARRAY_LENGTH(CODIGOCURSO, 1);	
	TMPWHERE:='';
	FOR I IN 1..TOTALCADENA LOOP
			TMPWHERE := TMPWHERE||'CU.CDTCR_CODIGO='''||CODIGOCURSO[I]||'''';
			IF (I < TOTALCADENA) THEN
				TMPWHERE := TMPWHERE||' OR ';
			END IF;
	END LOOP;	
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CU.CDCUR_CODIGO, 
		CU.CDTCR_CODIGO, 
		TC.CDTCR_NOMBRE,
		TC.CDTCR_TIPO_RESIDENTE,
		CU.CCTN_CODIGO, 
		CN.CCTN_NOMBRE, 
		CU.CDITR_CODIGO,
		SP.CSCTP_NOMBRE,
        ITR.CDITR_NOMBRE,		
		CU.CRPER_CODIGO, 
		(SELECT PER.CRPER_NOMBRES||'' ''||PER.CRPER_APELLIDO_PATERNO||'' ''||PER.CRPER_APELLIDO_MATERNO)AS CRPER_INSTRUCTOR,
		CU.CDCUR_DESCRIPCION,
		CU.CDCUR_FECHA_PREVISTA_INICIO,
		CU.CDCUR_FECHA_INICIO, 
		CU.CDCUR_FECHA_CULMINACION, 
		CU.CDCUR_NUMERO_ASISTENTE, 
		CU.CDCUR_ESTADO_CURSO,
		CU.CDCUR_ESTADO, 
		CU.CDCUR_FECHA_INSERT, 
		CU.CDCUR_USUARIO_INSERT, 
		CU.CDCUR_FECHA_UPDATE, 
		CU.CDCUR_USUARIO_UPDATE,
		
		CU.CDCUR_NUMERO_MODULOS,
		CU.CDCUR_CONTENIDO,
		CU.CDCUR_INSTITUCION,
		CU.CDCUR_ESTABLECIMIENTO, 
		CU.CDCUR_NUMERO_HORAS, 
		CU.CDCUR_COSTO, 
		CU.CDCUR_FECHA_PREVISTA_INICIO,
		CU.CDCUR_FECHA_PREVISTA_CULMINACION,
		CU.CDCUR_HORARIO, 
		CU.CDCUR_HORARIO1,
		CU.CDCUR_VALORACION
		
	FROM SII.CGG_DHU_CURSO CU
	INNER JOIN SII.CGG_CANTON CN ON (CN.CCTN_CODIGO=CU.CCTN_CODIGO)
	INNER JOIN SII.CGG_DHU_TIPO_CURSO TC ON(TC.CDTCR_CODIGO=CU.CDTCR_CODIGO)
	INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=CU.CSCTP_CODIGO)
	INNER JOIN SII.CGG_DHU_INSTITUCION_RESPONSABLE ITR ON(ITR.CDITR_CODIGO=CU.CDITR_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=CU.CRPER_CODIGO)
	WHERE CDCUR_ESTADO = TRUE AND (CU.CDCUR_ESTADO_CURSO=0 OR CU.CDCUR_ESTADO_CURSO=1)AND '||TMPWHERE||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(TC.CDTCR_NOMBRE,'''')||'' ''||
	COALESCE(CN.CCTN_NOMBRE,'''')||'' ''||
	COALESCE(TC.CDTCR_NOMBRE,'''')||'' ''||
	COALESCE(SP.CSCTP_NOMBRE,'''')||'' ''||
	COALESCE(ITR.CDITR_NOMBRE,'''')||'' ''||
	COALESCE(CU.CDCUR_DESCRIPCION, '''')||'' ''||
	COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')||'' ''||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_INICIO,CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_FECHA_CULMINACION, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_CULMINACION,CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_NUMERO_ASISTENTE, 0)||'' ''||
	COALESCE(CU.CDCUR_ESTADO_CURSO, 0)||'' ''||
	COALESCE(CU.CDCUR_ESTADO, FALSE)||'' ''||
	COALESCE(CU.CDCUR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_USUARIO_INSERT, '''')||'' ''||
	COALESCE(CU.CDCUR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;


/**
* FUNCION F_CGG_DHU_CURSO_INSCRIPCION_SELECT_COUNT
* CONTABILIZA LOS REGISTRO EN LA TABLA SII.CGG_DHU_BECA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return  TMP_ROWS 
*/
CREATE OR REPLACE FUNCTION F_CGG_DHU_CURSO_INSCRIPCION_SELECT_COUNT(IN_FIND_TEXT TEXT)
  RETURNS INTEGER AS
$BODY$
DECLARE
	TMP_ROWS INT2;
BEGIN
	
	SELECT COUNT(*)	
	FROM SII.CGG_DHU_CURSO CU
	INNER JOIN SII.CGG_CANTON CN ON (CN.CCTN_CODIGO=CU.CCTN_CODIGO)
	INNER JOIN SII.CGG_DHU_TIPO_CURSO TC ON(TC.CDTCR_CODIGO=CU.CDTCR_CODIGO)
	INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=CU.CSCTP_CODIGO)
	INNER JOIN SII.CGG_DHU_INSTITUCION_RESPONSABLE ITR ON(ITR.CDITR_CODIGO=CU.CDITR_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=CU.CRPER_CODIGO)
	WHERE CDCUR_ESTADO = TRUE AND (CU.CDCUR_ESTADO_CURSO=0 OR CU.CDCUR_ESTADO_CURSO=1)AND '||TMPWHERE||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(TC.CDTCR_NOMBRE,'''')||' '||
	COALESCE(CN.CCTN_NOMBRE,'''')||' '||
	COALESCE(TC.CDTCR_NOMBRE,'''')||' '||
	COALESCE(SP.CSCTP_NOMBRE,'''')||' '||
	COALESCE(ITR.CDITR_NOMBRE,'''')||' '||
	COALESCE(CU.CDCUR_DESCRIPCION, '''')||' '||
	COALESCE(PER.CRPER_NOMBRES,'''')||' '||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||' '||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')||' '||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_INICIO,CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_FECHA_CULMINACION, CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_CULMINACION,CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_NUMERO_ASISTENTE, 0)||' '||
	COALESCE(CU.CDCUR_ESTADO_CURSO, 0)||' '||
	COALESCE(CU.CDCUR_ESTADO, FALSE)||' '||
	COALESCE(CU.CDCUR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_USUARIO_INSERT, '''')||' '||
	COALESCE(CU.CDCUR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_USUARIO_UPDATE, '''')) = 1;
	
	RETURN TMP_ROWS;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;

/**
* FUNCION F_CGG_DHU_ASISTENTE_CURSO_RESIDENTE
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA, RELACIONADA CON LAS TABLAS CGG_TRAMITE,CGG_RES_RESIDENCIA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION F_CGG_DHU_ASISTENTE_CURSO_RESIDENTE(IN_USER_NAME CHARACTER VARYING, IN_START_INDEX INTEGER, IN_LIMIT INTEGER, IN_SORT_FIELD_NAME CHARACTER VARYING, IN_DIRECTION CHARACTER VARYING, IN_FIND_TEXT TEXT)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	TMP_SQL TEXT;
BEGIN
	
	TMP_SQL := 'SELECT PER.CRPER_CODIGO,
	       (SELECT TDI.CRDID_DESCRIPCION FROM SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI WHERE TDI.CRDID_CODIGO =PER.CRDID_CODIGO)AS CRDID_TIPO,
	       (SELECT CGNCN_NACIONALIDAD FROM SII.CGG_NACIONALIDAD WHERE CGNCN_CODIGO=PER.CGNCN_CODIGO)AS NACIONALIDAD,
	       PER.CRPER_NOMBRES,
	       PER.CRPER_APELLIDO_PATERNO,
	       PER.CRPER_APELLIDO_MATERNO,
	       PER.CRPER_NUM_DOC_IDENTIFIC,
	       PER.CRPER_FECHA_NACIMIENTO,
	       (SELECT CCTN.CCTN_NOMBRE FROM SII.CGG_CANTON CCTN WHERE CCTN.CCTN_CODIGO =PER.CRPER_LUGAR_NACIMIENTO)AS CRPER_LUGAR_NACIMIENTO,
		   0 AS EDAD,
	       PER.CRPER_NUMERO_RESIDENCIA,
	       PER.CRPER_EMPLEADO,
	       (PR.CRPER_NOMBRES||'' ''||PR.CRPER_APELLIDO_PATERNO||'' ''||PR.CRPER_APELLIDO_MATERNO)AS CRPER_AUSPICIANTE,
	       (SII.f_tramite_tipo(RS.CRTST_CODIGO))TIPO_RESIDENCIA,
	       (SELECT CGCNF_CODIGO FROM CGG_CONFIGURACION
		WHERE CGCNF_VALOR_CADENA=(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
		SELECT TS.CRTST_CODIGO, TS.CGG_CRTST_CODIGO, TS.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TS WHERE (TS.CRTST_CODIGO = RS.CRTST_CODIGO)
		UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
		WHERE TP.CGG_CRTST_CODIGO = TST.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO WHERE CGG_CRTST_CODIGO IS NULL ) )AS CODIGO
       FROM SII.CGG_RES_PERSONA PER 							
       INNER JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO)
       INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = RS.CRTST_CODIGO)	
       LEFT JOIN SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI ON(TDI.CRDID_CODIGO=PER.CRDID_CODIGO)
       LEFT JOIN SII.CGG_RES_TRAMITE TRA ON(TRA.CRTRA_CODIGO=RS.CRTRA_CODIGO)
       LEFT JOIN SII.CGG_RES_PERSONA PR ON(PR.CRPER_CODIGO=TRA.CRPER_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE 
	AND RS.CRRSD_VIGENTE = TRUE  AND
	SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN PER.CRPER_CODIGO IS NULL THEN '''' ELSE PER.CRPER_CODIGO END ||'' ''||
	CASE WHEN PER.CRDID_CODIGO IS NULL THEN '''' ELSE PER.CRDID_CODIGO END ||'' ''||
	CASE WHEN TDI.CRDID_DESCRIPCION IS NULL THEN '''' ELSE TDI.CRDID_DESCRIPCION END ||'' ''||
	CASE WHEN PER.CRPER_NOMBRES IS NULL THEN '''' ELSE PER.CRPER_NOMBRES END ||'' ''||
	CASE WHEN PER.CRPER_APELLIDO_PATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_PATERNO END ||'' ''||
	CASE WHEN PER.CRPER_APELLIDO_MATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_MATERNO END ||'' ''||
	CASE WHEN PER.CRPER_NUM_DOC_IDENTIFIC IS NULL THEN '''' ELSE PER.CRPER_NUM_DOC_IDENTIFIC END ||'' ''||
	CASE WHEN PER.CRPER_NUMERO_RESIDENCIA IS NULL THEN '''' ELSE PER.CRPER_NUMERO_RESIDENCIA END ||'' ''||
	CASE WHEN PR.CRPER_NOMBRES IS NULL THEN '''' ELSE PR.CRPER_NOMBRES END ||'' ''||
	CASE WHEN PR.CRPER_APELLIDO_PATERNO IS NULL THEN '''' ELSE PR.CRPER_APELLIDO_PATERNO END ||'' ''||
	CASE WHEN PR.CRPER_APELLIDO_MATERNO IS NULL THEN '''' ELSE PR.CRPER_APELLIDO_MATERNO END) = 1
	AND  RS.CRTST_CODIGO IN 
	(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
		SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
	FROM CGG_CONFIGURACION
	WHERE CGCNF_CODIGO = ''03'') OR CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
	FROM CGG_CONFIGURACION
	WHERE CGCNF_CODIGO = ''04''))  UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION 
	FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
	WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	OPEN TMP_REF FOR EXECUTE TMP_SQL;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;



/**
* FUNCION F_CGG_DHU_ASISTENTE_CURSO_RESIDENTE_COUNT
* CONTABILIZA LOS REGISTROS DE LA TABLA SII.CGG_RES_PERSONA, RELACIONADA CON LAS TABLAS CGG_TRAMITE,CGG_RES_RESIDENCIA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TMP_ROWS
*/

CREATE OR REPLACE FUNCTION F_CGG_DHU_ASISTENTE_CURSO_RESIDENTE_COUNT(IN_FIND_TEXT TEXT)
  RETURNS INTEGER AS
$BODY$
DECLARE
TMP_ROWS INT2;
BEGIN
	
      SELECT COUNT(*) INTO TMP_ROWS
       FROM SII.CGG_RES_PERSONA PER 							
       INNER JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO)
       INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = RS.CRTST_CODIGO)	
       LEFT JOIN SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI ON(TDI.CRDID_CODIGO=PER.CRDID_CODIGO)
       LEFT JOIN SII.CGG_RES_TRAMITE TRA ON(TRA.CRTRA_CODIGO=RS.CRTRA_CODIGO)
       LEFT JOIN SII.CGG_RES_PERSONA PR ON(PR.CRPER_CODIGO=TRA.CRPER_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE 
	AND RS.CRRSD_VIGENTE = TRUE  AND
	SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN PER.CRPER_CODIGO IS NULL THEN '''' ELSE PER.CRPER_CODIGO END ||' '||
	CASE WHEN PER.CRDID_CODIGO IS NULL THEN '''' ELSE PER.CRDID_CODIGO END ||' '||
	CASE WHEN TDI.CRDID_DESCRIPCION IS NULL THEN '''' ELSE TDI.CRDID_DESCRIPCION END ||' '||
	CASE WHEN PER.CRPER_NOMBRES IS NULL THEN '''' ELSE PER.CRPER_NOMBRES END ||' '||
	CASE WHEN PER.CRPER_APELLIDO_PATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_PATERNO END ||' '||
	CASE WHEN PER.CRPER_APELLIDO_MATERNO IS NULL THEN '''' ELSE PER.CRPER_APELLIDO_MATERNO END ||' '||
	CASE WHEN PER.CRPER_NUM_DOC_IDENTIFIC IS NULL THEN '''' ELSE PER.CRPER_NUM_DOC_IDENTIFIC END ||' '||
	CASE WHEN PER.CRPER_NUMERO_RESIDENCIA IS NULL THEN '''' ELSE PER.CRPER_NUMERO_RESIDENCIA END ||' '||
	CASE WHEN PR.CRPER_NOMBRES IS NULL THEN '''' ELSE PR.CRPER_NOMBRES END ||' '||
	CASE WHEN PR.CRPER_APELLIDO_PATERNO IS NULL THEN '''' ELSE PR.CRPER_APELLIDO_PATERNO END ||' '||
	CASE WHEN PR.CRPER_APELLIDO_MATERNO IS NULL THEN '''' ELSE PR.CRPER_APELLIDO_MATERNO END) = 1
	AND  RS.CRTST_CODIGO IN 
	(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
		SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
	FROM CGG_CONFIGURACION
	WHERE CGCNF_CODIGO = '03') OR CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
	FROM CGG_CONFIGURACION
	WHERE CGCNF_CODIGO = '04'))  
	UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION 
	FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
	WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO);
	RETURN TMP_ROWS;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;


/**
* FUNCION F_CGG_DHU_ASISTENTE_RESIDENTE
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA, RELACIONADA CON LAS TABLAS CGG_TRAMITE,CGG_RES_RESIDENCIA.
* @param IN_NUM_DOC_IDENTIFIC CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION F_CGG_DHU_ASISTENTE_RESIDENTE(IN_CRPER_NUM_DOC_IDENTIFIC CHARACTER VARYING)
  RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR 
	SELECT PER.CRPER_CODIGO,
	       (SELECT TDI.CRDID_DESCRIPCION FROM SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI WHERE TDI.CRDID_CODIGO =PER.CRDID_CODIGO)AS CRDID_TIPO,
	       (SELECT CGNCN_NACIONALIDAD FROM SII.CGG_NACIONALIDAD WHERE CGNCN_CODIGO=PER.CGNCN_CODIGO)AS NACIONALIDAD,
	       PER.CRPER_NOMBRES,
	       PER.CRPER_APELLIDO_PATERNO,
	       PER.CRPER_APELLIDO_MATERNO,
	       PER.CRPER_NUM_DOC_IDENTIFIC,
	       PER.CRPER_FECHA_NACIMIENTO,
	       (SELECT CCTN.CCTN_NOMBRE FROM SII.CGG_CANTON CCTN WHERE CCTN.CCTN_CODIGO =PER.CRPER_LUGAR_NACIMIENTO)AS CRPER_LUGAR_NACIMIENTO,
		   0 AS EDAD,
	       PER.CRPER_NUMERO_RESIDENCIA,
	       PER.CRPER_EMPLEADO,
	       TRA.CRPER_CODIGO,
	       (SELECT PR.CRPER_NOMBRES||' '||PR.CRPER_APELLIDO_PATERNO||' '||PR.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PR WHERE PR.CRPER_CODIGO=TRA.CRPER_CODIGO)AS CRPER_AUSPICIANTE,
           (SII.f_tramite_tipo(RS.CRTST_CODIGO))TIPO_RESIDENCIA,
	       (SELECT CGCNF_CODIGO FROM CGG_CONFIGURACION
		WHERE CGCNF_VALOR_CADENA=(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
		SELECT TS.CRTST_CODIGO, TS.CGG_CRTST_CODIGO, TS.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TS WHERE (TS.CRTST_CODIGO = RS.CRTST_CODIGO)
		UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
		WHERE TP.CGG_CRTST_CODIGO = TST.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO WHERE CGG_CRTST_CODIGO IS NULL ) )AS CODIGO
	       FROM SII.CGG_RES_PERSONA PER 							
	       INNER JOIN SII.CGG_RES_RESIDENCIA RS ON (RS.CRPER_CODIGO = PER.CRPER_CODIGO)
	       INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = RS.CRTST_CODIGO)	
	       LEFT JOIN SII.CGG_RES_DOCUMENTO_IDENTIFICACIO TDI ON(TDI.CRDID_CODIGO=PER.CRDID_CODIGO)
	       LEFT JOIN SII.CGG_RES_TRAMITE TRA ON(TRA.CRTRA_CODIGO=RS.CRTRA_CODIGO)
	WHERE CRPER_ESTADO = TRUE 
	AND RS.CRRSD_VIGENTE = TRUE AND (PER.CRPER_NUM_DOC_IDENTIFIC=IN_CRPER_NUM_DOC_IDENTIFIC
        OR PER.CRPER_NUMERO_RESIDENCIA=IN_CRPER_NUM_DOC_IDENTIFIC)
	AND  RS.CRTST_CODIGO IN 
	(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
		SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE (CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
	FROM CGG_CONFIGURACION
	WHERE CGCNF_CODIGO = '03') OR CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA
	FROM CGG_CONFIGURACION
	WHERE CGCNF_CODIGO = '04')) UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION 
	FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
	WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO);

	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100
  ROWS 1000;

/**
* FUNCION f_cgg_dhu_curso_asistente_select
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_CURSO_ASISTENTE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION f_cgg_dhu_curso_asistente_select(in_user_name character varying, in_start_index integer, in_limit integer, in_sort_field_name character varying, in_direction character varying, in_find_text text,in_cdtcr_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	TOTALCADENA INT;
	CODIGOCURSO TEXT[];
	TMPWHERE TEXT;
BEGIN
	CODIGOCURSO := STRING_TO_ARRAY(IN_CDTCR_CODIGO, ';');
	TOTALCADENA := ARRAY_LENGTH(CODIGOCURSO, 1);	
	TMPWHERE:='';
	FOR I IN 1..TOTALCADENA LOOP
			TMPWHERE := TMPWHERE||'CU.CDTCR_CODIGO='''||CODIGOCURSO[I]||'''';
			IF (I < TOTALCADENA) THEN
				TMPWHERE := TMPWHERE||' OR ';
			END IF;
	END LOOP;
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CU.CDCUR_CODIGO, 
		CU.CDTCR_CODIGO, 
		TC.CDTCR_NOMBRE,
		CU.CCTN_CODIGO, 
		CN.CCTN_NOMBRE, 
		CU.CDITR_CODIGO,
		SP.CSCTP_NOMBRE,
        ITR.CDITR_NOMBRE,		
		CU.CRPER_CODIGO, 
		(PER.CRPER_NOMBRES||'' ''||PER.CRPER_APELLIDO_PATERNO||'' ''||PER.CRPER_APELLIDO_MATERNO)AS CRPER_INSTRUCTOR,
		CU.CDCUR_DESCRIPCION,
		CU.CDCUR_FECHA_PREVISTA_INICIO,
		CU.CDCUR_FECHA_INICIO, 
		CU.CDCUR_FECHA_CULMINACION, 
		CU.CDCUR_NUMERO_ASISTENTE,
		(SELECT COUNT(ACU.CRPER_CODIGO)
		FROM SII.CGG_DHU_ASISTENTE_CURSO ACU
			 INNER JOIN SII.CGG_DHU_CURSO CUR ON(CUR.CDCUR_CODIGO=ACU.CDCUR_CODIGO)
		WHERE (ACU.CDASC_ESTADO_INSCRIPCION=1 OR ACU.CDASC_ESTADO_INSCRIPCION=0) AND (CUR.CDCUR_ESTADO_CURSO=1 OR CUR.CDCUR_ESTADO_CURSO=2 OR CUR.CDCUR_ESTADO_CURSO=3) AND CU.CDCUR_CODIGO=ACU.CDCUR_CODIGO )AS NUMERO_INSCRITO,
		(SELECT CU.CDCUR_NUMERO_ASISTENTE -(COUNT(ACU.CRPER_CODIGO))
		FROM SII.CGG_DHU_ASISTENTE_CURSO ACU
			 INNER JOIN SII.CGG_DHU_CURSO CUR ON(CUR.CDCUR_CODIGO=ACU.CDCUR_CODIGO)
		WHERE  CUR.CDCUR_ESTADO_CURSO=1 AND CU.CDCUR_CODIGO=ACU.CDCUR_CODIGO AND ACU.CDASC_ESTADO = TRUE
		GROUP BY CUR.CDCUR_NUMERO_ASISTENTE)AS NUMERO_DISPONIBLE, 
		CU.CDCUR_ESTADO_CURSO,
		CU.CDCUR_ESTADO, 
		CU.CDCUR_FECHA_INSERT, 
		CU.CDCUR_USUARIO_INSERT, 
		CU.CDCUR_FECHA_UPDATE, 
		CU.CDCUR_USUARIO_UPDATE
	FROM SII.CGG_DHU_CURSO CU
	INNER JOIN SII.CGG_CANTON CN ON (CN.CCTN_CODIGO=CU.CCTN_CODIGO)
	INNER JOIN SII.CGG_DHU_TIPO_CURSO TC ON(TC.CDTCR_CODIGO=CU.CDTCR_CODIGO)
	INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=CU.CSCTP_CODIGO)
	INNER JOIN SII.CGG_DHU_INSTITUCION_RESPONSABLE ITR ON(ITR.CDITR_CODIGO=CU.CDITR_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=CU.CRPER_CODIGO)
	WHERE CDCUR_ESTADO = TRUE AND (CU.CDCUR_ESTADO_CURSO=0 OR CU.CDCUR_ESTADO_CURSO=1 OR CU.CDCUR_ESTADO_CURSO=2 OR CU.CDCUR_ESTADO_CURSO=3)AND '||TMPWHERE||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(TC.CDTCR_NOMBRE,'''')||'' ''||
	COALESCE(CN.CCTN_NOMBRE,'''')||'' ''||
	COALESCE(TC.CDTCR_NOMBRE,'''')||'' ''||
	COALESCE(SP.CSCTP_NOMBRE,'''')||'' ''||
	COALESCE(ITR.CDITR_NOMBRE,'''')||'' ''||
	COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_PATERNO)||'' ''||
	COALESCE(PER.CRPER_APELLIDO_MATERNO)||'' ''||
	COALESCE(CU.CDCUR_DESCRIPCION, '''')||'' ''||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_INICIO,CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_FECHA_CULMINACION, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_CULMINACION,CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_NUMERO_ASISTENTE, 0)||'' ''||
	COALESCE(CU.CDCUR_ESTADO_CURSO, 0)||'' ''||
	COALESCE(CU.CDCUR_ESTADO, FALSE)||'' ''||
	COALESCE(CU.CDCUR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_USUARIO_INSERT, '''')||'' ''||
	COALESCE(CU.CDCUR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;



/** FUNCION QUE SELECCIONA LOS ASISTENTES INSCRITOS
* FUNCION f_cgg_dhu_asistente_inscrito_select
* SELECCIONA UN REGISTROS DE LA TABLA SII.CGG_DHU_ASISTENTE_CURSO .
* @param IN_CDADC_CODIGO CRITERIO DE BUSQUEDA
* @param IN_CDBEC_CODIGO CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/


CREATE OR REPLACE FUNCTION f_cgg_dhu_asistente_inscrito_select(in_cdcur_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
	AC.CDASC_CODIGO,
	AC.CDCUR_CODIGO,
        AC.CSCTP_CODIGO,
        SP.CSCTP_NOMBRE,
        (SELECT CN.CCTN_NOMBRE FROM SII.CGG_CANTON CN WHERE CN.CCTN_CODIGO=CUR.CCTN_CODIGO)AS CCTN_NOMBRE, 
        CUR.CRPER_CODIGO, 
        (SELECT PR.CRPER_NOMBRES||' '||PR.CRPER_APELLIDO_PATERNO||' '||PR.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PR WHERE PR.CRPER_CODIGO=CUR.CRPER_CODIGO)AS CRPER_INSTRUCTOR,       
        CUR.CDCUR_INSTITUCION,
        CUR.CDCUR_FECHA_INICIO, 
        CUR.CDCUR_FECHA_CULMINACION, 
	CUR.CDCUR_FECHA_PREVISTA_CULMINACION,
	CUR.CDCUR_NUMERO_ASISTENTE,
	(SELECT COUNT(ACU.CRPER_CODIGO)
        FROM SII.CGG_DHU_ASISTENTE_CURSO ACU
	INNER JOIN SII.CGG_DHU_CURSO CU ON(CU.CDCUR_CODIGO=ACU.CDCUR_CODIGO)
        WHERE (ACU.CDASC_ESTADO_INSCRIPCION=0 OR ACU.CDASC_ESTADO_INSCRIPCION=1) AND CU.CDCUR_ESTADO_CURSO=1 AND ACU.CDCUR_CODIGO=CUR.CDCUR_CODIGO)AS NUMERO_INSCRITO,
       (SELECT CU.CDCUR_NUMERO_ASISTENTE -(COUNT(ACU.CRPER_CODIGO))
        FROM SII.CGG_DHU_ASISTENTE_CURSO ACU
        INNER JOIN SII.CGG_DHU_CURSO CU ON(CU.CDCUR_CODIGO=ACU.CDCUR_CODIGO)
        WHERE  (ACU.CDASC_ESTADO_INSCRIPCION=0 OR ACU.CDASC_ESTADO_INSCRIPCION=1)AND CU.CDCUR_ESTADO_CURSO=1 AND ACU.CDCUR_CODIGO=CUR.CDCUR_CODIGO
        GROUP BY CU.CDCUR_NUMERO_ASISTENTE)AS NUMERO_DISPONIBLE,
	(SELECT PER.CRPER_NOMBRES||' '||PER.CRPER_APELLIDO_PATERNO||' '||PER.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PER WHERE PER.CRPER_CODIGO=AC.CRPER_CODIGO)AS CRPER_ASISTENTE,
        PER.CRPER_NUM_DOC_IDENTIFIC,
	AC.CDASC_ESTADO_INSCRIPCION
	FROM SII.CGG_DHU_ASISTENTE_CURSO AC
	INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=AC.CSCTP_CODIGO)	
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=AC.CRPER_CODIGO)
	INNER JOIN SII.CGG_DHU_CURSO CUR ON(AC.CDCUR_CODIGO=CUR.CDCUR_CODIGO)									
    WHERE   AC.CDCUR_CODIGO=IN_CDCUR_CODIGO  AND AC.CDASC_ESTADO=TRUE ;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;

/**
* FUNCION f_cgg_dhu_asistente_inscrito
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_ASISTENTE_CURSO.
* @param in_cdcur_codigo CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION f_cgg_dhu_asistente_inscrito(in_cdcur_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
	    AC.CDASC_CODIGO,
	     AC.CDCUR_CODIGO,
        PER.CRPER_NOMBRES,
        AC.CSCTP_CODIGO,
        SP.CSCTP_NOMBRE,
        (SELECT CN.CCTN_NOMBRE FROM SII.CGG_CANTON CN WHERE CN.CCTN_CODIGO=CUR.CCTN_CODIGO)AS CCTN_NOMBRE, 
        CUR.CRPER_CODIGO, 
        (SELECT PR.CRPER_NOMBRES||' '||PR.CRPER_APELLIDO_PATERNO||' '||PR.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PR WHERE PR.CRPER_CODIGO=CUR.CRPER_CODIGO)AS CRPER_INSTRUCTOR,       
        CUR.CDCUR_INSTITUCION,
        CUR.CDCUR_FECHA_INICIO, 
        CUR.CDCUR_FECHA_CULMINACION, 
	CUR.CDCUR_FECHA_PREVISTA_CULMINACION,
	(SELECT PER.CRPER_NOMBRES||' '||PER.CRPER_APELLIDO_PATERNO||' '||PER.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PER WHERE PER.CRPER_CODIGO=AC.CRPER_CODIGO)AS CRPER_ASISTENTE,
        PER.CRPER_NUM_DOC_IDENTIFIC,
	AC.CDASC_ESTADO_INSCRIPCION
	FROM SII.CGG_DHU_ASISTENTE_CURSO AC
	INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=AC.CSCTP_CODIGO)	
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=AC.CRPER_CODIGO)
	INNER JOIN SII.CGG_DHU_CURSO CUR ON(AC.CDCUR_CODIGO=CUR.CDCUR_CODIGO)									
        WHERE   AC.CDCUR_CODIGO=IN_CDCUR_CODIGO AND AC.CDASC_ESTADO_INSCRIPCION=0 AND AC.CDASC_ESTADO=TRUE ;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;

/**
* FUNCION f_cgg_dhu_asistente_calificacion
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_ASISTENTE_CURSO.
* @param in_cdcur_codigo CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION f_cgg_dhu_asistente_calificacion(in_cdcur_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
	    AC.CDASC_CODIGO,
	    AC.CDCUR_CODIGO,
        PER.CRPER_NOMBRES,
        AC.CSCTP_CODIGO,
        SP.CSCTP_NOMBRE,
        (SELECT CN.CCTN_NOMBRE FROM SII.CGG_CANTON CN WHERE CN.CCTN_CODIGO=CUR.CCTN_CODIGO)AS CCTN_NOMBRE, 
        CUR.CRPER_CODIGO, 
        (SELECT PR.CRPER_NOMBRES||' '||PR.CRPER_APELLIDO_PATERNO||' '||PR.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PR WHERE PR.CRPER_CODIGO=CUR.CRPER_CODIGO)AS CRPER_INSTRUCTOR,       
        CUR.CDCUR_INSTITUCION,
        CUR.CDCUR_FECHA_INICIO, 
        CUR.CDCUR_FECHA_CULMINACION, 
	CUR.CDCUR_FECHA_PREVISTA_CULMINACION,
	(SELECT PER.CRPER_NOMBRES||' '||PER.CRPER_APELLIDO_PATERNO||' '||PER.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PER WHERE PER.CRPER_CODIGO=AC.CRPER_CODIGO)AS CRPER_ASISTENTE,
        PER.CRPER_NUM_DOC_IDENTIFIC,
	AC.CDASC_ESTADO_INSCRIPCION
	FROM SII.CGG_DHU_ASISTENTE_CURSO AC
	INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=AC.CSCTP_CODIGO)	
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=AC.CRPER_CODIGO)
	INNER JOIN SII.CGG_DHU_CURSO CUR ON(AC.CDCUR_CODIGO=CUR.CDCUR_CODIGO)									
        WHERE   AC.CDCUR_CODIGO=IN_CDCUR_CODIGO AND AC.CDASC_ESTADO_INSCRIPCION=1 AND CUR.CDCUR_ESTADO_CURSO=2 AND AC.CDASC_ESTADO=TRUE ;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;

/**
* FUNCION f_cgg_dhu_asistente_certificado
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_ASISTENTE_CURSO.
* @param in_cdcur_codigo CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION f_cgg_dhu_asistente_certificado(in_cdcur_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
	AC.CDASC_CODIGO,
	AC.CDCUR_CODIGO,
        PER.CRPER_NOMBRES,
        AC.CSCTP_CODIGO,
        SP.CSCTP_NOMBRE,
        (SELECT CN.CCTN_NOMBRE FROM SII.CGG_CANTON CN WHERE CN.CCTN_CODIGO=CUR.CCTN_CODIGO)AS CCTN_NOMBRE, 
        CUR.CRPER_CODIGO, 
        (SELECT PR.CRPER_NOMBRES||' '||PR.CRPER_APELLIDO_PATERNO||' '||PR.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PR WHERE PR.CRPER_CODIGO=CUR.CRPER_CODIGO)AS CRPER_INSTRUCTOR,       
        CUR.CDCUR_INSTITUCION,
        CUR.CDCUR_FECHA_INICIO, 
        CUR.CDCUR_FECHA_CULMINACION, 
	CUR.CDCUR_FECHA_PREVISTA_CULMINACION,
	(SELECT PER.CRPER_NOMBRES||' '||PER.CRPER_APELLIDO_PATERNO||' '||PER.CRPER_APELLIDO_MATERNO FROM SII.CGG_RES_PERSONA PER WHERE PER.CRPER_CODIGO=AC.CRPER_CODIGO)AS CRPER_ASISTENTE,
        PER.CRPER_NUM_DOC_IDENTIFIC,
	AC.CDASC_ESTADO_INSCRIPCION,
	AC.CDASC_APROBADO,
	AC.CDASC_NOTA_FINAL
	FROM SII.CGG_DHU_ASISTENTE_CURSO AC
	INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=AC.CSCTP_CODIGO)	
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=AC.CRPER_CODIGO)
	INNER JOIN SII.CGG_DHU_CURSO CUR ON(AC.CDCUR_CODIGO=CUR.CDCUR_CODIGO)									
        WHERE   AC.CDCUR_CODIGO=IN_CDCUR_CODIGO AND AC.CDASC_ESTADO_INSCRIPCION=1 AND AC.CDASC_APROBADO=1 AND CUR.CDCUR_ESTADO_CURSO=3 AND AC.CDASC_ESTADO=TRUE ;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100
  ROWS 1000;

/**
* FUNCION f_cgg_dhu_asistente_estado_inscrito_update
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_ASISTENTE_CURSO.
* @param IN_CDASC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASISTENTE CURSO
* @param IN_CDASC_ESTADO_INSCRIPCION IDENTIFICATIVO UNICO DE REGISTRO 
* @param IN_CDASC_USUARIO_UPDATE ESTADO DEL PROCESO DE REGISTRO DE ASISTENTE CURSO
0 - PRE_INSCRITO
1 - INSCRITO

* @param N_CDASC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION f_cgg_dhu_asistente_estado_inscrito_update(IN_CDASC_CODIGO character varying, IN_CDASC_ESTADO_INSCRIPCION smallint, IN_CDASC_USUARIO_UPDATE character varying)
  RETURNS void AS
$BODY$
BEGIN
	UPDATE SII.CGG_DHU_ASISTENTE_CURSO SET		
		CDASC_ESTADO_INSCRIPCION = IN_CDASC_ESTADO_INSCRIPCION, 		
		CDASC_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDASC_USUARIO_UPDATE = IN_CDASC_USUARIO_UPDATE
	WHERE
		CDASC_CODIGO = IN_CDASC_CODIGO;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE
  COST 100;

/**
* FUNCION F_CGG_DHU_ASISTENTE_CALIFICACION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_DHU_ASISTENTE_CURSO.
* @param IN_CDASC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASISTENTE CURSO
* @param IN_CDASC_ESTADO_APROBADO IDENTIFICATIVO UNICO DE REGISTRO 
* @param IN_CDASC_USUARIO_UPDATE ESTADO DEL PROCESO DE REGISTRO DE ASISTENTE CURSO
0 - REPROBADO
1 - APROBADO
2 - RETIRADO

* @param IN_CDASC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/

CREATE OR REPLACE FUNCTION F_CGG_DHU_ASISTENTE_CALIFICACION_UPDATE(IN_CDASC_CODIGO CHARACTER VARYING, IN_CDASC_NOTA_FINAL NUMERIC,IN_CDASC_APROBADO SMALLINT, IN_CDASC_USUARIO_UPDATE CHARACTER VARYING)
  RETURNS VOID AS
$BODY$

BEGIN 
 
	
	
	UPDATE SII.CGG_DHU_ASISTENTE_CURSO SET	
	    CDASC_NOTA_FINAL=IN_CDASC_NOTA_FINAL,	
		CDASC_APROBADO =IN_CDASC_APROBADO , 		
		CDASC_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDASC_USUARIO_UPDATE = IN_CDASC_USUARIO_UPDATE
	WHERE
		CDASC_CODIGO = IN_CDASC_CODIGO;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;

/**
* FUNCION F_CGG_DHU_ASISTENTE_CALIFICACION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_DHU_ASISTENTE_CURSO.
* @param IN_CDASC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASISTENTE CURSO
* @param IN_CDASC_NUMERO_CERTIFCADO IDENTIFICATIVO UNICO DE REGISTRO DEL NUMERO DE CERTIFICADO
* @param IN_CDASC_FECHA_EMISION_CERTIFICADO IDENTIFICATIVO UNICO DE REGISTRO DE LA FECHA DE EMISIN DEL CERTIFICADO
* @param IN_CDASC_USUARIO_UPDATE ESTADO DEL PROCESO DE REGISTRO DE ASISTENTE CURSO
* @return VOID
*/

CREATE OR REPLACE FUNCTION F_CGG_DHU_ASISTENTE_CERTIFICADO_UPDATE(IN_CDASC_CODIGO CHARACTER VARYING, IN_CDASC_NUMERO_CERTIFCADO CHARACTER VARYING,IN_CDASC_FECHA_EMISION_CERTIFICADO timestamp with time zone, IN_CDASC_USUARIO_UPDATE CHARACTER VARYING)
  RETURNS VOID AS
$BODY$

BEGIN 
 
	
	
	UPDATE SII.CGG_DHU_ASISTENTE_CURSO SET	
	        CDASC_NUMERO_CERTIFICADO=IN_CDASC_NUMERO_CERTIFCADO,	
		CDASC_FECHA_EMISION_CERTIFICADO =IN_CDASC_FECHA_EMISION_CERTIFICADO, 		
		CDASC_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDASC_USUARIO_UPDATE = IN_CDASC_USUARIO_UPDATE
	WHERE
		CDASC_CODIGO = IN_CDASC_CODIGO;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;


/**
* FUNCION f_cgg_dhu_curso_estado_update_terminado
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_DHU_CURSO.
* @param IN_CDCUR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASISTENTE CURSO
* @param IN_CDCUR_ESTADO_CURSO IDENTIFICATIVO UNICO DE REGISTRO 
0 - REGISTRADO
1 - PROCESO MATRICULA
2 - INICIADO
3 - TERMINADO
4 - FINALIZADO
5 - CANCELADO
6 - SUSPENDIDO
* @param IN_CDCUR_USUARIO_UPDATE ESTADO DEL PROCESO DE REGISTRO DE ASISTENTE CURSO
* @param IN_CDASC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/

CREATE OR REPLACE FUNCTION f_cgg_dhu_curso_estado_update_terminado(
IN IN_CDCUR_CODIGO SII.CGG_DHU_CURSO.CDCUR_CODIGO%TYPE, 
IN IN_CDCUR_FECHA_CULMINACION SII.CGG_DHU_CURSO.CDCUR_FECHA_CULMINACION%TYPE,
IN IN_CDCUR_ESTADO_CURSO SII.CGG_DHU_CURSO.CDCUR_ESTADO_CURSO%TYPE, 
IN IN_CDCUR_USUARIO_UPDATE SII.CGG_DHU_CURSO.CDCUR_USUARIO_UPDATE%TYPE
)
  RETURNS void AS
$$
BEGIN
	UPDATE SII.CGG_DHU_CURSO SET
		CDCUR_ESTADO_CURSO = IN_CDCUR_ESTADO_CURSO,  
		CDCUR_FECHA_CULMINACION=CURRENT_TIMESTAMP,
		CDCUR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDCUR_USUARIO_UPDATE = IN_CDCUR_USUARIO_UPDATE
	WHERE
		CDCUR_CODIGO = IN_CDCUR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
/**
* FUNCION f_cgg_dhu_curso_estado_update
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_DHU_CURSO.
* @param IN_CDCUR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASISTENTE CURSO
* @param IN_CDCUR_ESTADO_CURSO IDENTIFICATIVO UNICO DE REGISTRO 
0 - REGISTRADO
1 - PROCESO MATRICULA
2 - INICIADO
3 - FINALIZADO
4 - TERMINADO
5 - CANCELADO
6 - SUSPENDIDO
* @param IN_CDCUR_USUARIO_UPDATE ESTADO DEL PROCESO DE REGISTRO DE ASISTENTE CURSO
* @param IN_CDASC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/

CREATE OR REPLACE FUNCTION f_cgg_dhu_curso_estado_update(
IN IN_CDCUR_CODIGO SII.CGG_DHU_CURSO.CDCUR_CODIGO%TYPE, 
IN IN_CDCUR_ESTADO_CURSO SII.CGG_DHU_CURSO.CDCUR_ESTADO_CURSO%TYPE, 
IN IN_CDCUR_USUARIO_UPDATE SII.CGG_DHU_CURSO.CDCUR_USUARIO_UPDATE%TYPE
)
  RETURNS void AS
$$
BEGIN
	UPDATE SII.CGG_DHU_CURSO SET
		CDCUR_ESTADO_CURSO = IN_CDCUR_ESTADO_CURSO,  
		CDCUR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDCUR_USUARIO_UPDATE = IN_CDCUR_USUARIO_UPDATE
	WHERE
		CDCUR_CODIGO = IN_CDCUR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_DHU_CURSO_INSCRIPCION_SELECT_COUNT
* CONTABILIZA LOS REGISTRO EN LA TABLA SII.CGG_DHU_BECA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return  TMP_ROWS 
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_CURSO_INSCRIPCION_SELECT_COUNTBYTIPO(
IN IN_FIND_TEXT TEXT,
IN IN_CDTCR_CODIGO VARCHAR
)
  RETURNS INTEGER AS
$$
DECLARE
	TMP_ROWS INT2;
BEGIN
	
	SELECT COUNT(*)	INTO TMP_ROWS
	FROM SII.CGG_DHU_CURSO CU
	INNER JOIN SII.CGG_CANTON CN ON (CN.CCTN_CODIGO=CU.CCTN_CODIGO)
	INNER JOIN SII.CGG_DHU_TIPO_CURSO TC ON(TC.CDTCR_CODIGO=CU.CDTCR_CODIGO)
	INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=CU.CSCTP_CODIGO)
	INNER JOIN SII.CGG_DHU_INSTITUCION_RESPONSABLE ITR ON(ITR.CDITR_CODIGO=CU.CDITR_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=CU.CRPER_CODIGO)
	WHERE CDCUR_ESTADO = TRUE AND CU.CDTCR_CODIGO = IN_CDTCR_CODIGO AND (CU.CDCUR_ESTADO_CURSO=0 OR CU.CDCUR_ESTADO_CURSO=1) AND SII.F_STRING_IN(IN_FIND_TEXT,
	COALESCE(TC.CDTCR_NOMBRE,'')||' '||
	COALESCE(CN.CCTN_NOMBRE,'')||' '||
	COALESCE(TC.CDTCR_NOMBRE,'')||' '||
	COALESCE(SP.CSCTP_NOMBRE,'')||' '||
	COALESCE(ITR.CDITR_NOMBRE,'')||' '||
	COALESCE(CU.CDCUR_DESCRIPCION, '')||' '||
	COALESCE(PER.CRPER_NOMBRES,'')||' '||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'')||' '||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,'')||' '||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_INICIO,CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_FECHA_CULMINACION, CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_CULMINACION,CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_NUMERO_ASISTENTE, 0)||' '||
	COALESCE(CU.CDCUR_ESTADO_CURSO, 0)||' '||
	COALESCE(CU.CDCUR_ESTADO, FALSE)||' '||
	COALESCE(CU.CDCUR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_USUARIO_INSERT, '')||' '||
	COALESCE(CU.CDCUR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||
	COALESCE(CU.CDCUR_USUARIO_UPDATE, '')) = 1;
	
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION F_CGG_DHU_CURSO_INSCRIPCION_SELECTBYTIPO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_CURSO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION F_CGG_DHU_CURSO_INSCRIPCION_SELECTBYTIPO(
IN IN_USER_NAME CHARACTER VARYING, 
IN IN_START_INDEX INTEGER, 
IN IN_LIMIT INTEGER, 
IN IN_SORT_FIELD_NAME CHARACTER VARYING, 
IN IN_DIRECTION CHARACTER VARYING, 
IN IN_FIND_TEXT TEXT, 
IN IN_CDTCR_CODIGO CHARACTER VARYING)
  RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TOTALCADENA INT;
	CODIGOCURSO TEXT[];
	TMPWHERE TEXT;
	TMPCODIGOPERSONA VARCHAR;
BEGIN
	CODIGOCURSO := STRING_TO_ARRAY(IN_CDTCR_CODIGO, ';');
	TOTALCADENA := ARRAY_LENGTH(CODIGOCURSO, 1);	
	TMPWHERE:='';
	FOR I IN 1..TOTALCADENA LOOP
			TMPWHERE := TMPWHERE||'CU.CDTCR_CODIGO='''||CODIGOCURSO[I]||'''';
			IF (I < TOTALCADENA) THEN
				TMPWHERE := TMPWHERE||' OR ';
			END IF;
	END LOOP;
	
	SELECT CRPER_CODIGO INTO TMPCODIGOPERSONA
	FROM SII.CGG_USUARIO WHERE CUSU_ESTADO = TRUE AND CUSU_NOMBRE_USUARIO = IN_USER_NAME;
	
	IF TMPCODIGOPERSONA IS NULL THEN
		TMPCODIGOPERSONA = '';
	END IF;
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CU.CDCUR_CODIGO, 
		CU.CDTCR_CODIGO, 
		TC.CDTCR_NOMBRE,
		TC.CDTCR_TIPO_RESIDENTE,
		CU.CCTN_CODIGO, 
		CN.CCTN_NOMBRE, 
		CU.CDITR_CODIGO,
		SP.CSCTP_NOMBRE,
        ITR.CDITR_NOMBRE,		
		CU.CRPER_CODIGO, 
		(SELECT PER.CRPER_NOMBRES||'' ''||PER.CRPER_APELLIDO_PATERNO||'' ''||PER.CRPER_APELLIDO_MATERNO)AS CRPER_INSTRUCTOR,
		CU.CDCUR_DESCRIPCION,
		CU.CDCUR_FECHA_PREVISTA_INICIO,
		CU.CDCUR_FECHA_INICIO, 
		CU.CDCUR_FECHA_CULMINACION, 
		CU.CDCUR_NUMERO_ASISTENTE, 
		CU.CDCUR_ESTADO_CURSO,
		CU.CDCUR_ESTADO, 
		CU.CDCUR_FECHA_INSERT, 
		CU.CDCUR_USUARIO_INSERT, 
		CU.CDCUR_FECHA_UPDATE, 
		CU.CDCUR_USUARIO_UPDATE,
		
		CU.CDCUR_NUMERO_MODULOS,
		CU.CDCUR_CONTENIDO,
		CU.CDCUR_INSTITUCION,
		CU.CDCUR_ESTABLECIMIENTO, 
		CU.CDCUR_NUMERO_HORAS, 
		CU.CDCUR_COSTO, 
		CU.CDCUR_FECHA_PREVISTA_INICIO,
		CU.CDCUR_FECHA_PREVISTA_CULMINACION,
		CU.CDCUR_HORARIO, 
		CU.CDCUR_HORARIO1,
		CU.CDCUR_VALORACION,
		(SELECT COUNT(*) 
		FROM SII.CGG_DHU_ASISTENTE_CURSO ASIC 
		WHERE ASIC.CDASC_ESTADO=TRUE AND 
		ASIC.CDCUR_CODIGO=CU.CDCUR_CODIGO AND 
		ASIC.CRPER_CODIGO = '''||TMPCODIGOPERSONA||''' ) AS TMP_INSCRITO
		
		
	FROM SII.CGG_DHU_CURSO CU
	INNER JOIN SII.CGG_CANTON CN ON (CN.CCTN_CODIGO=CU.CCTN_CODIGO)
	INNER JOIN SII.CGG_DHU_TIPO_CURSO TC ON(TC.CDTCR_CODIGO=CU.CDTCR_CODIGO)
	INNER JOIN SII.CGG_SECTOR_PRODUCTIVO SP ON(SP.CSCTP_CODIGO=CU.CSCTP_CODIGO)
	INNER JOIN SII.CGG_DHU_INSTITUCION_RESPONSABLE ITR ON(ITR.CDITR_CODIGO=CU.CDITR_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=CU.CRPER_CODIGO)
	WHERE CDCUR_ESTADO = TRUE AND (CU.CDCUR_ESTADO_CURSO=0 OR CU.CDCUR_ESTADO_CURSO=1)AND '||TMPWHERE||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(TC.CDTCR_NOMBRE,'''')||'' ''||
	COALESCE(CN.CCTN_NOMBRE,'''')||'' ''||
	COALESCE(TC.CDTCR_NOMBRE,'''')||'' ''||
	COALESCE(SP.CSCTP_NOMBRE,'''')||'' ''||
	COALESCE(ITR.CDITR_NOMBRE,'''')||'' ''||
	COALESCE(CU.CDCUR_DESCRIPCION, '''')||'' ''||
	COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')||'' ''||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_INICIO,CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_FECHA_CULMINACION, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_FECHA_PREVISTA_CULMINACION,CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_NUMERO_ASISTENTE, 0)||'' ''||
	COALESCE(CU.CDCUR_ESTADO_CURSO, 0)||'' ''||
	COALESCE(CU.CDCUR_ESTADO, FALSE)||'' ''||
	COALESCE(CU.CDCUR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_USUARIO_INSERT, '''')||'' ''||
	COALESCE(CU.CDCUR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CU.CDCUR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;