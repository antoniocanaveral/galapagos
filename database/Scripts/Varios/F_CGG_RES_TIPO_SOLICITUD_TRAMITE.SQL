/**
* FUNCION SII.F_TIPO_SOLICITUD_PADRE_ATENCION_CLIENTE
* SELECCIONA LOS TIPOS DE SOLICITUD PADRE PERMITIDAS PARA INICIAR TRAMITES EN ATENCION AL CLIENTE.
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONFIGURACION
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.F_TIPO_SOLICITUD_PADRE_ATENCION_CLIENTE(
IN IN_CGCNF_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN	
	OPEN TMP_REF FOR	
		(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
		SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE 
		WHERE 
		CRTST_ATENCION_CLIENTE = TRUE 
		AND CRTST_ESTADO = TRUE 
		AND CRTPT_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM CGG_CONFIGURACION
WHERE CGCNF_CODIGO = IN_CGCNF_CODIGO)
		UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TST.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
		WHERE TST.CRTST_CODIGO =TP.CGG_CRTST_CODIGO
		) SELECT DISTINCT CRTST_CODIGO, CRTST_DESCRIPCION  FROM TIPO WHERE CGG_CRTST_CODIGO IS NULL);
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION  SII.F_TIPO_SOLICITUD_ATENCION_CLIENTE
* SELECCIONA LOS TIPOS DE SOLICITUD PERMITIDAS PARA INICIAR TRAMITES EN ATENCION AL CLIENTE.
* @param IN_CRTST_CODIGO CODIGO DE SOLICITUD DE TIPO DE TRAMITE
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONFIGURACION
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.F_TIPO_SOLICITUD_ATENCION_CLIENTE(
IN IN_CRTST_CODIGO VARCHAR,
IN IN_CGCNF_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN	
	OPEN TMP_REF FOR	
		(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION, CRTST_OBSERVACION,CRTST_ATENCION_CLIENTE,CRTST_APLICA_BENEFICIARIO)AS(
			SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION,CRTST_OBSERVACION,CRTST_ATENCION_CLIENTE,CRTST_APLICA_BENEFICIARIO,CRTST_ESTADO  FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE  
			CRTST_CODIGO = IN_CRTST_CODIGO
			AND CRTPT_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM CGG_CONFIGURACION
WHERE CGCNF_CODIGO = IN_CGCNF_CODIGO)
			UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TST.CRTST_DESCRIPCION,TST.CRTST_OBSERVACION,TST.CRTST_ATENCION_CLIENTE,TST.CRTST_APLICA_BENEFICIARIO,TST.CRTST_ESTADO  FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
			WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
		) SELECT DISTINCT CRTST_CODIGO, CRTST_DESCRIPCION,CRTST_OBSERVACION,CRTST_APLICA_BENEFICIARIO FROM TIPO WHERE  CRTST_ATENCION_CLIENTE = TRUE AND CRTST_ESTADO = TRUE);
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
*FUNCION SII.F_TIPO_SOLICITUD_MIDDLE_ATENCION_CLIENTE
* SELECCIONA LOS TIPOS DE SOLICITUD PERMITIDAS PARA INICIAR TRAMITES EN ATENCION AL CLIENTE.
* @param IN_CRTST_CODIGO CODIGO DE SOLICITUD DE TIPO DE TRAMITE
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONFIGURACION
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.F_TIPO_SOLICITUD_MIDDLE_ATENCION_CLIENTE(
IN IN_CRTST_CODIGO VARCHAR,
IN IN_CGCNF_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN	
	OPEN TMP_REF FOR	
		SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION,CRTST_OBSERVACION
		FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE
		CRTST_CODIGO IN (
		(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION, CRTST_OBSERVACION,CRTST_ATENCION_CLIENTE,CRTST_APLICA_BENEFICIARIO)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION,CRTST_OBSERVACION,CRTST_ATENCION_CLIENTE,CRTST_APLICA_BENEFICIARIO,CRTST_ESTADO  FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE  
					CRTST_CODIGO = IN_CRTST_CODIGO
					AND CRTPT_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM CGG_CONFIGURACION
		WHERE CGCNF_CODIGO = IN_CGCNF_CODIGO)
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TST.CRTST_DESCRIPCION,TST.CRTST_OBSERVACION,TST.CRTST_ATENCION_CLIENTE,TST.CRTST_APLICA_BENEFICIARIO,TST.CRTST_ESTADO  FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT DISTINCT CGG_CRTST_CODIGO FROM TIPO WHERE  CRTST_ATENCION_CLIENTE = TRUE AND CRTST_ESTADO = TRUE AND CGG_CRTST_CODIGO <>IN_CRTST_CODIGO));
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_TIPO_SOLICITUD_MIDDLE_ATENCION_CLIENTE_COUNT
* SELECCIONA LOS TIPOS DE SOLICITUD PERMITIDAS PARA INICIAR TRAMITES EN ATENCION AL CLIENTE.
* @param IN_CRTST_CODIGO CODIGO DE SOLICITUD DE TIPO DE TRAMITE
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CONFIGURACION
* @return REFCURSOR
*/

CREATE OR REPLACE FUNCTION SII.F_TIPO_SOLICITUD_MIDDLE_ATENCION_CLIENTE_COUNT(
IN IN_CRTST_CODIGO VARCHAR,
IN IN_CGCNF_CODIGO VARCHAR
)RETURNS INTEGER AS
$$
DECLARE
	TMP_COUNT INTEGER;
BEGIN	
		
		SELECT COUNT(CRTST_CODIGO) INTO TMP_COUNT 
		FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE
		CRTST_CODIGO IN (
		(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION, CRTST_OBSERVACION,CRTST_ATENCION_CLIENTE,CRTST_APLICA_BENEFICIARIO)AS(
					SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION,CRTST_OBSERVACION,CRTST_ATENCION_CLIENTE,CRTST_APLICA_BENEFICIARIO,CRTST_ESTADO  FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE  
					CRTST_CODIGO = IN_CRTST_CODIGO
					AND CRTPT_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM CGG_CONFIGURACION
		WHERE CGCNF_CODIGO = IN_CGCNF_CODIGO)
					UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TST.CRTST_DESCRIPCION,TST.CRTST_OBSERVACION,TST.CRTST_ATENCION_CLIENTE,TST.CRTST_APLICA_BENEFICIARIO,TST.CRTST_ESTADO  FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
					WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
				) SELECT DISTINCT CGG_CRTST_CODIGO FROM TIPO WHERE  CRTST_ATENCION_CLIENTE = TRUE AND CRTST_ESTADO = TRUE AND CGG_CRTST_CODIGO <>IN_CRTST_CODIGO));
	RETURN TMP_COUNT;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
*FUNCION SII.F_TIPO_SOLICITUD_PATH
* FUNCION RECURSIVA QUE OBTIENE LOS DATOS DE LOS TIPOS DE SOLICITUD DE TRAMITE PARA FORMARLO COMO ARBOL.
* @param INCGG_CRTST_CODIGO CODIGO DE LA CATEGORIA PADRE DESDE DONDE SE REALIZA LA CONSULTA
* @return VARCHAR (CADENA JSON)
*/

CREATE OR REPLACE FUNCTION SII.F_TIPO_SOLICITUD_PATH(INCGG_CRTST_CODIGO CHARACTER VARYING)
  RETURNS CHARACTER VARYING AS
$BODY$
DECLARE
	TMP_ARBOL VARCHAR := '';
	TMP_RECORD RECORD;
	TMP_CURSOR REFCURSOR;
	SQL VARCHAR;
	TMP_COUNT_ATENCION_CLIENTE INTEGER DEFAULT 0; 
BEGIN
	IF INCGG_CRTST_CODIGO IS NULL THEN 
		SQL := 'SELECT * FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CGG_CRTST_CODIGO IS NULL';
	ELSE
		SELECT COUNT(*) INTO TMP_COUNT_ATENCION_CLIENTE FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_APLICA_TRAMITE AND CRTST_ATENCION_CLIENTE AND CRTST_ESTADO AND CGG_CRTST_CODIGO = INCGG_CRTST_CODIGO;
		IF TMP_COUNT_ATENCION_CLIENTE > 0 THEN
			SQL :='SELECT * FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_APLICA_TRAMITE AND CRTST_ATENCION_CLIENTE AND CRTST_ESTADO AND CGG_CRTST_CODIGO ='||QUOTE_LITERAL(INCGG_CRTST_CODIGO);
		ELSE
			SQL :='SELECT * FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_ESTADO AND CGG_CRTST_CODIGO ='||QUOTE_LITERAL(INCGG_CRTST_CODIGO);
		END IF;
	END IF;
	
	OPEN TMP_CURSOR FOR EXECUTE SQL;
		LOOP
			--
			FETCH TMP_CURSOR INTO TMP_RECORD;
			EXIT WHEN NOT FOUND;
			IF ( LENGTH(TMP_ARBOL)>0) THEN
				TMP_ARBOL := TMP_ARBOL||',';
			END IF;
			TMP_ARBOL:= TMP_ARBOL||'{ "attr": { "id":"'||TMP_RECORD.CRTST_CODIGO||'", "aplica":"'||TMP_RECORD.CRTST_APLICA_TRAMITE||'"},';
			TMP_ARBOL:= TMP_ARBOL||' "data":"'||TMP_RECORD.CRTST_DESCRIPCION||'",';
			TMP_ARBOL := TMP_ARBOL||' "children" : ['||F_TIPO_SOLICITUD_PATH(TMP_RECORD.CRTST_CODIGO)||'] }';
		END LOOP;
	CLOSE TMP_CURSOR;
	RETURN TMP_ARBOL;
END
$BODY$
  LANGUAGE 'PLPGSQL' VOLATILE
  COST 100;

