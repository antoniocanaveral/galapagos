/**
* FUNCION SII.F_CGG_VEH_MOTOR_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_VEH_MOTOR
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @param IN_CVMRC_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE MARCA
* @param IN_CVCMB_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE COMBUSTIBLE
* @param IN_CVMTR_SERIE SERIE DE FABRICA DEL MOTOR
* @param IN_CVMTR_ANIO_FABRICACION ANIO DE FABRICACION DEL MOTOR.
* @param IN_CVMTR_ESTADO_FUNCIONAL ESTADO DE FUNCIONAMIENTO DEL MOTOR
* @param IN_CVMTR_TONELAJE CAPACIDAD DE CARGA
* @param IN_CVMTR_INGRESO INDICA SI EL MOTOR ESTA DENTRO DE LA PROVINCIA
* @param IN_CVMTR_FECHA_INGRESO FECHA DE INGRESO DEL MOTOR A LA PROVINCIA
* @param IN_CVMTR_SALIO INDICA SI EL MOTOR ESTA DENTRO DE LA PRONVINCIA
* @param IN_CVMTR_FECHA_SALIDA FECHA DE SALIDA DEL MOTOR DE LA PROVINCIA
* @param IN_CVMTR_OBSERVACION INFORMACION ADICIONAL
* @param IN_CVMTR_ESTADO ESTADO DEL REGISTRO
* @param IN_CVMTR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CVMTR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_INSERT(
IN IN_CVMTR_CODIGO SII.CGG_VEH_MOTOR.CVMTR_CODIGO%TYPE,
IN IN_CVCLN_CODIGO SII.CGG_VEH_MOTOR.CVCLN_CODIGO%TYPE,
IN IN_CVMRC_CODIGO SII.CGG_VEH_MOTOR.CVMRC_CODIGO%TYPE,
IN IN_CVCMB_CODIGO SII.CGG_VEH_MOTOR.CVCMB_CODIGO%TYPE,
IN IN_CVMTR_SERIE SII.CGG_VEH_MOTOR.CVMTR_SERIE%TYPE,
IN IN_CVMTR_ANIO_FABRICACION SII.CGG_VEH_MOTOR.CVMTR_ANIO_FABRICACION%TYPE,
IN IN_CVMTR_ESTADO_FUNCIONAL SII.CGG_VEH_MOTOR.CVMTR_ESTADO_FUNCIONAL%TYPE,
IN IN_CVMTR_TONELAJE SII.CGG_VEH_MOTOR.CVMTR_TONELAJE%TYPE,
IN IN_CVMTR_INGRESO SII.CGG_VEH_MOTOR.CVMTR_INGRESO%TYPE,
IN IN_CVMTR_FECHA_INGRESO SII.CGG_VEH_MOTOR.CVMTR_FECHA_INGRESO%TYPE,
IN IN_CVMTR_SALIO SII.CGG_VEH_MOTOR.CVMTR_SALIO%TYPE,
IN IN_CVMTR_FECHA_SALIDA SII.CGG_VEH_MOTOR.CVMTR_FECHA_SALIDA%TYPE,
IN IN_CVMTR_OBSERVACION SII.CGG_VEH_MOTOR.CVMTR_OBSERVACION%TYPE,
IN IN_CVMTR_ESTADO SII.CGG_VEH_MOTOR.CVMTR_ESTADO%TYPE,
IN IN_CVMTR_USUARIO_INSERT SII.CGG_VEH_MOTOR.CVMTR_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_ANIO_FAB INT;
TMP_ANIO INT;
BEGIN
	SELECT CGCNF_VALOR_NUMERICO INTO TMP_ANIO_FAB FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF19';
	SELECT EXTRACT(YEAR FROM CURRENT_DATE) INTO TMP_ANIO;
	IF (IN_CVMTR_ANIO_FABRICACION > TMP_ANIO OR IN_CVMTR_ANIO_FABRICACION < TMP_ANIO_FAB) THEN
		RAISE EXCEPTION 'El a%o de fabricaci%n del motor de ser entre % y %', chr(241), chr(243), TMP_ANIO_FAB, TMP_ANIO;
	END IF;
	IF (UPPER(IN_CVMTR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_VEH_MOTOR','CVMTR_CODIGO','CVMTR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CVMTR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_VEH_MOTOR(
		CVMTR_CODIGO, 
		CVCLN_CODIGO, 
		CVMRC_CODIGO, 
		CVCMB_CODIGO, 
		CVMTR_SERIE, 
		CVMTR_ANIO_FABRICACION, 
		CVMTR_ESTADO_FUNCIONAL, 
		CVMTR_TONELAJE, 
		CVMTR_INGRESO, 
		CVMTR_FECHA_INGRESO, 
		CVMTR_SALIO, 
		CVMTR_FECHA_SALIDA, 
		CVMTR_OBSERVACION, 
		CVMTR_ESTADO, 
		CVMTR_FECHA_INSERT, 
		CVMTR_USUARIO_INSERT, 
		CVMTR_FECHA_UPDATE, 
		CVMTR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CVCLN_CODIGO, 
		IN_CVMRC_CODIGO, 
		IN_CVCMB_CODIGO, 
		IN_CVMTR_SERIE, 
		IN_CVMTR_ANIO_FABRICACION, 
		IN_CVMTR_ESTADO_FUNCIONAL, 
		IN_CVMTR_TONELAJE, 
		IN_CVMTR_INGRESO, 
		IN_CVMTR_FECHA_INGRESO, 
		IN_CVMTR_SALIO, 
		IN_CVMTR_FECHA_SALIDA, 
		IN_CVMTR_OBSERVACION, 
		IN_CVMTR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CVMTR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CVMTR_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_VEH_MOTOR
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVMTR_CODIGO, 
		CVCLN_CODIGO, 
		CVMRC_CODIGO, 
		CVCMB_CODIGO, 
		CVMTR_SERIE, 
		CVMTR_ANIO_FABRICACION, 
		CVMTR_ESTADO_FUNCIONAL, 
		CVMTR_TONELAJE, 
		CVMTR_INGRESO, 
		CVMTR_FECHA_INGRESO, 
		CVMTR_SALIO, 
		CVMTR_FECHA_SALIDA, 
		CVMTR_OBSERVACION, 
		CVMTR_ESTADO, 
		CVMTR_FECHA_INSERT, 
		CVMTR_USUARIO_INSERT, 
		CVMTR_FECHA_UPDATE, 
		CVMTR_USUARIO_UPDATE
	FROM SII.CGG_VEH_MOTOR
	WHERE CVMTR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_VEH_MOTOR
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CVVEH_CODIGO IDENTIFICATIVO UNICO DE VEHICULO.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CVVEH_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		VH.CVMTR_CODIGO, 
		VH.CVCLN_CODIGO, 
		ARRAY_TO_STRING(ARRAY(SELECT TRM.CRTRA_NUMERO FROM SII.CGG_RES_TRAMITE TRM WHERE TRM.CVMTR_CODIGO = VH.CVMTR_CODIGO),'', '') TRAMITE,
		CLN.CVCLN_CILINDRAJE CILINDRAJE,
		VH.CVMRC_CODIGO,
		MRC.CVMRC_NOMBRE MARCA, 
		VH.CVCMB_CODIGO,
		CMB.CVCMB_NOMBRE COMBUSTIBLE, 
		VH.CVMTR_SERIE, 
		VH.CVMTR_ANIO_FABRICACION, 
		VH.CVMTR_ESTADO_FUNCIONAL, 
		VH.CVMTR_TONELAJE, 
		VH.CVMTR_INGRESO, 
		CASE WHEN VH.CVMTR_INGRESO THEN VH.CVMTR_FECHA_INGRESO ELSE NULL END CVMTR_FECHA_INGRESO, 
		VH.CVMTR_SALIO, 
		CASE WHEN VH.CVMTR_SALIO THEN VH.CVMTR_FECHA_SALIDA ELSE NULL END CVMTR_FECHA_SALIDA, 
		VH.CVMTR_OBSERVACION, 
		VH.CVMTR_ESTADO, 
		VH.CVMTR_FECHA_INSERT, 
		VH.CVMTR_USUARIO_INSERT, 
		VH.CVMTR_FECHA_UPDATE, 
		VH.CVMTR_USUARIO_UPDATE,
		VMT.CVVEH_CODIGO,
		VEH.CVVEH_PLACA,
		VEH.CVVEH_NOMBRE,
		VEH.CVVEH_FECHA_INGRESO, 
		ARRAY_TO_STRING(ARRAY(SELECT CVSVM_NOMBRE FROM SII.CGG_VEH_ESTADO_VHMT VHMT
			INNER JOIN SII.CGG_VEH_MOTOR_ESTADO MST ON MST.CVSVM_CODIGO = VHMT.CVSVM_CODIGO AND MST.CVMTR_CODIGO = VH.CVMTR_CODIGO
			WHERE VHMT.CVSVM_ESTADO), '', '') ESTADOS
	FROM SII.CGG_VEH_MOTOR VH
	LEFT JOIN SII.CGG_VEH_MARCA MRC ON MRC.CVMRC_CODIGO = VH.CVMRC_CODIGO
	LEFT JOIN SII.CGG_VEH_COMBUSTIBLE CMB ON CMB.CVCMB_CODIGO = VH.CVCMB_CODIGO
	LEFT JOIN SII.CGG_VEH_CILINDRAJE CLN ON CLN.CVCLN_CODIGO = VH.CVCLN_CODIGO
	LEFT JOIN SII.CGG_VEH_VEHICULO_MOTOR VMT ON VMT.CVMTR_CODIGO = VH.CVMTR_CODIGO AND VMT.CVVMT_FECHA IS NOT NULL AND (LENGTH('||QUOTE_LITERAL(IN_CVVEH_CODIGO)||') = 0 OR VMT.CVVEH_CODIGO = '||QUOTE_LITERAL(IN_CVVEH_CODIGO)||')
	LEFT JOIN SII.CGG_VEH_VEHICULO VEH ON VEH.CVVEH_CODIGO = VMT.CVVEH_CODIGO 
	WHERE CVMTR_ESTADO AND 
		(LENGTH('||QUOTE_LITERAL(IN_CVVEH_CODIGO)||') = 0 OR VH.CVMTR_CODIGO IN (SELECT CVMTR_CODIGO FROM SII.CGG_VEH_VEHICULO_MOTOR WHERE CVVMT_ESTADO AND CVVEH_CODIGO = '||QUOTE_LITERAL(IN_CVVEH_CODIGO)||')) AND
		SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CVMTR_SERIE, '''')||'' ''||COALESCE(CVMTR_ANIO_FABRICACION, 0)||'' ''||COALESCE(CVMTR_ESTADO_FUNCIONAL, FALSE)||'' ''||COALESCE(CVMTR_TONELAJE, 0)||'' ''||COALESCE(CVMTR_OBSERVACION, '''')||'' ''||COALESCE(CVMTR_ESTADO, FALSE)||'' ''||COALESCE(CVMTR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVMTR_USUARIO_INSERT, '''')||'' ''||COALESCE(CVMTR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVMTR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_MOTOR
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_MOTOR
	WHERE CVMTR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_MOTOR
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CVVEH_CODIGO IDENTIFICATIVO UNICO DE VEHICULO.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_CVVEH_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_MOTOR
	WHERE CVMTR_ESTADO AND 
		(LENGTH(IN_CVVEH_CODIGO) = 0 OR CVMTR_CODIGO IN (SELECT CVMTR_CODIGO FROM SII.CGG_VEH_VEHICULO_MOTOR WHERE CVVMT_ESTADO AND CVVEH_CODIGO = IN_CVVEH_CODIGO)) AND
		SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CVMTR_SERIE, '''')||' '||COALESCE(CVMTR_ANIO_FABRICACION, 0)||' '||COALESCE(CVMTR_ESTADO_FUNCIONAL, FALSE)||' '||COALESCE(CVMTR_TONELAJE, 0)||' '||COALESCE(CVMTR_OBSERVACION, '''')||' '||COALESCE(CVMTR_ESTADO, FALSE)||' '||COALESCE(CVMTR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CVMTR_USUARIO_INSERT, '''')||' '||COALESCE(CVMTR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CVMTR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_VEH_MOTOR
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @param IN_CVMRC_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE MARCA
* @param IN_CVCMB_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE COMBUSTIBLE
* @param IN_CVMTR_SERIE SERIE DE FABRICA DEL MOTOR
* @param IN_CVMTR_ANIO_FABRICACION ANIO DE FABRICACION DEL MOTOR.
* @param IN_CVMTR_ESTADO_FUNCIONAL ESTADO DE FUNCIONAMIENTO DEL MOTOR
* @param IN_CVMTR_TONELAJE CAPACIDAD DE CARGA
* @param IN_CVMTR_INGRESO INDICA SI EL MOTOR ESTA DENTRO DE LA PROVINCIA
* @param IN_CVMTR_FECHA_INGRESO FECHA DE INGRESO DEL MOTOR A LA PROVINCIA
* @param IN_CVMTR_SALIO INDICA SI EL MOTOR ESTA DENTRO DE LA PRONVINCIA
* @param IN_CVMTR_FECHA_SALIDA FECHA DE SALIDA DEL MOTOR DE LA PROVINCIA
* @param IN_CVMTR_OBSERVACION INFORMACION ADICIONAL
* @param IN_CVMTR_ESTADO ESTADO DEL REGISTRO
* @param IN_CVMTR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_UPDATE(
IN IN_CVMTR_CODIGO SII.CGG_VEH_MOTOR.CVMTR_CODIGO%TYPE,
IN IN_CVCLN_CODIGO SII.CGG_VEH_MOTOR.CVCLN_CODIGO%TYPE,
IN IN_CVMRC_CODIGO SII.CGG_VEH_MOTOR.CVMRC_CODIGO%TYPE,
IN IN_CVCMB_CODIGO SII.CGG_VEH_MOTOR.CVCMB_CODIGO%TYPE,
IN IN_CVMTR_SERIE SII.CGG_VEH_MOTOR.CVMTR_SERIE%TYPE,
IN IN_CVMTR_ANIO_FABRICACION SII.CGG_VEH_MOTOR.CVMTR_ANIO_FABRICACION%TYPE,
IN IN_CVMTR_ESTADO_FUNCIONAL SII.CGG_VEH_MOTOR.CVMTR_ESTADO_FUNCIONAL%TYPE,
IN IN_CVMTR_TONELAJE SII.CGG_VEH_MOTOR.CVMTR_TONELAJE%TYPE,
IN IN_CVMTR_INGRESO SII.CGG_VEH_MOTOR.CVMTR_INGRESO%TYPE,
IN IN_CVMTR_FECHA_INGRESO SII.CGG_VEH_MOTOR.CVMTR_FECHA_INGRESO%TYPE,
IN IN_CVMTR_SALIO SII.CGG_VEH_MOTOR.CVMTR_SALIO%TYPE,
IN IN_CVMTR_FECHA_SALIDA SII.CGG_VEH_MOTOR.CVMTR_FECHA_SALIDA%TYPE,
IN IN_CVMTR_OBSERVACION SII.CGG_VEH_MOTOR.CVMTR_OBSERVACION%TYPE,
IN IN_CVMTR_ESTADO SII.CGG_VEH_MOTOR.CVMTR_ESTADO%TYPE,
IN IN_CVMTR_USUARIO_UPDATE SII.CGG_VEH_MOTOR.CVMTR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_MOTOR SET
		CVCLN_CODIGO = IN_CVCLN_CODIGO, 
		CVMRC_CODIGO = IN_CVMRC_CODIGO, 
		CVCMB_CODIGO = IN_CVCMB_CODIGO, 
		CVMTR_SERIE = IN_CVMTR_SERIE, 
		CVMTR_ANIO_FABRICACION = IN_CVMTR_ANIO_FABRICACION, 
		CVMTR_ESTADO_FUNCIONAL = IN_CVMTR_ESTADO_FUNCIONAL, 
		CVMTR_TONELAJE = IN_CVMTR_TONELAJE, 
		CVMTR_INGRESO = IN_CVMTR_INGRESO, 
		CVMTR_FECHA_INGRESO = IN_CVMTR_FECHA_INGRESO, 
		CVMTR_SALIO = IN_CVMTR_SALIO, 
		CVMTR_FECHA_SALIDA = IN_CVMTR_FECHA_SALIDA, 
		CVMTR_OBSERVACION = IN_CVMTR_OBSERVACION, 
		CVMTR_ESTADO = IN_CVMTR_ESTADO, 
		CVMTR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CVMTR_USUARIO_UPDATE = IN_CVMTR_USUARIO_UPDATE
	WHERE
		CVMTR_CODIGO = IN_CVMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_VEH_MOTOR
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_SELECT(
IN IN_CVMTR_CODIGO SII.CGG_VEH_MOTOR.CVMTR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVMTR_CODIGO, 
		CVCLN_CODIGO, 
		CVMRC_CODIGO, 
		CVCMB_CODIGO, 
		CVMTR_SERIE, 
		CVMTR_ANIO_FABRICACION, 
		CVMTR_ESTADO_FUNCIONAL, 
		CVMTR_TONELAJE, 
		CVMTR_INGRESO, 
		CVMTR_FECHA_INGRESO, 
		CVMTR_SALIO, 
		CVMTR_FECHA_SALIDA, 
		CVMTR_OBSERVACION, 
		CVMTR_ESTADO, 
		CVMTR_FECHA_INSERT, 
		CVMTR_USUARIO_INSERT, 
		CVMTR_FECHA_UPDATE, 
		CVMTR_USUARIO_UPDATE
	FROM SII.CGG_VEH_MOTOR
	WHERE CVMTR_ESTADO = TRUE AND 
		CVMTR_CODIGO = IN_CVMTR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_VEH_MOTOR
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_DELETE(
IN IN_CVMTR_CODIGO SII.CGG_VEH_MOTOR.CVMTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_MOTOR
	WHERE
		CVMTR_CODIGO = IN_CVMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_VEH_MOTOR
* @param IN_CVMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_DELETE_SOFT(
IN IN_CVMTR_CODIGO SII.CGG_VEH_MOTOR.CVMTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_MOTOR SET
		CVMTR_ESTADO = FALSE
	WHERE
		CVMTR_CODIGO = IN_CVMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_S_CGG_VEH_COMBUSTIBLE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_COMBUSTIBLE.
* @param IN_CVCMB_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE COMBUSTIBLE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_S_CGG_VEH_COMBUSTIBLE(
IN IN_CVCMB_CODIGO SII.CGG_VEH_MOTOR.CVCMB_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVMTR_CODIGO, 
		CVCLN_CODIGO, 
		CVMRC_CODIGO, 
		CVCMB_CODIGO, 
		CVMTR_SERIE, 
		CVMTR_ANIO_FABRICACION, 
		CVMTR_ESTADO_FUNCIONAL, 
		CVMTR_TONELAJE, 
		CVMTR_INGRESO, 
		CVMTR_FECHA_INGRESO, 
		CVMTR_SALIO, 
		CVMTR_FECHA_SALIDA, 
		CVMTR_OBSERVACION, 
		CVMTR_ESTADO, 
		CVMTR_FECHA_INSERT, 
		CVMTR_USUARIO_INSERT, 
		CVMTR_FECHA_UPDATE, 
		CVMTR_USUARIO_UPDATE
	FROM SII.CGG_VEH_MOTOR
	WHERE CVMTR_ESTADO = TRUE AND 
		CVCMB_CODIGO = IN_CVCMB_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_D_CGG_VEH_COMBUSTIBLE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_COMBUSTIBLE.
* @param IN_CVCMB_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE COMBUSTIBLE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_D_CGG_VEH_COMBUSTIBLE(
IN IN_CVCMB_CODIGO SII.CGG_VEH_MOTOR.CVCMB_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_MOTOR
	WHERE
		CVCMB_CODIGO = IN_CVCMB_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_D_CGG_VEH_COMBUSTIBLE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_COMBUSTIBLE.
* @param IN_CVCMB_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE COMBUSTIBLE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_DS_CGG_VEH_COMBUSTIBLE(
IN IN_CVCMB_CODIGO SII.CGG_VEH_MOTOR.CVCMB_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_MOTOR SET
		cvmtr_estado = false
	WHERE
		CVCMB_CODIGO = IN_CVCMB_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_S_CGG_VEH_MARCA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_MARCA.
* @param IN_CVMRC_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE MARCA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_S_CGG_VEH_MARCA(
IN IN_CVMRC_CODIGO SII.CGG_VEH_MOTOR.CVMRC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVMTR_CODIGO, 
		CVCLN_CODIGO, 
		CVMRC_CODIGO, 
		CVCMB_CODIGO, 
		CVMTR_SERIE, 
		CVMTR_ANIO_FABRICACION, 
		CVMTR_ESTADO_FUNCIONAL, 
		CVMTR_TONELAJE, 
		CVMTR_INGRESO, 
		CVMTR_FECHA_INGRESO, 
		CVMTR_SALIO, 
		CVMTR_FECHA_SALIDA, 
		CVMTR_OBSERVACION, 
		CVMTR_ESTADO, 
		CVMTR_FECHA_INSERT, 
		CVMTR_USUARIO_INSERT, 
		CVMTR_FECHA_UPDATE, 
		CVMTR_USUARIO_UPDATE
	FROM SII.CGG_VEH_MOTOR
	WHERE CVMTR_ESTADO = TRUE AND 
		CVMRC_CODIGO = IN_CVMRC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_D_CGG_VEH_MARCA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_MARCA.
* @param IN_CVMRC_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE MARCA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_D_CGG_VEH_MARCA(
IN IN_CVMRC_CODIGO SII.CGG_VEH_MOTOR.CVMRC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_MOTOR
	WHERE
		CVMRC_CODIGO = IN_CVMRC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_D_CGG_VEH_MARCA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_MARCA.
* @param IN_CVMRC_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE MARCA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_DS_CGG_VEH_MARCA(
IN IN_CVMRC_CODIGO SII.CGG_VEH_MOTOR.CVMRC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_MOTOR SET
		cvmtr_estado = false
	WHERE
		CVMRC_CODIGO = IN_CVMRC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_S_CGG_VEH_CILINDRAJE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_CILINDRAJE.
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_S_CGG_VEH_CILINDRAJE(
IN IN_CVCLN_CODIGO SII.CGG_VEH_MOTOR.CVCLN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVMTR_CODIGO, 
		CVCLN_CODIGO, 
		CVMRC_CODIGO, 
		CVCMB_CODIGO, 
		CVMTR_SERIE, 
		CVMTR_ANIO_FABRICACION, 
		CVMTR_ESTADO_FUNCIONAL, 
		CVMTR_TONELAJE, 
		CVMTR_INGRESO, 
		CVMTR_FECHA_INGRESO, 
		CVMTR_SALIO, 
		CVMTR_FECHA_SALIDA, 
		CVMTR_OBSERVACION, 
		CVMTR_ESTADO, 
		CVMTR_FECHA_INSERT, 
		CVMTR_USUARIO_INSERT, 
		CVMTR_FECHA_UPDATE, 
		CVMTR_USUARIO_UPDATE
	FROM SII.CGG_VEH_MOTOR
	WHERE CVMTR_ESTADO = TRUE AND 
		CVCLN_CODIGO = IN_CVCLN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_D_CGG_VEH_CILINDRAJE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_CILINDRAJE.
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_D_CGG_VEH_CILINDRAJE(
IN IN_CVCLN_CODIGO SII.CGG_VEH_MOTOR.CVCLN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_MOTOR
	WHERE
		CVCLN_CODIGO = IN_CVCLN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_MOTOR_D_CGG_VEH_CILINDRAJE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_MOTOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_CILINDRAJE.
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_MOTOR_DS_CGG_VEH_CILINDRAJE(
IN IN_CVCLN_CODIGO SII.CGG_VEH_MOTOR.CVCLN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_MOTOR SET
		cvmtr_estado = false
	WHERE
		CVCLN_CODIGO = IN_CVCLN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

