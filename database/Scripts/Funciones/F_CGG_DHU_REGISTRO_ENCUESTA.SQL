/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA.
* @param IN_CDRGE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ENCUESTAS
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @param IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @param IN_CDAPE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE APLICACION DE LA ENCUESTA
* @param IN_CDRGE_RESPUESTA_ABIERTA REDACCION DEL TEXTO DE RESPUESTA A PREGUNTAS ABIERTAS
* @param IN_CDRGE_FECHA_REGISTRO FECHA DE REGISTRO DE LA  ENCUESTA
* @param IN_CDRGE_OBSERVACION OBSERVACION DE LA ENCUESTA
* @param IN_CDRGE_ESTADO ESTADO DEL REGISTRO
* @param IN_CDRGE_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDRGE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_INSERT(
IN IN_CDRGE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_CODIGO%TYPE, 
IN IN_CDPRG_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDPRG_CODIGO%TYPE, 
IN IN_CDRES_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRES_CODIGO%TYPE, 
IN IN_CDAPE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDAPE_CODIGO%TYPE, 
IN IN_CDRGE_RESPUESTA_ABIERTA SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_RESPUESTA_ABIERTA%TYPE, 
IN IN_CDRGE_FECHA_REGISTRO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_FECHA_REGISTRO%TYPE, 
IN IN_CDRGE_OBSERVACION SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_OBSERVACION%TYPE, 
IN IN_CDRGE_ESTADO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_ESTADO%TYPE, 
IN IN_CDRGE_USUARIO_INSERT SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_USUARIO_INSERT%TYPE, 
IN IN_CDRGE_USUARIO_UPDATE SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDRGE_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_REGISTRO_ENCUESTA','CDRGE_CODIGO','CDRGE') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDRGE_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_REGISTRO_ENCUESTA(
		CDRGE_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDAPE_CODIGO, 
		CDRGE_RESPUESTA_ABIERTA, 
		CDRGE_FECHA_REGISTRO, 
		CDRGE_OBSERVACION, 
		CDRGE_ESTADO, 
		CDRGE_FECHA_INSERT, 
		CDRGE_USUARIO_INSERT, 
		CDRGE_FECHA_UPDATE, 
		CDRGE_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CDPRG_CODIGO, 
		IN_CDRES_CODIGO, 
		IN_CDAPE_CODIGO, 
		IN_CDRGE_RESPUESTA_ABIERTA, 
		IN_CDRGE_FECHA_REGISTRO, 
		IN_CDRGE_OBSERVACION, 
		IN_CDRGE_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDRGE_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDRGE_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDRGE_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDAPE_CODIGO, 
		CDRGE_RESPUESTA_ABIERTA, 
		CDRGE_FECHA_REGISTRO, 
		CDRGE_OBSERVACION, 
		CDRGE_ESTADO, 
		CDRGE_FECHA_INSERT, 
		CDRGE_USUARIO_INSERT, 
		CDRGE_FECHA_UPDATE, 
		CDRGE_USUARIO_UPDATE
	FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE CDRGE_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP TEXT;
BEGIN
	--OPEN TMP_REF FOR EXECUTE
	TMP:='SELECT
		DISTINCT RGE.CDPRG_CODIGO, 
		--RGE.CDRGE_CODIGO, 	 
		RGE.CDAPE_CODIGO, 
		ETA.CDENC_NOMBRE,
		PRG.CDPRG_DESCRIPCION,
		--RSG.CDRES_DESCRIPCION,
		--RGE.CDRES_CODIGO,		
							
		array_to_string(ARRAY(
			SELECT 
				''{''''CDRES_CODIGO'''':''''''||RES.CDRES_CODIGO||
				'''''',''''CDRES_DESCRIPCION'''':''''''||CDRES_DESCRIPCION||				
				
				'''''',''''CDPRG_CUANTIFICABLE'''':''''''||PR1.CDPRG_CUANTIFICABLE||
				'''''',''''CDPRG_MULTIPLE'''':''''''||PR1.CDPRG_MULTIPLE||
				
				''''''}''
				
				FROM SII.CGG_DHU_PREGUNTA PR1,CGG_DHU_RESPUESTA RES 
				WHERE CDRES_ESTADO = TRUE AND PR1.CDPRG_CODIGO = RGE.CDPRG_CODIGO AND RES.CDRES_CODIGO IN (SELECT CDRES_CODIGO FROM CGG_DHU_REGISTRO_ENCUESTA WHERE CDPRG_CODIGO = RGE.CDPRG_CODIGO)	
		),'','') JSON_INFO,
		
		RGE.CDRGE_RESPUESTA_ABIERTA, 
		RGE.CDRGE_FECHA_REGISTRO, 
		RGE.CDRGE_OBSERVACION, 
		RGE.CDRGE_ESTADO, 		
		RGE.CDRGE_USUARIO_INSERT, 		
		RGE.CDRGE_USUARIO_UPDATE
	FROM SII.CGG_DHU_REGISTRO_ENCUESTA RGE
	INNER JOIN SII.CGG_DHU_PREGUNTA PRG ON(PRG.CDPRG_CODIGO=RGE.CDPRG_CODIGO)
	INNER JOIN SII.CGG_DHU_RESPUESTA RSG ON(RSG.CDRES_CODIGO=RGE.CDRES_CODIGO)
	INNER JOIN SII.CGG_DHU_APLICACION_ENCUESTA APE ON (APE.CDAPE_CODIGO=RGE.CDAPE_CODIGO)
	INNER JOIN SII.CGG_DHU_CRONOGRAMA_ENCUESTA ENC  ON(ENC.CDCRE_CODIGO=APE.CDCRE_CODIGO)
	INNER JOIN SII.CGG_DHU_ENCUESTA ETA ON(ETA.CDENC_CODIGO=ENC.CDENC_CODIGO)
	WHERE RGE.CDRGE_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN RGE.CDRGE_CODIGO IS NULL THEN '''' ELSE RGE.CDRGE_CODIGO END ||'' ''||
	CASE WHEN RGE.CDPRG_CODIGO IS NULL THEN '''' ELSE RGE.CDPRG_CODIGO END ||'' ''||
	CASE WHEN RGE.CDRES_CODIGO IS NULL THEN '''' ELSE RGE.CDRES_CODIGO END ||'' ''||
	CASE WHEN RGE.CDAPE_CODIGO IS NULL THEN '''' ELSE RGE.CDAPE_CODIGO END ||'' ''||
	CASE WHEN RGE.CDRGE_RESPUESTA_ABIERTA IS NULL THEN '''' ELSE RGE.CDRGE_RESPUESTA_ABIERTA END ||'' ''||
	CASE WHEN RGE.CDRGE_FECHA_REGISTRO IS NULL THEN CURRENT_TIMESTAMP ELSE RGE.CDRGE_FECHA_REGISTRO END ||'' ''||
	CASE WHEN RGE.CDRGE_OBSERVACION IS NULL THEN '''' ELSE RGE.CDRGE_OBSERVACION END ||'' ''||
	CASE WHEN RGE.CDRGE_ESTADO IS NULL THEN FALSE ELSE RGE.CDRGE_ESTADO END ||'' ''||
	CASE WHEN RGE.CDRGE_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE RGE.CDRGE_FECHA_INSERT END ||'' ''||
	CASE WHEN RGE.CDRGE_USUARIO_INSERT IS NULL THEN '''' ELSE RGE.CDRGE_USUARIO_INSERT END ||'' ''||
	CASE WHEN RGE.CDRGE_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE RGE.CDRGE_FECHA_UPDATE END ||'' ''||
	CASE WHEN RGE.CDRGE_USUARIO_UPDATE IS NULL THEN '''' ELSE RGE.CDRGE_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	OPEN TMP_REF FOR EXECUTE TMP;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE CDRGE_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
	TMP_ROWS int4;
	TMP TEXT;
BEGIN
	TMP:='SELECT COUNT(DISTINCT(RGE.CDPRG_CODIGO))
	FROM SII.CGG_DHU_REGISTRO_ENCUESTA RGE
	INNER JOIN SII.CGG_DHU_PREGUNTA PRG ON(PRG.CDPRG_CODIGO=RGE.CDPRG_CODIGO)
	INNER JOIN SII.CGG_DHU_RESPUESTA RSG ON(RSG.CDRES_CODIGO=RGE.CDRES_CODIGO)
	INNER JOIN SII.CGG_DHU_APLICACION_ENCUESTA APE ON (APE.CDAPE_CODIGO=RGE.CDAPE_CODIGO)
	INNER JOIN SII.CGG_DHU_CRONOGRAMA_ENCUESTA ENC  ON(ENC.CDCRE_CODIGO=APE.CDCRE_CODIGO)
	INNER JOIN SII.CGG_DHU_ENCUESTA ETA ON(ETA.CDENC_CODIGO=ENC.CDENC_CODIGO)
	WHERE RGE.CDRGE_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN RGE.CDRGE_CODIGO IS NULL THEN '''' ELSE RGE.CDRGE_CODIGO END ||'' ''||
	CASE WHEN RGE.CDPRG_CODIGO IS NULL THEN '''' ELSE RGE.CDPRG_CODIGO END ||'' ''||
	CASE WHEN RGE.CDRES_CODIGO IS NULL THEN '''' ELSE RGE.CDRES_CODIGO END ||'' ''||
	CASE WHEN RGE.CDAPE_CODIGO IS NULL THEN '''' ELSE RGE.CDAPE_CODIGO END ||'' ''||
	CASE WHEN RGE.CDRGE_RESPUESTA_ABIERTA IS NULL THEN '''' ELSE RGE.CDRGE_RESPUESTA_ABIERTA END ||'' ''||
	CASE WHEN RGE.CDRGE_FECHA_REGISTRO IS NULL THEN CURRENT_TIMESTAMP ELSE RGE.CDRGE_FECHA_REGISTRO END ||'' ''||
	CASE WHEN RGE.CDRGE_OBSERVACION IS NULL THEN '''' ELSE RGE.CDRGE_OBSERVACION END ||'' ''||
	CASE WHEN RGE.CDRGE_ESTADO IS NULL THEN FALSE ELSE RGE.CDRGE_ESTADO END ||'' ''||
	CASE WHEN RGE.CDRGE_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE RGE.CDRGE_FECHA_INSERT END ||'' ''||
	CASE WHEN RGE.CDRGE_USUARIO_INSERT IS NULL THEN '''' ELSE RGE.CDRGE_USUARIO_INSERT END ||'' ''||
	CASE WHEN RGE.CDRGE_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE RGE.CDRGE_FECHA_UPDATE END ||'' ''||
	CASE WHEN RGE.CDRGE_USUARIO_UPDATE IS NULL THEN '''' ELSE RGE.CDRGE_USUARIO_UPDATE END ) = 1';
	EXECUTE TMP INTO TMP_ROWS;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_REGISTRO_ENCUESTA.
* @param IN_CDRGE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ENCUESTAS
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @param IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @param IN_CDAPE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE APLICACION DE LA ENCUESTA
* @param IN_CDRGE_RESPUESTA_ABIERTA REDACCION DEL TEXTO DE RESPUESTA A PREGUNTAS ABIERTAS
* @param IN_CDRGE_FECHA_REGISTRO FECHA DE REGISTRO DE LA  ENCUESTA
* @param IN_CDRGE_OBSERVACION OBSERVACION DE LA ENCUESTA
* @param IN_CDRGE_ESTADO ESTADO DEL REGISTRO
* @param IN_CDRGE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_UPDATE(
IN IN_CDRGE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_CODIGO%TYPE, 
IN IN_CDPRG_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDPRG_CODIGO%TYPE, 
IN IN_CDRES_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRES_CODIGO%TYPE, 
IN IN_CDAPE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDAPE_CODIGO%TYPE, 
IN IN_CDRGE_RESPUESTA_ABIERTA SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_RESPUESTA_ABIERTA%TYPE, 
IN IN_CDRGE_FECHA_REGISTRO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_FECHA_REGISTRO%TYPE, 
IN IN_CDRGE_OBSERVACION SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_OBSERVACION%TYPE, 
IN IN_CDRGE_ESTADO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_ESTADO%TYPE, 
IN IN_CDRGE_USUARIO_UPDATE SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_REGISTRO_ENCUESTA SET
		CDPRG_CODIGO = IN_CDPRG_CODIGO, 
		CDRES_CODIGO = IN_CDRES_CODIGO, 
		CDAPE_CODIGO = IN_CDAPE_CODIGO, 
		CDRGE_RESPUESTA_ABIERTA = IN_CDRGE_RESPUESTA_ABIERTA, 
		CDRGE_FECHA_REGISTRO = IN_CDRGE_FECHA_REGISTRO, 
		CDRGE_OBSERVACION = IN_CDRGE_OBSERVACION, 
		CDRGE_ESTADO = IN_CDRGE_ESTADO, 
		CDRGE_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDRGE_USUARIO_UPDATE = IN_CDRGE_USUARIO_UPDATE
	WHERE
		CDRGE_CODIGO = IN_CDRGE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA.
* @param IN_CDRGE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ENCUESTAS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_SELECT(
IN IN_CDRGE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDRGE_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDAPE_CODIGO, 
		CDRGE_RESPUESTA_ABIERTA, 
		CDRGE_FECHA_REGISTRO, 
		CDRGE_OBSERVACION, 
		CDRGE_ESTADO, 
		CDRGE_FECHA_INSERT, 
		CDRGE_USUARIO_INSERT, 
		CDRGE_FECHA_UPDATE, 
		CDRGE_USUARIO_UPDATE
	FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE CDRGE_ESTADO = TRUE AND 
		CDRGE_CODIGO = IN_CDRGE_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA.
* @param IN_CDRGE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ENCUESTAS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_DELETE(
IN IN_CDRGE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE
		CDRGE_CODIGO = IN_CDRGE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA.
* @param IN_CDRGE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ENCUESTAS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_DELETE_SOFT(
IN IN_CDRGE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRGE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_REGISTRO_ENCUESTA SET
		CDRGE_ESTADO = FALSE
	WHERE
		CDRGE_CODIGO = IN_CDRGE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_S_CGG_DHU_RESPUESTA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_RESPUESTA.
* @param IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_S_CGG_DHU_RESPUESTA(
IN IN_CDRES_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDRGE_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDAPE_CODIGO, 
		CDRGE_RESPUESTA_ABIERTA, 
		CDRGE_FECHA_REGISTRO, 
		CDRGE_OBSERVACION, 
		CDRGE_ESTADO, 
		CDRGE_FECHA_INSERT, 
		CDRGE_USUARIO_INSERT, 
		CDRGE_FECHA_UPDATE, 
		CDRGE_USUARIO_UPDATE
	FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE CDRGE_ESTADO = TRUE AND 
		CDRES_CODIGO = IN_CDRES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_D_CGG_DHU_RESPUESTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_RESPUESTA.
* @param IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_D_CGG_DHU_RESPUESTA(
IN IN_CDRES_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE
		CDRES_CODIGO = IN_CDRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_D_CGG_DHU_RESPUESTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_RESPUESTA.
* @param IN_CDRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA RESPUESTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_DS_CGG_DHU_RESPUESTA(
IN IN_CDRES_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_REGISTRO_ENCUESTA SET
		cdrge_estado = false
	WHERE
		CDRES_CODIGO = IN_CDRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_S_CGG_DHU_APLICACION_ENCUESTA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_APLICACION_ENCUESTA.
* @param IN_CDAPE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE APLICACION DE LA ENCUESTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_S_CGG_DHU_APLICACION_ENCUESTA(
IN IN_CDAPE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDAPE_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDRGE_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDAPE_CODIGO, 
		CDRGE_RESPUESTA_ABIERTA, 
		CDRGE_FECHA_REGISTRO, 
		CDRGE_OBSERVACION, 
		CDRGE_ESTADO, 
		CDRGE_FECHA_INSERT, 
		CDRGE_USUARIO_INSERT, 
		CDRGE_FECHA_UPDATE, 
		CDRGE_USUARIO_UPDATE
	FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE CDRGE_ESTADO = TRUE AND 
		CDAPE_CODIGO = IN_CDAPE_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_D_CGG_DHU_APLICACION_ENCUESTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_APLICACION_ENCUESTA.
* @param IN_CDAPE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE APLICACION DE LA ENCUESTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_D_CGG_DHU_APLICACION_ENCUESTA(
IN IN_CDAPE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDAPE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE
		CDAPE_CODIGO = IN_CDAPE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_D_CGG_DHU_APLICACION_ENCUESTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_APLICACION_ENCUESTA.
* @param IN_CDAPE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE APLICACION DE LA ENCUESTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_DS_CGG_DHU_APLICACION_ENCUESTA(
IN IN_CDAPE_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDAPE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_REGISTRO_ENCUESTA SET
		cdrge_estado = false
	WHERE
		CDAPE_CODIGO = IN_CDAPE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_S_CGG_DHU_PREGUNTA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_S_CGG_DHU_PREGUNTA(
IN IN_CDPRG_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDPRG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDRGE_CODIGO, 
		CDPRG_CODIGO, 
		CDRES_CODIGO, 
		CDAPE_CODIGO, 
		CDRGE_RESPUESTA_ABIERTA, 
		CDRGE_FECHA_REGISTRO, 
		CDRGE_OBSERVACION, 
		CDRGE_ESTADO, 
		CDRGE_FECHA_INSERT, 
		CDRGE_USUARIO_INSERT, 
		CDRGE_FECHA_UPDATE, 
		CDRGE_USUARIO_UPDATE
	FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE CDRGE_ESTADO = TRUE AND 
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_D_CGG_DHU_PREGUNTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_D_CGG_DHU_PREGUNTA(
IN IN_CDPRG_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDPRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_REGISTRO_ENCUESTA
	WHERE
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_REGISTRO_ENCUESTA_D_CGG_DHU_PREGUNTA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_REGISTRO_ENCUESTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_REGISTRO_ENCUESTA_DS_CGG_DHU_PREGUNTA(
IN IN_CDPRG_CODIGO SII.CGG_DHU_REGISTRO_ENCUESTA.CDPRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_REGISTRO_ENCUESTA SET
		cdrge_estado = false
	WHERE
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

