/**
*FUNCION. SII.F_RPT_NOMBRE_OFERTANTE.
*LA FUNCION COMPRUEBA QUE EL OFERTANTE SEA RESIDENTE O PERSONA JURIDICA EN BASE AL USUARIO
*@param IN_CUSU_CODIGO CODIGO DE USUARIO.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_NOMBRE_OFERTANTE(
IN IN_CUSU_CODIGO VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	OUT_RESULTADO TEXT;
	OUT_RESULTADO2 TEXT;
	CRPERCODIGO VARCHAR(20);
	CRPJRCODIGO VARCHAR(20);
BEGIN
	OUT_RESULTADO := '';	
	OUT_RESULTADO2 := '';	

	SELECT CRPER_CODIGO,CRPJR_CODIGO INTO CRPERCODIGO, CRPJRCODIGO FROM SII.CGG_USUARIO WHERE CUSU_CODIGO=IN_CUSU_CODIGO;
	IF (CRPERCODIGO IS NOT NULL AND CRPJRCODIGO IS NULL) THEN
		SELECT COALESCE(P.CRPER_NOMBRES,'')||' '||COALESCE(P.CRPER_APELLIDO_PATERNO,'')||' '||COALESCE(P.CRPER_APELLIDO_MATERNO,'') INTO OUT_RESULTADO FROM SII.CGG_RES_PERSONA P WHERE P.CRPER_CODIGO = CRPERCODIGO;
	ELSIF (CRPJRCODIGO IS NOT NULL) THEN
		SELECT COALESCE(PJ.CRPJR_RAZON_SOCIAL,'') INTO OUT_RESULTADO2 FROM SII.CGG_RES_PERSONA_JURIDICA PJ WHERE  PJ.CRPJR_CODIGO = CRPJRCODIGO;
		OUT_RESULTADO := OUT_RESULTADO2;
	END IF;
	
	RETURN OUT_RESULTADO;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_NOMBRE_OFERTANTE.
*LA FUNCION COMPRUEBA QUE EL OFERTANTE SEA RESIDENTE O PERSONA JURIDICA EN BASE AL USUARIO
*@param IN_CUSU_CODIGO CODIGO DE USUARIO.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_NOMBRE_OFERTANTE(
IN IN_USUARIO VARCHAR,
IN IN_TIPO INT
)RETURNS TEXT AS
$$
DECLARE
	OUT_RESULTADO TEXT;
	OUT_RESULTADO2 TEXT;
	CRPERCODIGO VARCHAR(20);
	CRPJRCODIGO VARCHAR(20);
	IN_CUSU_CODIGO VARCHAR;
BEGIN
	OUT_RESULTADO := '';	
	OUT_RESULTADO2 := '';	
	IF IN_TIPO = 1 THEN
		SELECT CUSU_CODIGO INTO IN_CUSU_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO =IN_USUARIO;
	END IF;
	SELECT CRPER_CODIGO,CRPJR_CODIGO INTO CRPERCODIGO, CRPJRCODIGO FROM SII.CGG_USUARIO WHERE CUSU_CODIGO=IN_CUSU_CODIGO;
	IF (CRPERCODIGO IS NOT NULL AND CRPJRCODIGO IS NULL) THEN
		SELECT COALESCE(P.CRPER_NOMBRES,'')||' '||COALESCE(P.CRPER_APELLIDO_PATERNO,'')||' '||COALESCE(P.CRPER_APELLIDO_MATERNO,'') INTO OUT_RESULTADO FROM SII.CGG_RES_PERSONA P WHERE P.CRPER_CODIGO = CRPERCODIGO;
	ELSIF (CRPJRCODIGO IS NOT NULL) THEN
		SELECT COALESCE(PJ.CRPJR_RAZON_SOCIAL,'') INTO OUT_RESULTADO2 FROM SII.CGG_RES_PERSONA_JURIDICA PJ WHERE  PJ.CRPJR_CODIGO = CRPJRCODIGO;
		OUT_RESULTADO := OUT_RESULTADO2;
	END IF;
	
	RETURN OUT_RESULTADO;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_NOMBRE_AUSPICIANTE.
*LA FUNCION RETORNA UNA PERSONA O RAZON SOCIAL CON SU REPRESENTANTE LEGAL
*@param IN_PERSONA CODIGO DE USUARIO.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_NOMBRE_AUSPICIANTE(
IN IN_CRPER_AUSPICIANTE VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	OUT_RESULTADO TEXT;
	OUT_RESULTADO2 TEXT;
	CRPERCODIGO VARCHAR(20);
	CRPJRCODIGO VARCHAR(20);
BEGIN
	OUT_RESULTADO := '';	
	OUT_RESULTADO2 := '';		
	SELECT CRPER_CODIGO INTO CRPERCODIGO FROM SII.CGG_RES_PERSONA WHERE CRPER_CODIGO=IN_CRPER_AUSPICIANTE;
	SELECT CRPJR_CODIGO INTO CRPJRCODIGO FROM SII.CGG_RES_PERSONA_JURIDICA WHERE CRPJR_CODIGO=IN_CRPER_AUSPICIANTE;
	IF (CRPERCODIGO IS NOT NULL AND CRPJRCODIGO IS NULL) THEN
		SELECT COALESCE(P.CRPER_NOMBRES,'')||' '||COALESCE(P.CRPER_APELLIDO_PATERNO,'')||' '||COALESCE(P.CRPER_APELLIDO_MATERNO,'') INTO OUT_RESULTADO FROM SII.CGG_RES_PERSONA P WHERE P.CRPER_CODIGO = CRPERCODIGO;
	ELSIF (CRPJRCODIGO IS NOT NULL) THEN
		--SELECT COALESCE(UPPER(PJ.CRPJR_RAZON_SOCIAL),'')||'  ('||(SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(RL.CRPER_CODIGO))||')' INTO OUT_RESULTADO2 
		SELECT COALESCE(UPPER(PJ.CRPJR_RAZON_SOCIAL),'') INTO OUT_RESULTADO2
		FROM SII.CGG_RES_PERSONA_JURIDICA PJ 
		INNER JOIN SII.CGG_RES_REPRESENTANTE_LEGAL RL ON(PJ.CRPJR_CODIGO = RL.CRPJR_CODIGO)  
		WHERE  PJ.CRPJR_CODIGO = CRPJRCODIGO;
		OUT_RESULTADO := OUT_RESULTADO2;
	END IF;	
	RETURN OUT_RESULTADO;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_UNION_CADENA
*LA FUNCION RETORNA UNA CADENA DE ACTIVIDADES ENLAZADAS
*@param IN_CTGTR_CODIGO CODIGO DE USUARIO.
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_UNION_CADENA(
IN IN_CTGTR_CODIGO VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	OUT_RESULTADO TEXT;
    TMP_CTACT_NOMBRE RECORD;
    VAR_NUM NUMERIC;
BEGIN
	OUT_RESULTADO:=', ';
	VAR_NUM:=0;
	FOR TMP_CTACT_NOMBRE IN SELECT TACT.CTACT_NOMBRE 
				FROM SII.CGG_TCT_ACTIVIDAD TACT 
				INNER JOIN SII.CGG_TCT_GRUPO_ACTIVIDAD TGRA ON( TGRA.CTACT_CODIGO=TACT.CTACT_CODIGO)  
				WHERE TGRA.CTGTR_CODIGO=IN_CTGTR_CODIGO
	LOOP
		 IF VAR_NUM = 0  THEN
		 VAR_NUM:=1;
		 OUT_RESULTADO:='  ';
		 END IF;
		 
	   OUT_RESULTADO:=OUT_RESULTADO||TMP_CTACT_NOMBRE.CTACT_NOMBRE||', ';	   
	END LOOP;
        OUT_RESULTADO:=SUBSTRING(OUT_RESULTADO FROM 1 FOR CHAR_LENGTH(OUT_RESULTADO)-2);
  RETURN OUT_RESULTADO;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
*FUNCION. SII.F_RPT_UNION_CADENA_TABLA
*LA FUNCION RETORNA UNA CADENA DE TEXTO
*@param IN_NOMBRE_TABLA NOMBRE DE LA TABLA.
*@param IN_CAMPO_AENCADENAR CAMPO A ENCADENAR.
*@param IN_CAMPO_FILTRO CAMPO QUE FILTRA LA INFORMACION
*@param IN_CAMPO_VALOR VALOR DEL CAMPO QUE SE FILTRARA
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_UNION_CADENA_TABLA(
IN IN_NOMBRE_TABLA VARCHAR,
IN IN_CAMPO_AENCADENAR VARCHAR,
IN IN_CAMPO_FILTRO VARCHAR,
IN IN_CAMPO_VALOR VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	OUT_RESULTADO TEXT;
        TMP_VALOR RECORD;
        VAR_NUM NUMERIC;
	SQL_TEXTO TEXT;
	TMP_CURSOR REFCURSOR;
	TMP_COLUMN TEXT;
BEGIN
	OUT_RESULTADO:=', ';
	VAR_NUM:=0;
	SQL_TEXTO:='SELECT '||IN_CAMPO_AENCADENAR||' FROM '||IN_NOMBRE_TABLA||' WHERE '||IN_CAMPO_FILTRO||' = '||QUOTE_LITERAL(IN_CAMPO_VALOR)||' ';
	OPEN TMP_CURSOR FOR EXECUTE SQL_TEXTO;
	LOOP
		FETCH TMP_CURSOR INTO TMP_COLUMN;
		EXIT WHEN NOT FOUND;
	   OUT_RESULTADO:=OUT_RESULTADO||TMP_COLUMN||', ';	
	    IF VAR_NUM = 0  THEN
		  VAR_NUM:=1;
		  OUT_RESULTADO:='';
	    END IF;
	END LOOP;
	CLOSE TMP_CURSOR;
	
	OUT_RESULTADO:=SUBSTRING(OUT_RESULTADO FROM 1 FOR CHAR_LENGTH(OUT_RESULTADO)-2);
	
  RETURN OUT_RESULTADO;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_PERSONA_TIPO.
*LA FUNCION COMPRUEBA QUE EL OFERTANTE SEA RESIDENTE O PERSONA JURIDICA EN BASE AL USUARIO Y DEVUELVE TRUE SI ES P.NATURAL O FALSE SI ES P.JURIDICA
*@param IN_CUSU_CODIGO CODIGO DE USUARIO.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_PERSONA_TIPO(
IN IN_CUSU_CODIGO VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	OUT_RESULTADO BOOLEAN;	
	CRPERCODIGO VARCHAR(20);
	CRPJRCODIGO VARCHAR(20);
BEGIN
	OUT_RESULTADO := TRUE;		

	SELECT CRPER_CODIGO,CRPJR_CODIGO INTO CRPERCODIGO, CRPJRCODIGO FROM SII.CGG_USUARIO WHERE CUSU_CODIGO=IN_CUSU_CODIGO;
	IF (CRPERCODIGO IS NOT NULL AND CRPJRCODIGO IS NULL) THEN
	   OUT_RESULTADO:=TRUE;		
	ELSIF (CRPJRCODIGO IS NOT NULL) THEN		
	   OUT_RESULTADO := FALSE;
	END IF;
	
	RETURN OUT_RESULTADO;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_TOTAL_MOVILIDAD.
*LA FUNCION OBTIENE UN VALOR TOTAL EN BASE A LOS CRITERIOS QUE SE BUSCAN EN LA TABLA MOVILIDAD
*@param IN_CRTST_TIPO_SOLICITUD TIPO DE SOLICITUD.
*@param IN_CRPER_NACIONALIDAD NACIONALIDAD.
*@param IN_CONDICION CONDICIONAL.
*@param IN_CRPER_INGRESO_SALIDA INGRESO O SALIDA.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_TOTAL_MOVILIDAD(
IN IN_CRTST_TIPO_SOLICITUD VARCHAR,
IN IN_CRPER_NACIONALIDAD VARCHAR,
IN IN_CONDICION TEXT,
IN IN_CRPER_INGRESO_SALIDA INT
)RETURNS TEXT AS
$$
DECLARE	
	V_TOTAL INT;	
	SQL_TEXTO TEXT;
	TMP_CURSOR REFCURSOR;
	TMP_COLUMN INT;
BEGIN	
	V_TOTAL:=0;		
	SQL_TEXTO := 'SELECT COUNT(MOV.CRPER_CODIGO) 
	FROM SII.CGG_RES_MOVILIDAD MOV
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=MOV.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON(RSD.CRPER_CODIGO=PER.CRPER_CODIGO)
	WHERE (SELECT SII.F_TIPO_SOLICITUD_PADRE(RSD.CRTST_CODIGO))='||QUOTE_LITERAL(IN_CRTST_TIPO_SOLICITUD)||'
	AND (SELECT UPPER(TRIM(PAI.CPAIS_NOMBRE)) FROM SII.CGG_PAIS PAI WHERE PAI.CPAIS_CODIGO=PER.CPAIS_CODIGO) '||IN_CONDICION||' '||QUOTE_LITERAL(IN_CRPER_NACIONALIDAD)||' 
	AND MOV.CRMOV_TIPO_OPERACION ='||QUOTE_LITERAL(IN_CRPER_INGRESO_SALIDA)||'';
	OPEN TMP_CURSOR FOR EXECUTE SQL_TEXTO;
	LOOP
		FETCH TMP_CURSOR INTO TMP_COLUMN;
		EXIT WHEN NOT FOUND;
	        V_TOTAL:=TMP_COLUMN;
	END LOOP;
	CLOSE TMP_CURSOR;
			
	RETURN V_TOTAL;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_TOTAL_MOVILIDAD.
*LA FUNCION OBTIENE UN VALOR TOTAL EN BASE A LOS CRITERIOS QUE SE BUSCAN EN LA TABLA MOVILIDAD
*@param IN_CRTST_TIPO_SOLICITUD TIPO DE SOLICITUD.
*@param IN_CRPER_NACIONALIDAD NACIONALIDAD.
*@param IN_CONDICION CONDICIONAL.
*@param IN_CRPER_INGRESO_SALIDA INGRESO O SALIDA.
*@param IN_FILTRO FILTRO DE INGRESO A GPS.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_TOTAL_MOVILIDAD(
IN IN_CRTST_TIPO_SOLICITUD VARCHAR,
IN IN_CRPER_NACIONALIDAD VARCHAR,
IN IN_CONDICION TEXT,
IN IN_CRPER_INGRESO_SALIDA INT,
IN IN_FILTRO BOOLEAN
)RETURNS TEXT AS
$$
DECLARE	
	V_TOTAL INT;	
	SQL_TEXTO TEXT;
	TMP_CURSOR REFCURSOR;
	TMP_COLUMN INT;
BEGIN	
	V_TOTAL:=0;		
	SQL_TEXTO := 'SELECT COUNT(MOV.CRPER_CODIGO) 
	FROM SII.CGG_RES_MOVILIDAD MOV
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=MOV.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON(RSD.CRPER_CODIGO=PER.CRPER_CODIGO)
	WHERE (SELECT SII.F_TIPO_SOLICITUD_PADRE(RSD.CRTST_CODIGO))='||QUOTE_LITERAL(IN_CRTST_TIPO_SOLICITUD)||'
	AND (SELECT UPPER(TRIM(PAI.CPAIS_NOMBRE)) FROM SII.CGG_PAIS PAI WHERE PAI.CPAIS_CODIGO=PER.CPAIS_CODIGO) '||IN_CONDICION||' '||QUOTE_LITERAL(IN_CRPER_NACIONALIDAD)||' 
	AND MOV.CRMOV_TIPO_OPERACION ='||QUOTE_LITERAL(IN_CRPER_INGRESO_SALIDA)||'
	AND MOV.CRMOV_FILTRO_INTERNO='||QUOTE_LITERAL(IN_FILTRO)||'';
	OPEN TMP_CURSOR FOR EXECUTE SQL_TEXTO;
	LOOP
		FETCH TMP_CURSOR INTO TMP_COLUMN;
		EXIT WHEN NOT FOUND;
	        V_TOTAL:=TMP_COLUMN;
	END LOOP;
	CLOSE TMP_CURSOR;
			
	RETURN V_TOTAL;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_TOTAL_MOVILIDAD.
*LA FUNCION OBTIENE UN VALOR TOTAL EN BASE A LOS CRITERIOS QUE SE BUSCAN EN LA TABLA MOVILIDAD
*@param IN_CRTST_TIPO_SOLICITUD TIPO DE SOLICITUD.
*@param IN_CRPER_NACIONALIDAD NACIONALIDAD.
*@param IN_CONDICION CONDICIONAL.
*@param IN_CRPER_INGRESO_SALIDA INGRESO O SALIDA.
*@param IN_FECHA_INICIAL FECHA INICIAL.
*@param IN_FECHA_FINAL FECHA FINAL.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_TOTAL_MOVILIDAD(
IN IN_CRTST_TIPO_SOLICITUD VARCHAR,
IN IN_CRPER_NACIONALIDAD VARCHAR,
IN IN_CONDICION TEXT,
IN IN_CRPER_INGRESO_SALIDA INT,
IN IN_FECHA_INICIAL DATE,
IN IN_FECHA_FINAL DATE
)RETURNS TEXT AS
$$
DECLARE	
	V_TOTAL INT;	
	SQL_TEXTO TEXT;
	TMP_CURSOR REFCURSOR;
	TMP_COLUMN INT;
BEGIN	
	V_TOTAL:=0;		
	SQL_TEXTO := 'SELECT COUNT(MOV.CRPER_CODIGO) 
	FROM SII.CGG_RES_MOVILIDAD MOV
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=MOV.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON(RSD.CRPER_CODIGO=PER.CRPER_CODIGO)
	WHERE (SELECT SII.F_TIPO_SOLICITUD_PADRE(RSD.CRTST_CODIGO))='||QUOTE_LITERAL(IN_CRTST_TIPO_SOLICITUD)||'
	AND (SELECT UPPER(TRIM(PAI.CPAIS_NOMBRE)) FROM SII.CGG_PAIS PAI WHERE PAI.CPAIS_CODIGO=PER.CPAIS_CODIGO) '||IN_CONDICION||' '||QUOTE_LITERAL(IN_CRPER_NACIONALIDAD)||' 
	AND MOV.CRMOV_TIPO_OPERACION ='||QUOTE_LITERAL(IN_CRPER_INGRESO_SALIDA)||'
	AND MOV.CRMOV_FECHA_VIAJE BETWEEN '||QUOTE_LITERAL(IN_FECHA_INICIAL)||' AND '||QUOTE_LITERAL(IN_FECHA_FINAL)||'';
	OPEN TMP_CURSOR FOR EXECUTE SQL_TEXTO;
	LOOP
		FETCH TMP_CURSOR INTO TMP_COLUMN;
		EXIT WHEN NOT FOUND;
	        V_TOTAL:=TMP_COLUMN;
	END LOOP;
	CLOSE TMP_CURSOR;
			
	RETURN V_TOTAL;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_TOTAL_MOVILIDAD.
*LA FUNCION OBTIENE UN VALOR TOTAL EN BASE A LOS CRITERIOS QUE SE BUSCAN EN LA TABLA MOVILIDAD
*@param IN_CRTST_TIPO_SOLICITUD TIPO DE SOLICITUD.
*@param IN_CRPER_NACIONALIDAD NACIONALIDAD.
*@param IN_CONDICION CONDICIONAL.
*@param IN_CRPER_INGRESO_SALIDA INGRESO O SALIDA.
*@param IN_FILTRO FILTRO DE INGRESO A GPS.
*@param IN_FECHA_INICIAL FECHA INICIAL.
*@param IN_FECHA_FINAL FECHA FINAL.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_TOTAL_MOVILIDAD(
IN IN_CRTST_TIPO_SOLICITUD VARCHAR,
IN IN_CRPER_NACIONALIDAD VARCHAR,
IN IN_CONDICION TEXT,
IN IN_CRPER_INGRESO_SALIDA INT,
IN IN_FILTRO BOOLEAN,
IN IN_FECHA_INICIAL DATE,
IN IN_FECHA_FINAL DATE
)RETURNS TEXT AS
$$
DECLARE	
	V_TOTAL INT;	
	SQL_TEXTO TEXT;
	TMP_CURSOR REFCURSOR;
	TMP_COLUMN INT;
BEGIN	
	V_TOTAL:=0;		
	SQL_TEXTO := 'SELECT COUNT(MOV.CRPER_CODIGO) 
	FROM SII.CGG_RES_MOVILIDAD MOV
	INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=MOV.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON(RSD.CRPER_CODIGO=PER.CRPER_CODIGO)
	WHERE (SELECT SII.F_TIPO_SOLICITUD_PADRE(RSD.CRTST_CODIGO))='||QUOTE_LITERAL(IN_CRTST_TIPO_SOLICITUD)||'
	AND (SELECT UPPER(TRIM(PAI.CPAIS_NOMBRE)) FROM SII.CGG_PAIS PAI WHERE PAI.CPAIS_CODIGO=PER.CPAIS_CODIGO) '||IN_CONDICION||' '||QUOTE_LITERAL(IN_CRPER_NACIONALIDAD)||' 
	AND MOV.CRMOV_TIPO_OPERACION ='||QUOTE_LITERAL(IN_CRPER_INGRESO_SALIDA)||'
	AND MOV.CRMOV_FILTRO_INTERNO='||QUOTE_LITERAL(IN_FILTRO)||'
	AND MOV.CRMOV_FECHA_VIAJE BETWEEN '||QUOTE_LITERAL(IN_FECHA_INICIAL)||' AND '||QUOTE_LITERAL(IN_FECHA_FINAL)||'';
	OPEN TMP_CURSOR FOR EXECUTE SQL_TEXTO;
	LOOP
		FETCH TMP_CURSOR INTO TMP_COLUMN;
		EXIT WHEN NOT FOUND;
	        V_TOTAL:=TMP_COLUMN;
	END LOOP;
	CLOSE TMP_CURSOR;
			
	RETURN V_TOTAL;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. F_RPT_TOTAL_MOVILIDAD_ENTRADA_SALIDA.
*LA FUNCION OBTIENE UN VALOR TOTAL EN BASE A LOS CRITERIOS QUE SE BUSCAN EN LA TABLA MOVILIDAD
*@param IN_CRTST_TIPO_SOLICITUD TIPO DE SOLICITUD.
*@param IN_CRPER_CODIGO_NACIONALIDAD NACIONALIDAD.
*@param IN_CONDICION CONDICION DE NACIONALIDAD.
*@param IN_FECHA_INICIAL FECHA INICIAL.
*@param IN_FECHA_FINAL FECHA FINAL.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_TOTAL_MOVILIDAD_ENTRADA_SALIDA(
IN IN_CRTST_TIPO_SOLICITUD VARCHAR,
IN IN_CRPER_CODIGO_NACIONALIDAD VARCHAR,
IN IN_CONDICION TEXT,
IN IN_FECHA_INICIAL DATE,
IN IN_FECHA_FINAL DATE
)RETURNS TEXT AS
$$
DECLARE	
	V_TOTAL INT;	
	SQL_TEXTO TEXT;
	TMP_CURSOR REFCURSOR;
	TMP_COLUMN INT;
BEGIN	
	V_TOTAL:=0;		
	SQL_TEXTO := 'SELECT 
	COUNT(MOV.CRPER_CODIGO) 
	FROM SII.CGG_RES_MOVILIDAD MOV
	INNER JOIN SII.CGG_RES_PERSONA PER ON(MOV.CRPER_CODIGO = PER.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON(RSD.CRPER_CODIGO=MOV.CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_MOVILIDAD MVD ON (MOV.CRPER_CODIGO = MVD.CRPER_CODIGO AND MVD.CRMOV_TIPO_OPERACION = 1
	AND DATE(MVD.CRMOV_FECHA_VIAJE) = (SELECT MOV2.CRMOV_FECHA_VIAJE
 			      FROM CGG_RES_MOVILIDAD MOV2
			      WHERE DATE(MOV2.CRMOV_FECHA_VIAJE) >= DATE(MOV.CRMOV_FECHA_VIAJE)
			      AND  MOV2.CRPER_CODIGO = PER.CRPER_CODIGO
			      AND  MOV2.CRMOV_TIPO_OPERACION = 1
			      ORDER BY MOV2.CRMOV_FECHA_VIAJE ASC LIMIT 1 )) --SALIDA
	WHERE  MOV.CRMOV_TIPO_OPERACION = 0  --ENTRADA
	AND MOV.CRMOV_ESTADO
	AND (SELECT SII.F_TIPO_SOLICITUD_PADRE(RSD.CRTST_CODIGO)) IN (SELECT TRIM(CGCNF_VALOR_CADENA) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO IN ('||QUOTE_LITERAL(IN_CRTST_TIPO_SOLICITUD)||')) 
	AND (LENGTH('||QUOTE_LITERAL(IN_FECHA_INICIAL)||QUOTE_LITERAL(IN_FECHA_FINAL)||') = 0 OR MOV.CRMOV_FECHA_VIAJE::DATE BETWEEN ('||QUOTE_LITERAL(IN_FECHA_INICIAL)||')::DATE AND ('||QUOTE_LITERAL(IN_FECHA_FINAL)||')::DATE)
	AND (SELECT UPPER(NAC.CGNCN_NACIONALIDAD) FROM SII.CGG_NACIONALIDAD NAC WHERE NAC.CGNCN_CODIGO=PER.CGNCN_CODIGO ) '||IN_CONDICION||' (SELECT UPPER(TRIM(CGCNF_VALOR_CADENA)) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '||QUOTE_LITERAL(IN_CRPER_CODIGO_NACIONALIDAD)||')';
	
	
	OPEN TMP_CURSOR FOR EXECUTE SQL_TEXTO;
	LOOP
		FETCH TMP_CURSOR INTO TMP_COLUMN;
		EXIT WHEN NOT FOUND;
	        V_TOTAL:=TMP_COLUMN;
	END LOOP;
	CLOSE TMP_CURSOR;
			
	RETURN V_TOTAL;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_TOTAL_MOVILIDAD_ENTRADA_SALIDA.
*LA FUNCION OBTIENE UN VALOR TOTAL EN BASE A LOS CRITERIOS QUE SE BUSCAN EN LA TABLA MOVILIDAD
*@param IN_CRTST_TIPO_SOLICITUD TIPO DE SOLICITUD.
*@param IN_CRPER_CODIGO_NACIONALIDAD NACIONALIDAD.
*@param IN_CONDICION CONDICION DE NACIONALIDAD.
*@param IN_FECHA_INICIAL FECHA INICIAL.
*@param IN_FECHA_FINAL FECHA FINAL.
*@param IN_FILTRO FILTRO DE INGRESOS AL GPS.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_TOTAL_MOVILIDAD_ENTRADA_SALIDA(
IN IN_CRTST_TIPO_SOLICITUD VARCHAR,
IN IN_CRPER_CODIGO_NACIONALIDAD VARCHAR,
IN IN_CONDICION TEXT,
IN IN_FECHA_INICIAL DATE,
IN IN_FECHA_FINAL DATE,
IN IN_FILTRO BOOLEAN
)RETURNS TEXT AS
$$
DECLARE	
	V_TOTAL INT;	
	SQL_TEXTO TEXT;
	TMP_CURSOR REFCURSOR;
	TMP_COLUMN INT;
BEGIN	
	V_TOTAL:=0;		
	SQL_TEXTO := 'SELECT 
	COUNT(MOV.CRPER_CODIGO) 
	FROM SII.CGG_RES_MOVILIDAD MOV
	INNER JOIN SII.CGG_RES_PERSONA PER ON(MOV.CRPER_CODIGO = PER.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON(RSD.CRPER_CODIGO=MOV.CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_MOVILIDAD MVD ON (MOV.CRPER_CODIGO = MVD.CRPER_CODIGO AND MVD.CRMOV_TIPO_OPERACION = 1
	AND DATE(MVD.CRMOV_FECHA_VIAJE) = (SELECT MOV2.CRMOV_FECHA_VIAJE
 			      FROM CGG_RES_MOVILIDAD MOV2
			      WHERE DATE(MOV2.CRMOV_FECHA_VIAJE) >= DATE(MOV.CRMOV_FECHA_VIAJE)
			      AND  MOV2.CRPER_CODIGO = PER.CRPER_CODIGO
			      AND  MOV2.CRMOV_TIPO_OPERACION = 1
			      ORDER BY MOV2.CRMOV_FECHA_VIAJE ASC LIMIT 1 )) --SALIDA
	WHERE  MOV.CRMOV_TIPO_OPERACION = 0  --ENTRADA
	AND MOV.CRMOV_ESTADO
	AND (SELECT SII.F_TIPO_SOLICITUD_PADRE(RSD.CRTST_CODIGO)) IN (SELECT TRIM(CGCNF_VALOR_CADENA) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO IN ('||QUOTE_LITERAL(IN_CRTST_TIPO_SOLICITUD)||')) 
	AND (LENGTH('||QUOTE_LITERAL(IN_FECHA_INICIAL)||QUOTE_LITERAL(IN_FECHA_FINAL)||') = 0 OR MOV.CRMOV_FECHA_VIAJE::DATE BETWEEN ('||QUOTE_LITERAL(IN_FECHA_INICIAL)||')::DATE AND ('||QUOTE_LITERAL(IN_FECHA_FINAL)||')::DATE)
	AND (SELECT UPPER(NAC.CGNCN_NACIONALIDAD) FROM SII.CGG_NACIONALIDAD NAC WHERE NAC.CGNCN_CODIGO=PER.CGNCN_CODIGO ) '||IN_CONDICION||' (SELECT UPPER(TRIM(CGCNF_VALOR_CADENA)) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '||QUOTE_LITERAL(IN_CRPER_CODIGO_NACIONALIDAD)||')
	AND MOV.CRMOV_FILTRO_INTERNO = '||IN_FILTRO||'';
	
	
	OPEN TMP_CURSOR FOR EXECUTE SQL_TEXTO;
	LOOP
		FETCH TMP_CURSOR INTO TMP_COLUMN;
		EXIT WHEN NOT FOUND;
	        V_TOTAL:=TMP_COLUMN;
	END LOOP;
	CLOSE TMP_CURSOR;
			
	RETURN V_TOTAL;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_TOTAL_MOVILIDAD_POR_TIPOS
*LA FUNCION OBTIENE UN VALOR TOTAL EN BASE A LOS CRITERIOS QUE SE BUSCAN EN LA TABLA MOVILIDAD
*@param IN_CRTST_TIPO_SOLICITUD TIPO DE SOLICITUD.
*@param IN_TIPO TIPO DE NACIONALIDAD (0 NACIONAL - 1 EXTRANJERO ).
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_TOTAL_MOVILIDAD_POR_TIPOS(
IN IN_CRTST_TIPO_SOLICITUD VARCHAR,
IN IN_TIPO INT
)RETURNS TEXT AS
$$
DECLARE	
	V_TOTAL INT;	
	SQL_TEXTO TEXT;
	TMP_CURSOR REFCURSOR;
	TMP_COLUMN INT;
BEGIN	
	V_TOTAL:=0;		
	SQL_TEXTO := 'SELECT 
	COUNT(MOV.CRPER_CODIGO) 
	FROM SII.CGG_RES_MOVILIDAD MOV
	INNER JOIN SII.CGG_RES_PERSONA PER ON(MOV.CRPER_CODIGO = PER.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON(RSD.CRPER_CODIGO=MOV.CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_MOVILIDAD MVD ON (MOV.CRPER_CODIGO = MVD.CRPER_CODIGO AND MVD.CRMOV_TIPO_OPERACION = 1
	AND DATE(MVD.CRMOV_FECHA_VIAJE) = (SELECT MOV2.CRMOV_FECHA_VIAJE
 			      FROM CGG_RES_MOVILIDAD MOV2
			      WHERE DATE(MOV2.CRMOV_FECHA_VIAJE) >= DATE(MOV.CRMOV_FECHA_VIAJE)
			      AND  MOV2.CRPER_CODIGO = PER.CRPER_CODIGO
			      AND  MOV2.CRMOV_TIPO_OPERACION = 1
			      ORDER BY MOV2.CRMOV_FECHA_VIAJE ASC LIMIT 1 )) --SALIDA
	WHERE  MOV.CRMOV_TIPO_OPERACION = 0  --ENTRADA
	AND MOV.CRMOV_ESTADO
	AND (SELECT SII.F_TIPO_SOLICITUD_PADRE(RSD.CRTST_CODIGO)) IN (SELECT TRIM(CGCNF_VALOR_CADENA) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO IN ('||QUOTE_LITERAL(IN_CRTST_TIPO_SOLICITUD)||')) 		
	AND (SELECT CASE
   WHEN (SELECT TRIM(UPPER(NAC.CGNCN_NACIONALIDAD)) FROM SII.CGG_NACIONALIDAD NAC WHERE NAC.CGNCN_CODIGO=PER.CGNCN_CODIGO ) = (SELECT UPPER(TRIM(CGCNF_VALOR_CADENA)) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = ''CONF36'')
   THEN 0
   WHEN (SELECT TRIM(UPPER(NAC.CGNCN_NACIONALIDAD)) FROM SII.CGG_NACIONALIDAD NAC WHERE NAC.CGNCN_CODIGO=PER.CGNCN_CODIGO ) <> (SELECT UPPER(TRIM(CGCNF_VALOR_CADENA)) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = ''CONF36'')
   THEN 1
  END )='||QUOTE_LITERAL(IN_TIPO)||'';
	
	
	
	OPEN TMP_CURSOR FOR EXECUTE SQL_TEXTO;
	LOOP
		FETCH TMP_CURSOR INTO TMP_COLUMN;
		EXIT WHEN NOT FOUND;
	        V_TOTAL:=TMP_COLUMN;
	END LOOP;
	CLOSE TMP_CURSOR;
			
	RETURN V_TOTAL;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_TOTAL_MOVILIDAD_POR_AEROLINEA
*LA FUNCION OBTIENE UN VALOR TOTAL EN BASE A LOS CRITERIOS QUE SE BUSCAN EN LA TABLA MOVILIDAD
*@param IN_CRTST_TIPO_SOLICITUD TIPO DE SOLICITUD.
*@param IN_CRALN_CODIGO AEROLINEA.
*@param IN_TIPO TIPO DE NACIONALIDAD (0 NACIONAL - 1 EXTRANJERO ).
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_TOTAL_MOVILIDAD_POR_AEROLINEA(
IN IN_CRTST_TIPO_SOLICITUD VARCHAR,
IN IN_CRALN_CODIGO VARCHAR,
IN IN_TIPO INT
)RETURNS TEXT AS
$$
DECLARE	
	V_TOTAL INT;	
	SQL_TEXTO TEXT;
	TMP_CURSOR REFCURSOR;
	TMP_COLUMN INT;
BEGIN	
	V_TOTAL:=0;		
	SQL_TEXTO := 'SELECT 
	COUNT(MOV.CRPER_CODIGO) 
	FROM SII.CGG_RES_MOVILIDAD MOV
	INNER JOIN SII.CGG_RES_PERSONA PER ON(MOV.CRPER_CODIGO = PER.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON(RSD.CRPER_CODIGO=MOV.CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_MOVILIDAD MVD ON (MOV.CRPER_CODIGO = MVD.CRPER_CODIGO AND MVD.CRMOV_TIPO_OPERACION = 1
	AND DATE(MVD.CRMOV_FECHA_VIAJE) = (SELECT MOV2.CRMOV_FECHA_VIAJE
				      FROM CGG_RES_MOVILIDAD MOV2
				      WHERE DATE(MOV2.CRMOV_FECHA_VIAJE) >= DATE(MOV.CRMOV_FECHA_VIAJE)
				      AND  MOV2.CRPER_CODIGO = PER.CRPER_CODIGO
				      AND  MOV2.CRMOV_TIPO_OPERACION = 1
				      ORDER BY MOV2.CRMOV_FECHA_VIAJE ASC LIMIT 1 )) --SALIDA
	WHERE  MOV.CRMOV_TIPO_OPERACION = 0  --ENTRADA
	AND MOV.CRMOV_ESTADO
	AND (SELECT SII.F_TIPO_SOLICITUD_PADRE(RSD.CRTST_CODIGO)) IN (SELECT TRIM(CGCNF_VALOR_CADENA) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO IN ('||QUOTE_LITERAL(IN_CRTST_TIPO_SOLICITUD)||'))
	AND MOV.CRALN_CODIGO='||QUOTE_LITERAL(IN_CRALN_CODIGO)||'
	AND (SELECT CASE
	   WHEN (SELECT TRIM(UPPER(NAC.CGNCN_NACIONALIDAD)) FROM SII.CGG_NACIONALIDAD NAC WHERE NAC.CGNCN_CODIGO=PER.CGNCN_CODIGO ) = (SELECT UPPER(TRIM(CGCNF_VALOR_CADENA)) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = ''CONF36'')
	   THEN 0
	   WHEN (SELECT TRIM(UPPER(NAC.CGNCN_NACIONALIDAD)) FROM SII.CGG_NACIONALIDAD NAC WHERE NAC.CGNCN_CODIGO=PER.CGNCN_CODIGO ) <> (SELECT UPPER(TRIM(CGCNF_VALOR_CADENA)) FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = ''CONF36'')
	   THEN 1
       END )='||QUOTE_LITERAL(IN_TIPO)||'';
	
	
	
	OPEN TMP_CURSOR FOR EXECUTE SQL_TEXTO;
	LOOP
		FETCH TMP_CURSOR INTO TMP_COLUMN;
		EXIT WHEN NOT FOUND;
	        V_TOTAL:=TMP_COLUMN;
	END LOOP;
	CLOSE TMP_CURSOR;
			
	RETURN V_TOTAL;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION F_RPT_VEHICULO_CATEGORIAS
* CREA UNA DESCRIPCION SOBRE EL TIPO DE TRAMITE.
* @param IN_CVCTG_CODIGO CODIGO LA CATEGORIA DEL VEHICULO
* @return OUT_CATEGORIAS
*/
CREATE OR REPLACE FUNCTION SII.F_RPT_VEHICULO_CATEGORIAS(
IN IN_CVCTG_CODIGO VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
TMP_RECORD RECORD;
TMP_VEHICULO_CATEGORIAS VARCHAR;
TMP_CATEGORIAS VARCHAR;
OUT_CATEGORIAS VARCHAR;
BEGIN
	OUT_CATEGORIAS := '';
	FOR TMP_RECORD IN (SELECT CVCTG_CODIGO, CGG_CVCTG_CODIGO, CVCTG_NOMBRE FROM SII.CGG_VEH_CATEGORIA WHERE CVCTG_CODIGO = IN_CVCTG_CODIGO) LOOP
		IF (TMP_RECORD.CGG_CVCTG_CODIGO IS NOT NULL) THEN
		      OUT_CATEGORIAS := SII.F_RPT_VEHICULO_CATEGORIAS(TMP_RECORD.CGG_CVCTG_CODIGO) ||' - '|| TMP_RECORD.CVCTG_NOMBRE;
		ELSE
		      TMP_CATEGORIAS:= OUT_CATEGORIAS;		      
		      OUT_CATEGORIAS:= TMP_RECORD.CVCTG_NOMBRE ||''|| OUT_CATEGORIAS;
		END IF;
	END LOOP;
	RETURN OUT_CATEGORIAS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION F_RPT_CODIGO_VEHICULO_CATEGORIAS
* RETORNA EL CODIGO DE LA CATEGORIA PRINCIPAL O PADRE DE TODAS LAS SUBCATEGORIAS DEL VEHICULO
* @param IN_CVCTG_CODIGO CODIGO DE LA CATEGORIA DE UN VEHICULO
* @return DESCRIPCION
*/
CREATE OR REPLACE FUNCTION SII.F_RPT_CODIGO_VEHICULO_CATEGORIAS(
IN IN_CVCTG_CODIGO VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
TMP_RECORD RECORD;
OUT_CODIGO VARCHAR;
BEGIN
	OUT_CODIGO := '';
	FOR TMP_RECORD IN (SELECT CVCTG_CODIGO, CGG_CVCTG_CODIGO FROM SII.CGG_VEH_CATEGORIA WHERE CVCTG_CODIGO = IN_CVCTG_CODIGO) LOOP
		IF (TMP_RECORD.CGG_CVCTG_CODIGO IS NOT NULL) THEN
		      OUT_CODIGO := SII.F_RPT_CODIGO_VEHICULO_CATEGORIAS(TMP_RECORD.CGG_CVCTG_CODIGO);
		ELSE
		      OUT_CODIGO:= TMP_RECORD.CVCTG_CODIGO;
		END IF;
	END LOOP;
	RETURN OUT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_HISTORIAL_ISLA_CODIGO.
*LA FUNCION RETORNA EL CODIGO DE LA ISLA DEL HISTORIAL DE VEHICULOS EN BASE A LOS CODIGOS DE PERSONA JURIDICA O NATURAL
*@param IN_CRPJR_CODIGO CODIGO DE PERSONA JURIDA.
*@param IN_CRPER_CODIGO CODIGO DE PERSONA NATURAL.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_HISTORIAL_ISLA_CODIGO(
IN IN_CRPER_CODIGO VARCHAR,
IN IN_CRPJR_CODIGO VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	OUT_ISLA_CODIGO VARCHAR;
	OUT_ISLA_CODIGO2 VARCHAR;
BEGIN
    OUT_ISLA_CODIGO:='';
	
	IF(IN_CRPER_CODIGO IS NOT NULL AND LENGTH(TRIM(IN_CRPER_CODIGO))>0) THEN
	  SELECT COALESCE(ISL.CISLA_CODIGO) INTO OUT_ISLA_CODIGO 
	  FROM SII.CGG_ISLA ISL 
	  INNER JOIN SII.CGG_CANTON CAN ON(ISL.CCTN_CODIGO=CAN.CCTN_CODIGO) 
	  INNER JOIN SII.CGG_RES_PERSONA PER ON(PER.CCTN_CODIGO=CAN.CCTN_CODIGO) 
	  WHERE PER.CRPER_CODIGO = IN_CRPER_CODIGO; 
	ELSIF (IN_CRPJR_CODIGO IS NOT NULL AND LENGTH(TRIM(IN_CRPJR_CODIGO))>0) THEN
	  SELECT COALESCE(ISL.CISLA_CODIGO) INTO OUT_ISLA_CODIGO2
	  FROM SII.CGG_ISLA ISL 
	  INNER JOIN SII.CGG_CANTON CAN ON(ISL.CCTN_CODIGO=CAN.CCTN_CODIGO) 
	  INNER JOIN SII.CGG_RES_PERSONA PER ON (PER.CCTN_CODIGO=CAN.CCTN_CODIGO)
	  INNER JOIN SII.CGG_RES_REPRESENTANTE_LEGAL RPL ON(RPL.CRPER_CODIGO=PER.CRPER_CODIGO)
	  INNER JOIN SII.CGG_RES_PERSONA_JURIDICA PEJ ON(RPL.CRPJR_CODIGO=PEJ.CRPJR_CODIGO) 
	  WHERE PER.CRPER_CODIGO = IN_CRPJR_CODIGO;
	  OUT_ISLA_CODIGO:=OUT_ISLA_CODIGO2;
	END IF;
	RETURN OUT_ISLA_CODIGO;		
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_PERSONA_CODIGO.
*LA FUNCION RETORNA EL CODIGO DE UNA PERSONA JURIDICA O NATURAL
*@param IN_CRPJR_CODIGO CODIGO DE PERSONA JURIDA.
*@param IN_CRPER_CODIGO CODIGO DE PERSONA NATURAL.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_PERSONA_CODIGO(
IN IN_CRPER_CODIGO VARCHAR,
IN IN_CRPJR_CODIGO VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	OUT_CODIGO VARCHAR;
	TMP_CRPER_CODIGO VARCHAR;
	TMP_CRPJR_CODIGO VARCHAR;
BEGIN
    OUT_CODIGO:='';	
	IF(IN_CRPER_CODIGO IS NOT NULL AND LENGTH(TRIM(IN_CRPER_CODIGO))>0) THEN
	  SELECT CRPER_CODIGO INTO TMP_CRPER_CODIGO FROM SII.CGG_RES_PERSONA WHERE CRPER_CODIGO=IN_CRPER_CODIGO;
	  OUT_CODIGO:=TMP_CRPER_CODIGO;
	ELSIF (IN_CRPJR_CODIGO IS NOT NULL AND LENGTH(TRIM(IN_CRPJR_CODIGO))>0) THEN
	  SELECT CRPJR_CODIGO INTO TMP_CRPJR_CODIGO FROM SII.CGG_RES_PERSONA_JURIDICA WHERE CRPJR_CODIGO=IN_CRPJR_CODIGO;
      OUT_CODIGO:=TMP_CRPJR_CODIGO;
	END IF;
	RETURN OUT_CODIGO;		
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_TIEMPO_ESTADIA.
*LA FUNCION RETORNA EL NUMERO DE DIAS + O - DE DIAS EXCEDIDOS O PROXIMOS A SALIR
*@param IN_CVVEH_FECHA_INGRESO FECHA DE INGRESO DE UN VEHICULO.
*@param IN_CVVEH_TIEMPO_ESTADIA TIEMPO DE ESTADIA DE UN VEHICULO.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_TIEMPO_ESTADIA(
IN IN_CVVEH_FECHA_INGRESO DATE,
IN IN_CVVEH_TIEMPO_ESTADIA INTEGER
)RETURNS TEXT AS
$$
DECLARE
	OUT_TIEMPO INTEGER;
	TMP_FECHA_SALIDA DATE;
BEGIN
    OUT_TIEMPO:=0;	
	TMP_FECHA_SALIDA:=IN_CVVEH_FECHA_INGRESO+IN_CVVEH_TIEMPO_ESTADIA;
	IF( TMP_FECHA_SALIDA > CURRENT_DATE) THEN                        
	 OUT_TIEMPO:=TMP_FECHA_SALIDA - CURRENT_DATE;			   
	ELSIF (TMP_FECHA_SALIDA <= CURRENT_DATE) THEN 				
     OUT_TIEMPO:=TMP_FECHA_SALIDA - CURRENT_DATE;				
	END IF;
	RETURN OUT_TIEMPO;		
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_PERSONA_CODIGO.
*LA FUNCION RETORNA EL CODIGO DE UNA PERSONA PUDIENDO SER ESTA NATURAL O JURIDICA
*@param IN_CRPJR_CODIGO CODIGO DE PERSONA JURIDA.
*@param IN_CRPER_CODIGO CODIGO DE PERSONA NATURAL.
*@return TEXT
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_PERSONA_CRPER_CODIGO(
IN IN_CRPER_CODIGO VARCHAR,
IN IN_CRPJR_CODIGO VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	OUT_CODIGO VARCHAR;
	TMP_CRPER_CODIGO VARCHAR;
	TMP_CRPJR_CODIGO VARCHAR;
BEGIN
    OUT_CODIGO:='';	
	IF(IN_CRPER_CODIGO IS NOT NULL AND LENGTH(TRIM(IN_CRPER_CODIGO))>0) THEN
	  SELECT CRPER_CODIGO INTO TMP_CRPER_CODIGO FROM SII.CGG_RES_PERSONA WHERE CRPER_CODIGO=IN_CRPER_CODIGO;
	  OUT_CODIGO:=TMP_CRPER_CODIGO;
	ELSIF (IN_CRPJR_CODIGO IS NOT NULL AND LENGTH(TRIM(IN_CRPJR_CODIGO))>0) THEN
	  SELECT CRPJR_CODIGO INTO TMP_CRPJR_CODIGO 
	  FROM SII.CGG_RES_PERSONA_JURIDICA PEJ
	  INNER JOIN SII.CGG_RES_REPRESENTANTE_LEGAL RPL ON(RPL.CRPJR_CODIGO=PEJ.CRPJR_CODIGO)
	  INNER JOIN SII.CGG_RES_PERSONA PER ON (PER.CRPER_CODIGO=RPL.CRPER_CODIGO) 
	  WHERE CRPJR_CODIGO=IN_CRPJR_CODIGO;
      OUT_CODIGO:=TMP_CRPJR_CODIGO;
	END IF;
	RETURN OUT_CODIGO;		
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_PERSONA_CODIGO.
*LA FUNCION RETORNA EL NOMBRE COMPLETO DE LA PERSONA POR SU CODIGO O NOMBRE DE USAURIO
*@param IN_CUSU CODIGO O NOMBRE DE USUARIO.
*@param IN_TIPO 0 -> FILTRADO POR CODIGO, 1-> FILTRADO POR NOMBRE DE USUARIO.
*@return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CUSU_NOMBRE_PERSONA(
IN IN_CUSU VARCHAR,
IN IN_TIPO INT
)RETURNS VARCHAR AS
$$
DECLARE
	OUT_RESULTADO VARCHAR;	
BEGIN
	OUT_RESULTADO := '';		

	IF IN_TIPO = 0 THEN
		SELECT CRPER_NOMBRES||' '||CRPER_APELLIDO_PATERNO||' '||CRPER_APELLIDO_MATERNO INTO OUT_RESULTADO 
		FROM SII.CGG_RES_PERSONA CRPER
		INNER JOIN SII.CGG_USUARIO CUSU ON CUSU.CRPER_CODIGO = CRPER.CRPER_CODIGO
		WHERE CUSU_CODIGO=IN_CUSU;
	ELSE 
		SELECT CRPER_NOMBRES||' '||CRPER_APELLIDO_PATERNO||' '||CRPER_APELLIDO_MATERNO INTO OUT_RESULTADO 
		FROM SII.CGG_RES_PERSONA CRPER
		INNER JOIN SII.CGG_USUARIO CUSU ON CUSU.CRPER_CODIGO = CRPER.CRPER_CODIGO
		WHERE CUSU_NOMBRE_USUARIO=IN_CUSU;
	END IF;
	IF(OUT_RESULTADO IS NULL) then
		OUT_RESULTADO = '';
	END IF;
	RETURN OUT_RESULTADO;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_CUSU_CARGO_PERSONA.
*LA FUNCION RETORNA EL CARGO DE LA PERSONA POR SU CODIGO O NOMBRE DE USAURIO
*@param IN_CUSU CODIGO O NOMBRE DE USUARIO.
*@param IN_TIPO 0 -> FILTRADO POR CODIGO, 1-> FILTRADO POR NOMBRE DE USUARIO.
*@return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CUSU_CARGO_PERSONA(
IN IN_CUSU VARCHAR,
IN IN_TIPO INT
)RETURNS VARCHAR AS
$$
DECLARE
	OUT_RESULTADO VARCHAR;	
BEGIN
	OUT_RESULTADO := '';		

	IF IN_TIPO = 0 THEN
		SELECT CRCRG_NOMBRE INTO OUT_RESULTADO 
		FROM SII.CGG_USUARIO CUSU
		INNER JOIN SII.CGG_RES_CARGO CRCRG ON CUSU.CRCRG_CODIGO = CRCRG.CRCRG_CODIGO
		WHERE CUSU_CODIGO=IN_CUSU;
	ELSE 
		SELECT CRCRG_NOMBRE INTO OUT_RESULTADO 
		FROM SII.CGG_USUARIO CUSU
		INNER JOIN SII.CGG_RES_CARGO CRCRG ON CUSU.CRCRG_CODIGO = CRCRG.CRCRG_CODIGO
		WHERE CUSU_NOMBRE_USUARIO=IN_CUSU;
	END IF;
	IF OUT_RESULTADO IS NULL THEN
		OUT_RESULTADO:='FUNCIONARIO CGG';
	end if;
	RETURN OUT_RESULTADO;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
*FUNCION. SII.F_CUSU_MAIL_PERSONA.
*LA FUNCION RETORNA LOS CORREOS ELECTRONICOS DE LA PERSONA POR SU CODIGO O NOMBRE DE USAURIO
*@param IN_CUSU CODIGO O NOMBRE DE USUARIO.
*@param IN_TIPO 0 -> FILTRADO POR CODIGO, 1-> FILTRADO POR NOMBRE DE USUARIO.
*/
/* pendiente
CREATE OR REPLACE FUNCTION SII.F_CUSU_MAIL_PERSONA(
IN IN_CUSU VARCHAR,
IN IN_TIPO INT
)RETURNS VARCHAR AS
$$
DECLARE
	OUT_RESULTADO VARCHAR;	
BEGIN
	OUT_RESULTADO := '';		

	IF IN_TIPO = 0 THEN
		SELECT CRCRG_NOMBRE INTO OUT_RESULTADO 
		FROM SII.CGG_USUARIO CUSU
		INNER JOIN SII.CGG_RES_PERSONA CRPER ON CUSU.CRPER_CODIGO = CRPER.CRPER_CODIGO
		INNER JOIN SII.CGG_RES_PERSONA_CONTACTO CRPRC ON CRPER.CRCRG_CODIGO = CRPRC.CRCRG_CODIGO
		WHERE CUSU_CODIGO=IN_CUSU;
	ELSE 
		SELECT CRCRG_NOMBRE INTO OUT_RESULTADO 
		FROM SII.CGG_USUARIO CUSU
		INNER JOIN SII.CGG_RES_CARGO CRCRG ON CUSU.CRCRG_CODIGO = CRCRG.CRCRG_CODIGO
		WHERE CUSU_NOMBRE_USUARIO=IN_CUSU;
	END IF;
	IF OUT_RESULTADO IS NULL THEN
		OUT_RESULTADO:='Ninguno';
	end if;
	RETURN OUT_RESULTADO;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;*/


/**
*FUNCION. SII.F_RPT_STOCK_ESPECIE_PV.
*LA FUNCION RETORNA LA CANTIDAD DE ESPECIES EN STOCK EN EL PUNTO DE VENTA
*@param IN_CUSU CODIGO O NOMBRE DE USUARIO.
*@param IN_TIPO 0 -> FILTRADO POR CODIGO, 1-> FILTRADO POR NOMBRE DE USUARIO.
*/
CREATE OR REPLACE FUNCTION SII.F_RPT_STOCK_ESPECIE_PV(
IN INCKPVT_CODIGO VARCHAR,
IN INCKESP_CODIGO VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
	OUT_RESULTADO INTEGER;	
BEGIN
	SELECT (SUM(CKTRN_CANTIDAD_DISPONIBLE) + (SELECT SUM(CKASG_CANTIDAD_DISPONIBLE) FROM CGG_KDX_ASIGNACION ASG
							INNER JOIN CGG_KDX_TRANSFERENCIA TRN ON (TRN.CKTRN_CODIGO = ASG.CKTRN_CODIGO)
							WHERE CKPVT_CODIGO = INCKPVT_CODIGO
							AND CKESP_CODIGO =  INCKESP_CODIGO
							AND CKASG_ESTADO_ASIGNACION = 0)) INTO OUT_RESULTADO
	FROM CGG_KDX_TRANSFERENCIA TRN1
	WHERE CKPVT_CODIGO = INCKPVT_CODIGO
	AND  CKTRN_CANTIDAD_DISPONIBLE > 0
	AND CKESP_CODIGO = INCKESP_CODIGO;
	RETURN OUT_RESULTADO;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SII.F_RPT_NUMERO_SECUENCIA.
*LA FUNCION RETORNA UN NUMERO SECUENCIAL EN BASE AL AÑO DE UN CODICO DE SECUENCIA ASIGNADO
*@param  IN_CGSCN_CODIGO CODIGO DE ASIGNACION DE LA SECUENCIA
*/

CREATE OR REPLACE FUNCTION SII.F_RPT_NUMERO_SECUENCIA(
IN IN_CGSCN_CODIGO VARCHAR
)RETURNS TEXT AS
$$
DECLARE
	TMP_DATO VARCHAR;
	OUT_RESULTADO VARCHAR;
BEGIN
	TMP_DATO:='';
	OUT_RESULTADO:='';
        TMP_DATO:= COALESCE((SELECT CGSCN_CODIGO FROM SII.CGG_SECUENCIA WHERE CGSCN_CODIGO=IN_CGSCN_CODIGO),'');
	IF TMP_DATO='' THEN
	  INSERT INTO SII.CGG_SECUENCIA (CGSCN_CODIGO,CGSCN_SECUENCIA,CGSCN_ANIO)
	  VALUES(IN_CGSCN_CODIGO,1,TO_CHAR(CURRENT_DATE,'YYYY')::NUMERIC);
	  OUT_RESULTADO:=TO_CHAR(CURRENT_DATE,'YYYY')||' - '||(SELECT COALESCE(CGSCN_SECUENCIA::VARCHAR,'') FROM SII.CGG_SECUENCIA WHERE CGSCN_CODIGO=IN_CGSCN_CODIGO);
	ELSIF (TO_CHAR(CURRENT_DATE,'YYYY')::NUMERIC) = (SELECT CGSCN_ANIO FROM SII.CGG_SECUENCIA WHERE CGSCN_CODIGO=IN_CGSCN_CODIGO)	THEN 
		  UPDATE SII.CGG_SECUENCIA
		  SET CGSCN_SECUENCIA = CGSCN_SECUENCIA + 1	  
		  WHERE CGSCN_CODIGO=IN_CGSCN_CODIGO;
		  OUT_RESULTADO:=TO_CHAR(CURRENT_DATE,'YYYY')||' - '||(SELECT COALESCE(CGSCN_SECUENCIA::VARCHAR,'') FROM SII.CGG_SECUENCIA WHERE CGSCN_CODIGO=IN_CGSCN_CODIGO);
          ELSE
		  UPDATE SII.CGG_SECUENCIA
		  SET CGSCN_SECUENCIA = 1, CGSCN_ANIO =	TO_CHAR(CURRENT_DATE,'YYYY')::NUMERIC  
		  WHERE CGSCN_CODIGO=IN_CGSCN_CODIGO;
		  OUT_RESULTADO:=TO_CHAR(CURRENT_DATE,'YYYY')||' - '||(SELECT COALESCE(CGSCN_SECUENCIA::VARCHAR,'') FROM SII.CGG_SECUENCIA WHERE CGSCN_CODIGO=IN_CGSCN_CODIGO);                              
	END IF;
	RETURN OUT_RESULTADO;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;