/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO.
* @param IN_CJHTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL HISTORIAL DEL PROCESO JUDICIAL
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @param IN_CJHTP_DESCRIPCION DESCRIPCION DEL MOVIMIENTO DEL PROCESO JUDICIAL
* @param IN_CJHTP_TIPO TIPO DE MOVIMIENTO EN EL PROCESO JUDICIAL
0 - ENTRADA
1 - SALIDA
* @param IN_CJHTP_RESPONSABLE NOMBRE DEL RESPONSABLE DE ESTE HISTORIAL DEL PROCESO JUDICIAL
* @param IN_CJHTP_FECHA FECHA DE REGISTRO DE OPERACION EN EL PROCESO JUDICIAL
* @param IN_CJHTP_ESTADO ESTADO DEL REGISTRO
* @param IN_CJHTP_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CJHTP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_INSERT(
IN IN_CJHTP_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_CODIGO%TYPE,
IN IN_CJPJU_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJPJU_CODIGO%TYPE,
IN IN_CJHTP_DESCRIPCION SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_DESCRIPCION%TYPE,
IN IN_CJHTP_TIPO SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_TIPO%TYPE,
IN IN_CJHTP_RESPONSABLE SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_RESPONSABLE%TYPE,
IN IN_CJHTP_FECHA SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_FECHA%TYPE,
IN IN_CJHTP_ESTADO SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_ESTADO%TYPE,
IN IN_CJHTP_USUARIO_INSERT SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CJHTP_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_JUR_HISTORIAL_PROCESO','CJHTP_CODIGO','CJHTP') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CJHTP_CODIGO;
	END IF;
	INSERT INTO SII.CGG_JUR_HISTORIAL_PROCESO(
		CJHTP_CODIGO, 
		CJPJU_CODIGO, 
		CJHTP_DESCRIPCION, 
		CJHTP_TIPO, 
		CJHTP_RESPONSABLE, 
		CJHTP_FECHA, 
		CJHTP_ESTADO, 
		CJHTP_FECHA_INSERT, 
		CJHTP_USUARIO_INSERT, 
		CJHTP_FECHA_UPDATE, 
		CJHTP_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CJPJU_CODIGO, 
		IN_CJHTP_DESCRIPCION, 
		IN_CJHTP_TIPO, 
		IN_CJHTP_RESPONSABLE, 
		IN_CJHTP_FECHA, 
		IN_CJHTP_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CJHTP_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CJHTP_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJHTP_CODIGO, 
		CJPJU_CODIGO, 
		CJHTP_DESCRIPCION, 
		CJHTP_TIPO, 
		CJHTP_RESPONSABLE, 
		CJHTP_FECHA, 
		CJHTP_ESTADO, 
		CJHTP_FECHA_INSERT, 
		CJHTP_USUARIO_INSERT, 
		CJHTP_FECHA_UPDATE, 
		CJHTP_USUARIO_UPDATE
	FROM SII.CGG_JUR_HISTORIAL_PROCESO
	WHERE CJHTP_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		HP.CJHTP_CODIGO, 
		HP.CJPJU_CODIGO, 
		CT.CCTN_NOMBRE,		
		PJ.CRPJR_CODIGO, 
		PJA.CRPJR_RAZON_SOCIAL,			
		PJ.CRPER_CODIGO, 
		(PER.CRPER_NOMBRES||'' ''||PER.CRPER_APELLIDO_PATERNO||'' ''||PER.CRPER_APELLIDO_MATERNO) PERSONA,
		PJ.CJPJU_NUMERO, 
		PJ.CJPJU_TIPO_PROCESO, 
		PJ.CJPJU_TIPO_ADVERSARIO, 
		PJ.CJPJU_FECHA_INICIO, 
		PJ.CJPJU_FECHA_FINALIZACION, 
		PJ.CJPJU_ESTADO_EJECUCION, 
		HP.CJHTP_DESCRIPCION, 
		HP.CJHTP_TIPO, 
		HP.CJHTP_RESPONSABLE, 
		HP.CJHTP_FECHA, 
		HP.CJHTP_ESTADO, 
		HP.CJHTP_FECHA_INSERT, 
		HP.CJHTP_USUARIO_INSERT, 
		HP.CJHTP_FECHA_UPDATE, 
		HP.CJHTP_USUARIO_UPDATE
	FROM SII.CGG_JUR_HISTORIAL_PROCESO HP
	INNER JOIN SII.CGG_JUR_PROCESO_JUDICIAL PJ ON (PJ.CJPJU_CODIGO = HP.CJPJU_CODIGO)
	LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA PJA ON(PJA.CRPJR_CODIGO = PJ.CRPJR_CODIGO)
	LEFT JOIN SII.CGG_RES_PERSONA PER ON (PER.CRPER_CODIGO = PJ.CRPER_CODIGO)
	INNER JOIN SII.CGG_CANTON CT ON (CT.CCTN_CODIGO = PJ.CCTN_CODIGO)
	WHERE CJHTP_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(CT.CCTN_NOMBRE,'''')||'' ''||
	COALESCE(PJA.CRPJR_RAZON_SOCIAL,'''')||'' ''||
	COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||
	COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')||'' ''||
	COALESCE(CJPJU_NUMERO, '''')||'' ''||
	COALESCE(CJPJU_TIPO_PROCESO, 0)||'' ''||
	COALESCE(CJPJU_TIPO_ADVERSARIO, 0)||'' ''||
	COALESCE(CJPJU_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CJPJU_FECHA_FINALIZACION, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CJPJU_ESTADO_EJECUCION, 0)||'' ''||
	COALESCE(CJHTP_DESCRIPCION, '''')||'' ''||
	COALESCE(CJHTP_TIPO, 0)||'' ''||
	COALESCE(CJHTP_RESPONSABLE, '''')||'' ''||
	COALESCE(CJHTP_FECHA, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CJHTP_ESTADO, FALSE)||'' ''||
	COALESCE(CJHTP_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CJHTP_USUARIO_INSERT, '''')||'' ''||
	COALESCE(CJHTP_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CJHTP_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_HISTORIAL_PROCESO HP
	INNER JOIN SII.CGG_JUR_PROCESO_JUDICIAL PJ ON (PJ.CJPJU_CODIGO = HP.CJPJU_CODIGO)
	WHERE CJHTP_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_HISTORIAL_PROCESO HP
	INNER JOIN SII.CGG_JUR_PROCESO_JUDICIAL PJ ON (PJ.CJPJU_CODIGO = HP.CJPJU_CODIGO)
	WHERE CJHTP_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,
	COALESCE(CJPJU_NUMERO, '''')||' '||
	COALESCE(CJPJU_TIPO_PROCESO, 0)||' '||
	COALESCE(CJPJU_TIPO_ADVERSARIO, 0)||' '||
	COALESCE(CJPJU_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||
	COALESCE(CJPJU_FECHA_FINALIZACION, CURRENT_TIMESTAMP)||' '||
	COALESCE(CJPJU_ESTADO_EJECUCION, 0)||' '||
	COALESCE(CJHTP_DESCRIPCION, '''')||' '||
	COALESCE(CJHTP_TIPO, 0)||' '||
	COALESCE(CJHTP_RESPONSABLE, '''')||' '||
	COALESCE(CJHTP_FECHA, CURRENT_TIMESTAMP)||' '||
	COALESCE(CJHTP_ESTADO, FALSE)||' '||
	COALESCE(CJHTP_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||
	COALESCE(CJHTP_USUARIO_INSERT, '''')||' '||
	COALESCE(CJHTP_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||
	COALESCE(CJHTP_USUARIO_UPDATE, ' ')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_JUR_HISTORIAL_PROCESO.
* @param IN_CJHTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL HISTORIAL DEL PROCESO JUDICIAL
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @param IN_CJHTP_DESCRIPCION DESCRIPCION DEL MOVIMIENTO DEL PROCESO JUDICIAL
* @param IN_CJHTP_TIPO TIPO DE MOVIMIENTO EN EL PROCESO JUDICIAL
0 - ENTRADA
1 - SALIDA
* @param IN_CJHTP_RESPONSABLE NOMBRE DEL RESPONSABLE DE ESTE HISTORIAL DEL PROCESO JUDICIAL
* @param IN_CJHTP_FECHA FECHA DE REGISTRO DE OPERACION EN EL PROCESO JUDICIAL
* @param IN_CJHTP_ESTADO ESTADO DEL REGISTRO
* @param IN_CJHTP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_UPDATE(
IN IN_CJHTP_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_CODIGO%TYPE,
IN IN_CJPJU_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJPJU_CODIGO%TYPE,
IN IN_CJHTP_DESCRIPCION SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_DESCRIPCION%TYPE,
IN IN_CJHTP_TIPO SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_TIPO%TYPE,
IN IN_CJHTP_RESPONSABLE SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_RESPONSABLE%TYPE,
IN IN_CJHTP_FECHA SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_FECHA%TYPE,
IN IN_CJHTP_ESTADO SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_ESTADO%TYPE,
IN IN_CJHTP_USUARIO_UPDATE SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_HISTORIAL_PROCESO SET
		CJPJU_CODIGO = IN_CJPJU_CODIGO, 
		CJHTP_DESCRIPCION = IN_CJHTP_DESCRIPCION, 
		CJHTP_TIPO = IN_CJHTP_TIPO, 
		CJHTP_RESPONSABLE = IN_CJHTP_RESPONSABLE, 
		CJHTP_FECHA = IN_CJHTP_FECHA, 
		CJHTP_ESTADO = IN_CJHTP_ESTADO, 
		CJHTP_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CJHTP_USUARIO_UPDATE = IN_CJHTP_USUARIO_UPDATE
	WHERE
		CJHTP_CODIGO = IN_CJHTP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO.
* @param IN_CJHTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL HISTORIAL DEL PROCESO JUDICIAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_SELECT(
IN IN_CJHTP_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJHTP_CODIGO, 
		CJPJU_CODIGO, 
		CJHTP_DESCRIPCION, 
		CJHTP_TIPO, 
		CJHTP_RESPONSABLE, 
		CJHTP_FECHA, 
		CJHTP_ESTADO, 
		CJHTP_FECHA_INSERT, 
		CJHTP_USUARIO_INSERT, 
		CJHTP_FECHA_UPDATE, 
		CJHTP_USUARIO_UPDATE
	FROM SII.CGG_JUR_HISTORIAL_PROCESO
	WHERE CJHTP_ESTADO = TRUE AND 
		CJHTP_CODIGO = IN_CJHTP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO.
* @param IN_CJHTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL HISTORIAL DEL PROCESO JUDICIAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_DELETE(
IN IN_CJHTP_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_HISTORIAL_PROCESO
	WHERE
		CJHTP_CODIGO = IN_CJHTP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO.
* @param IN_CJHTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL HISTORIAL DEL PROCESO JUDICIAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_DELETE_SOFT(
IN IN_CJHTP_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJHTP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_HISTORIAL_PROCESO SET
		CJHTP_ESTADO = FALSE
	WHERE
		CJHTP_CODIGO = IN_CJHTP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_S_CGG_JUR_PROCESO_JUDICIAL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_S_CGG_JUR_PROCESO_JUDICIAL(
IN IN_CJPJU_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJPJU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJHTP_CODIGO, 
		CJPJU_CODIGO, 
		CJHTP_DESCRIPCION, 
		CJHTP_TIPO, 
		CJHTP_RESPONSABLE, 
		CJHTP_FECHA, 
		CJHTP_ESTADO, 
		CJHTP_FECHA_INSERT, 
		CJHTP_USUARIO_INSERT, 
		CJHTP_FECHA_UPDATE, 
		CJHTP_USUARIO_UPDATE
	FROM SII.CGG_JUR_HISTORIAL_PROCESO
	WHERE CJHTP_ESTADO = TRUE AND 
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_D_CGG_JUR_PROCESO_JUDICIAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_D_CGG_JUR_PROCESO_JUDICIAL(
IN IN_CJPJU_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJPJU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_HISTORIAL_PROCESO
	WHERE
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_HISTORIAL_PROCESO_D_CGG_JUR_PROCESO_JUDICIAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_HISTORIAL_PROCESO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_HISTORIAL_PROCESO_DS_CGG_JUR_PROCESO_JUDICIAL(
IN IN_CJPJU_CODIGO SII.CGG_JUR_HISTORIAL_PROCESO.CJPJU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_HISTORIAL_PROCESO SET
		cjhtp_estado = false
	WHERE
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

