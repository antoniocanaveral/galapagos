/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_INFORMACION_LABORAL
* @param IN_CGINF_CODIGO IDENTIFICATIVO UNICO DE GESTION LABORAL
* @param IN_CGINF_TRAB_OTRA_CIUDAD INFORMACION EN CASO DE TRABAJAR EN OTRA CIUDAD
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE LA TABLA PERSONA
* @param IN_CGINF_DISPONIBILIDAD EN QUE TIEMPO ESTA DISPONIBLE PARA APLICAR A OTRO TRABAJO
* @param IN_CGINF_CALIFICACION CALIFICACION DE UN RESIDENTE QUE INGRESA EL ADMINISTRADOR
0 - NO
1 - SI
2 - PRONTO
* @param IN_CGINF_LICENCIA_CONDUCIR DETERMINA SI TIENE O NO LICENCIA DE CONDUCIR
0 - NO
1 - SI 
2 - PRONTO
* @param IN_CGINF_DISCAPACIDAD DETERMINA SI LA PERSONA TIENE ALGUNA DISCAPACIDAD
* @param IN_CGINF_ESTADO_LABORAL NO ESPECIFICADO
* @param IN_CGINF_OBSERVACIONES INFORMACION ADICIONAL
* @param IN_CGINF_ESTADO ESTADO DEL REGISTRO
* @param IN_CGINF_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGINF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_INSERT(
IN IN_CGINF_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CGINF_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CRPER_CODIGO%TYPE,
IN IN_CGINF_TRAB_OTRA_CIUDAD SII.CGG_GEM_INFORMACION_LABORAL.CGINF_TRAB_OTRA_CIUDAD%TYPE,
IN IN_CGINF_DISPONIBILIDAD SII.CGG_GEM_INFORMACION_LABORAL.CGINF_DISPONIBILIDAD%TYPE,
IN IN_CGINF_CALIFICACION SII.CGG_GEM_INFORMACION_LABORAL.CGINF_CALIFICACION%TYPE,
IN IN_CGINF_LICENCIA_CONDUCIR SII.CGG_GEM_INFORMACION_LABORAL.CGINF_LICENCIA_CONDUCIR%TYPE,
IN IN_CGINF_ESTADO_LABORAL SII.CGG_GEM_INFORMACION_LABORAL.CGINF_ESTADO_LABORAL%TYPE,
IN IN_CGINF_HIJOS SII.CGG_GEM_INFORMACION_LABORAL.CGINF_HIJOS%TYPE,
IN IN_CGINF_OBSERVACIONES SII.CGG_GEM_INFORMACION_LABORAL.CGINF_OBSERVACIONES%TYPE,
IN IN_CRPER_ASPIRACION_SALARIAL SII.CGG_RES_PERSONA.CRPER_ASPIRACION_SALARIAL%TYPE,
IN IN_CGINF_ESTADO SII.CGG_GEM_INFORMACION_LABORAL.CGINF_ESTADO%TYPE,
IN IN_CGINF_USUARIO_INSERT SII.CGG_GEM_INFORMACION_LABORAL.CGINF_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGINF_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_INFORMACION_LABORAL','CGINF_CODIGO','CGINF') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGINF_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_INFORMACION_LABORAL(
		CGINF_CODIGO, 
		CRPER_CODIGO, 
		CGINF_TRAB_OTRA_CIUDAD,
		CGINF_DISPONIBILIDAD, 
		CGINF_CALIFICACION, 
		CGINF_LICENCIA_CONDUCIR, 
		CGINF_ESTADO_LABORAL, 
		CGINF_HIJOS,
		CGINF_OBSERVACIONES, 
		CGINF_ESTADO, 
		CGINF_FECHA_INSERT, 
		CGINF_USUARIO_INSERT, 
		CGINF_FECHA_UPDATE, 
		CGINF_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CGINF_TRAB_OTRA_CIUDAD,
		IN_CGINF_DISPONIBILIDAD, 
		IN_CGINF_CALIFICACION, 
		IN_CGINF_LICENCIA_CONDUCIR, 
		IN_CGINF_ESTADO_LABORAL, 
		IN_CGINF_HIJOS,
		IN_CGINF_OBSERVACIONES, 
		IN_CGINF_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGINF_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGINF_USUARIO_INSERT
	);
	
	UPDATE SII.CGG_RES_PERSONA SET
		CRPER_ASPIRACION_SALARIAL = IN_CRPER_ASPIRACION_SALARIAL
	WHERE 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_INFORMACION_LABORAL.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGINF_CODIGO, 
		CRPER_CODIGO, 
		CGINF_TRAB_OTRA_CIUDAD,
		CGINF_DISPONIBILIDAD, 
		CGINF_CALIFICACION, 
		CGINF_LICENCIA_CONDUCIR, 
		CGINF_ESTADO_LABORAL, 
		CGINF_HIJOS,
		CGINF_OBSERVACIONES, 
		CGINF_ESTADO, 
		CGINF_FECHA_INSERT, 
		CGINF_USUARIO_INSERT, 
		CGINF_FECHA_UPDATE, 
		CGINF_USUARIO_UPDATE
	FROM SII.CGG_GEM_INFORMACION_LABORAL
	WHERE CGINF_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_INFORMACION_LABORAL.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGINF_CODIGO, 
		CRPER_CODIGO, 
		CGINF_TRAB_OTRA_CIUDAD,
		CGINF_DISPONIBILIDAD, 
		CGINF_CALIFICACION, 
		CGINF_LICENCIA_CONDUCIR, 
		CGINF_ESTADO_LABORAL, 
		CGINF_HIJOS,
		CGINF_OBSERVACIONES, 
		CGINF_ESTADO, 
		CGINF_FECHA_INSERT, 
		CGINF_USUARIO_INSERT, 
		CGINF_FECHA_UPDATE, 
		CGINF_USUARIO_UPDATE
	FROM SII.CGG_GEM_INFORMACION_LABORAL
	WHERE CGINF_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGINF_TRAB_OTRA_CIUDAD, '''')||'' ''||COALESCE(CGINF_DISPONIBILIDAD, '''')||'' ''||COALESCE(CGINF_CALIFICACION, '''')||'' ''||COALESCE(CGINF_LICENCIA_CONDUCIR, '''')||'' ''||COALESCE(CGINF_HIJOS, '''')||'' ''||COALESCE(CGINF_ESTADO_LABORAL, '''')||'' ''||COALESCE(CGINF_OBSERVACIONES, '''')||'' ''||COALESCE(CGINF_ESTADO, FALSE)||'' ''||COALESCE(CGINF_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGINF_USUARIO_INSERT, '''')||'' ''||COALESCE(CGINF_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGINF_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_INFORMACION_LABORAL.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_INFORMACION_LABORAL
	WHERE CGINF_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_INFORMACION_LABORAL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_INFORMACION_LABORAL
	WHERE CGINF_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGINF_TRAB_OTRA_CIUDAD, '''')||' '||COALESCE(CGINF_DISPONIBILIDAD, '''')||' '||COALESCE(CGINF_CALIFICACION, '''')||' '||COALESCE(CGINF_LICENCIA_CONDUCIR, '''')||' '||COALESCE(CGINF_HIJOS, '''')||' '||COALESCE(CGINF_ESTADO_LABORAL, '''')||' '||COALESCE(CGINF_OBSERVACIONES, '''')||' '||COALESCE(CGINF_ESTADO, FALSE)||' '||COALESCE(CGINF_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGINF_USUARIO_INSERT, '''')||' '||COALESCE(CGINF_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGINF_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_INFORMACION_LABORAL.
* @param IN_CGINF_CODIGO IDENTIFICATIVO DE GESTION LABORAL.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE LA TABLA PERSONA
* @param IN_CGINF_TRAB_OTRA_CIUDAD INFORMACION EN CASO DE TRABAJAR EN OTRA CIUDAD.
* @param IN_CGINF_DISPONIBILIDAD EN QUE TIEMPO ESTA DISPONIBLE PARA APLICAR A OTRO TRABAJO
* @param IN_CGINF_CALIFICACION CALIFICACION DE UN RESIDENTE QUE INGRESA EL ADMINISTRADOR
0 - NO
1 - SI
2 - PRONTO
* @param IN_CGINF_LICENCIA_CONDUCIR DETERMINA SI TIENE O NO LICENCIA DE CONDUCIR
0 - NO
1 - SI 
2 - PRONTO
* @param IN_CGINF_DISCAPACIDAD DETERMINA SI LA PERSONA TIENE ALGUNA DISCAPACIDAD
* @param IN_CGINF_ESTADO_LABORAL NO ESPECIFICADO
* @param IN_CGINF_OBSERVACIONES INFORMACION ADICIONAL
* @param IN_CGINF_ESTADO ESTADO DEL REGISTRO
* @param IN_CGINF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_UPDATE(
IN IN_CGINF_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CGINF_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CRPER_CODIGO%TYPE,
IN IN_CGINF_TRAB_OTRA_CIUDAD SII.CGG_GEM_INFORMACION_LABORAL.CGINF_TRAB_OTRA_CIUDAD%TYPE,
IN IN_CGINF_DISPONIBILIDAD SII.CGG_GEM_INFORMACION_LABORAL.CGINF_DISPONIBILIDAD%TYPE,
IN IN_CGINF_CALIFICACION SII.CGG_GEM_INFORMACION_LABORAL.CGINF_CALIFICACION%TYPE,
IN IN_CGINF_LICENCIA_CONDUCIR SII.CGG_GEM_INFORMACION_LABORAL.CGINF_LICENCIA_CONDUCIR%TYPE,
IN IN_CGINF_ESTADO_LABORAL SII.CGG_GEM_INFORMACION_LABORAL.CGINF_ESTADO_LABORAL%TYPE, 
IN IN_CGINF_HIJOS SII.CGG_GEM_INFORMACION_LABORAL.CGINF_HIJOS%TYPE,
IN IN_CGINF_OBSERVACIONES SII.CGG_GEM_INFORMACION_LABORAL.CGINF_OBSERVACIONES%TYPE,
IN IN_CRPER_ASPIRACION_SALARIAL SII.CGG_RES_PERSONA.CRPER_ASPIRACION_SALARIAL%TYPE,
IN IN_CGINF_ESTADO SII.CGG_GEM_INFORMACION_LABORAL.CGINF_ESTADO%TYPE,
IN IN_CGINF_USUARIO_UPDATE SII.CGG_GEM_INFORMACION_LABORAL.CGINF_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_INFORMACION_LABORAL SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CGINF_TRAB_OTRA_CIUDAD = IN_CGINF_TRAB_OTRA_CIUDAD,
		CGINF_DISPONIBILIDAD = IN_CGINF_DISPONIBILIDAD, 
		CGINF_CALIFICACION = IN_CGINF_CALIFICACION, 
		CGINF_LICENCIA_CONDUCIR = IN_CGINF_LICENCIA_CONDUCIR, 
		CGINF_ESTADO_LABORAL = IN_CGINF_ESTADO_LABORAL, 
		CGINF_HIJOS = IN_CGINF_HIJOS,
		CGINF_OBSERVACIONES = IN_CGINF_OBSERVACIONES, 
		CGINF_ESTADO = IN_CGINF_ESTADO, 
		CGINF_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGINF_USUARIO_UPDATE = IN_CGINF_USUARIO_UPDATE
	WHERE
		CGINF_CODIGO = IN_CGINF_CODIGO;
		
	UPDATE SII.CGG_RES_PERSONA SET
		CRPER_ASPIRACION_SALARIAL = IN_CRPER_ASPIRACION_SALARIAL
	WHERE 
		CRPER_CODIGO = IN_CRPER_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_INFORMACION_LABORAL.
* @param IN_CGINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INFORMACION.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_SELECT(
IN IN_CGINF_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CGINF_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGINF_CODIGO, 
		CRPER_CODIGO, 
		CGINF_TRAB_OTRA_CIUDAD,
		CGINF_DISPONIBILIDAD, 
		CGINF_CALIFICACION, 
		CGINF_LICENCIA_CONDUCIR, 
		CGINF_ESTADO_LABORAL, 
		CGINF_HIJOS,
		CGINF_OBSERVACIONES, 
		CGINF_ESTADO, 
		CGINF_FECHA_INSERT, 
		CGINF_USUARIO_INSERT, 
		CGINF_FECHA_UPDATE, 
		CGINF_USUARIO_UPDATE
	FROM SII.CGG_GEM_INFORMACION_LABORAL
	WHERE CGINF_ESTADO = TRUE AND 
		CGINF_CODIGO = IN_CGINF_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_INFORMACION_LABORAL.
* @param IN_CGINF_CODIGO IDENTIFICATIVO DE REGISTRO DE INFORMACION LABORAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_DELETE(
IN IN_CGINF_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CGINF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_INFORMACION_LABORAL
	WHERE
		CGINF_CODIGO = IN_CGINF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_INFORMACION_LABORAL.
* @param IN_CGINF_CODIGO IDENTIFICATIVO DE INFORMACION LABORAL.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_DELETE_SOFT(
IN IN_CGINF_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CGINF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_INFORMACION_LABORAL SET
		CGINF_ESTADO = FALSE
	WHERE
		CGINF_CODIGO = IN_CGINF_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_INFORMACION_LABORAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE LA TABLA PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGINF_CODIGO, 
		CRPER_CODIGO, 
		CGINF_TRAB_OTRA_CIUDAD,
		CGINF_DISPONIBILIDAD, 
		CGINF_CALIFICACION, 
		CGINF_LICENCIA_CONDUCIR, 
		CGINF_ESTADO_LABORAL, 
		CGINF_HIJOS,
		CGINF_OBSERVACIONES, 
		CGINF_ESTADO, 
		CGINF_FECHA_INSERT, 
		CGINF_USUARIO_INSERT, 
		CGINF_FECHA_UPDATE, 
		CGINF_USUARIO_UPDATE
	FROM SII.CGG_GEM_INFORMACION_LABORAL
	WHERE CGINF_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_INFORMACION_LABORAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE LA TABLA PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_INFORMACION_LABORAL
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORAL_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_INFORMACION_LABORAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE LA TABLA PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORAL_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_INFORMACION_LABORAL SET
		cginf_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_INFORMACION_LABORALByID
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_INFORMACION_LABORAL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE LA TABLA PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_INFORMACION_LABORALByID(
IN IN_CRPER_CODIGO SII.CGG_GEM_INFORMACION_LABORAL.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		ILA.CGINF_CODIGO, 
		ILA.CRPER_CODIGO, 
		ILA.CGINF_TRAB_OTRA_CIUDAD,
		PER.CRPER_ASPIRACION_SALARIAL,
		ILA.CGINF_DISPONIBILIDAD, 
		ILA.CGINF_CALIFICACION, 
		ILA.CGINF_LICENCIA_CONDUCIR, 
		ILA.CGINF_ESTADO_LABORAL, 
		ILA.CGINF_HIJOS,
		ILA.CGINF_OBSERVACIONES	
	FROM SII.CGG_RES_PERSONA PER LEFT JOIN SII.CGG_GEM_INFORMACION_LABORAL ILA ON(ILA.CRPER_CODIGO=PER.CRPER_CODIGO)
	WHERE 
		PER.CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;