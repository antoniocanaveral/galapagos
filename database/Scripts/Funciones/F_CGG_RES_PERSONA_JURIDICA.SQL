/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA_JURIDICA
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @param IN_CSCTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  SECTOR PRODUCTIVO
* @param IN_CVSCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VEHICULO SECTOR
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CRPJR_RAZON_SOCIAL NOMBRE COMERCIAL DE LA PERSONA JURIDICA
* @param IN_CRPJR_NUMERO_IDENTIFICACION NUMERO DE IDENTIFICACION DE LA PERSONA JURIDICA
* @param IN_CRPJR_FECHA_CONSTITUCION FECHA DE CONSTITUCION DE LA EMPRESA
* @param IN_CRPJR_DIRECCION DIRECCION DE LA PERSONA JURIDICA
* @param IN_CRPJR_ACTIVIDAD DESCRIPCION DE LA ACTIVIDAD A LA QUE SE DIDICA LA EMPRESA
* @param IN_CRPJR_NUMERO_EMPLEADOS NUMERO DE EMPLEADOS QUE CONFORMAN LA EMPRESA
* @param IN_CRPJR_TIPO INFORMACION QUE DETERMINA EL AMBITO INTERNA/EXTERNA A LA PROVINCIA
* @param IN_CRPJR_OBSERVACION INFORMACION ADICIONAL
* @param IN_CRPJR_ESTADO ESTADO DEL REGISTRO
* @param IN_CRPJR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRPJR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_INSERT(
IN IN_CRPJR_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CRPJR_CODIGO%TYPE, 
IN IN_CSCTP_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CSCTP_CODIGO%TYPE, 
IN IN_CVSCT_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CVSCT_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CCTN_CODIGO%TYPE,
IN IN_CRPJR_RAZON_SOCIAL SII.CGG_RES_PERSONA_JURIDICA.CRPJR_RAZON_SOCIAL%TYPE, 
IN IN_CRPJR_NUMERO_IDENTIFICACION SII.CGG_RES_PERSONA_JURIDICA.CRPJR_NUMERO_IDENTIFICACION%TYPE, 
IN IN_CRPJR_FECHA_CONSTITUCION SII.CGG_RES_PERSONA_JURIDICA.CRPJR_FECHA_CONSTITUCION%TYPE, 
IN IN_CRPJR_DIRECCION SII.CGG_RES_PERSONA_JURIDICA.CRPJR_DIRECCION%TYPE, 
IN IN_CRPJR_ACTIVIDAD SII.CGG_RES_PERSONA_JURIDICA.CRPJR_ACTIVIDAD%TYPE, 
IN IN_CRPJR_NUMERO_EMPLEADOS SII.CGG_RES_PERSONA_JURIDICA.CRPJR_NUMERO_EMPLEADOS%TYPE, 
IN IN_CRPJR_TIPO SII.CGG_RES_PERSONA_JURIDICA.CRPJR_TIPO%TYPE, 
IN IN_CRPJR_OBSERVACION SII.CGG_RES_PERSONA_JURIDICA.CRPJR_OBSERVACION%TYPE,
IN IN_CRPJR_ESTADO SII.CGG_RES_PERSONA_JURIDICA.CRPJR_ESTADO%TYPE, 
IN IN_CRPJR_USUARIO_INSERT SII.CGG_RES_PERSONA_JURIDICA.CRPJR_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRPJR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_PERSONA_JURIDICA','CRPJR_CODIGO','CRPJR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRPJR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_PERSONA_JURIDICA(
		CRPJR_CODIGO, 
		CSCTP_CODIGO, 
		CVSCT_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_RAZON_SOCIAL, 
		CRPJR_NUMERO_IDENTIFICACION, 
		CRPJR_FECHA_CONSTITUCION, 
		CRPJR_DIRECCION, 
		CRPJR_ACTIVIDAD, 
		CRPJR_NUMERO_EMPLEADOS, 
		CRPJR_TIPO, 
		CRPJR_OBSERVACION,
		CRPJR_ESTADO, 
		CRPJR_FECHA_INSERT, 
		CRPJR_USUARIO_INSERT, 
		CRPJR_FECHA_UPDATE, 
		CRPJR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CSCTP_CODIGO, 
		IN_CVSCT_CODIGO, 
		IN_CCTN_CODIGO,
		IN_CRPJR_RAZON_SOCIAL, 
		IN_CRPJR_NUMERO_IDENTIFICACION, 
		IN_CRPJR_FECHA_CONSTITUCION, 
		IN_CRPJR_DIRECCION, 
		IN_CRPJR_ACTIVIDAD, 
		IN_CRPJR_NUMERO_EMPLEADOS, 
		IN_CRPJR_TIPO, 
		IN_CRPJR_OBSERVACION,
		IN_CRPJR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRPJR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRPJR_USUARIO_INSERT
	);
	UPDATE SII.CGG_GEM_PREREGISTRO_EMPRESA SET
		CRPJR_CODIGO = OUT_KEY
	WHERE
		CGPRE_RUC = IN_CRPJR_NUMERO_IDENTIFICACION;
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPJR_CODIGO, 
		CSCTP_CODIGO, 
		CVSCT_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_RAZON_SOCIAL, 
		CRPJR_NUMERO_IDENTIFICACION, 
		CRPJR_FECHA_CONSTITUCION, 
		CRPJR_DIRECCION, 
		CRPJR_ACTIVIDAD, 
		CRPJR_NUMERO_EMPLEADOS, 
		CRPJR_TIPO, 
		CRPJR_OBSERVACION,
		CRPJR_ESTADO, 
		CRPJR_FECHA_INSERT, 
		CRPJR_USUARIO_INSERT, 
		CRPJR_FECHA_UPDATE, 
		CRPJR_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_JURIDICA
	WHERE CRPJR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		PRJ.CRPJR_CODIGO, 
		PRJ.CSCTP_CODIGO,
		SCP.CSCTP_NOMBRE,
		PRJ.CVSCT_CODIGO, 
		SCT.CVSCT_NOMBRE,
		PRJ.CCTN_CODIGO, 
		CNT.CCTN_NOMBRE,
		PRJ.CRPJR_RAZON_SOCIAL, 
		PRJ.CRPJR_NUMERO_IDENTIFICACION, 
		PRJ.CRPJR_FECHA_CONSTITUCION, 
		PRJ.CRPJR_DIRECCION, 
		PRJ.CRPJR_ACTIVIDAD, 
		PRJ.CRPJR_NUMERO_EMPLEADOS, 
		PRJ.CRPJR_TIPO, 
		PRJ.CRPJR_OBSERVACION,
		PRJ.CRPJR_ESTADO, 
		PRJ.CRPJR_FECHA_INSERT, 
		PRJ.CRPJR_USUARIO_INSERT, 
		PRJ.CRPJR_FECHA_UPDATE, 
		PRJ.CRPJR_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_JURIDICA PRJ
	LEFT JOIN SII.CGG_CANTON CNT ON CNT.CCTN_CODIGO = PRJ.CCTN_CODIGO
	LEFT JOIN SII.CGG_SECTOR_PRODUCTIVO SCP ON SCP.CSCTP_CODIGO = PRJ.CSCTP_CODIGO
	LEFT JOIN SII.CGG_VEH_SECTOR SCT ON SCT.CVSCT_CODIGO = PRJ.CVSCT_CODIGO
	WHERE CRPJR_ESTADO AND (LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRPJR_RAZON_SOCIAL IS NULL THEN '''' ELSE CRPJR_RAZON_SOCIAL END ||'' ''||CASE WHEN CRPJR_NUMERO_IDENTIFICACION IS NULL THEN '''' ELSE CRPJR_NUMERO_IDENTIFICACION END ||'' ''||CASE WHEN CRPJR_FECHA_CONSTITUCION IS NULL THEN CURRENT_TIMESTAMP ELSE CRPJR_FECHA_CONSTITUCION END ||'' ''||CASE WHEN CRPJR_DIRECCION IS NULL THEN '''' ELSE CRPJR_DIRECCION END ||'' ''||CASE WHEN CRPJR_ACTIVIDAD IS NULL THEN '''' ELSE CRPJR_ACTIVIDAD END ||'' ''||CASE WHEN CRPJR_NUMERO_EMPLEADOS IS NULL THEN 0 ELSE CRPJR_NUMERO_EMPLEADOS END ||'' ''||CASE WHEN CRPJR_TIPO IS NULL THEN 0 ELSE CRPJR_TIPO END ||'' ''||CASE WHEN CRPJR_ESTADO IS NULL THEN FALSE ELSE CRPJR_ESTADO END ||'' ''||CASE WHEN CRPJR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRPJR_FECHA_INSERT END ||'' ''||CASE WHEN CRPJR_USUARIO_INSERT IS NULL THEN '''' ELSE CRPJR_USUARIO_INSERT END ||'' ''||CASE WHEN CRPJR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRPJR_FECHA_UPDATE END ||'' ''||CASE WHEN CRPJR_USUARIO_UPDATE IS NULL THEN '''' ELSE CRPJR_USUARIO_UPDATE END ) = 1)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_PERSONA_JURIDICA
	WHERE CRPJR_ESTADO AND (LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRPJR_CODIGO IS NULL THEN '''' ELSE CRPJR_CODIGO END ||' '||CASE WHEN CSCTP_CODIGO IS NULL THEN '''' ELSE CSCTP_CODIGO END ||' '||CASE WHEN CVSCT_CODIGO IS NULL THEN '''' ELSE CVSCT_CODIGO END ||' '||CASE WHEN CRPJR_RAZON_SOCIAL IS NULL THEN '''' ELSE CRPJR_RAZON_SOCIAL END ||' '||CASE WHEN CRPJR_NUMERO_IDENTIFICACION IS NULL THEN '''' ELSE CRPJR_NUMERO_IDENTIFICACION END ||' '||CASE WHEN CRPJR_FECHA_CONSTITUCION IS NULL THEN CURRENT_TIMESTAMP ELSE CRPJR_FECHA_CONSTITUCION END ||' '||CASE WHEN CRPJR_DIRECCION IS NULL THEN '''' ELSE CRPJR_DIRECCION END ||' '||CASE WHEN CRPJR_ACTIVIDAD IS NULL THEN '''' ELSE CRPJR_ACTIVIDAD END ||' '||CASE WHEN CRPJR_NUMERO_EMPLEADOS IS NULL THEN 0 ELSE CRPJR_NUMERO_EMPLEADOS END ||' '||CASE WHEN CRPJR_TIPO IS NULL THEN 0 ELSE CRPJR_TIPO END ||' '||CASE WHEN CRPJR_ESTADO IS NULL THEN FALSE ELSE CRPJR_ESTADO END ||' '||CASE WHEN CRPJR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRPJR_FECHA_INSERT END ||' '||CASE WHEN CRPJR_USUARIO_INSERT IS NULL THEN '''' ELSE CRPJR_USUARIO_INSERT END ||' '||CASE WHEN CRPJR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRPJR_FECHA_UPDATE END ||' '||CASE WHEN CRPJR_USUARIO_UPDATE IS NULL THEN '''' ELSE CRPJR_USUARIO_UPDATE END ) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_PERSONA_JURIDICA
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @param IN_CSCTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  SECTOR PRODUCTIVO
* @param IN_CVSCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VEHICULO SECTOR
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CRPJR_RAZON_SOCIAL NOMBRE COMERCIAL DE LA PERSONA JURIDICA
* @param IN_CRPJR_NUMERO_IDENTIFICACION NUMERO DE IDENTIFICACION DE LA PERSONA JURIDICA
* @param IN_CRPJR_FECHA_CONSTITUCION FECHA DE CONSTITUCION DE LA EMPRESA
* @param IN_CRPJR_DIRECCION DIRECCION DE LA PERSONA JURIDICA
* @param IN_CRPJR_ACTIVIDAD DESCRIPCION DE LA ACTIVIDAD A LA QUE SE DIDICA LA EMPRESA
* @param IN_CRPJR_NUMERO_EMPLEADOS NUMERO DE EMPLEADOS QUE CONFORMAN LA EMPRESA
* @param IN_CRPJR_TIPO INFORMACION QUE DETERMINA EL AMBITO INTERNA/EXTERNA A LA PROVINCIA
* @param IN_CRPJR_OBSERVACION INFORMACION ADICIONAL
* @param IN_CRPJR_ESTADO ESTADO DEL REGISTRO
* @param IN_CRPJR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_UPDATE(
IN IN_CRPJR_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CRPJR_CODIGO%TYPE, 
IN IN_CSCTP_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CSCTP_CODIGO%TYPE, 
IN IN_CVSCT_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CVSCT_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CCTN_CODIGO%TYPE,
IN IN_CRPJR_RAZON_SOCIAL SII.CGG_RES_PERSONA_JURIDICA.CRPJR_RAZON_SOCIAL%TYPE, 
IN IN_CRPJR_NUMERO_IDENTIFICACION SII.CGG_RES_PERSONA_JURIDICA.CRPJR_NUMERO_IDENTIFICACION%TYPE, 
IN IN_CRPJR_FECHA_CONSTITUCION SII.CGG_RES_PERSONA_JURIDICA.CRPJR_FECHA_CONSTITUCION%TYPE, 
IN IN_CRPJR_DIRECCION SII.CGG_RES_PERSONA_JURIDICA.CRPJR_DIRECCION%TYPE, 
IN IN_CRPJR_ACTIVIDAD SII.CGG_RES_PERSONA_JURIDICA.CRPJR_ACTIVIDAD%TYPE, 
IN IN_CRPJR_NUMERO_EMPLEADOS SII.CGG_RES_PERSONA_JURIDICA.CRPJR_NUMERO_EMPLEADOS%TYPE, 
IN IN_CRPJR_TIPO SII.CGG_RES_PERSONA_JURIDICA.CRPJR_TIPO%TYPE, 
IN IN_CRPJR_OBSERVACION SII.CGG_RES_PERSONA_JURIDICA.CRPJR_OBSERVACION%TYPE,
IN IN_CRPJR_ESTADO SII.CGG_RES_PERSONA_JURIDICA.CRPJR_ESTADO%TYPE, 
IN IN_CRPJR_USUARIO_UPDATE SII.CGG_RES_PERSONA_JURIDICA.CRPJR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA_JURIDICA SET
		CSCTP_CODIGO = IN_CSCTP_CODIGO, 
		CVSCT_CODIGO = IN_CVSCT_CODIGO, 
		CCTN_CODIGO = IN_CCTN_CODIGO, 
		CRPJR_RAZON_SOCIAL = IN_CRPJR_RAZON_SOCIAL, 
		CRPJR_NUMERO_IDENTIFICACION = IN_CRPJR_NUMERO_IDENTIFICACION, 
		CRPJR_FECHA_CONSTITUCION = IN_CRPJR_FECHA_CONSTITUCION, 
		CRPJR_DIRECCION = IN_CRPJR_DIRECCION, 
		CRPJR_ACTIVIDAD = IN_CRPJR_ACTIVIDAD, 
		CRPJR_NUMERO_EMPLEADOS = IN_CRPJR_NUMERO_EMPLEADOS, 
		CRPJR_TIPO = IN_CRPJR_TIPO, 
		CRPJR_OBSERVACION = IN_CRPJR_OBSERVACION, 
		CRPJR_ESTADO = IN_CRPJR_ESTADO, 
		CRPJR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRPJR_USUARIO_UPDATE = IN_CRPJR_USUARIO_UPDATE
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
	
	UPDATE SII.CGG_GEM_PREREGISTRO_EMPRESA SET
		CRPJR_CODIGO = IN_CRPJR_CODIGO,
		CGPRE_ESTADO = FALSE
	WHERE
		CGPRE_RUC = IN_CRPJR_NUMERO_IDENTIFICACION;
	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA_JURIDICA
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_SELECT(
IN IN_CRPJR_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CRPJR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPJR_CODIGO, 
		CSCTP_CODIGO, 
		CVSCT_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_RAZON_SOCIAL, 
		CRPJR_NUMERO_IDENTIFICACION, 
		CRPJR_FECHA_CONSTITUCION, 
		CRPJR_DIRECCION, 
		CRPJR_ACTIVIDAD, 
		CRPJR_NUMERO_EMPLEADOS, 
		CRPJR_TIPO, 
		CRPJR_OBSERVACION,
		CRPJR_ESTADO, 
		CRPJR_FECHA_INSERT, 
		CRPJR_USUARIO_INSERT, 
		CRPJR_FECHA_UPDATE, 
		CRPJR_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_JURIDICA
	WHERE CRPJR_ESTADO = TRUE AND 
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA_JURIDICA
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_DELETE(
IN IN_CRPJR_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CRPJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_PERSONA_JURIDICA
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA_JURIDICA
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_DELETE_SOFT(
IN IN_CRPJR_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CRPJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA_JURIDICA SET
		CRPJR_ESTADO = FALSE
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_S_CGG_SECTOR_PRODUCTIVO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SECTOR_PRODUCTIVO.
* @param IN_CSCTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  SECTOR PRODUCTIVO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_S_CGG_SECTOR_PRODUCTIVO(
IN IN_CSCTP_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CSCTP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPJR_CODIGO, 
		CSCTP_CODIGO, 
		CVSCT_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_RAZON_SOCIAL, 
		CRPJR_NUMERO_IDENTIFICACION, 
		CRPJR_FECHA_CONSTITUCION, 
		CRPJR_DIRECCION, 
		CRPJR_ACTIVIDAD, 
		CRPJR_NUMERO_EMPLEADOS, 
		CRPJR_TIPO, 
		CRPJR_OBSERVACION,
		CRPJR_ESTADO, 
		CRPJR_FECHA_INSERT, 
		CRPJR_USUARIO_INSERT, 
		CRPJR_FECHA_UPDATE, 
		CRPJR_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_JURIDICA
	WHERE CRPJR_ESTADO = TRUE AND 
		CSCTP_CODIGO = IN_CSCTP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_D_CGG_SECTOR_PRODUCTIVO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SECTOR_PRODUCTIVO.
* @param IN_CSCTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  SECTOR PRODUCTIVO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_D_CGG_SECTOR_PRODUCTIVO(
IN IN_CSCTP_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CSCTP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_PERSONA_JURIDICA
	WHERE
		CSCTP_CODIGO = IN_CSCTP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_D_CGG_SECTOR_PRODUCTIVO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_SECTOR_PRODUCTIVO.
* @param IN_CSCTP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  SECTOR PRODUCTIVO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_DS_CGG_SECTOR_PRODUCTIVO(
IN IN_CSCTP_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CSCTP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA_JURIDICA SET
		crpjr_estado = false
	WHERE
		CSCTP_CODIGO = IN_CSCTP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_S_CGG_VEH_SECTOR
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_SECTOR.
* @param IN_CVSCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VEHICULO SECTOR
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_S_CGG_VEH_SECTOR(
IN IN_CVSCT_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CVSCT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPJR_CODIGO, 
		CSCTP_CODIGO, 
		CVSCT_CODIGO, 
		CCTN_CODIGO, 
		CRPJR_RAZON_SOCIAL, 
		CRPJR_NUMERO_IDENTIFICACION, 
		CRPJR_FECHA_CONSTITUCION, 
		CRPJR_DIRECCION, 
		CRPJR_ACTIVIDAD, 
		CRPJR_NUMERO_EMPLEADOS, 
		CRPJR_TIPO, 
		CRPJR_OBSERVACION,
		CRPJR_ESTADO, 
		CRPJR_FECHA_INSERT, 
		CRPJR_USUARIO_INSERT, 
		CRPJR_FECHA_UPDATE, 
		CRPJR_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_JURIDICA
	WHERE CRPJR_ESTADO = TRUE AND 
		CVSCT_CODIGO = IN_CVSCT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_D_CGG_VEH_SECTOR
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_SECTOR.
* @param IN_CVSCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VEHICULO SECTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_D_CGG_VEH_SECTOR(
IN IN_CVSCT_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CVSCT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_PERSONA_JURIDICA
	WHERE
		CVSCT_CODIGO = IN_CVSCT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_D_CGG_VEH_SECTOR
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_SECTOR.
* @param IN_CVSCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VEHICULO SECTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_DS_CGG_VEH_SECTOR(
IN IN_CVSCT_CODIGO SII.CGG_RES_PERSONA_JURIDICA.CVSCT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA_JURIDICA SET
		crpjr_estado = false
	WHERE
		CVSCT_CODIGO = IN_CVSCT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_SELECT_NOMBRES
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA_JURIDICA EN BASE A SU CRPJR_CODIGO
* @param IN_CRJR_CODIGO CODIGO DE IDENTIFICACION DE LA PERSONA JURIDICA.
*/
CREATE OR REPLACE FUNCTION F_CGG_RES_PERSONA_JURIDICA_SELECT_NOMBRES(
IN IN_CRJR_CODIGO VARCHAR
)RETURNS VARCHAR  AS
$$
DECLARE
	TMP_CRJR_NOMBRE VARCHAR(500);
BEGIN
    SELECT PJ.CRPJR_RAZON_SOCIAL 	
	INTO TMP_CRJR_NOMBRE
	FROM SII.CGG_RES_PERSONA_JURIDICA PJ
	WHERE CRPJR_ESTADO = TRUE AND 
		PJ.CRPJR_CODIGO= IN_CRJR_CODIGO;
	RETURN TMP_CRJR_NOMBRE;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_PERSONAJ_BYROL
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA DE ACUERDO A UN ROL
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PERSONAJ_BYROL(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		PJU.CRPJR_CODIGO, 
		PJU.CSCTP_CODIGO, 
		PJU.CVSCT_CODIGO, 
		PJU.CCTN_CODIGO, 
		PJU.CRPJR_RAZON_SOCIAL, 
		PJU.CRPJR_NUMERO_IDENTIFICACION, 
		PJU.CRPJR_FECHA_CONSTITUCION, 
		PJU.CRPJR_DIRECCION, 
		PJU.CRPJR_ACTIVIDAD, 
		PJU.CRPJR_NUMERO_EMPLEADOS, 
		PJU.CRPJR_TIPO, 
		PJU.CRPJR_OBSERVACION,
		PJU.CRPJR_ESTADO, 
		PJU.CRPJR_FECHA_INSERT, 
		PJU.CRPJR_USUARIO_INSERT, 
		PJU.CRPJR_FECHA_UPDATE, 
		PJU.CRPJR_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_JURIDICA PJU INNER JOIN SII.CGG_USUARIO USU ON(USU.CRPJR_CODIGO = PJU.CRPJR_CODIGO)
	INNER JOIN SII.CGG_SEC_USUARIO_ROL URO ON(URO.CUSU_CODIGO=USU.CUSU_CODIGO)
	WHERE PJU.CRPJR_ESTADO = TRUE AND URO.CSROL_CODIGO = ''CSROL_GEEMP'' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(PJU.CRPJR_RAZON_SOCIAL, '''')||'' ''||COALESCE(PJU.CRPJR_NUMERO_IDENTIFICACION, '''')||'' ''||COALESCE(PJU.CRPJR_FECHA_CONSTITUCION, CURRENT_TIMESTAMP)||'' ''||COALESCE(PJU.CRPJR_DIRECCION, '''')||'' ''||COALESCE(PJU.CRPJR_ACTIVIDAD, '''')||'' ''||COALESCE(PJU.CRPJR_NUMERO_EMPLEADOS, 0)||'' ''||COALESCE(PJU.CRPJR_TIPO, 0)||'' ''||COALESCE(PJU.CRPJR_ESTADO, FALSE)||'' ''||COALESCE(PJU.CRPJR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(PJU.CRPJR_USUARIO_INSERT, '''')||'' ''||COALESCE(PJU.CRPJR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(PJU.CRPJR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_RES_PERSONA_JURIDICA_COUNT_BY_ROL
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_JURIDICA_COUNT_BY_ROL(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_PERSONA_JURIDICA PJU INNER JOIN SII.CGG_USUARIO USU ON(USU.CRPJR_CODIGO = PJU.CRPJR_CODIGO)
	INNER JOIN SII.CGG_SEC_USUARIO_ROL URO ON(URO.CUSU_CODIGO=USU.CUSU_CODIGO)
	WHERE PJU.CRPJR_ESTADO = TRUE AND URO.CSROL_CODIGO = 'CSROL_GEEMP' AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(PJU.CRPJR_RAZON_SOCIAL, '''')||' '||COALESCE(PJU.CRPJR_NUMERO_IDENTIFICACION, '''')||' '||COALESCE(PJU.CRPJR_FECHA_CONSTITUCION, CURRENT_TIMESTAMP)||' '||COALESCE(PJU.CRPJR_DIRECCION, '''')||' '||COALESCE(PJU.CRPJR_ACTIVIDAD, '''')||' '||COALESCE(PJU.CRPJR_NUMERO_EMPLEADOS, 0)||' '||COALESCE(PJU.CRPJR_TIPO, 0)||' '||COALESCE(PJU.CRPJR_ESTADO, FALSE)||' '||COALESCE(PJU.CRPJR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(PJU.CRPJR_USUARIO_INSERT, '''')||' '||COALESCE(PJU.CRPJR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(PJU.CRPJR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_PERSONAJ_CODIGO_BYNUM_IDEN
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_JURIDICA DE ACUERDO A UN ROL
* @param IN_CRPJR_NUMERO_IDENTIFICACION NUMERO DE IDENTIFICACION DEL RUC DE UNA EMPRESA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PERSONAJ_CODIGO_BYNUM_IDEN(
IN IN_CRPJR_NUMERO_IDENTIFICACION VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		JUR.CRPJR_CODIGO, 
		CSCTP_CODIGO, 
		CVSCT_CODIGO,
		CCTN_CODIGO,
		CRPJR_RAZON_SOCIAL, 
		CRPJR_NUMERO_IDENTIFICACION, 
		CRPJR_FECHA_CONSTITUCION, 
		CRPJR_DIRECCION, 
		CRPJR_ACTIVIDAD, 
		CRPJR_NUMERO_EMPLEADOS, 
		CRPJR_TIPO, 
		CRPJR_OBSERVACION,
		PER.CCTN_CODIGO,
		CRPJR_ESTADO,
		'CISLA1' AS CISLA_CODIGO
	FROM SII.CGG_RES_PERSONA_JURIDICA JUR
	INNER JOIN SII.CGG_RES_REPRESENTANTE_LEGAL REP ON REP.CRPJR_CODIGO = JUR.CRPJR_CODIGO
	INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = REP.CRPER_CODIGO
	WHERE CRPJR_ESTADO = TRUE AND CRPJR_NUMERO_IDENTIFICACION = IN_CRPJR_NUMERO_IDENTIFICACION
	ORDER BY CRPJR_FECHA_INSERT DESC;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

