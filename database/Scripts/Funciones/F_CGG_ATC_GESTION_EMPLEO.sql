/**
* FUNCION SII.F_CGG_ATC_GEM_SELECT_PAGE
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_GROUP_NAME NOMBRE DEL GRUPO
* @param IN_GROUP_VALUE VALOR DEL GRUPO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ATC_GEM_SELECT_PAGE(
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_GROUP_NAME VARCHAR,
IN IN_GROUP_VALUE VARCHAR,
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP TEXT;
	TMP_USER VARCHAR;
BEGIN
	SELECT CUSU_CODIGO INTO TMP_USER FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME; 
	IF TMP_USER IS NULL THEN
		TMP_USER:='';
	END IF;
	TMP:='SELECT
			DISTINCT(CGVCN_NUMERO), 
			CGVCN.CGVCN_CODIGO,			
			CGVCN.CUSU_CODIGO,			
			CSCTP.CSCTP_NOMBRE, 
			CGTCN.CGTCN_DESCRIPCION,
			(SELECT COUNT(*) FROM SII.CGG_GEM_CANDIDATO CGCND1 WHERE CGCND1.CUSU_CODIGO = '''||TMP_USER||'''  AND CGCND1.CGVCN_CODIGO =CGVCN.CGVCN_CODIGO AND CGCND1.CGCND_ESTADO=TRUE) APLICO,
			CGARE.CGARE_NOMBRE,
			CGCRG.CGCRG_NOMBRE,			
			SII.F_RPT_NOMBRE_OFERTANTE(CUSU.CUSU_CODIGO)  AS CRPJR_RAZON_SOCIAL,
			CGVCN_DIRECCION,		
			CGVCN_FECHA_PUBLICACION, 		
			CGVCN_FECHA_EXPIRACION, 
			CGVCN_ESTADO_OFERTA,
			CGVCN_NUMERO_VACANTES	
		FROM SII.CGG_GEM_VACANTE CGVCN
		INNER JOIN SII.CGG_GEM_ISLA_EMPLEO CGISE ON CGVCN.CGVCN_CODIGO =  CGISE.CGVCN_CODIGO		
		INNER JOIN SII.CGG_GEM_TIPO_CONTRATO CGTCN ON CGTCN.CGTCN_CODIGO = CGVCN.CGTCN_CODIGO
		LEFT JOIN SII.CGG_SECTOR_PRODUCTIVO CSCTP ON CSCTP.CSCTP_CODIGO = CGVCN.CSCTP_CODIGO
		INNER JOIN SII.CGG_GEM_CARGO CGCRG ON CGCRG.CGCRG_CODIGO = CGVCN.CGCRG_CODIGO
		LEFT JOIN SII.CGG_GEM_AREA_FUNCIONAL CGARE ON CGARE.CGARE_CODIGO = CGCRG.CGARE_CODIGO
		INNER JOIN SII.CGG_USUARIO CUSU ON CGVCN.CUSU_CODIGO = CUSU.CUSU_CODIGO		
		LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA CRPJR ON CRPJR.CRPJR_CODIGO = CUSU.CRPJR_CODIGO
		WHERE  CGVCN_ESTADO = TRUE AND CGVCN_ESTADO_OFERTA = 1 
		AND  (CGVCN_FECHA_PUBLICACION + CAST(CGVCN_DURACION_OFERTA ||'' days'' AS INTERVAL)) > CURRENT_DATE '
		||(SELECT SII.F_CGG_ATC_CADENA_GRUPO(IN_GROUP_NAME,IN_GROUP_VALUE))  ||' AND
		SII.F_STRING_IN('''||IN_FIND_TEXT||''',
			COALESCE(CGVCN_DIRECCION, '''')||'' ''||			
			COALESCE(CGARE.CGARE_NOMBRE, '''')||'' ''||
			COALESCE(CGCRG.CGCRG_NOMBRE, '''')||'' ''||
			COALESCE(CRPJR.CRPJR_RAZON_SOCIAL, '''')
		)= 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	OPEN TMP_REF FOR EXECUTE TMP;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ATC_GEM_SELECT_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_VACANTE.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_GROUP_NAME NOMBRE DEL GRUPO
* @param IN_GROUP_VALUE VALOR DEL GRUPO
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ATC_GEM_SELECT_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_GROUP_NAME VARCHAR,
IN IN_GROUP_VALUE VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
	TMP TEXT;
BEGIN
	TMP:='SELECT count(DISTINCT(CGVCN_NUMERO))
	FROM SII.CGG_GEM_VACANTE CGVCN
		INNER JOIN SII.CGG_GEM_ISLA_EMPLEO CGISE ON CGVCN.CGVCN_CODIGO =  CGISE.CGVCN_CODIGO		
		INNER JOIN SII.CGG_GEM_TIPO_CONTRATO CGTCN ON CGTCN.CGTCN_CODIGO = CGVCN.CGTCN_CODIGO
		LEFT JOIN SII.CGG_SECTOR_PRODUCTIVO CSCTP ON CSCTP.CSCTP_CODIGO = CGVCN.CSCTP_CODIGO
		INNER JOIN SII.CGG_GEM_CARGO CGCRG ON CGCRG.CGCRG_CODIGO = CGVCN.CGCRG_CODIGO
		LEFT JOIN SII.CGG_GEM_AREA_FUNCIONAL CGARE ON CGARE.CGARE_CODIGO = CGCRG.CGARE_CODIGO
		INNER JOIN SII.CGG_USUARIO CUSU ON CGVCN.CUSU_CODIGO = CUSU.CUSU_CODIGO		
		LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA CRPJR ON CRPJR.CRPJR_CODIGO = CUSU.CRPJR_CODIGO
		WHERE  CGVCN_ESTADO = TRUE AND CGVCN_ESTADO_OFERTA = 1 
		AND  (CGVCN_FECHA_PUBLICACION + CAST(CGVCN_DURACION_OFERTA ||'' days'' AS INTERVAL)) > CURRENT_DATE '
		||(SELECT SII.F_CGG_ATC_CADENA_GRUPO(IN_GROUP_NAME,IN_GROUP_VALUE))  ||' AND
		SII.F_STRING_IN('''||IN_FIND_TEXT||''',
			COALESCE(CGVCN_DIRECCION, '''')||'' ''||			
			COALESCE(CGARE.CGARE_NOMBRE, '''')||'' ''||
			COALESCE(CGCRG.CGCRG_NOMBRE, '''')||'' ''||
			COALESCE(CRPJR.CRPJR_RAZON_SOCIAL, '''')
		)= 1';
	EXECUTE TMP INTO TMP_ROWS;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ATC_GEM_SELECT_GRUPO
* SELECCIONA INFORMACION DE VARIA TABLAS DEPENDIENDO DEL GRUPO
* @param IN_GRUPO GRUPO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ATC_GEM_SELECT_GRUPO(
IN IN_GRUPO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	IF IN_GRUPO='SECTOR' THEN
		OPEN TMP_REF FOR
			SELECT 
				CSCTP_CODIGO AS CODIGO,
				CSCTP_NOMBRE AS NOMBRE
			FROM SII.CGG_SECTOR_PRODUCTIVO 
			WHERE CSCTP_ESTADO = TRUE AND CSCTP_CODIGO NOT IN(SELECT CGG_CSCTP_CODIGO FROM SII.CGG_SECTOR_PRODUCTIVO WHERE CGG_CSCTP_CODIGO IS NOT NULL)
			ORDER BY CSCTP_NOMBRE ASC ;
	ELSIF IN_GRUPO='ISLA' THEN
		OPEN TMP_REF FOR
			SELECT 
				CISLA_CODIGO AS CODIGO,
				CISLA_NOMBRE AS NOMBRE 
			FROM SII.CGG_ISLA
			WHERE CISLA_ESTADO = TRUE
			ORDER BY CISLA_NOMBRE ASC ;
	ELSIF IN_GRUPO='OFERENTE' THEN
		OPEN TMP_REF FOR
			SELECT 
				CRPJR_CODIGO AS CODIGO,
				CRPJR_RAZON_SOCIAL AS NOMBRE
			FROM SII.CGG_RES_PERSONA_JURIDICA
			WHERE CRPJR_ESTADO = TRUE
			ORDER BY CRPJR_RAZON_SOCIAL ASC ;
	ELSIF IN_GRUPO='CARGO' THEN
		OPEN TMP_REF FOR
			SELECT 
				CGCRG_CODIGO AS CODIGO,
				CGCRG_NOMBRE  AS NOMBRE 
			FROM SII.CGG_GEM_CARGO
			WHERE CGCRG_ESTADO = TRUE
			ORDER BY CGCRG_NOMBRE ASC ;
	ELSIF IN_GRUPO='AREA' THEN
		OPEN TMP_REF FOR
			SELECT 
				CGARE_CODIGO AS CODIGO,
				CGARE_NOMBRE AS NOMBRE
			FROM SII.CGG_GEM_AREA_FUNCIONAL
			WHERE CGARE_ESTADO = TRUE
			ORDER BY CGARE_NOMBRE ASC ;	
	END IF;			
	RETURN NEXT TMP_REF;			
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ATC_GEM_ESTADISTICA
* SELECCIONA INFORMACION DE INDICADORES DEL USUARIO DE GESTION DE EMPLEO
* @param IN_CUSU_CODIGO CODIGO DEL USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ATC_GEM_ESTADISTICA(
IN IN_CUSU_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
TMP_REF REFCURSOR;
TMP_APLICACIONES INTEGER;
TMP_OBSERVADO INTEGER;
TMP_INASISTENCIA INTEGER;
BEGIN
	SELECT COUNT(DISTINCT(CGVCN_CODIGO)) INTO TMP_APLICACIONES
	FROM SII.CGG_GEM_CANDIDATO
	WHERE CUSU_CODIGO = IN_CUSU_CODIGO;	
	
	SELECT COUNT(DISTINCT(CGVCN_CODIGO)) INTO TMP_OBSERVADO
	FROM SII.CGG_GEM_CANDIDATO
	WHERE CUSU_CODIGO = IN_CUSU_CODIGO AND CGCND_SELECCIONADO IN (1,3,4);	
	
	SELECT COUNT(DISTINCT(CGVCN_CODIGO)) INTO TMP_INASISTENCIA
	FROM SII.CGG_GEM_CANDIDATO CGCND
	INNER JOIN SII.CGG_GEM_ENTREVISTA CGENT ON CGCND.CGCND_CODIGO = CGENT.CGCND_CODIGO
	WHERE CGENT.CGENT_ESTADO_ENTREVISTA='1' AND CUSU_CODIGO = IN_CUSU_CODIGO;
	
	OPEN TMP_REF FOR 
		SELECT 
			TMP_APLICACIONES APLICACIONES,
			TMP_OBSERVADO AS OBSERVADO,
			TMP_INASISTENCIA AS FALTA;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;