/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_CGCER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE LA PERSONA
* @param IN_CGCER_INSTITUCION NOMBRE DE LA UNIDAD EDUCATIVA
* @param IN_CGCER_NOMBRE NOMBRE DEL CURSO
* @param IN_CGCER_DESCRIPCION DESCRIPCION DEL CURSO
* @param IN_CGCER_DURACION DURACION DEL CURSOS (HORAS)
* @param IN_CGCER_FECHA_INICIO FECHA DE  INICIO DEL CURSO
* @param IN_CGCER_FECHA_FIN FECHA DE  FIN DEL CURSO
* @param IN_CGCER_TIPO_ADJUNTO NO ESPECIFICADO
* @param IN_CGCER_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CGCER_ADJUNTO ARCHIVOS DE LOS CERTIFICADOS DIGITALIZADOS
* @param IN_CGCER_OBSERVACION INFORMACION ADICIONAL
* @param IN_CGCER_TIPO TIPO DE CERTIFICACION LABORAL O PERSONAL
0 - CURSO DE CAPACITACION
1 - SEMINARIO
2 - CERTIFICACIONES LABORALES O ACADEMICAS
* @param IN_CGCER_ESTADO ESTADO DEL REGISTRO
* @param IN_CGCER_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGCER_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_INSERT(
IN IN_CGCER_CODIGO SII.CGG_GEM_CERTIFICADO.CGCER_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_CERTIFICADO.CRPER_CODIGO%TYPE,
IN IN_CGCER_INSTITUCION SII.CGG_GEM_CERTIFICADO.CGCER_INSTITUCION%TYPE,
IN IN_CGCER_NOMBRE SII.CGG_GEM_CERTIFICADO.CGCER_NOMBRE%TYPE,
IN IN_CGCER_DESCRIPCION SII.CGG_GEM_CERTIFICADO.CGCER_DESCRIPCION%TYPE,
IN IN_CGCER_DURACION SII.CGG_GEM_CERTIFICADO.CGCER_DURACION%TYPE,
IN IN_CGCER_FECHA_INICIO SII.CGG_GEM_CERTIFICADO.CGCER_FECHA_INICIO%TYPE,
IN IN_CGCER_FECHA_FIN SII.CGG_GEM_CERTIFICADO.CGCER_FECHA_FIN%TYPE,
IN IN_CGCER_TIPO_ADJUNTO SII.CGG_GEM_CERTIFICADO.CGCER_TIPO_ADJUNTO%TYPE,
IN IN_CGCER_NOMBRE_ADJUNTO SII.CGG_GEM_CERTIFICADO.CGCER_NOMBRE_ADJUNTO%TYPE,
IN IN_CGCER_ADJUNTO SII.CGG_GEM_CERTIFICADO.CGCER_ADJUNTO%TYPE,
IN IN_CGCER_OBSERVACION SII.CGG_GEM_CERTIFICADO.CGCER_OBSERVACION%TYPE,
IN IN_CGCER_TIPO SII.CGG_GEM_CERTIFICADO.CGCER_TIPO%TYPE,
IN IN_CGCER_ESTADO SII.CGG_GEM_CERTIFICADO.CGCER_ESTADO%TYPE,
IN IN_CGCER_USUARIO_INSERT SII.CGG_GEM_CERTIFICADO.CGCER_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGCER_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_CERTIFICADO','CGCER_CODIGO','CGCER') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGCER_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_CERTIFICADO(
		CGCER_CODIGO, 
		CRPER_CODIGO, 
		CGCER_INSTITUCION, 
		CGCER_NOMBRE, 
		CGCER_DESCRIPCION, 
		CGCER_DURACION, 
		CGCER_FECHA_INICIO, 
		CGCER_FECHA_FIN, 
		CGCER_TIPO_ADJUNTO, 
		CGCER_NOMBRE_ADJUNTO, 
		CGCER_ADJUNTO, 
		CGCER_OBSERVACION, 
		CGCER_TIPO, 
		CGCER_ESTADO, 
		CGCER_FECHA_INSERT, 
		CGCER_USUARIO_INSERT, 
		CGCER_FECHA_UPDATE, 
		CGCER_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CGCER_INSTITUCION, 
		IN_CGCER_NOMBRE, 
		IN_CGCER_DESCRIPCION, 
		IN_CGCER_DURACION, 
		IN_CGCER_FECHA_INICIO, 
		IN_CGCER_FECHA_FIN, 
		IN_CGCER_TIPO_ADJUNTO, 
		IN_CGCER_NOMBRE_ADJUNTO, 
		IN_CGCER_ADJUNTO, 
		IN_CGCER_OBSERVACION, 
		IN_CGCER_TIPO, 
		IN_CGCER_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGCER_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGCER_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGCER_CODIGO, 
		CRPER_CODIGO, 
		CGCER_INSTITUCION, 
		CGCER_NOMBRE, 
		CGCER_DESCRIPCION, 
		CGCER_DURACION, 
		CGCER_FECHA_INICIO, 
		CGCER_FECHA_FIN, 
		CGCER_TIPO_ADJUNTO, 
		CGCER_NOMBRE_ADJUNTO, 
		CGCER_ADJUNTO, 
		CGCER_OBSERVACION, 
		CGCER_TIPO, 
		CGCER_ESTADO, 
		CGCER_FECHA_INSERT, 
		CGCER_USUARIO_INSERT, 
		CGCER_FECHA_UPDATE, 
		CGCER_USUARIO_UPDATE
	FROM SII.CGG_GEM_CERTIFICADO
	WHERE CGCER_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGCER_CODIGO, 
		CRPER_CODIGO, 
		CGCER_INSTITUCION, 
		CGCER_NOMBRE, 
		CGCER_DESCRIPCION, 
		CGCER_DURACION, 
		CGCER_FECHA_INICIO, 
		CGCER_FECHA_FIN, 
		CGCER_TIPO_ADJUNTO, 
		CGCER_NOMBRE_ADJUNTO, 
		CGCER_ADJUNTO, 
		CGCER_OBSERVACION, 
		CGCER_TIPO, 
		CGCER_ESTADO, 
		CGCER_FECHA_INSERT, 
		CGCER_USUARIO_INSERT, 
		CGCER_FECHA_UPDATE, 
		CGCER_USUARIO_UPDATE
	FROM SII.CGG_GEM_CERTIFICADO
	WHERE CGCER_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGCER_INSTITUCION, '''')||'' ''||COALESCE(CGCER_NOMBRE, '''')||'' ''||COALESCE(CGCER_DESCRIPCION, '''')||'' ''||COALESCE(CGCER_DURACION, 0)||'' ''||COALESCE(CGCER_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGCER_FECHA_FIN, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGCER_TIPO_ADJUNTO, '''')||'' ''||COALESCE(CGCER_NOMBRE_ADJUNTO, '''')||'' ''||COALESCE(CGCER_OBSERVACION, '''')||'' ''||COALESCE(CGCER_TIPO, 0)||'' ''||COALESCE(CGCER_ESTADO, FALSE)||'' ''||COALESCE(CGCER_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGCER_USUARIO_INSERT, '''')||'' ''||COALESCE(CGCER_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGCER_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_CERTIFICADO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_CERTIFICADO
	WHERE CGCER_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_CERTIFICADO.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_CERTIFICADO
	WHERE CGCER_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGCER_INSTITUCION, '''')||' '||COALESCE(CGCER_NOMBRE, '''')||' '||COALESCE(CGCER_DESCRIPCION, '''')||' '||COALESCE(CGCER_DURACION, 0)||' '||COALESCE(CGCER_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||COALESCE(CGCER_FECHA_FIN, CURRENT_TIMESTAMP)||' '||COALESCE(CGCER_TIPO_ADJUNTO, '''')||' '||COALESCE(CGCER_NOMBRE_ADJUNTO, '''')||' '||COALESCE(CGCER_OBSERVACION, '''')||' '||COALESCE(CGCER_TIPO, 0)||' '||COALESCE(CGCER_ESTADO, FALSE)||' '||COALESCE(CGCER_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGCER_USUARIO_INSERT, '''')||' '||COALESCE(CGCER_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGCER_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_CERTIFICADO.
* @param IN_CGCER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE LA PERSONA
* @param IN_CGCER_INSTITUCION NOMBRE DE LA UNIDAD EDUCATIVA
* @param IN_CGCER_NOMBRE NOMBRE DEL CURSO
* @param IN_CGCER_DESCRIPCION DESCRIPCION DEL CURSO
* @param IN_CGCER_DURACION DURACION DEL CURSOS (HORAS)
* @param IN_CGCER_FECHA_INICIO FECHA DE  INICIO DEL CURSO
* @param IN_CGCER_FECHA_FIN FECHA DE  FIN DEL CURSO
* @param IN_CGCER_TIPO_ADJUNTO NO ESPECIFICADO
* @param IN_CGCER_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CGCER_ADJUNTO ARCHIVOS DE LOS CERTIFICADOS DIGITALIZADOS
* @param IN_CGCER_OBSERVACION INFORMACION ADICIONAL
* @param IN_CGCER_TIPO TIPO DE CERTIFICACION LABORAL O PERSONAL
0 - CURSO DE CAPACITACION
1 - SEMINARIO
2 - CERTIFICACIONES LABORALES O ACADEMICAS
* @param IN_CGCER_ESTADO ESTADO DEL REGISTRO
* @param IN_CGCER_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION

* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_UPDATE(
IN IN_CGCER_CODIGO SII.CGG_GEM_CERTIFICADO.CGCER_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_CERTIFICADO.CRPER_CODIGO%TYPE,
IN IN_CGCER_INSTITUCION SII.CGG_GEM_CERTIFICADO.CGCER_INSTITUCION%TYPE,
IN IN_CGCER_NOMBRE SII.CGG_GEM_CERTIFICADO.CGCER_NOMBRE%TYPE,
IN IN_CGCER_DESCRIPCION SII.CGG_GEM_CERTIFICADO.CGCER_DESCRIPCION%TYPE,
IN IN_CGCER_DURACION SII.CGG_GEM_CERTIFICADO.CGCER_DURACION%TYPE,
IN IN_CGCER_FECHA_INICIO SII.CGG_GEM_CERTIFICADO.CGCER_FECHA_INICIO%TYPE,
IN IN_CGCER_FECHA_FIN SII.CGG_GEM_CERTIFICADO.CGCER_FECHA_FIN%TYPE,
IN IN_CGCER_TIPO_ADJUNTO SII.CGG_GEM_CERTIFICADO.CGCER_TIPO_ADJUNTO%TYPE,
IN IN_CGCER_NOMBRE_ADJUNTO SII.CGG_GEM_CERTIFICADO.CGCER_NOMBRE_ADJUNTO%TYPE,
IN IN_CGCER_ADJUNTO SII.CGG_GEM_CERTIFICADO.CGCER_ADJUNTO%TYPE,
IN IN_CGCER_OBSERVACION SII.CGG_GEM_CERTIFICADO.CGCER_OBSERVACION%TYPE,
IN IN_CGCER_TIPO SII.CGG_GEM_CERTIFICADO.CGCER_TIPO%TYPE,
IN IN_CGCER_ESTADO SII.CGG_GEM_CERTIFICADO.CGCER_ESTADO%TYPE,
IN IN_CGCER_USUARIO_UPDATE SII.CGG_GEM_CERTIFICADO.CGCER_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	if(LENGTH(IN_CGCER_ADJUNTO) > 0) then
		UPDATE SII.CGG_GEM_CERTIFICADO SET			
			CGCER_TIPO_ADJUNTO = IN_CGCER_TIPO_ADJUNTO, 
			CGCER_NOMBRE_ADJUNTO = IN_CGCER_NOMBRE_ADJUNTO, 
			CGCER_ADJUNTO = IN_CGCER_ADJUNTO			
		WHERE
			CGCER_CODIGO = IN_CGCER_CODIGO;
	END IF;
	
	UPDATE SII.CGG_GEM_CERTIFICADO SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CGCER_INSTITUCION = IN_CGCER_INSTITUCION, 
		CGCER_NOMBRE = IN_CGCER_NOMBRE, 
		CGCER_DESCRIPCION = IN_CGCER_DESCRIPCION, 
		CGCER_DURACION = IN_CGCER_DURACION, 
		CGCER_FECHA_INICIO = IN_CGCER_FECHA_INICIO, 
		CGCER_FECHA_FIN = IN_CGCER_FECHA_FIN, 		
		CGCER_OBSERVACION = IN_CGCER_OBSERVACION, 
		CGCER_TIPO = IN_CGCER_TIPO, 
		CGCER_ESTADO = IN_CGCER_ESTADO, 
		CGCER_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGCER_USUARIO_UPDATE = IN_CGCER_USUARIO_UPDATE
	WHERE
		CGCER_CODIGO = IN_CGCER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_CGCER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO CERTIFICADO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_SELECT(
IN IN_CGCER_CODIGO SII.CGG_GEM_CERTIFICADO.CGCER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGCER_CODIGO, 
		CRPER_CODIGO, 
		CGCER_INSTITUCION, 
		CGCER_NOMBRE, 
		CGCER_DESCRIPCION, 
		CGCER_DURACION, 
		CGCER_FECHA_INICIO, 
		CGCER_FECHA_FIN, 
		CGCER_TIPO_ADJUNTO, 
		CGCER_NOMBRE_ADJUNTO, 
		CGCER_ADJUNTO, 
		CGCER_OBSERVACION, 
		CGCER_TIPO, 
		CGCER_ESTADO, 
		CGCER_FECHA_INSERT, 
		CGCER_USUARIO_INSERT, 
		CGCER_FECHA_UPDATE, 
		CGCER_USUARIO_UPDATE
	FROM SII.CGG_GEM_CERTIFICADO
	WHERE CGCER_ESTADO = TRUE AND 
		CGCER_CODIGO = IN_CGCER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_CGCER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_DELETE(
IN IN_CGCER_CODIGO SII.CGG_GEM_CERTIFICADO.CGCER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_CERTIFICADO
	WHERE
		CGCER_CODIGO = IN_CGCER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_CGCER_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_DELETE_SOFT(
IN IN_CGCER_CODIGO SII.CGG_GEM_CERTIFICADO.CGCER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_CERTIFICADO SET
		CGCER_ESTADO = FALSE
	WHERE
		CGCER_CODIGO = IN_CGCER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_CERTIFICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE LA PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_CERTIFICADO.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGCER_CODIGO, 
		CRPER_CODIGO, 
		CGCER_INSTITUCION, 
		CGCER_NOMBRE, 
		CGCER_DESCRIPCION, 
		CGCER_DURACION, 
		CGCER_FECHA_INICIO, 
		CGCER_FECHA_FIN, 
		CGCER_TIPO_ADJUNTO, 
		CGCER_NOMBRE_ADJUNTO, 
		CGCER_ADJUNTO, 
		CGCER_OBSERVACION, 
		CGCER_TIPO, 
		CGCER_ESTADO, 
		CGCER_FECHA_INSERT, 
		CGCER_USUARIO_INSERT, 
		CGCER_FECHA_UPDATE, 
		CGCER_USUARIO_UPDATE
	FROM SII.CGG_GEM_CERTIFICADO
	WHERE CGCER_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_CERTIFICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE LA PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_CERTIFICADO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_CERTIFICADO
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_CERTIFICADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE LA PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_CERTIFICADO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_CERTIFICADO SET
		cgcer_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_PERSONA_CERTIFICADO_BYID
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_PERSONA_CERTIFICADO_BYID(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT	
		CER.CGCER_CODIGO,
		CER.CGCER_INSTITUCION,
		CER.CGCER_NOMBRE,
		CER.CGCER_DESCRIPCION,
		CER.CGCER_DURACION,
		CER.CGCER_FECHA_INICIO,
		CER.CGCER_FECHA_FIN,
		CER.CGCER_NOMBRE_ADJUNTO,
		CER.CGCER_TIPO		
	FROM SII.CGG_RES_PERSONA PER INNER JOIN SII.CGG_GEM_CERTIFICADO CER ON(PER.CRPER_CODIGO=CER.CRPER_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE AND 
		PER.CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.SII.f_cgg_res_persona_certificados_countById
* SELECCIONA EL NUMEROS REGISTROS DE LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param INCRPER_CODIGO CRITERIO DE BUSQUEDA. CODIGO DE LA PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.f_cgg_res_persona_certificados_countById(in_find_text text, inCrper_codigo character varying)
  RETURNS integer AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_CERTIFICADO
	WHERE CGCER_ESTADO = TRUE AND CRPER_CODIGO = inCrper_codigo AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGCER_INSTITUCION, '''')||' '||COALESCE(CGCER_NOMBRE, '''')||' '||COALESCE(CGCER_DESCRIPCION, '''')||' '||COALESCE(CGCER_DURACION, 0)||' '||COALESCE(CGCER_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||COALESCE(CGCER_FECHA_FIN, CURRENT_TIMESTAMP)||' '||COALESCE(CGCER_TIPO_ADJUNTO, '''')||' '||COALESCE(CGCER_NOMBRE_ADJUNTO, '''')||' '||COALESCE(CGCER_OBSERVACION, '''')||' '||COALESCE(CGCER_TIPO, 0)||' '||COALESCE(CGCER_ESTADO, FALSE)||' '||COALESCE(CGCER_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGCER_USUARIO_INSERT, '''')||' '||COALESCE(CGCER_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGCER_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_CERTIFICADO_SELECTPAGE_BYID_PER
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CRPER_CODIGO CRITERIO DE BUSQUADA. CODIGO DE LA PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_CERTIFICADO_SELECTPAGE_BYID_PER(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CRPER_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGCER_CODIGO, 
		CRPER_CODIGO, 
		CGCER_INSTITUCION, 
		CGCER_NOMBRE, 
		CGCER_DESCRIPCION, 
		CGCER_DURACION, 
		CGCER_FECHA_INICIO, 
		CGCER_FECHA_FIN, 
		CGCER_TIPO_ADJUNTO, 
		CGCER_NOMBRE_ADJUNTO, 		 
		CGCER_OBSERVACION, 
		CGCER_TIPO, 
		CGCER_ESTADO, 
		CGCER_FECHA_INSERT, 
		CGCER_USUARIO_INSERT, 
		CGCER_FECHA_UPDATE, 
		CGCER_USUARIO_UPDATE
	FROM SII.CGG_GEM_CERTIFICADO
	WHERE CGCER_ESTADO = TRUE AND CRPER_CODIGO = '''||IN_CRPER_CODIGO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGCER_INSTITUCION, '''')||'' ''||COALESCE(CGCER_NOMBRE, '''')||'' ''||COALESCE(CGCER_DESCRIPCION, '''')||'' ''||COALESCE(CGCER_DURACION, 0)||'' ''||COALESCE(CGCER_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGCER_FECHA_FIN, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGCER_TIPO_ADJUNTO, '''')||'' ''||COALESCE(CGCER_NOMBRE_ADJUNTO, '''')||'' ''||COALESCE(CGCER_OBSERVACION, '''')||'' ''||COALESCE(CGCER_TIPO, 0)||'' ''||COALESCE(CGCER_ESTADO, FALSE)||'' ''||COALESCE(CGCER_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGCER_USUARIO_INSERT, '''')||'' ''||COALESCE(CGCER_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGCER_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
