/**
* FUNCION SII.F_CGG_USUARIO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_USUARIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CISLA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ISLA O CIUDAD
* @param IN_CUSU_NOMBRE_USUARIO IDENTIFICATIVO VALIDO PARA INGRESO AL SISTEMA
* @param IN_CUSU_CLAVE_ACCESO CLAVE DE ACCESO
* @param IN_CUSU_USUARIO_INTERNO TIPO DE USUARIO DEFINIDO PARA ACCESO AL SISTEMA
INTERNO
EXTERNO
* @param IN_CUSU_CADUCA_CLAVE SI LA CLAVE DEL USUARIO CADUCA
* @param IN_CUSU_FECHA_CLAVE_ACT FECHA DE LA ULTIMA ACTUALIZACION DE LA CLAVE DE ACCESO DEL USUARIO
* @param IN_CUSU_ACTIVO SI ESTA AUTORIZO EL ACCESO AL SISTEMA O ESTA SUSPENDIDO.
* @param IN_CUSU_CAMBIAR_CLAVE SI EL USUARIO DEBE CAMBIAR LA CLAVE EN EL SIGUIENTE INGRESO.
* @param IN_CUSU_ESTADO ESTADO DEL REGISTRO
* @param IN_CUSU_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CUSU_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_INSERT(
IN IN_CUSU_CODIGO SII.CGG_USUARIO.CUSU_CODIGO%TYPE, 
IN IN_CRCRG_CODIGO SII.CGG_USUARIO.CRCRG_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_USUARIO.CRPER_CODIGO%TYPE, 
IN IN_CRPJR_CODIGO SII.CGG_USUARIO.CRPJR_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_USUARIO.CCTN_CODIGO%TYPE, 
IN IN_CISLA_CODIGO SII.CGG_USUARIO.CISLA_CODIGO%TYPE, 
IN IN_CUSU_NOMBRE_USUARIO SII.CGG_USUARIO.CUSU_NOMBRE_USUARIO%TYPE, 
IN IN_CUSU_CLAVE_ACCESO SII.CGG_USUARIO.CUSU_CLAVE_ACCESO%TYPE, 
IN IN_CUSU_USUARIO_INTERNO SII.CGG_USUARIO.CUSU_USUARIO_INTERNO%TYPE, 
IN IN_CUSU_CADUCA_CLAVE SII.CGG_USUARIO.CUSU_CADUCA_CLAVE%TYPE, 
IN IN_CUSU_FECHA_CLAVE_ACT SII.CGG_USUARIO.CUSU_FECHA_CLAVE_ACT%TYPE, 
IN IN_CUSU_ACTIVO SII.CGG_USUARIO.CUSU_ACTIVO%TYPE, 
IN IN_CUSU_CAMBIAR_CLAVE SII.CGG_USUARIO.CUSU_CAMBIAR_CLAVE%TYPE,
IN IN_CUSU_ESTADO SII.CGG_USUARIO.CUSU_ESTADO%TYPE, 
IN IN_CUSU_USUARIO_INSERT SII.CGG_USUARIO.CUSU_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_EXIST INT;
BEGIN
	SELECT COUNT(CUSU_CODIGO) INTO TMP_EXIST FROM SII.CGG_USUARIO WHERE UPPER(CUSU_NOMBRE_USUARIO) = UPPER(IN_CUSU_NOMBRE_USUARIO);
	IF (TMP_EXIST > 0) THEN	
		RAISE EXCEPTION 'El nombre de usuario ya se encuentra registrado.';
	END IF;
	IF (UPPER(IN_CUSU_NOMBRE_USUARIO) = 'MONITOR') THEN	
		RAISE EXCEPTION 'Nombre de usuario reservado, por favor utilizar otro.';
	END IF;
	IF (UPPER(IN_CUSU_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_USUARIO','CUSU_CODIGO','CUSU') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CUSU_CODIGO;
	END IF;
	INSERT INTO SII.CGG_USUARIO(
		CUSU_CODIGO, 
		CRCRG_CODIGO, 
		CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CCTN_CODIGO, 
		CISLA_CODIGO, 
		CUSU_NOMBRE_USUARIO, 
		CUSU_CLAVE_ACCESO, 
		CUSU_USUARIO_INTERNO, 
		CUSU_CADUCA_CLAVE, 
		CUSU_FECHA_CLAVE_ACT, 
		CUSU_ACTIVO, 
		CUSU_CAMBIAR_CLAVE,
		CUSU_ESTADO, 
		CUSU_FECHA_INSERT, 
		CUSU_USUARIO_INSERT, 
		CUSU_FECHA_UPDATE, 
		CUSU_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRCRG_CODIGO, 
		IN_CRPER_CODIGO, 
		IN_CRPJR_CODIGO, 
		IN_CCTN_CODIGO, 
		IN_CISLA_CODIGO, 
		IN_CUSU_NOMBRE_USUARIO, 
		IN_CUSU_CLAVE_ACCESO, 
		IN_CUSU_USUARIO_INTERNO, 
		IN_CUSU_CADUCA_CLAVE, 
		IN_CUSU_FECHA_CLAVE_ACT, 
		IN_CUSU_ACTIVO,
		IN_CUSU_CAMBIAR_CLAVE,
		IN_CUSU_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CUSU_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CUSU_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_USUARIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CUSU_CODIGO, 
		CRCRG_CODIGO, 
		CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CCTN_CODIGO, 
		CISLA_CODIGO, 
		CUSU_NOMBRE_USUARIO, 
		CUSU_CLAVE_ACCESO, 
		CUSU_USUARIO_INTERNO, 
		CUSU_CADUCA_CLAVE, 
		CUSU_FECHA_CLAVE_ACT, 
		CUSU_ACTIVO, 
		CUSU_CAMBIAR_CLAVE,
		CUSU_ESTADO, 
		CUSU_FECHA_INSERT, 
		CUSU_USUARIO_INSERT, 
		CUSU_FECHA_UPDATE, 
		CUSU_USUARIO_UPDATE
	FROM SII.CGG_USUARIO
	WHERE CUSU_ESTADO = TRUE AND CUSU_NOMBRE_USUARIO = IN_USER_NAME;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
/**
* FUNCION SII.F_CGG_USUARIO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_USUARIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE PERSONA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CUSU_USUARIO_INTERNO VARCHAR,
IN IN_CRPER_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
TMP_REF REFCURSOR;
TMP_CUSU_USUARIO_INTERNO BOOLEAN;
BEGIN
	TMP_CUSU_USUARIO_INTERNO = FALSE;
	IF (IN_CUSU_USUARIO_INTERNO != '-1' ) THEN
		TMP_CUSU_USUARIO_INTERNO = IN_CUSU_USUARIO_INTERNO::BOOLEAN;
	END IF;
	
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		U.CUSU_CODIGO, 
		U.CRCRG_CODIGO,
		CRG.CRCRG_NOMBRE,
		U.CRPER_CODIGO,
		P.CRPER_NOMBRES,
		P.CRPER_NUM_DOC_IDENTIFIC,
		P.CRPER_APELLIDO_PATERNO,
		P.CRPER_APELLIDO_MATERNO,
		U.CRPJR_CODIGO,
		PJ.CRPJR_RAZON_SOCIAL,
		U.CCTN_CODIGO,
		C.CCTN_NOMBRE,
		U.CUSU_NOMBRE_USUARIO, 
		U.CUSU_CLAVE_ACCESO, 
		U.CUSU_USUARIO_INTERNO, 
		U.CUSU_CADUCA_CLAVE, 
		U.CUSU_FECHA_CLAVE_ACT, 
		U.CUSU_ACTIVO, 
		U.CUSU_CAMBIAR_CLAVE,
		U.CUSU_ESTADO, 
		U.CUSU_FECHA_INSERT, 
		U.CUSU_USUARIO_INSERT, 
		U.CUSU_FECHA_UPDATE, 
		U.CUSU_USUARIO_UPDATE,
		(SELECT CGCNF_VALOR_NUMERICO FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = ''CONF7'') VIGENCIA,
		EXTRACT (DAYS FROM CURRENT_DATE - CUSU_FECHA_CLAVE_ACT) TRANSCURRIDO,
		P.CRPER_NOMBRES NOMBRES,
		P.CRPER_APELLIDO_PATERNO||'' ''||COALESCE(P.CRPER_APELLIDO_MATERNO,'''') APELLIDOS,
		(SELECT CRPJR_RAZON_SOCIAL FROM SII.CGG_RES_PERSONA_JURIDICA WHERE CRPJR_CODIGO = U.CRPJR_CODIGO) EMPRESA,
		U.CISLA_CODIGO,
		ISLA.CISLA_NOMBRE
	FROM SII.CGG_USUARIO U
	LEFT JOIN SII.CGG_RES_PERSONA P ON P.CRPER_CODIGO = U.CRPER_CODIGO AND P.CRPER_ESTADO
	LEFT JOIN SII.CGG_CANTON C ON C.CCTN_CODIGO = U.CCTN_CODIGO
	LEFT JOIN SII.CGG_RES_PERSONA_JURIDICA PJ ON PJ.CRPJR_CODIGO = U.CRPJR_CODIGO
	LEFT JOIN SII.CGG_RES_CARGO CRG ON CRG.CRCRG_CODIGO = U.CRCRG_CODIGO
	LEFT JOIN SII.CGG_ISLA ISLA ON U.CISLA_CODIGO = ISLA.CISLA_CODIGO 
	WHERE CUSU_ESTADO AND 
		(LENGTH('||QUOTE_LITERAL(IN_CRPER_CODIGO)||') = 0 OR U.CRPER_CODIGO = '||QUOTE_LITERAL(IN_CRPER_CODIGO)||') AND 
		(LENGTH('||QUOTE_LITERAL(IN_CUSU_USUARIO_INTERNO)||') = 0 OR CUSU_USUARIO_INTERNO = '||TMP_CUSU_USUARIO_INTERNO||' ) AND 
		(LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CUSU_NOMBRE_USUARIO,'''')||'' ''||COALESCE(ISLA.CISLA_NOMBRE,'''')||'' ''||COALESCE(P.CRPER_NOMBRES,'''')||'' ''||COALESCE(P.CRPER_APELLIDO_MATERNO,'''')||'' ''||COALESCE(P.CRPER_APELLIDO_PATERNO,'''') ) = 1)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_USUARIO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CUCU_USUARIO_INTERNO IDENTIFICATIVO DE USUARIO INTERNO.
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE PERSONA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_CUSU_USUARIO_INTERNO VARCHAR,
IN IN_CRPER_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_USUARIO US
	LEFT JOIN SII.CGG_RES_PERSONA PRS ON PRS.CRPER_CODIGO = US.CRPER_CODIGO AND PRS.CRPER_ESTADO
	WHERE CUSU_ESTADO AND 
		(LENGTH(IN_CRPER_CODIGO) = 0 OR US.CRPER_CODIGO = IN_CRPER_CODIGO ) AND 
		(IN_CUSU_USUARIO_INTERNO = '-1' OR CUSU_USUARIO_INTERNO = IN_CUSU_USUARIO_INTERNO::BOOLEAN) AND 
		(LENGTH(IN_FIND_TEXT)=0 OR SII.F_STRING_IN(IN_FIND_TEXT, COALESCE(CUSU_NOMBRE_USUARIO,'')||' '||COALESCE(PRS.CRPER_NOMBRES,'')||' '||COALESCE(PRS.CRPER_APELLIDO_MATERNO,'')||' '||COALESCE(PRS.CRPER_APELLIDO_PATERNO,'') ) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_USUARIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CISLA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ISLA O CIUDAD
* @param IN_CUSU_NOMBRE_USUARIO IDENTIFICATIVO VALIDO PARA INGRESO AL SISTEMA
* @param IN_CUSU_CLAVE_ACCESO CLAVE DE ACCESO
* @param IN_CUSU_USUARIO_INTERNO TIPO DE USUARIO DEFINIDO PARA ACCESO AL SISTEMA
INTERNO
EXTERNO
* @param IN_CUSU_CADUCA_CLAVE SI LA CLAVE DEL USUARIO CADUCA
* @param IN_CUSU_FECHA_CLAVE_ACT FECHA DE LA ULTIMA ACTUALIZACION DE LA CLAVE DE ACCESO DEL USUARIO
* @param IN_CUSU_ACTIVO SI ESTA AUTORIZO EL ACCESO AL SISTEMA O ESTA SUSPENDIDO.
* @param IN_CUSU_CAMBIAR_CLAVE SI EL USUARIO DEBE CAMBIAR LA CLAVE EN EL SIGUIENTE INGRESO.
* @param IN_CUSU_ESTADO ESTADO DEL REGISTRO
* @param IN_CUSU_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_UPDATE(
IN IN_CUSU_CODIGO SII.CGG_USUARIO.CUSU_CODIGO%TYPE, 
IN IN_CRCRG_CODIGO SII.CGG_USUARIO.CRCRG_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_USUARIO.CRPER_CODIGO%TYPE, 
IN IN_CRPJR_CODIGO SII.CGG_USUARIO.CRPJR_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_USUARIO.CCTN_CODIGO%TYPE, 
IN IN_CISLA_CODIGO SII.CGG_USUARIO.CISLA_CODIGO%TYPE, 
IN IN_CUSU_NOMBRE_USUARIO SII.CGG_USUARIO.CUSU_NOMBRE_USUARIO%TYPE, 
IN IN_CUSU_CLAVE_ACCESO SII.CGG_USUARIO.CUSU_CLAVE_ACCESO%TYPE, 
IN IN_CUSU_USUARIO_INTERNO SII.CGG_USUARIO.CUSU_USUARIO_INTERNO%TYPE, 
IN IN_CUSU_CADUCA_CLAVE SII.CGG_USUARIO.CUSU_CADUCA_CLAVE%TYPE, 
IN IN_CUSU_FECHA_CLAVE_ACT SII.CGG_USUARIO.CUSU_FECHA_CLAVE_ACT%TYPE, 
IN IN_CUSU_ACTIVO SII.CGG_USUARIO.CUSU_ACTIVO%TYPE, 
IN IN_CUSU_CAMBIAR_CLAVE SII.CGG_USUARIO.CUSU_CAMBIAR_CLAVE%TYPE,
IN IN_CUSU_ESTADO SII.CGG_USUARIO.CUSU_ESTADO%TYPE, 
IN IN_CUSU_USUARIO_UPDATE SII.CGG_USUARIO.CUSU_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_USUARIO SET
		CRCRG_CODIGO = IN_CRCRG_CODIGO, 
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CRPJR_CODIGO = IN_CRPJR_CODIGO, 
		CCTN_CODIGO = IN_CCTN_CODIGO, 
		CISLA_CODIGO = IN_CISLA_CODIGO, 
		CUSU_NOMBRE_USUARIO = IN_CUSU_NOMBRE_USUARIO, 
		CUSU_CLAVE_ACCESO = IN_CUSU_CLAVE_ACCESO, 
		CUSU_USUARIO_INTERNO = IN_CUSU_USUARIO_INTERNO, 
		CUSU_CADUCA_CLAVE = IN_CUSU_CADUCA_CLAVE, 
		CUSU_FECHA_CLAVE_ACT = IN_CUSU_FECHA_CLAVE_ACT, 
		CUSU_ACTIVO = IN_CUSU_ACTIVO, 
		CUSU_CAMBIAR_CLAVE = IN_CUSU_CAMBIAR_CLAVE,
		CUSU_ESTADO = IN_CUSU_ESTADO, 
		CUSU_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CUSU_USUARIO_UPDATE = IN_CUSU_USUARIO_UPDATE
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_USUARIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_SELECT(
IN IN_CUSU_CODIGO SII.CGG_USUARIO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CUSU_CODIGO, 
		CRCRG_CODIGO, 
		CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CCTN_CODIGO,
		CISLA_CODIGO,
		CUSU_NOMBRE_USUARIO, 
		CUSU_CLAVE_ACCESO, 
		CUSU_USUARIO_INTERNO, 
		CUSU_CADUCA_CLAVE, 
		CUSU_FECHA_CLAVE_ACT, 
		CUSU_ACTIVO,
		CUSU_CAMBIAR_CLAVE,
		CUSU_ESTADO, 
		CUSU_FECHA_INSERT, 
		CUSU_USUARIO_INSERT, 
		CUSU_FECHA_UPDATE, 
		CUSU_USUARIO_UPDATE
	FROM SII.CGG_USUARIO
	WHERE CUSU_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_USUARIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_DELETE(
IN IN_CUSU_CODIGO SII.CGG_USUARIO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_USUARIO
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_USUARIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_DELETE_SOFT(
IN IN_CUSU_CODIGO SII.CGG_USUARIO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_USUARIO SET
		CUSU_ESTADO = FALSE
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_S_CGG_CANTON
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_S_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_USUARIO.CCTN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CUSU_CODIGO, 
		CRCRG_CODIGO, 
		CRPER_CODIGO, 
		CRPJR_CODIGO, 

		CCTN_CODIGO, 
		CISLA_CODIGO, 
		CUSU_NOMBRE_USUARIO, 
		CUSU_CLAVE_ACCESO, 
		CUSU_USUARIO_INTERNO, 
		CUSU_CADUCA_CLAVE, 
		CUSU_FECHA_CLAVE_ACT, 
		CUSU_ACTIVO, 
		CUSU_CAMBIAR_CLAVE,
		CUSU_ESTADO, 
		CUSU_FECHA_INSERT, 
		CUSU_USUARIO_INSERT, 
		CUSU_FECHA_UPDATE, 
		CUSU_USUARIO_UPDATE
	FROM SII.CGG_USUARIO
	WHERE CUSU_ESTADO = TRUE AND 
		CCTN_CODIGO = IN_CCTN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_D_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_USUARIO.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_USUARIO
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_DS_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_USUARIO.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_USUARIO SET
		cusu_estado = false
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_S_CGG_RES_CARGO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_CARGO.
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_S_CGG_RES_CARGO(
IN IN_CRCRG_CODIGO SII.CGG_USUARIO.CRCRG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CUSU_CODIGO, 
		CRCRG_CODIGO, 
		CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CCTN_CODIGO, 
		CISLA_CODIGO, 
		CUSU_NOMBRE_USUARIO, 
		CUSU_CLAVE_ACCESO, 
		CUSU_USUARIO_INTERNO, 
		CUSU_CADUCA_CLAVE, 
		CUSU_FECHA_CLAVE_ACT, 
		CUSU_ACTIVO, 
		CUSU_CAMBIAR_CLAVE,
		CUSU_ESTADO, 
		CUSU_FECHA_INSERT, 
		CUSU_USUARIO_INSERT, 
		CUSU_FECHA_UPDATE, 
		CUSU_USUARIO_UPDATE
	FROM SII.CGG_USUARIO
	WHERE CUSU_ESTADO = TRUE AND 
		CRCRG_CODIGO = IN_CRCRG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_D_CGG_RES_CARGO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_CARGO.
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_D_CGG_RES_CARGO(
IN IN_CRCRG_CODIGO SII.CGG_USUARIO.CRCRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_USUARIO
	WHERE
		CRCRG_CODIGO = IN_CRCRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_D_CGG_RES_CARGO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_CARGO.
* @param IN_CRCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_DS_CGG_RES_CARGO(
IN IN_CRCRG_CODIGO SII.CGG_USUARIO.CRCRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_USUARIO SET
		cusu_estado = false
	WHERE
		CRCRG_CODIGO = IN_CRCRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_S_CGG_ISLA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_ISLA.
* @param IN_CISLA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ISLA O CIUDAD
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_S_CGG_ISLA(
IN IN_CISLA_CODIGO SII.CGG_USUARIO.CISLA_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CUSU_CODIGO, 
		CRCRG_CODIGO, 
		CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CCTN_CODIGO, 
		CISLA_CODIGO, 
		CUSU_NOMBRE_USUARIO, 
		CUSU_CLAVE_ACCESO, 
		CUSU_USUARIO_INTERNO, 
		CUSU_CADUCA_CLAVE, 
		CUSU_FECHA_CLAVE_ACT, 
		CUSU_ACTIVO,
		CUSU_CAMBIAR_CLAVE,
		CUSU_ESTADO, 
		CUSU_FECHA_INSERT, 
		CUSU_USUARIO_INSERT, 
		CUSU_FECHA_UPDATE, 
		CUSU_USUARIO_UPDATE
	FROM SII.CGG_USUARIO
	WHERE CUSU_ESTADO = TRUE AND 
		CISLA_CODIGO = IN_CISLA_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_D_CGG_ISLA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_ISLA.
* @param IN_CISLA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ISLA O CIUDAD
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_D_CGG_ISLA(
IN IN_CISLA_CODIGO SII.CGG_USUARIO.CISLA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_USUARIO
	WHERE
		CISLA_CODIGO = IN_CISLA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_D_CGG_ISLA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_ISLA.
* @param IN_CISLA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ISLA O CIUDAD
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_DS_CGG_ISLA(
IN IN_CISLA_CODIGO SII.CGG_USUARIO.CISLA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_USUARIO SET
		cusu_estado = false
	WHERE
		CISLA_CODIGO = IN_CISLA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_S_CGG_RES_PERSONA_JURIDICA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA_JURIDICA.
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_S_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_USUARIO.CRPJR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CUSU_CODIGO, 
		CRCRG_CODIGO, 
		CRPER_CODIGO, 
		CRPJR_CODIGO, 
		CCTN_CODIGO, 
		CISLA_CODIGO, 
		CUSU_NOMBRE_USUARIO, 
		CUSU_CLAVE_ACCESO, 
		CUSU_USUARIO_INTERNO, 
		CUSU_CADUCA_CLAVE, 
		CUSU_FECHA_CLAVE_ACT, 
		CUSU_ACTIVO,
		CUSU_CAMBIAR_CLAVE,
		CUSU_ESTADO, 
		CUSU_FECHA_INSERT, 
		CUSU_USUARIO_INSERT, 
		CUSU_FECHA_UPDATE, 
		CUSU_USUARIO_UPDATE
	FROM SII.CGG_USUARIO
	WHERE CUSU_ESTADO = TRUE AND 
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_D_CGG_RES_PERSONA_JURIDICA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA_JURIDICA.
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_D_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_USUARIO.CRPJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_USUARIO
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_D_CGG_RES_PERSONA_JURIDICA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA_JURIDICA.
* @param IN_CRPJR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PERSONA JURIDICA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_DS_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_USUARIO.CRPJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_USUARIO SET
		cusu_estado = false
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_DS_CGG_RES_PERSONA_JURIDICA(
IN IN_CRPJR_CODIGO SII.CGG_USUARIO.CRPJR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_USUARIO SET
		cusu_estado = false
	WHERE
		CRPJR_CODIGO = IN_CRPJR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCIONA TODOS LOS USUARIO AUTORIZADOS A ACCEDER A LA INFORMACION DE UN USUARIO.
*LA FUNCION BUSCA TODOS LOS USUARIOS LOS CUALES TIENEN ACCESO A LA INFORMACION DE UN USUARIO SI ESTE TIENE UN REEMPLAZO, DELEGADO O SUSTITUTO.
*AUNQUE EL MODELO PERMITE QUE UN USUARIO PUEDE SER SUSTITUIDO POR VARIOS USUARIO A LA VEZ DE DE MANERA ARBOREA, SIN EMBARGO SE REALIZAN LOS CONTROLES 
*NECESARIOS EN LOS INGRESOS PARA QUE UN USUARIO PUEDA SER SUSTITUIDO SOLAMENTE UNA VEZ Y MIENTRAS ESTO SUSTITUTOS EJERCEN EL CONTROL DE LA INFORMAICON NO PUEDEN ESTABLECER SUSTITUTOS.
*@param IN_CUSU_CODIGO CODIGO DE USUARIO.
*@return REFCURSOR CURSOR CON INFORMACION DE LA SELECCION DE TODOS LOS USUARIOS QUE PUEDEN ACCEDER A LA INFORMACION DEL USUARIO ESPECIFICADO.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_ACCESO_INFORMACION(
IN IN_CUSU_CODIGO SII.CGG_USUARIO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;		
	CUSUNOMBREUSUARIO VARCHAR(20);
	CUSUCODIGO VARCHAR(20);
	STMT_SQL TEXT;
	STMT_SQL_USUARIO TEXT;
	R_FILA_USUARIO RECORD ;
BEGIN
	
	STMT_SQL := ' ';
	STMT_SQL_USUARIO:='CUSU_CODIGO = '||QUOTE_LITERAL(IN_CUSU_CODIGO)||' OR';
	
	FOR R_FILA_USUARIO IN
		SELECT * FROM SII.CGG_SUSTITUCION CUS 
		WHERE CUS.CGG_CUSU_CODIGO = IN_CUSU_CODIGO AND CUS.CSUST_ESTADO = TRUE AND CUS.CSUST_ESTADO_ENCARGO = TRUE
	LOOP
			--VERIFICACION DE FECHA DE LAS MODALIDADES TEMPORALES E INDEFINIDAS PARA VER SI EL SUSTITUTO ES VALIDO O TIENE UN PERIODO VALIDO.
			IF((R_FILA_USUARIO.CSUST_MODALIDAD = 0 AND CURRENT_TIMESTAMP BETWEEN R_FILA_USUARIO.CSUST_FECHA_INICIO AND R_FILA_USUARIO.CSUST_FECHA_FIN) OR
			   ( R_FILA_USUARIO.CSUST_MODALIDAD = 1) AND CURRENT_TIMESTAMP >= R_FILA_USUARIO.CSUST_FECHA_INICIO )THEN							
				STMT_SQL_USUARIO:=STMT_SQL_USUARIO||' CUSU_CODIGO = '||QUOTE_LITERAL(R_FILA_USUARIO.CUSU_CODIGO)||' OR';
			END IF;
	END LOOP;
	
	STMT_SQL_USUARIO := SUBSTRING(STMT_SQL_USUARIO FROM 1 FOR LENGTH(STMT_SQL_USUARIO)-3);
		  		
	STMT_SQL := 'SELECT
		CUSU_CODIGO, 
		CRCRG_CODIGO, 
		U.CRPER_CODIGO, 
		CRPJR_CODIGO, 
		U.CCTN_CODIGO, 
		CRPER_NOMBRES, 
		CRPER_APELLIDO_PATERNO||'' ''||CRPER_APELLIDO_MATERNO,
		CUSU_NOMBRE_USUARIO, 
		CUSU_CLAVE_ACCESO, 
		CUSU_USUARIO_INTERNO, 
		CUSU_CADUCA_CLAVE, 
		CUSU_FECHA_CLAVE_ACT, 
		CUSU_ACTIVO,
		CUSU_CAMBIAR_CLAVE,
		CUSU_ESTADO, 
		CUSU_FECHA_INSERT, 
		CUSU_USUARIO_INSERT, 
		CUSU_FECHA_UPDATE, 
		CUSU_USUARIO_UPDATE,
		CISLA_CODIGO
	FROM SII.CGG_USUARIO U
	INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO 
	WHERE CUSU_ESTADO = TRUE AND '||STMT_SQL_USUARIO;
	
	OPEN TMP_REF FOR EXECUTE STMT_SQL;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECIONA EL REGISTRO DE LA TABLA DE USUARIO POR EL NOMBRE DE USUARIO.
*@param IN_CUSU_NOMBRE_USUARIO NOMBRE DE USUARIO.
*@return CURSOR DE DATOS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_POR_NOMBRE(
IN IN_CUSU_NOMBRE_USUARIO SII.CGG_USUARIO.CUSU_NOMBRE_USUARIO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		U.CUSU_CODIGO, 
		U.CRCRG_CODIGO, 
		U.CRPER_CODIGO, 
		U.CRPJR_CODIGO, 
		U.CCTN_CODIGO, 		
		U.CUSU_NOMBRE_USUARIO, 
		U.CUSU_CLAVE_ACCESO, 
		U.CUSU_USUARIO_INTERNO, 
		U.CUSU_CADUCA_CLAVE, 
		U.CUSU_FECHA_CLAVE_ACT, 
		U.CUSU_ACTIVO,
		U.CUSU_CAMBIAR_CLAVE,
		U.CUSU_ESTADO, 
		U.CUSU_FECHA_INSERT, 
		U.CUSU_USUARIO_INSERT, 
		U.CUSU_FECHA_UPDATE, 
		U.CUSU_USUARIO_UPDATE,
		U.CISLA_CODIGO,
		(SELECT CISLA_NOMBRE FROM SII.CGG_ISLA WHERE CISLA_CODIGO = U.CISLA_CODIGO AND CISLA_ESTADO LIMIT 1) ISLA,
		((CUSU_FECHA_CLAVE_ACT::date + (SELECT CGCNF_VALOR_NUMERICO FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = 'CONF7')::integer) - CURRENT_DATE) CADUCIDAD,
		(SELECT CARPT_CODIGO FROM SII.CGG_RES_AEROPUERTO 
			WHERE CCTN_CODIGO = U.CCTN_CODIGO AND 
				CARPT_ESTADO) CARPT_CODIGO,
		(SELECT CRMLE_CODIGO FROM SII.CGG_RES_MUELLE WHERE CCTN_CODIGO = U.CCTN_CODIGO AND CRMLE_ESTADO) CRMLE_CODIGO
	FROM SII.CGG_USUARIO U
	WHERE CUSU_ESTADO = TRUE AND 
		CUSU_NOMBRE_USUARIO = IN_CUSU_NOMBRE_USUARIO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*SELECIONA EL NOMBRE DE LA PERSONAL ASOCIADA A UN USUARIO.
*@param IN_CUSU_CODIGO CODIGO DE USUARIO.
*@return NOMBRE DE PERSONA.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_NOMBRE_PERSONA(
IN IN_CUSU_CODIGO SII.CGG_USUARIO.CUSU_CODIGO%TYPE
)RETURNS TEXT AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_NOMBRES TEXT;
BEGIN
	TMP_NOMBRES :='';
	SELECT
		COALESCE(P.CRPER_NOMBRES,'')||' '||COALESCE(P.CRPER_APELLIDO_PATERNO,'')||' '||COALESCE(P.CRPER_APELLIDO_MATERNO,'') INTO TMP_NOMBRES
	FROM SII.CGG_USUARIO U
	INNER JOIN SII.CGG_RES_PERSONA P ON (U.CRPER_CODIGO = P.CRPER_CODIGO)
	WHERE U.CUSU_ESTADO = TRUE AND 
		U.CUSU_CODIGO = IN_CUSU_CODIGO;
		
	IF(TMP_NOMBRES IS NULL)THEN
		TMP_NOMBRES='USUARIO NO ASIGNADO';
	END IF;
	RETURN TMP_NOMBRES;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_USUARIO_VERIFICAR_CONTRASENIA_BYUSUARIO
* DEVUELVE EL TRUE SI LA CONTRASENIA ES CORRECTA SEGUN EL PARAMETRO DE BUSQUEDA
* @param IN_CUSU_CODIGO CRITERIO DE BUSQUEDA. CODIGO DE USUARIO
* @param IN_CUSU_CLAVE_ACCESO CLAVE DE ACCESO
* @return TMP_CODIGO
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_VERIFICAR_CONTRASENIA_BYUSUARIO(
	IN IN_CUSU_CODIGO VARCHAR,
	IN IN_CUSU_CLAVE_ACCESO TEXT
)RETURNS BOOL AS
$$
DECLARE
TMP_BOOL BOOL;
TMP_COUNT INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_COUNT
	FROM SII.CGG_USUARIO
	WHERE CUSU_CODIGO = IN_CUSU_CODIGO AND
		CUSU_CLAVE_ACCESO = encode(digest(IN_CUSU_CLAVE_ACCESO ,'md5'),'base64');
	
	IF (TMP_COUNT >0) THEN
		TMP_BOOL := TRUE;
	ELSE
		TMP_BOOL := FALSE;
	END IF;
	RETURN TMP_BOOL;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. sii.F_CGG_USUARIO_SELECT_CODIGO_BY_NOMBRE SELECIONA EL CODIGO DEL USUARIO DE ACUERDO AL NOMBRE DE USUARIO
*@param IN_CUSU_NOMBRE_USUARIO NOMBRE DE USUARIO.
*@return CURSOR DE DATOS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_USUARIO_SELECT_CODIGO_BY_NOMBRE(
IN IN_CUSU_NOMBRE_USUARIO SII.CGG_USUARIO.CUSU_NOMBRE_USUARIO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		U.CUSU_CODIGO, 			
		U.CUSU_NOMBRE_USUARIO		
	FROM SII.CGG_USUARIO U
	WHERE CUSU_ESTADO = TRUE AND 
		CUSU_NOMBRE_USUARIO = IN_CUSU_NOMBRE_USUARIO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;