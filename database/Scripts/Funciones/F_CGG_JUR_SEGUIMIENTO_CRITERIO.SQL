/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO.
* @param IN_CJSGC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO CRITERIO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CJCRI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CRITERIO JURIDICO
* @param IN_CJSGC_RESPUESTA RESPUESTA DEL CRITERIO
SI / NO
* @param IN_CJSGC_JUSTIFICACION RAZON QUE RESPALDA LA RESPUESTA
* @param IN_CJSGC_OBSERVACION NO ESPECIFICADO
* @param IN_CJSGC_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CJSGC_ADJUNTO ARCHIVO DIGITAL ANEXO AL CRITERIO
* @param IN_CJSGC_ESTADO ESTADO DEL REGISTRO
* @param IN_CJSGC_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CJSGC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_INSERT(
IN IN_CJSGC_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_CODIGO%TYPE, 
IN IN_CRSEG_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CRSEG_CODIGO%TYPE, 
IN IN_CJCRI_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJCRI_CODIGO%TYPE, 
IN IN_CJSGC_RESPUESTA SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_RESPUESTA%TYPE, 
IN IN_CJSGC_JUSTIFICACION SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_JUSTIFICACION%TYPE, 
IN IN_CJSGC_OBSERVACION SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_OBSERVACION%TYPE, 
IN IN_CJSGC_NOMBRE_ADJUNTO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_NOMBRE_ADJUNTO%TYPE, 
IN IN_CJSGC_ADJUNTO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_ADJUNTO%TYPE, 
IN IN_CJSGC_ESTADO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_ESTADO%TYPE, 
IN IN_CJSGC_USUARIO_INSERT SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_USUARIO_INSERT%TYPE, 
IN IN_CJSGC_USUARIO_UPDATE SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_REQUERIDO BOOLEAN;
BEGIN
	IF (UPPER(IN_CJSGC_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_JUR_SEGUIMIENTO_CRITERIO','CJSGC_CODIGO','CJSGC') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CJSGC_CODIGO;
	END IF;
	SELECT CJCRI_REQUERIDO INTO TMP_REQUERIDO FROM SII.CGG_JUR_CRITERIO WHERE CJCRI_CODIGO = IN_CJCRI_CODIGO;
	INSERT INTO SII.CGG_JUR_SEGUIMIENTO_CRITERIO(
		CJSGC_CODIGO, 
		CRSEG_CODIGO, 
		CJCRI_CODIGO, 
		CJSGC_RESPUESTA, 
		CJSGC_JUSTIFICACION, 
		CJSGC_OBSERVACION, 
		CJSGC_NOMBRE_ADJUNTO, 
		CJSGC_ADJUNTO, 
		CJSGC_ESTADO, 
		CJSGC_FECHA_INSERT, 
		CJSGC_USUARIO_INSERT, 
		CJSGC_FECHA_UPDATE, 
		CJSGC_USUARIO_UPDATE,
		CJSGC_REQUERIDO		
	) VALUES (
		OUT_KEY, 
		IN_CRSEG_CODIGO, 
		IN_CJCRI_CODIGO, 
		IN_CJSGC_RESPUESTA, 
		IN_CJSGC_JUSTIFICACION, 
		IN_CJSGC_OBSERVACION, 
		IN_CJSGC_NOMBRE_ADJUNTO, 
		IN_CJSGC_ADJUNTO, 
		IN_CJSGC_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CJSGC_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CJSGC_USUARIO_UPDATE,
		TMP_REQUERIDO
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJSGC_CODIGO, 
		CRSEG_CODIGO, 
		CJCRI_CODIGO, 
		CJSGC_RESPUESTA, 
		CJSGC_JUSTIFICACION, 
		CJSGC_OBSERVACION, 
		CJSGC_NOMBRE_ADJUNTO, 
		CJSGC_ADJUNTO, 
		CJSGC_ESTADO, 
		CJSGC_FECHA_INSERT, 
		CJSGC_USUARIO_INSERT, 
		CJSGC_FECHA_UPDATE, 
		CJSGC_USUARIO_UPDATE
	FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE CJSGC_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CJSGC_CODIGO, 
		CRSEG_CODIGO, 
		CJCRI_CODIGO, 
		CJSGC_RESPUESTA, 
		CJSGC_JUSTIFICACION, 
		CJSGC_OBSERVACION, 
		CJSGC_NOMBRE_ADJUNTO, 
		CJSGC_ADJUNTO, 
		CJSGC_ESTADO, 
		CJSGC_FECHA_INSERT, 
		CJSGC_USUARIO_INSERT, 
		CJSGC_FECHA_UPDATE, 
		CJSGC_USUARIO_UPDATE
	FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE CJSGC_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CJSGC_RESPUESTA, FALSE)||'' ''||COALESCE(CJSGC_JUSTIFICACION, '''')||'' ''||COALESCE(CJSGC_OBSERVACION, '''')||'' ''||COALESCE(CJSGC_NOMBRE_ADJUNTO, '''')||'' ''||COALESCE(CJSGC_ESTADO, FALSE)||'' ''||COALESCE(CJSGC_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CJSGC_USUARIO_INSERT, '''')||'' ''||COALESCE(CJSGC_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CJSGC_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE CJSGC_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE CJSGC_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CJSGC_RESPUESTA, FALSE)||' '||COALESCE(CJSGC_JUSTIFICACION, '''')||' '||COALESCE(CJSGC_OBSERVACION, '''')||' '||COALESCE(CJSGC_NOMBRE_ADJUNTO, '''')||' '||COALESCE(CJSGC_ESTADO, FALSE)||' '||COALESCE(CJSGC_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CJSGC_USUARIO_INSERT, '''')||' '||COALESCE(CJSGC_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CJSGC_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_JUR_SEGUIMIENTO_CRITERIO.
* @param IN_CJSGC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO CRITERIO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CJCRI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CRITERIO JURIDICO
* @param IN_CJSGC_RESPUESTA RESPUESTA DEL CRITERIO
SI / NO
* @param IN_CJSGC_JUSTIFICACION RAZON QUE RESPALDA LA RESPUESTA
* @param IN_CJSGC_OBSERVACION NO ESPECIFICADO
* @param IN_CJSGC_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CJSGC_ADJUNTO ARCHIVO DIGITAL ANEXO AL CRITERIO
* @param IN_CJSGC_ESTADO ESTADO DEL REGISTRO
* @param IN_CJSGC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_UPDATE(
IN IN_CJSGC_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_CODIGO%TYPE, 
IN IN_CRSEG_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CRSEG_CODIGO%TYPE, 
IN IN_CJCRI_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJCRI_CODIGO%TYPE, 
IN IN_CJSGC_RESPUESTA SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_RESPUESTA%TYPE, 
IN IN_CJSGC_JUSTIFICACION SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_JUSTIFICACION%TYPE, 
IN IN_CJSGC_OBSERVACION SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_OBSERVACION%TYPE, 
IN IN_CJSGC_NOMBRE_ADJUNTO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_NOMBRE_ADJUNTO%TYPE, 
IN IN_CJSGC_ADJUNTO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_ADJUNTO%TYPE, 
IN IN_CJSGC_ESTADO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_ESTADO%TYPE, 
IN IN_CJSGC_USUARIO_UPDATE SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_SEGUIMIENTO_CRITERIO SET
		CRSEG_CODIGO = IN_CRSEG_CODIGO, 
		CJCRI_CODIGO = IN_CJCRI_CODIGO, 
		CJSGC_RESPUESTA = IN_CJSGC_RESPUESTA, 
		CJSGC_JUSTIFICACION = IN_CJSGC_JUSTIFICACION, 
		CJSGC_OBSERVACION = IN_CJSGC_OBSERVACION, 
		CJSGC_NOMBRE_ADJUNTO = IN_CJSGC_NOMBRE_ADJUNTO, 
		CJSGC_ADJUNTO = IN_CJSGC_ADJUNTO, 
		CJSGC_ESTADO = IN_CJSGC_ESTADO, 
		CJSGC_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CJSGC_USUARIO_UPDATE = IN_CJSGC_USUARIO_UPDATE
	WHERE
		CJSGC_CODIGO = IN_CJSGC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO.
* @param IN_CJSGC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO CRITERIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_SELECT(
IN IN_CJSGC_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJSGC_CODIGO, 
		CRSEG_CODIGO, 
		CJCRI_CODIGO, 
		CJSGC_RESPUESTA, 
		CJSGC_JUSTIFICACION, 
		CJSGC_OBSERVACION, 
		CJSGC_NOMBRE_ADJUNTO, 
		CJSGC_ADJUNTO, 
		CJSGC_ESTADO, 
		CJSGC_FECHA_INSERT, 
		CJSGC_USUARIO_INSERT, 
		CJSGC_FECHA_UPDATE, 
		CJSGC_USUARIO_UPDATE
	FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE CJSGC_ESTADO = TRUE AND 
		CJSGC_CODIGO = IN_CJSGC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO.
* @param IN_CJSGC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO CRITERIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_DELETE(
IN IN_CJSGC_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE
		CJSGC_CODIGO = IN_CJSGC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO.
* @param IN_CJSGC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO CRITERIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_DELETE_SOFT(
IN IN_CJSGC_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJSGC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_SEGUIMIENTO_CRITERIO SET
		CJSGC_ESTADO = FALSE
	WHERE
		CJSGC_CODIGO = IN_CJSGC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_S_CGG_JUR_CRITERIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_CRITERIO.
* @param IN_CJCRI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CRITERIO JURIDICO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_S_CGG_JUR_CRITERIO(
IN IN_CJCRI_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJCRI_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJSGC_CODIGO, 
		CRSEG_CODIGO, 
		CJCRI_CODIGO, 
		CJSGC_RESPUESTA, 
		CJSGC_JUSTIFICACION, 
		CJSGC_OBSERVACION, 
		CJSGC_NOMBRE_ADJUNTO, 
		CJSGC_ADJUNTO, 
		CJSGC_ESTADO, 
		CJSGC_FECHA_INSERT, 
		CJSGC_USUARIO_INSERT, 
		CJSGC_FECHA_UPDATE, 
		CJSGC_USUARIO_UPDATE
	FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE CJSGC_ESTADO = TRUE AND 
		CJCRI_CODIGO = IN_CJCRI_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_D_CGG_JUR_CRITERIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_CRITERIO.
* @param IN_CJCRI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CRITERIO JURIDICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_D_CGG_JUR_CRITERIO(
IN IN_CJCRI_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJCRI_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE
		CJCRI_CODIGO = IN_CJCRI_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_D_CGG_JUR_CRITERIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_CRITERIO.
* @param IN_CJCRI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CRITERIO JURIDICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_DS_CGG_JUR_CRITERIO(
IN IN_CJCRI_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CJCRI_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_SEGUIMIENTO_CRITERIO SET
		cjsgc_estado = false
	WHERE
		CJCRI_CODIGO = IN_CJCRI_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_S_CGG_RES_SEGUIMIENTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_S_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CRSEG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJSGC_CODIGO, 
		CRSEG_CODIGO, 
		CJCRI_CODIGO, 
		CJSGC_RESPUESTA, 
		CJSGC_JUSTIFICACION, 
		CJSGC_OBSERVACION, 
		CJSGC_NOMBRE_ADJUNTO, 
		CJSGC_ADJUNTO, 
		CJSGC_ESTADO, 
		CJSGC_FECHA_INSERT, 
		CJSGC_USUARIO_INSERT, 
		CJSGC_FECHA_UPDATE, 
		CJSGC_USUARIO_UPDATE
	FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE CJSGC_ESTADO = TRUE AND 
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_D_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_SEGUIMIENTO_CRITERIO
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_SEGUIMIENTO_CRITERIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_DS_CGG_RES_SEGUIMIENTO(
IN IN_CRSEG_CODIGO SII.CGG_JUR_SEGUIMIENTO_CRITERIO.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_SEGUIMIENTO_CRITERIO SET
		cjsgc_estado = false
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCIONA TODOS LOS CRITERIOS A CUMPLIRSE PARA DE UN SEGUIMIENTO POR LA FASE QUE DEBE DE CUMPLIR.
*SI LOS CRITERIOS YA FUERON REGISTRADOS CON ANTERIORIDAD SE PUEDE ESTABLECER EL CODIGO DE SEGUIMIENTO PARA SELECCIONARLOS SIN EMBARGO EN LA SELECCION AUN SALDRAN TODOS LOS REGISTROS QUE NO FUERON COMPLETADOS CUANDO SE REGISTRARON.
*@param IN_CRFAS_CODIGO CODIGO DE FASE DE SEGUIMIENTO.
*@param IN_CRSEG_CODIGO CODIGO DE SEGUIMIENTO.
*@return CURSOR CON INFORMACION DE LOS CRITERIOS A CUMPLIRSE O CUMPLIDO DE UN SEGUIMIENTO.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_CUMPLIMIENTO(
	IN IN_CRFAS_CODIGO VARCHAR,
	IN IN_CRSEG_CODIGO VARCHAR
) RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_CRITERIO_CONTADOR NUMERIC;
	TMP_COUNT INTEGER;
BEGIN	
			
	/*SELECT COALESCE(COUNT(SCR.CJSGC_CODIGO),0) INTO TMP_CRITERIO_CONTADOR 			   		   
	FROM SII.CGG_JUR_CRITERIO CRI 
	INNER JOIN SII.CGG_JUR_SEGUIMIENTO_CRITERIO SCR ON (CRI.CJCRI_CODIGO = SCR.CJCRI_CODIGO)
	WHERE CRI.CRFAS_CODIGO = IN_CRFAS_CODIGO AND SCR.CRSEG_CODIGO = IN_CRSEG_CODIGO;*/
	
	OPEN TMP_REF FOR
	 SELECT COALESCE(SCR.CJSGC_CODIGO,'KEYGEN') AS CJSGC_CODIGO, 
		COALESCE(SCR.CRSEG_CODIGO,IN_CRSEG_CODIGO) AS CRSEG_CODIGO, 		
		CRI.CJCRI_CODIGO, 
		COALESCE(SCR.CJSGC_RESPUESTA,FALSE) AS CJSGC_RESPUESTA, 
		COALESCE(SCR.CJSGC_JUSTIFICACION,'') AS CJSGC_JUSTIFICACION, 
		COALESCE(SCR.CJSGC_OBSERVACION,'') AS CJSGC_OBSERVACION,
		CRI.CJCRI_REQUERIMIENTO,	
		SCR.CJSGC_REQUERIDO as CJCRI_REQUERIDO,
		COALESCE(SCR.CJSGC_NOMBRE_ADJUNTO,'') AS CJSGC_NOMBRE_ADJUNTO
	FROM SII.CGG_JUR_CRITERIO CRI 
	RIGHT JOIN SII.CGG_JUR_SEGUIMIENTO_CRITERIO SCR ON (CRI.CJCRI_CODIGO = SCR.CJCRI_CODIGO)
	AND CRI.CRFAS_CODIGO = IN_CRFAS_CODIGO AND SCR.CRSEG_CODIGO =IN_CRSEG_CODIGO
	WHERE CRI.CRFAS_CODIGO = IN_CRFAS_CODIGO;
	
	
	/*IF(TMP_CRITERIO_CONTADOR = 0)THEN
		OPEN TMP_REF FOR
			SELECT 'KEYGEN' AS CJSGC_CODIGO, 
				   IN_CRSEG_CODIGO AS CRSEG_CODIGO, 
				   CRI.CJCRI_CODIGO, 
				   FALSE AS CJSGC_RESPUESTA, 
				   '' AS CJSGC_JUSTIFICACION, 
				   '' AS CJSGC_OBSERVACION,
				   CRI.CJCRI_REQUERIMIENTO,				   
				   CRI.CJCRI_REQUERIDO,
				   '' AS CJSGC_NOMBRE_ADJUNTO				   
			FROM SII.CGG_JUR_CRITERIO CRI 		
			WHERE CRI.CRFAS_CODIGO = IN_CRFAS_CODIGO;
	ELSE
		OPEN TMP_REF FOR
			SELECT SCR.CJSGC_CODIGO, 
				   SCR.CRSEG_CODIGO, 
				   CRI.CJCRI_CODIGO, 
				   COALESCE(SCR.CJSGC_RESPUESTA,FALSE) AS CJSGC_RESPUESTA, 
				   SCR.CJSGC_JUSTIFICACION, 
				   SCR.CJSGC_OBSERVACION,
				   CRI.CJCRI_REQUERIMIENTO,				   
				   CRI.CJCRI_REQUERIDO,
				   SCR.CJSGC_NOMBRE_ADJUNTO
			FROM SII.CGG_JUR_CRITERIO CRI 
			LEFT JOIN SII.CGG_JUR_SEGUIMIENTO_CRITERIO SCR ON (CRI.CJCRI_CODIGO = SCR.CJCRI_CODIGO)
			WHERE CRI.CRFAS_CODIGO = IN_CRFAS_CODIGO OR SCR.CRSEG_CODIGO = IN_CRSEG_CODIGO;
	END IF;	*/	
	RETURN NEXT TMP_REF;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
