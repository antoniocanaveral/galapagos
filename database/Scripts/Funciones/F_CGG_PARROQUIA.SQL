/**
* FUNCION SII.F_CGG_PARROQUIA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_PARROQUIA
* @param IN_CPRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARROQUIA
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CPRR_NOMBRE NOMBRE DE LA PARROQUIA
* @param IN_CPRR_DESCRIPCION DESCRIPCION DE LA PARROQUIA
* @param IN_CPRR_TIPO UBICACION GEOGRAFICA DETERMINADA
0 - URBANA
1 - RURAL
* @param IN_CPRR_ESTADO ESTADO DEL REGISTRO
* @param IN_CPRR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CPRR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_INSERT(
IN IN_CPRR_CODIGO SII.CGG_PARROQUIA.CPRR_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_PARROQUIA.CCTN_CODIGO%TYPE, 
IN IN_CPRR_NOMBRE SII.CGG_PARROQUIA.CPRR_NOMBRE%TYPE, 
IN IN_CPRR_DESCRIPCION SII.CGG_PARROQUIA.CPRR_DESCRIPCION%TYPE, 
IN IN_CPRR_TIPO SII.CGG_PARROQUIA.CPRR_TIPO%TYPE, 
IN IN_CPRR_ESTADO SII.CGG_PARROQUIA.CPRR_ESTADO%TYPE, 
IN IN_CPRR_USUARIO_INSERT SII.CGG_PARROQUIA.CPRR_USUARIO_INSERT%TYPE, 
IN IN_CPRR_USUARIO_UPDATE SII.CGG_PARROQUIA.CPRR_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CPRR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_PARROQUIA','CPRR_CODIGO','CPRR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CPRR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_PARROQUIA(
		CPRR_CODIGO, 
		CCTN_CODIGO, 
		CPRR_NOMBRE, 
		CPRR_DESCRIPCION, 
		CPRR_TIPO, 
		CPRR_ESTADO, 
		CPRR_FECHA_INSERT, 
		CPRR_USUARIO_INSERT, 
		CPRR_FECHA_UPDATE, 
		CPRR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CCTN_CODIGO, 
		IN_CPRR_NOMBRE, 
		IN_CPRR_DESCRIPCION, 
		IN_CPRR_TIPO, 
		IN_CPRR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CPRR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CPRR_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_PARROQUIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CPRR_CODIGO, 
		CCTN_CODIGO, 
		CPRR_NOMBRE, 
		CPRR_DESCRIPCION, 
		CPRR_TIPO, 
		CPRR_ESTADO, 
		CPRR_FECHA_INSERT, 
		CPRR_USUARIO_INSERT, 
		CPRR_FECHA_UPDATE, 
		CPRR_USUARIO_UPDATE
	FROM SII.CGG_PARROQUIA
	WHERE CPRR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_PARROQUIA__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_PARROQUIA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CPRR_CODIGO, 
		CCTN_CODIGO, 
		CPRR_NOMBRE, 
		CPRR_DESCRIPCION, 
		CPRR_TIPO, 
		CPRR_ESTADO, 
		CPRR_FECHA_INSERT, 
		CPRR_USUARIO_INSERT, 
		CPRR_FECHA_UPDATE, 
		CPRR_USUARIO_UPDATE
	FROM SII.CGG_PARROQUIA
	WHERE CPRR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CPRR_CODIGO IS NULL THEN '''' ELSE CPRR_CODIGO END ||'' ''||CASE WHEN CCTN_CODIGO IS NULL THEN '''' ELSE CCTN_CODIGO END ||'' ''||CASE WHEN CPRR_NOMBRE IS NULL THEN '''' ELSE CPRR_NOMBRE END ||'' ''||CASE WHEN CPRR_DESCRIPCION IS NULL THEN '''' ELSE CPRR_DESCRIPCION END ||'' ''||CASE WHEN CPRR_TIPO IS NULL THEN 0 ELSE CPRR_TIPO END ||'' ''||CASE WHEN CPRR_ESTADO IS NULL THEN FALSE ELSE CPRR_ESTADO END ||'' ''||CASE WHEN CPRR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CPRR_FECHA_INSERT END ||'' ''||CASE WHEN CPRR_USUARIO_INSERT IS NULL THEN '''' ELSE CPRR_USUARIO_INSERT END ||'' ''||CASE WHEN CPRR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CPRR_FECHA_UPDATE END ||'' ''||CASE WHEN CPRR_USUARIO_UPDATE IS NULL THEN '''' ELSE CPRR_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_PARROQUIA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_PARROQUIA
	WHERE CPRR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_PARROQUIA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_PARROQUIA
	WHERE CPRR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CPRR_CODIGO IS NULL THEN '''' ELSE CPRR_CODIGO END ||' '||CASE WHEN CCTN_CODIGO IS NULL THEN '''' ELSE CCTN_CODIGO END ||' '||CASE WHEN CPRR_NOMBRE IS NULL THEN '''' ELSE CPRR_NOMBRE END ||' '||CASE WHEN CPRR_DESCRIPCION IS NULL THEN '''' ELSE CPRR_DESCRIPCION END ||' '||CASE WHEN CPRR_TIPO IS NULL THEN 0 ELSE CPRR_TIPO END ||' '||CASE WHEN CPRR_ESTADO IS NULL THEN FALSE ELSE CPRR_ESTADO END ||' '||CASE WHEN CPRR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CPRR_FECHA_INSERT END ||' '||CASE WHEN CPRR_USUARIO_INSERT IS NULL THEN '''' ELSE CPRR_USUARIO_INSERT END ||' '||CASE WHEN CPRR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CPRR_FECHA_UPDATE END ||' '||CASE WHEN CPRR_USUARIO_UPDATE IS NULL THEN '''' ELSE CPRR_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_PARROQUIA
* @param IN_CPRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARROQUIA
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CPRR_NOMBRE NOMBRE DE LA PARROQUIA
* @param IN_CPRR_DESCRIPCION DESCRIPCION DE LA PARROQUIA
* @param IN_CPRR_TIPO UBICACION GEOGRAFICA DETERMINADA
0 - URBANA
1 - RURAL
* @param IN_CPRR_ESTADO ESTADO DEL REGISTRO
* @param IN_CPRR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_UPDATE(
IN IN_CPRR_CODIGO SII.CGG_PARROQUIA.CPRR_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_PARROQUIA.CCTN_CODIGO%TYPE, 
IN IN_CPRR_NOMBRE SII.CGG_PARROQUIA.CPRR_NOMBRE%TYPE, 
IN IN_CPRR_DESCRIPCION SII.CGG_PARROQUIA.CPRR_DESCRIPCION%TYPE, 
IN IN_CPRR_TIPO SII.CGG_PARROQUIA.CPRR_TIPO%TYPE, 
IN IN_CPRR_ESTADO SII.CGG_PARROQUIA.CPRR_ESTADO%TYPE, 
IN IN_CPRR_USUARIO_UPDATE SII.CGG_PARROQUIA.CPRR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_PARROQUIA SET
		CCTN_CODIGO = IN_CCTN_CODIGO, 
		CPRR_NOMBRE = IN_CPRR_NOMBRE, 
		CPRR_DESCRIPCION = IN_CPRR_DESCRIPCION, 
		CPRR_TIPO = IN_CPRR_TIPO, 
		CPRR_ESTADO = IN_CPRR_ESTADO, 
		CPRR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CPRR_USUARIO_UPDATE = IN_CPRR_USUARIO_UPDATE
	WHERE
		CPRR_CODIGO = IN_CPRR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_PARROQUIA
* @param IN_CPRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARROQUIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_SELECT(
IN IN_CPRR_CODIGO SII.CGG_PARROQUIA.CPRR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CPRR_CODIGO, 
		CCTN_CODIGO, 
		CPRR_NOMBRE, 
		CPRR_DESCRIPCION, 
		CPRR_TIPO, 
		CPRR_ESTADO, 
		CPRR_FECHA_INSERT, 
		CPRR_USUARIO_INSERT, 
		CPRR_FECHA_UPDATE, 
		CPRR_USUARIO_UPDATE
	FROM SII.CGG_PARROQUIA
	WHERE CPRR_ESTADO = TRUE AND 
		CPRR_CODIGO = IN_CPRR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_PARROQUIA
* @param IN_CPRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARROQUIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_DELETE(
IN IN_CPRR_CODIGO SII.CGG_PARROQUIA.CPRR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_PARROQUIA
	WHERE
		CPRR_CODIGO = IN_CPRR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_PARROQUIA
* @param IN_CPRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARROQUIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_DELETE_SOFT(
IN IN_CPRR_CODIGO SII.CGG_PARROQUIA.CPRR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_PARROQUIA SET
		CPRR_ESTADO = FALSE
	WHERE
		CPRR_CODIGO = IN_CPRR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_S_CGG_CANTON
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_PARROQUIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_S_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_PARROQUIA.CCTN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CPRR_CODIGO, 
		CCTN_CODIGO, 
		CPRR_NOMBRE, 
		CPRR_DESCRIPCION, 
		CPRR_TIPO, 
		CPRR_ESTADO, 
		CPRR_FECHA_INSERT, 
		CPRR_USUARIO_INSERT, 
		CPRR_FECHA_UPDATE, 
		CPRR_USUARIO_UPDATE
	FROM SII.CGG_PARROQUIA
	WHERE CPRR_ESTADO = TRUE AND 
		CCTN_CODIGO = IN_CCTN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_PARROQUIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_D_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_PARROQUIA.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_PARROQUIA
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_PARROQUIA_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_PARROQUIA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_PARROQUIA_DS_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_PARROQUIA.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_PARROQUIA SET
		cprr_estado = false
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

