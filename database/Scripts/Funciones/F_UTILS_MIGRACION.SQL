/**
* FUNCION sii.F_MANAGE_ADJUNTOS
* PERMITE MANEJAR LOS ADJUNTOS.
* @param INTABLENAME NOMBRE DE LA TABLA
* @param INCOLBYTNAME NOMBRE DE LA COLUMNA.
* @param INBYTEVALUE VALOR EN BYTE.
* @param INKEYCOLUMN CLAVE DE LA COLUMNA
* @param INKEYVALUE VALOR DE LA CLAVE
* @param INOPERACION TIPO DE OPERACION.
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION sii.F_MANAGE_ADJUNTOS(
IN INTABLENAME VARCHAR,
IN INCOLBYTENAME VARCHAR,
IN INBYTEVALUE BYTEA,
IN INKEYCOLUMN VARCHAR,
IN INKEYVALUE VARCHAR,
IN INOPERACION VARCHAR 
)RETURNS VARCHAR AS
$$
DECLARE
 OUT_KEY VARCHAR DEFAULT 'TRUE';
BEGIN
	
	IF(INOPERACION = 'INSERT') THEN
		SELECT SII.F_KEYGEN(INTABLENAME,INKEYCOLUMN,SUBSTRING(INKEYCOLUMN,1,strpos(INKEYCOLUMN,'_')-1)) INTO OUT_KEY;
		EXECUTE 'INSERT INTO '||INTABLENAME||'('||INKEYCOLUMN||','||INCOLBYTENAME||') VALUES ('||QUOTE_LITERAL(OUT_KEY)||','||QUOTE_LITERAL(INBYTEVALUE)||')';	
	ELSE
		EXECUTE 'UPDATE ' ||INTABLENAME||' SET '||INCOLBYTENAME||' = '||QUOTE_LITERAL(INBYTEVALUE)|| 'WHERE '|| INKEYCOLUMN||' = '||QUOTE_LITERAL(INKEYVALUE);
	END IF;
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_INSERT_MIGRACION
* PERMITE SELECCIONAR LA INFORMACION DE LOS ADJUNTOS.
* @param IN_CRADJ_CODIGO IDENTIFICATIVO UNICO DE ADJUNTO.
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE PERSONA.
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE INFORME.
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE NOTIFICACION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE RESOLUCION.
* @param IN_CRDPT_CODIGO IDENTIFICATIVO UNICO DE DEPOSITO GARANTIA.
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE SEGUIMIENTO.
* @param IN_CRTPT_CODIGO IDENTIFICATIVO UNICO DE TIPO DE TRAMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE SESION DE SECCION.
* @param IN_CRRQT_CODIGO IDENTIFICATIVO UNICO DE REQUISITOS.
* @param IN_CRADJ_CONTENIDO  CONTENIDO DEL ADJUNTO.
* @param IN_CRADJ_NOMBRE_ADJUNTO  NOMBRE DEL ADJUNTO.
* @param IN_CRADJ_OBSERVACION  OBSERVACION DEL ADJUNTO.
* @param IN_CRADJ_ARCHIVO_ADJUNTO  ARCHIVO ADJUNTO
* @param IN_CRADJ_FECHA_REGISTRO FECHA DEL REGISTRO.
* @param IN_CRADJ_ESTADO ESTADO DEL ADJUNTO.
* @param IN_CRADJ_USUARIO_INSERT  USUARIO QUE INSERTO LA INFORMACION
* @param IN_CRADJ_USUARIO_UPDATE  USUARIO QUE MODIFICO LA INFORMACION
* @return VARCHAR

*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_INSERT_MIGRACION(
IN IN_CRADJ_CODIGO SII.CGG_RES_ADJUNTO.CRADJ_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_ADJUNTO.CRPER_CODIGO%TYPE, 
IN IN_CRINF_CODIGO SII.CGG_RES_ADJUNTO.CRINF_CODIGO%TYPE, 
IN IN_CRNOT_CODIGO SII.CGG_RES_ADJUNTO.CRNOT_CODIGO%TYPE, 
IN IN_CRRES_CODIGO SII.CGG_RES_ADJUNTO.CRRES_CODIGO%TYPE, 
IN IN_CRDPT_CODIGO SII.CGG_RES_ADJUNTO.CRDPT_CODIGO%TYPE, 
IN IN_CRSEG_CODIGO SII.CGG_RES_ADJUNTO.CRSEG_CODIGO%TYPE, 
IN IN_CRTPT_CODIGO SII.CGG_RES_ADJUNTO.CRTPT_CODIGO%TYPE, 
IN IN_CRSSC_CODIGO SII.CGG_RES_ADJUNTO.CRSSC_CODIGO%TYPE, 
IN IN_CRRQT_CODIGO SII.CGG_RES_ADJUNTO.CRRQT_CODIGO%TYPE, 
IN IN_CRADJ_CONTENIDO SII.CGG_RES_ADJUNTO.CRADJ_CONTENIDO%TYPE, 
IN IN_CRADJ_NOMBRE_ADJUNTO SII.CGG_RES_ADJUNTO.CRADJ_NOMBRE_ADJUNTO%TYPE, 
IN IN_CRADJ_OBSERVACION SII.CGG_RES_ADJUNTO.CRADJ_OBSERVACION%TYPE, 
IN IN_CRADJ_ARCHIVO_ADJUNTO SII.CGG_RES_ADJUNTO.CRADJ_ARCHIVO_ADJUNTO%TYPE, 
IN IN_CRADJ_FECHA_REGISTRO SII.CGG_RES_ADJUNTO.CRADJ_FECHA_REGISTRO%TYPE, 
IN IN_CRADJ_ESTADO SII.CGG_RES_ADJUNTO.CRADJ_ESTADO%TYPE, 
IN IN_CRADJ_USUARIO_INSERT SII.CGG_RES_ADJUNTO.CRADJ_USUARIO_INSERT%TYPE, 
IN IN_CRADJ_USUARIO_UPDATE SII.CGG_RES_ADJUNTO.CRADJ_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR DEFAULT 'FALSE';
TMP_CRPER_CODIGO VARCHAR default null;
BEGIN
	
	SELECT CRPER_CODIGO INTO TMP_CRPER_CODIGO FROM CGG_RES_PERSONA WHERE CRPER_NUMERO_RESIDENCIA = IN_CRPER_CODIGO;
	 IF LENGTH (TMP_CRPER_CODIGO) > 0 THEN
		IF (UPPER(IN_CRADJ_CODIGO) = 'KEYGEN') THEN
			SELECT SII.F_KEYGEN('CGG_RES_ADJUNTO','CRADJ_CODIGO','CRADJ') INTO OUT_KEY;
		ELSE
			OUT_KEY := IN_CRADJ_CODIGO;
		END IF;
		INSERT INTO SII.CGG_RES_ADJUNTO(
			CRADJ_CODIGO, 
			CRPER_CODIGO, 
			CRINF_CODIGO, 
			CRNOT_CODIGO, 
			CRRES_CODIGO, 
			CRDPT_CODIGO, 
			CRSEG_CODIGO, 
			CRTPT_CODIGO, 
			CRSSC_CODIGO, 
			CRRQT_CODIGO, 
			CRADJ_CONTENIDO, 
			CRADJ_NOMBRE_ADJUNTO, 
			CRADJ_OBSERVACION, 
			CRADJ_ARCHIVO_ADJUNTO, 
			CRADJ_FECHA_REGISTRO, 
			CRADJ_ESTADO, 
			CRADJ_FECHA_INSERT, 
			CRADJ_USUARIO_INSERT, 
			CRADJ_FECHA_UPDATE, 
			CRADJ_USUARIO_UPDATE
		) VALUES (
			OUT_KEY, 
			TMP_CRPER_CODIGO, 
			IN_CRINF_CODIGO, 
			IN_CRNOT_CODIGO, 
			IN_CRRES_CODIGO, 
			IN_CRDPT_CODIGO, 
			IN_CRSEG_CODIGO, 
			IN_CRTPT_CODIGO, 
			IN_CRSSC_CODIGO, 
			IN_CRRQT_CODIGO, 
			IN_CRADJ_CONTENIDO, 
			IN_CRADJ_NOMBRE_ADJUNTO, 
			IN_CRADJ_OBSERVACION, 
			IN_CRADJ_ARCHIVO_ADJUNTO, 
			IN_CRADJ_FECHA_REGISTRO, 
			IN_CRADJ_ESTADO, 
			CURRENT_TIMESTAMP, 
			IN_CRADJ_USUARIO_INSERT, 
			CURRENT_TIMESTAMP, 
			IN_CRADJ_USUARIO_UPDATE
		);
	END IF;
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT:

/**
*SELECCIONA LAS PERSONAS REPETIDAS POR SU NUMERO DE DOCUMENTO, SELECCIONA LOS TRAMITES, RESIDENCIAS Y PERFIL PROFESIONAL Y LOS ESTABLECE A UN SOLO REGISTRO QUE ESTE REPETIDO PARA ELIMINAR EL RESTO.
*@return 0 REALIZADO - 1 NO REALIZADO.
*/
CREATE OR REPLACE FUNCTION SII.F_PERSONA_REPETIDA(
                                                  )RETURNS TEXT AS
$$
DECLARE

R_PERSONA RECORD;
R_PERSONA_REPETIDA RECORD;
R_RESIDENCIA RECORD;
R_RESIDENCIA_1 RECORD;
R_TRAMITE RECORD;
R_PERFIL RECORD;
R_USUARIO RECORD;
R_TCT RECORD;
R_MOVILIDAD RECORD;
R_CONTACTO RECORD;
R_REPRESENTANTE RECORD;
R_ADJUNTO RECORD;
CRPER_CODIGO_INICIAL VARCHAR(20);
CRPER_NUM_DOC_IDENTIFIC_INICIAL VARCHAR(20);
CONTADOR_1 INT;
PERSONA_ELIMINAR VARCHAR[];
CRPER_CODIGO_ELIMINAR VARCHAR(20);
TMP_XML TEXT;
ERROR_LOG TEXT;
CLAVE VARCHAR(20);

BEGIN
  CRPER_CODIGO_INICIAL := '';
  CRPER_NUM_DOC_IDENTIFIC_INICIAL = '';  
  CONTADOR_1 := 0;
  PERSONA_ELIMINAR := ARRAY[''];
  CLAVE := '';
  ERROR_LOG := '';
  
  FOR R_PERSONA_REPETIDA IN (
                             SELECT P1.CRPER_NUM_DOC_IDENTIFIC
                             FROM SII.CGG_RES_PERSONA P1
                             WHERE LENGTH(TRIM(CRPER_NUM_DOC_IDENTIFIC)) >= 1
                             GROUP BY P1.CRPER_NUM_DOC_IDENTIFIC
                             HAVING COUNT(*) > 1
                             ORDER BY COUNT(*) DESC
                             ) LOOP
        
	SELECT P.CRPER_CODIGO, P.CRPER_NUM_DOC_IDENTIFIC INTO CRPER_CODIGO_INICIAL, CRPER_NUM_DOC_IDENTIFIC_INICIAL
    FROM SII.CGG_RES_PERSONA P
    LEFT JOIN CGG_RES_RESIDENCIA R ON (P.CRPER_CODIGO = R.CRPER_CODIGO)
    WHERE P.CRPER_NUM_DOC_IDENTIFIC = R_PERSONA_REPETIDA.CRPER_NUM_DOC_IDENTIFIC 
	AND SUBSTRING(P.CRPER_CODIGO,0,8) <>'CPERTCT'	
    ORDER BY R.CRRSD_FECHA_INICIO DESC,R.CRRSD_MODALIDAD  LIMIT 1;
    
    IF(CRPER_CODIGO_INICIAL IS NULL)THEN
	
		 SELECT P.CRPER_CODIGO, P.CRPER_NUM_DOC_IDENTIFIC INTO CRPER_CODIGO_INICIAL, CRPER_NUM_DOC_IDENTIFIC_INICIAL
		FROM SII.CGG_RES_PERSONA P    
		WHERE P.CRPER_NUM_DOC_IDENTIFIC = R_PERSONA_REPETIDA.CRPER_NUM_DOC_IDENTIFIC 
		AND SUBSTRING(P.CRPER_CODIGO,0,8) <>'CPERTCT'
		AND LENGTH(TRIM(COALESCE(P.CRPER_OBSERVACIONES,'')))>=1;
	
		IF(CRPER_CODIGO_INICIAL IS NULL)THEN
		
			SELECT P.CRPER_CODIGO, P.CRPER_NUM_DOC_IDENTIFIC INTO CRPER_CODIGO_INICIAL, CRPER_NUM_DOC_IDENTIFIC_INICIAL
			FROM SII.CGG_RES_PERSONA P 
			WHERE P.CRPER_NUM_DOC_IDENTIFIC = R_PERSONA_REPETIDA.CRPER_NUM_DOC_IDENTIFIC
			AND SUBSTRING(P.CRPER_CODIGO,0,8) <>'CPERTCT' LIMIT 1;	
			
			IF(CRPER_CODIGO_INICIAL IS NULL)THEN
		
				SELECT P.CRPER_CODIGO, P.CRPER_NUM_DOC_IDENTIFIC INTO CRPER_CODIGO_INICIAL, CRPER_NUM_DOC_IDENTIFIC_INICIAL
				FROM SII.CGG_RES_PERSONA P 
				WHERE P.CRPER_NUM_DOC_IDENTIFIC = R_PERSONA_REPETIDA.CRPER_NUM_DOC_IDENTIFIC LIMIT 1;	
				
			END IF;
			
		END IF;
		
    END IF;
    
	IF(CRPER_CODIGO_INICIAL IS NOT NULL)THEN
			FOR R_PERSONA IN (
						  SELECT P.CRPER_CODIGO, P.CRPER_NUM_DOC_IDENTIFIC
						  FROM SII.CGG_RES_PERSONA P 
						  WHERE P.CRPER_NUM_DOC_IDENTIFIC = R_PERSONA_REPETIDA.CRPER_NUM_DOC_IDENTIFIC 
						  AND P.CRPER_CODIGO <> CRPER_CODIGO_INICIAL
						  ) LOOP 
		  FOR R_RESIDENCIA IN ( SELECT * FROM SII.CGG_RES_RESIDENCIA WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO )LOOP
			UPDATE SII.CGG_RES_RESIDENCIA SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRRSD_CODIGO = R_RESIDENCIA.CRRSD_CODIGO;
		  END LOOP;
		  
		  FOR R_TRAMITE IN (SELECT * FROM SII.CGG_RES_TRAMITE WHERE CGG_CRPER_CODIGO = R_PERSONA.CRPER_CODIGO) LOOP
			UPDATE SII.CGG_RES_TRAMITE SET CGG_CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRTRA_CODIGO = R_TRAMITE.CRTRA_CODIGO;
		  END LOOP;
		  
		  UPDATE SII.CGG_RES_TRAMITE SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO;
		  
		  FOR R_ADJUNTO IN (SELECT * FROM SII.CGG_RES_ADJUNTO WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO) LOOP
			UPDATE SII.CGG_RES_ADJUNTO SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRADJ_CODIGO = R_ADJUNTO.CRADJ_CODIGO;
		  END LOOP;
		  
		  FOR R_PERFIL IN (SELECT * FROM SII.CGG_GEM_PERFIL_PROF WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO) LOOP
			UPDATE SII.CGG_GEM_PERFIL_PROF SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CGPPR_CODIGO = R_PERFIL.CGPPR_CODIGO;
		  END LOOP;
		  
		  FOR R_TCT IN (SELECT * FROM SII.CGG_TCT_REGISTRO WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO) LOOP
			UPDATE SII.CGG_TCT_REGISTRO SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CTREG_CODIGO = R_TCT.CTREG_CODIGO;
		  END LOOP;
		  
		  FOR R_USUARIO IN (SELECT * FROM SII.CGG_USUARIO WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO) LOOP
			UPDATE SII.CGG_USUARIO SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CUSU_CODIGO = R_USUARIO.CUSU_CODIGO;
		  END LOOP;
		  
		  FOR R_MOVILIDAD IN (SELECT * FROM SII.CGG_RES_MOVILIDAD WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO) LOOP
			UPDATE SII.CGG_RES_MOVILIDAD SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRMOV_CODIGO = R_MOVILIDAD.CRMOV_CODIGO;
		  END LOOP;
		  
		  FOR R_CONTACTO IN (SELECT * FROM SII.CGG_RES_PERSONA_CONTACTO WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO) LOOP
			UPDATE SII.CGG_RES_PERSONA_CONTACTO SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRPRC_CODIGO = R_CONTACTO.CRPRC_CODIGO;
		  END LOOP;
		  
		  FOR R_REPRESENTANTE IN (SELECT * FROM SII.CGG_RES_REPRESENTANTE_LEGAL WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO) LOOP
			UPDATE SII.CGG_RES_REPRESENTANTE_LEGAL SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRRPT_CODIGO = R_REPRESENTANTE.CRRPT_CODIGO;
		  END LOOP;
		  
		  UPDATE SII.CGG_RES_OCUPACION_LABORAL SET CRPER_CODIGO =  CRPER_CODIGO_INICIAL WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO; 
		  UPDATE SII.CGG_RES_NOTIFICACION SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO; 
		  UPDATE SII.CGG_RES_OBSERVADO SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO; 
		  UPDATE SII.CGG_TCT_INGRESO_FALLIDO SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO; 
		  UPDATE SII.CGG_RES_DEPOSITO_GARANTIA SET CRPER_CODIGO = CRPER_CODIGO_INICIAL WHERE CRPER_CODIGO = R_PERSONA.CRPER_CODIGO; 
		  
		  PERSONA_ELIMINAR := ARRAY_CAT(PERSONA_ELIMINAR, ARRAY[R_PERSONA.CRPER_CODIGO]);
		  
		END LOOP;
		
		FOR R_RESIDENCIA_1 IN( SELECT * FROM SII.CGG_RES_RESIDENCIA WHERE CRPER_CODIGO = CRPER_CODIGO_INICIAL AND CRRSD_VIGENTE = TRUE ORDER BY CRRSD_FECHA_INICIO DESC) LOOP
		  IF(CONTADOR_1 = 0)THEN
			CONTADOR_1 = 1;
		  ELSE
			UPDATE SII.CGG_RES_RESIDENCIA SET CRRSD_VIGENTE = FALSE WHERE CRRSD_CODIGO = R_RESIDENCIA_1.CRRSD_CODIGO;
		  END IF;
		END LOOP;
		
		CRPER_CODIGO_INICIAL := '';
		CRPER_NUM_DOC_IDENTIFIC_INICIAL = '';    
		CONTADOR_1 := 0;
	ELSE
		ERROR_LOG:=ERROR_LOG ||' ERROR PERSONA CON DOCUMENTO ' ||R_PERSONA_REPETIDA.CRPER_NUM_DOC_IDENTIFIC ||' NO SE ENCONTRO PERSONA ADECUADA AL REGISTRO.<br>';
	END IF;
	      
  END LOOP;
  
  FOR I IN 1..ARRAY_LENGTH(PERSONA_ELIMINAR, 1) LOOP
    
    CRPER_CODIGO_ELIMINAR := PERSONA_ELIMINAR[I];
    IF(CRPER_CODIGO_ELIMINAR IS NOT NULL AND LENGTH(CRPER_CODIGO_ELIMINAR) >= 1)THEN
      SELECT QUERY_TO_XML('SELECT * FROM SII.CGG_RES_PERSONA WHERE CRPER_CODIGO='|| QUOTE_LITERAL(CRPER_CODIGO_ELIMINAR), FALSE, FALSE, 'SII.CGG_RES_PERSONA') INTO TMP_XML;
      SELECT SII.F_KEYGEN('CGG_RES_PERSONA_TMP','CRPET_CODIGO', 'CRPET') INTO CLAVE;
      INSERT INTO SII.CGG_RES_PERSONA_TMP VALUES(CLAVE, CRPER_CODIGO_ELIMINAR, TMP_XML, TRUE, CURRENT_TIMESTAMP, 'admin', CURRENT_TIMESTAMP, 'admin'); 
      DELETE FROM SII.CGG_RES_PERSONA WHERE CRPER_CODIGO = CRPER_CODIGO_ELIMINAR;
    END IF;
    
  END LOOP;
  RETURN ERROR_LOG;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;




