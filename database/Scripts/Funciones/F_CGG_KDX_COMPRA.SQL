/**
* FUNCION SII.F_CGG_KDX_COMPRA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_COMPRA.
* @param IN_CKCMP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMPRA
* @param IN_CKCMP_LOTE LOTE AL QUE CORRESPONDE LA COMPRA
* @param IN_CKCMP_FECHA_INGRESO FECHA DE INGRESO DE LAS ESPECIES
* @param IN_CKCMP_SERIE SERIE DEL LOTE DE ESPECIES
* @param IN_CKCMP_PROCEDENCIA NOMBRE DE PROCEDENCIA DE LAS ESPECIES
* @param IN_CKCMP_CANTIDAD TOTAL DE ESPECIES DE LA FACTURA
* @param IN_CKCMP_FACTURA NUMERO DE FACTURA DE LA COMPRA.
* @param IN_CKCMP_TOTAL TOTAL DE LA FACTURA
* @param IN_CKCMP_ESTADO ESTADO DEL REGISTRO
* @param IN_CKCMP_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKCMP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_COMPRA_INSERT(
IN IN_CKCMP_CODIGO SII.CGG_KDX_COMPRA.CKCMP_CODIGO%TYPE,
IN IN_CKCMP_LOTE SII.CGG_KDX_COMPRA.CKCMP_LOTE%TYPE,
IN IN_CKCMP_FECHA_INGRESO SII.CGG_KDX_COMPRA.CKCMP_FECHA_INGRESO%TYPE,
IN IN_CKCMP_SERIE SII.CGG_KDX_COMPRA.CKCMP_SERIE%TYPE,
IN IN_CKCMP_PROCEDENCIA SII.CGG_KDX_COMPRA.CKCMP_PROCEDENCIA%TYPE,
IN IN_CKCMP_CANTIDAD SII.CGG_KDX_COMPRA.CKCMP_CANTIDAD%TYPE,
IN IN_CKCMP_FACTURA SII.CGG_KDX_COMPRA.CKCMP_FACTURA%TYPE,
IN IN_CKCMP_TOTAL SII.CGG_KDX_COMPRA.CKCMP_TOTAL%TYPE,
IN IN_CKCMP_ESTADO SII.CGG_KDX_COMPRA.CKCMP_ESTADO%TYPE,
IN IN_CKCMP_USUARIO_INSERT SII.CGG_KDX_COMPRA.CKCMP_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKCMP_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_COMPRA','CKCMP_CODIGO','CKCMP') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKCMP_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_COMPRA(
		CKCMP_CODIGO, 
		CKCMP_LOTE, 
		CKCMP_FECHA_INGRESO, 
		CKCMP_SERIE, 
		CKCMP_PROCEDENCIA, 
		CKCMP_CANTIDAD, 
		CKCMP_FACTURA, 
		CKCMP_TOTAL, 
		CKCMP_ESTADO, 
		CKCMP_FECHA_INSERT, 
		CKCMP_USUARIO_INSERT, 
		CKCMP_FECHA_UPDATE, 
		CKCMP_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKCMP_LOTE, 
		IN_CKCMP_FECHA_INGRESO, 
		IN_CKCMP_SERIE, 
		IN_CKCMP_PROCEDENCIA, 
		IN_CKCMP_CANTIDAD, 
		IN_CKCMP_FACTURA, 
		IN_CKCMP_TOTAL, 
		IN_CKCMP_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKCMP_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKCMP_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_COMPRA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_COMPRA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_COMPRA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCMP_CODIGO, 
		CKCMP_LOTE, 
		CKCMP_FECHA_INGRESO, 
		CKCMP_SERIE, 
		CKCMP_PROCEDENCIA, 
		CKCMP_CANTIDAD, 
		CKCMP_FACTURA, 
		CKCMP_TOTAL, 
		CKCMP_ESTADO, 
		CKCMP_FECHA_INSERT, 
		CKCMP_USUARIO_INSERT, 
		CKCMP_FECHA_UPDATE, 
		CKCMP_USUARIO_UPDATE
	FROM SII.CGG_KDX_COMPRA
	WHERE CKCMP_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_COMPRA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_COMPRA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_COMPRA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKCMP_CODIGO, 
		CKCMP_LOTE, 
		CKCMP_FECHA_INGRESO, 
		CKCMP_SERIE, 
		CKCMP_PROCEDENCIA, 
		CKCMP_CANTIDAD, 
		CKCMP_FACTURA, 
		CKCMP_TOTAL, 
		CKCMP_ESTADO, 
		CKCMP_FECHA_INSERT, 
		CKCMP_USUARIO_INSERT, 
		CKCMP_FECHA_UPDATE, 
		CKCMP_USUARIO_UPDATE
	FROM SII.CGG_KDX_COMPRA
	WHERE CKCMP_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKCMP_LOTE, 0)||'' ''||COALESCE(CKCMP_FECHA_INGRESO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKCMP_SERIE, '''')||'' ''||COALESCE(CKCMP_PROCEDENCIA, '''')||'' ''||COALESCE(CKCMP_CANTIDAD, 0)||'' ''||COALESCE(CKCMP_FACTURA, '''')||'' ''||COALESCE(CKCMP_TOTAL, '''')||'' ''||COALESCE(CKCMP_ESTADO, FALSE)||'' ''||COALESCE(CKCMP_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKCMP_USUARIO_INSERT, '''')||'' ''||COALESCE(CKCMP_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKCMP_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_COMPRA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_COMPRA.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_COMPRA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_COMPRA
	WHERE CKCMP_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_COMPRA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_COMPRA.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_COMPRA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_COMPRA
	WHERE CKCMP_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKCMP_LOTE, 0)||' '||COALESCE(CKCMP_FECHA_INGRESO, CURRENT_TIMESTAMP)||' '||COALESCE(CKCMP_SERIE, '''')||' '||COALESCE(CKCMP_PROCEDENCIA, '''')||' '||COALESCE(CKCMP_CANTIDAD, 0)||' '||COALESCE(CKCMP_FACTURA, '''')||' '||COALESCE(CKCMP_TOTAL, '''')||' '||COALESCE(CKCMP_ESTADO, FALSE)||' '||COALESCE(CKCMP_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKCMP_USUARIO_INSERT, '''')||' '||COALESCE(CKCMP_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKCMP_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_COMPRA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_COMPRA.
* @param IN_CKCMP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMPRA
* @param IN_CKCMP_LOTE LOTE AL QUE CORRESPONDE LA COMPRA
* @param IN_CKCMP_FECHA_INGRESO FECHA DE INGRESO DE LAS ESPECIES
* @param IN_CKCMP_SERIE SERIE DEL LOTE DE ESPECIES
* @param IN_CKCMP_PROCEDENCIA NOMBRE DE PROCEDENCIA DE LAS ESPECIES
* @param IN_CKCMP_CANTIDAD TOTAL DE ESPECIES DE LA FACTURA
* @param IN_CKCMP_FACTURA NUMERO DE FACTURA DE LA COMPRA.
* @param IN_CKCMP_TOTAL TOTAL DE LA FACTURA
* @param IN_CKCMP_ESTADO ESTADO DEL REGISTRO
* @param IN_CKCMP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_COMPRA_UPDATE(
IN IN_CKCMP_CODIGO SII.CGG_KDX_COMPRA.CKCMP_CODIGO%TYPE,
IN IN_CKCMP_LOTE SII.CGG_KDX_COMPRA.CKCMP_LOTE%TYPE,
IN IN_CKCMP_FECHA_INGRESO SII.CGG_KDX_COMPRA.CKCMP_FECHA_INGRESO%TYPE,
IN IN_CKCMP_SERIE SII.CGG_KDX_COMPRA.CKCMP_SERIE%TYPE,
IN IN_CKCMP_PROCEDENCIA SII.CGG_KDX_COMPRA.CKCMP_PROCEDENCIA%TYPE,
IN IN_CKCMP_CANTIDAD SII.CGG_KDX_COMPRA.CKCMP_CANTIDAD%TYPE,
IN IN_CKCMP_FACTURA SII.CGG_KDX_COMPRA.CKCMP_FACTURA%TYPE,
IN IN_CKCMP_TOTAL SII.CGG_KDX_COMPRA.CKCMP_TOTAL%TYPE,
IN IN_CKCMP_ESTADO SII.CGG_KDX_COMPRA.CKCMP_ESTADO%TYPE,
IN IN_CKCMP_USUARIO_UPDATE SII.CGG_KDX_COMPRA.CKCMP_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_COMPRA SET
		CKCMP_LOTE = IN_CKCMP_LOTE, 
		CKCMP_FECHA_INGRESO = IN_CKCMP_FECHA_INGRESO, 
		CKCMP_SERIE = IN_CKCMP_SERIE, 
		CKCMP_PROCEDENCIA = IN_CKCMP_PROCEDENCIA, 
		CKCMP_CANTIDAD = IN_CKCMP_CANTIDAD, 
		CKCMP_FACTURA = IN_CKCMP_FACTURA, 
		CKCMP_TOTAL = IN_CKCMP_TOTAL, 
		CKCMP_ESTADO = IN_CKCMP_ESTADO, 
		CKCMP_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKCMP_USUARIO_UPDATE = IN_CKCMP_USUARIO_UPDATE
	WHERE
		CKCMP_CODIGO = IN_CKCMP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_COMPRA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_COMPRA.
* @param IN_CKCMP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMPRA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_COMPRA_SELECT(
IN IN_CKCMP_CODIGO SII.CGG_KDX_COMPRA.CKCMP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCMP_CODIGO, 
		CKCMP_LOTE, 
		CKCMP_FECHA_INGRESO, 
		CKCMP_SERIE, 
		CKCMP_PROCEDENCIA, 
		CKCMP_CANTIDAD, 
		CKCMP_FACTURA, 
		CKCMP_TOTAL, 
		CKCMP_ESTADO, 
		CKCMP_FECHA_INSERT, 
		CKCMP_USUARIO_INSERT, 
		CKCMP_FECHA_UPDATE, 
		CKCMP_USUARIO_UPDATE
	FROM SII.CGG_KDX_COMPRA
	WHERE CKCMP_ESTADO = TRUE AND 
		CKCMP_CODIGO = IN_CKCMP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_COMPRA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_COMPRA.
* @param IN_CKCMP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMPRA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_COMPRA_DELETE(
IN IN_CKCMP_CODIGO SII.CGG_KDX_COMPRA.CKCMP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_COMPRA SET
		CKCMP_ESTADO = FALSE
	WHERE CKCMP_CODIGO = IN_CKCMP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_COMPRA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_COMPRA.
* @param IN_CKCMP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE COMPRA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_COMPRA_DELETE_SOFT(
IN IN_CKCMP_CODIGO SII.CGG_KDX_COMPRA.CKCMP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_COMPRA_DETALLE SET
		CKCMD_ESTADO = FALSE
	WHERE CKCMP_CODIGO = IN_CKCMP_CODIGO;
	
	UPDATE SII.CGG_KDX_COMPRA SET
		CKCMP_ESTADO = FALSE
	WHERE
		CKCMP_CODIGO = IN_CKCMP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

