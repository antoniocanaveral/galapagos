/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_IDIOMA_PERSONA.
* @param IN_CGIDP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CGIDM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGIDP_ESCRITURA PROCENTAJE QUE DOMINA EL IDIOMA DE FORMA ESCRITA
* @param IN_CGIDP_LECTURA PROCENTAJE QUE DOMINA EL IDIOMA EN LA LECTURA
* @param IN_CGIDP_HABLAR PROCENTAJE QUE DOMINA EL IDIOMA EN FORMA ORAL
* @param IN_CGIDP_ESCUCHAR PROCENTAJE QUE DOMINA EL IDIOMA EN FORMA AUDITIVA
* @param IN_CGIDP_ESTADO ESTADO DEL REGISTRO
* @param IN_CGIDP_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGIDP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_INSERT(
IN IN_CGIDP_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CRPER_CODIGO%TYPE,
IN IN_CGIDM_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDM_CODIGO%TYPE,
IN IN_CGIDP_ESCRITURA SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_ESCRITURA%TYPE,
IN IN_CGIDP_LECTURA SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_LECTURA%TYPE,
IN IN_CGIDP_HABLAR SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_HABLAR%TYPE,
IN IN_CGIDP_ESCUCHAR SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_ESCUCHAR%TYPE,
IN IN_CGIDP_ESTADO SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_ESTADO%TYPE,
IN IN_CGIDP_USUARIO_INSERT SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
	TMP_COUNT INT2;
	OUT_KEY VARCHAR;
BEGIN
	SELECT COUNT(CRPER_CODIGO) INTO TMP_COUNT 
	FROM SII.CGG_GEM_IDIOMA_PERSONA	
	WHERE CRPER_CODIGO = IN_CRPER_CODIGO AND CGIDM_CODIGO = IN_CGIDM_CODIGO AND CGIDP_ESTADO = TRUE;
	
	IF (TMP_COUNT>0) THEN
		RAISE EXCEPTION 'No se puede ingresar el idioma, ya que este idioma ya esta asignado a la persona';
	END IF;

	IF (UPPER(IN_CGIDP_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_IDIOMA_PERSONA','CGIDP_CODIGO','CGIDP') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGIDP_CODIGO;
	END IF;
	
	INSERT INTO SII.CGG_GEM_IDIOMA_PERSONA(
		CGIDP_CODIGO, 
		CRPER_CODIGO, 
		CGIDM_CODIGO, 
		CGIDP_ESCRITURA, 
		CGIDP_LECTURA, 
		CGIDP_HABLAR, 
		CGIDP_ESCUCHAR, 
		CGIDP_ESTADO, 
		CGIDP_FECHA_INSERT, 
		CGIDP_USUARIO_INSERT, 
		CGIDP_FECHA_UPDATE, 
		CGIDP_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CGIDM_CODIGO, 
		IN_CGIDP_ESCRITURA, 
		IN_CGIDP_LECTURA, 
		IN_CGIDP_HABLAR, 
		IN_CGIDP_ESCUCHAR, 
		IN_CGIDP_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGIDP_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGIDP_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIDP_CODIGO, 
		CRPER_CODIGO, 
		CGIDM_CODIGO, 
		CGIDP_ESCRITURA, 
		CGIDP_LECTURA, 
		CGIDP_HABLAR, 
		CGIDP_ESCUCHAR, 
		CGIDP_ESTADO, 
		CGIDP_FECHA_INSERT, 
		CGIDP_USUARIO_INSERT, 
		CGIDP_FECHA_UPDATE, 
		CGIDP_USUARIO_UPDATE
	FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE CGIDP_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGIDP_CODIGO, 
		CRPER_CODIGO, 
		CGIDM_CODIGO, 
		CGIDP_ESCRITURA, 
		CGIDP_LECTURA, 
		CGIDP_HABLAR, 
		CGIDP_ESCUCHAR, 
		CGIDP_ESTADO, 
		CGIDP_FECHA_INSERT, 
		CGIDP_USUARIO_INSERT, 
		CGIDP_FECHA_UPDATE, 
		CGIDP_USUARIO_UPDATE
	FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE CGIDP_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGIDP_ESCRITURA, 0)||'' ''||COALESCE(CGIDP_LECTURA, 0)||'' ''||COALESCE(CGIDP_HABLAR, 0)||'' ''||COALESCE(CGIDP_ESCUCHAR, 0)||'' ''||COALESCE(CGIDP_ESTADO, FALSE)||'' ''||COALESCE(CGIDP_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGIDP_USUARIO_INSERT, '''')||'' ''||COALESCE(CGIDP_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGIDP_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE CGIDP_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE CGIDP_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGIDP_ESCRITURA, 0)||' '||COALESCE(CGIDP_LECTURA, 0)||' '||COALESCE(CGIDP_HABLAR, 0)||' '||COALESCE(CGIDP_ESCUCHAR, 0)||' '||COALESCE(CGIDP_ESTADO, FALSE)||' '||COALESCE(CGIDP_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGIDP_USUARIO_INSERT, '''')||' '||COALESCE(CGIDP_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGIDP_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_IDIOMA_PERSONA.
* @param IN_CGIDP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CGIDM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGIDP_ESCRITURA PROCENTAJE QUE DOMINA EL IDIOMA DE FORMA ESCRITA
* @param IN_CGIDP_LECTURA PROCENTAJE QUE DOMINA EL IDIOMA EN LA LECTURA
* @param IN_CGIDP_HABLAR PORCENTAJE QUE DOMINA EL IDIOMA EN FORMA ORAL.
* @param IN_CGIDP_ESCUCHAR PROCENTAJE QUE DOMINA EL IDIOMA EN FORMA AUDITIVA
* @param IN_CGIDP_ESTADO ESTADO DEL REGISTRO
* @param IN_CGIDP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_UPDATE(
IN IN_CGIDP_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_CODIGO%TYPE,
IN IN_CRPER_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CRPER_CODIGO%TYPE,
IN IN_CGIDM_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDM_CODIGO%TYPE,
IN IN_CGIDP_ESCRITURA SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_ESCRITURA%TYPE,
IN IN_CGIDP_LECTURA SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_LECTURA%TYPE,
IN IN_CGIDP_HABLAR SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_HABLAR%TYPE,
IN IN_CGIDP_ESCUCHAR SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_ESCUCHAR%TYPE,
IN IN_CGIDP_ESTADO SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_ESTADO%TYPE,
IN IN_CGIDP_USUARIO_UPDATE SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_IDIOMA_PERSONA SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CGIDM_CODIGO = IN_CGIDM_CODIGO, 
		CGIDP_ESCRITURA = IN_CGIDP_ESCRITURA, 
		CGIDP_LECTURA = IN_CGIDP_LECTURA, 
		CGIDP_HABLAR = IN_CGIDP_HABLAR, 
		CGIDP_ESCUCHAR = IN_CGIDP_ESCUCHAR, 
		CGIDP_ESTADO = IN_CGIDP_ESTADO, 
		CGIDP_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGIDP_USUARIO_UPDATE = IN_CGIDP_USUARIO_UPDATE
	WHERE
		CGIDP_CODIGO = IN_CGIDP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_IDIOMA_PERSONA.
* @param IN_CGIDP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_SELECT(
IN IN_CGIDP_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIDP_CODIGO, 
		CRPER_CODIGO, 
		CGIDM_CODIGO, 
		CGIDP_ESCRITURA, 
		CGIDP_LECTURA, 
		CGIDP_HABLAR, 
		CGIDP_ESCUCHAR, 
		CGIDP_ESTADO, 
		CGIDP_FECHA_INSERT, 
		CGIDP_USUARIO_INSERT, 
		CGIDP_FECHA_UPDATE, 
		CGIDP_USUARIO_UPDATE
	FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE CGIDP_ESTADO = TRUE AND 
		CGIDP_CODIGO = IN_CGIDP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_IDIOMA_PERSONA.
* @param IN_CGIDP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_DELETE(
IN IN_CGIDP_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE
		CGIDP_CODIGO = IN_CGIDP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_IDIOMA_PERSONA.
* @param IN_CGIDP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_DELETE_SOFT(
IN IN_CGIDP_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_IDIOMA_PERSONA SET
		CGIDP_ESTADO = FALSE
	WHERE
		CGIDP_CODIGO = IN_CGIDP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_S_CGG_GEM_IDIOMA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_IDIOMA.
* @param IN_CGIDM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE IDIOMA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_S_CGG_GEM_IDIOMA(
IN IN_CGIDM_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDM_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIDP_CODIGO, 
		CRPER_CODIGO, 
		CGIDM_CODIGO, 
		CGIDP_ESCRITURA, 
		CGIDP_LECTURA, 
		CGIDP_HABLAR, 
		CGIDP_ESCUCHAR, 
		CGIDP_ESTADO, 
		CGIDP_FECHA_INSERT, 
		CGIDP_USUARIO_INSERT, 
		CGIDP_FECHA_UPDATE, 
		CGIDP_USUARIO_UPDATE
	FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE CGIDP_ESTADO = TRUE AND 
		CGIDM_CODIGO = IN_CGIDM_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_D_CGG_GEM_IDIOMA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_IDIOMA.
* @param IN_CGIDM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_D_CGG_GEM_IDIOMA(
IN IN_CGIDM_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE
		CGIDM_CODIGO = IN_CGIDM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_D_CGG_GEM_IDIOMA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_IDIOMA.
* @param IN_CGIDM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_DS_CGG_GEM_IDIOMA(
IN IN_CGIDM_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CGIDM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_IDIOMA_PERSONA SET
		cgidp_estado = false
	WHERE
		CGIDM_CODIGO = IN_CGIDM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIDP_CODIGO, 
		CRPER_CODIGO, 
		CGIDM_CODIGO, 
		CGIDP_ESCRITURA, 
		CGIDP_LECTURA, 
		CGIDP_HABLAR, 
		CGIDP_ESCUCHAR, 
		CGIDP_ESTADO, 
		CGIDP_FECHA_INSERT, 
		CGIDP_USUARIO_INSERT, 
		CGIDP_FECHA_UPDATE, 
		CGIDP_USUARIO_UPDATE
	FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE CGIDP_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_IDIOMA_PERSONA
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_IDIOMA_PERSONA_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_IDIOMA_PERSONA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_IDIOMA_PERSONA_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_GEM_IDIOMA_PERSONA.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_IDIOMA_PERSONA SET
		cgidp_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_IDIOMAS_PERSONA_SELECTBYID
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_IDIOMA_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_IDIOMAS_PERSONA_SELECTBYID(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT	
		IDI.CGIDM_NOMBRE,
		IPE.CGIDP_ESCRITURA,
		IPE.CGIDP_LECTURA,
		IPE.CGIDP_HABLAR,
		IPE.CGIDP_ESCUCHAR
	FROM SII.CGG_RES_PERSONA PER INNER JOIN SII.CGG_GEM_IDIOMA_PERSONA IPE ON(IPE.CRPER_CODIGO=PER.CRPER_CODIGO)
		INNER JOIN SII.CGG_GEM_IDIOMA IDI ON(IDI.CGIDM_CODIGO=IPE.CGIDM_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE AND 
		PER.CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.SII.f_cgg_res_persona_idiomas_countById
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO .
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.f_cgg_res_persona_idiomas_countById(in_find_text text, inCrper_codigo character varying)
  RETURNS integer AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_IDIOMA_PERSONA IPE INNER JOIN SII.CGG_GEM_IDIOMA IDI ON(IDI.CGIDM_CODIGO = IPE.CGIDM_CODIGO)
	WHERE IPE.CGIDP_ESTADO = TRUE AND IPE.CRPER_CODIGO = inCrper_codigo AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(IDI.CGIDM_NOMBRE, '''')||' '||COALESCE(IPE.CGIDP_ESCRITURA, 0)||' '||COALESCE(IPE.CGIDP_LECTURA, 0)||' '||COALESCE(IPE.CGIDP_HABLAR, 0)||' '||COALESCE(IPE.CGIDP_ESCUCHAR, 0)||' '||COALESCE(IPE.CGIDP_ESTADO, FALSE)) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_idiomasPaginadosIdiomasBYID
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE PERSONA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION sii.F_CGG_idiomasPaginadosIdiomasBYID(in_user_name character varying, in_start_index integer, in_limit integer, in_sort_field_name character varying, in_direction character varying, in_find_text text,inCrper_codigo character varying)
  RETURNS SETOF refcursor AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		IPE.CGIDP_CODIGO,
		IPE.CRPER_CODIGO,
		IPE.CGIDM_CODIGO,
		IDI.CGIDM_NOMBRE,
		IPE.CGIDP_ESCRITURA,
		IPE.CGIDP_LECTURA,
		IPE.CGIDP_HABLAR,
		IPE.CGIDP_ESCUCHAR
	FROM SII.CGG_GEM_IDIOMA_PERSONA IPE INNER JOIN SII.CGG_GEM_IDIOMA IDI ON(IDI.CGIDM_CODIGO=IPE.CGIDM_CODIGO)		
	WHERE IPE.CGIDP_ESTADO = TRUE AND IPE.CRPER_CODIGO='''||inCrper_codigo||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(IDI.CGIDM_NOMBRE, '''')||'' ''||COALESCE(IPE.CGIDP_ESCRITURA, 0)||'' ''||COALESCE(IPE.CGIDP_LECTURA, 0)||'' ''||COALESCE(IPE.CGIDP_HABLAR, 0)||'' ''||COALESCE(IPE.CGIDP_ESCUCHAR, 0)||'' ''||COALESCE(IPE.CGIDP_ESTADO, FALSE)) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

