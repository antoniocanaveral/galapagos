/**
* FUNCION SII.F_CGG_KDX_ESPECIE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @param IN_CKESP_NOMBRE NOMBRE DEL TIPO DE ESPECIE
* @param IN_CKESP_PRECIO VALOR DE VENTA DE LA ESPECIE
* @param IN_CKESP_CANTIDAD CANTIDAD DISPONIBLE DE LA ESPECIE
* @param IN_CKESP_DISPONIBLE_MIN CANTIDAD MINIMA DE DISPONIBILIDAD
* @param IN_CKESP_DISPONIBLE_MAX CANTIDAD MAXIMA DE DISPONIBILIDAD
* @param IN_CKESP_TIPO TIPO DE ESPECIE
0 - RESIDENCIA
1 - TCT
2 - OTROS
* @param IN_CKESP_INDICE INDICE DE LA ESPECIE DENTRO DE LA CATEGORIA
* @param IN_CKESP_REPORTE NOMBRE DEL REPORTE QUE SE APLICA A ESTA ESPECIE
* @param IN_CKESP_ESTADO ESTADO DEL REGISTRO
* @param IN_CKESP_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKESP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_INSERT(
IN IN_CKESP_CODIGO SII.CGG_KDX_ESPECIE.CKESP_CODIGO%TYPE,
IN IN_CKESP_NOMBRE SII.CGG_KDX_ESPECIE.CKESP_NOMBRE%TYPE,
IN IN_CKESP_PRECIO SII.CGG_KDX_ESPECIE.CKESP_PRECIO%TYPE,
IN IN_CKESP_CANTIDAD SII.CGG_KDX_ESPECIE.CKESP_CANTIDAD%TYPE,
IN IN_CKESP_DISPONIBLE_MIN SII.CGG_KDX_ESPECIE.CKESP_DISPONIBLE_MIN%TYPE,
IN IN_CKESP_DISPONIBLE_MAX SII.CGG_KDX_ESPECIE.CKESP_DISPONIBLE_MAX%TYPE,
IN IN_CKESP_TIPO SII.CGG_KDX_ESPECIE.CKESP_TIPO%TYPE,
IN IN_CKESP_INDICE SII.CGG_KDX_ESPECIE.CKESP_INDICE%TYPE,
IN IN_CKESP_REPORTE SII.CGG_KDX_ESPECIE.CKESP_REPORTE%TYPE,
IN IN_CKESP_ESTADO SII.CGG_KDX_ESPECIE.CKESP_ESTADO%TYPE,
IN IN_CKESP_USUARIO_INSERT SII.CGG_KDX_ESPECIE.CKESP_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKESP_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_ESPECIE','CKESP_CODIGO','CKESP') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKESP_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_ESPECIE(
		CKESP_CODIGO, 
		CKESP_NOMBRE, 
		CKESP_PRECIO, 
		CKESP_CANTIDAD, 
		CKESP_DISPONIBLE_MIN, 
		CKESP_DISPONIBLE_MAX, 
		CKESP_TIPO, 
		CKESP_INDICE, 
		CKESP_REPORTE, 
		CKESP_ESTADO, 
		CKESP_FECHA_INSERT, 
		CKESP_USUARIO_INSERT, 
		CKESP_FECHA_UPDATE, 
		CKESP_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKESP_NOMBRE, 
		IN_CKESP_PRECIO, 
		IN_CKESP_CANTIDAD, 
		IN_CKESP_DISPONIBLE_MIN, 
		IN_CKESP_DISPONIBLE_MAX, 
		IN_CKESP_TIPO, 
		IN_CKESP_INDICE, 
		IN_CKESP_REPORTE, 
		IN_CKESP_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKESP_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKESP_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ESPECIE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_SELECT_AS(
IN IN_USER_NAME VARCHAR,
IN IN_CKESP_TIPO INT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKESP_CODIGO, 
		CKESP_NOMBRE, 
		CKESP_PRECIO, 
		CKESP_CANTIDAD, 
		CKESP_DISPONIBLE_MIN, 
		CKESP_DISPONIBLE_MAX, 
		CKESP_TIPO, 
		CKESP_INDICE, 
		CKESP_REPORTE, 
		CKESP_ESTADO, 
		CKESP_FECHA_INSERT, 
		CKESP_USUARIO_INSERT, 
		CKESP_FECHA_UPDATE, 
		CKESP_USUARIO_UPDATE
	FROM SII.CGG_KDX_ESPECIE
	WHERE CKESP_ESTADO AND (IN_CKESP_TIPO = -1 OR CKESP_TIPO = IN_CKESP_TIPO);
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ESPECIE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKESP_CODIGO, 
		CKESP_NOMBRE, 
		CKESP_PRECIO, 
		CKESP_CANTIDAD, 
		CKESP_DISPONIBLE_MIN, 
		CKESP_DISPONIBLE_MAX, 
		CKESP_TIPO, 
		CKESP_INDICE, 
		CKESP_REPORTE, 
		CKESP_ESTADO, 
		CKESP_FECHA_INSERT, 
		CKESP_USUARIO_INSERT, 
		CKESP_FECHA_UPDATE, 
		CKESP_USUARIO_UPDATE
	FROM SII.CGG_KDX_ESPECIE
	WHERE CKESP_ESTADO AND CKESP_TIPO =1 ;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ESPECIE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKESP_CODIGO, 
		CKESP_NOMBRE, 
		CKESP_PRECIO, 
		CKESP_CANTIDAD, 
		CKESP_DISPONIBLE_MIN, 
		CKESP_DISPONIBLE_MAX, 
		CKESP_TIPO, 
		CKESP_INDICE, 
		CKESP_REPORTE, 
		CKESP_ESTADO, 
		CKESP_FECHA_INSERT, 
		CKESP_USUARIO_INSERT, 
		CKESP_FECHA_UPDATE, 
		CKESP_USUARIO_UPDATE
	FROM SII.CGG_KDX_ESPECIE
	WHERE CKESP_ESTADO AND 
		SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKESP_NOMBRE, '''')||'' ''||COALESCE(CKESP_PRECIO, 0)||'' ''||COALESCE(CKESP_CANTIDAD, 0)||'' ''||COALESCE(CKESP_DISPONIBLE_MIN, 0)||'' ''||COALESCE(CKESP_DISPONIBLE_MAX, 0)||'' ''||COALESCE(CKESP_TIPO, 0)||'' ''||COALESCE(CKESP_INDICE, 0)||'' ''||COALESCE(CKESP_REPORTE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ESPECIE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_ESPECIE.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_ESPECIE
	WHERE CKESP_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ESPECIE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_ESPECIE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_ESPECIE
	WHERE CKESP_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKESP_NOMBRE, '''')||' '||COALESCE(CKESP_PRECIO, 0)||' '||COALESCE(CKESP_CANTIDAD, 0)||' '||COALESCE(CKESP_DISPONIBLE_MIN, 0)||' '||COALESCE(CKESP_DISPONIBLE_MAX, 0)||' '||COALESCE(CKESP_TIPO, 0)||' '||COALESCE(CKESP_INDICE, 0)||' '||COALESCE(CKESP_REPORTE, '')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ESPECIE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @param IN_CKESP_NOMBRE NOMBRE DEL TIPO DE ESPECIE
* @param IN_CKESP_PRECIO VALOR DE VENTA DE LA ESPECIE
* @param IN_CKESP_CANTIDAD CANTIDAD DISPONIBLE DE LA ESPECIE
* @param IN_CKESP_DISPONIBLE_MIN CANTIDAD MINIMA DE DISPONIBILIDAD
* @param IN_CKESP_DISPONIBLE_MAX CANTIDAD MAXIMA DE DISPONIBILIDAD
* @param IN_CKESP_TIPO TIPO DE ESPECIE
0 - RESIDENCIA
1 - TCT
2 - OTROS
* @param IN_CKESP_INDICE INDICE DE LA ESPECIE DENTRO DE LA CATEGORIA
* @param IN_CKESP_REPORTE NOMBRE DEL REPORTE QUE SE APLICA A ESTA ESPECIE
* @param IN_CKESP_ESTADO ESTADO DEL REGISTRO
* @param IN_CKESP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_UPDATE(
IN IN_CKESP_CODIGO SII.CGG_KDX_ESPECIE.CKESP_CODIGO%TYPE,
IN IN_CKESP_NOMBRE SII.CGG_KDX_ESPECIE.CKESP_NOMBRE%TYPE,
IN IN_CKESP_PRECIO SII.CGG_KDX_ESPECIE.CKESP_PRECIO%TYPE,
IN IN_CKESP_CANTIDAD SII.CGG_KDX_ESPECIE.CKESP_CANTIDAD%TYPE,
IN IN_CKESP_DISPONIBLE_MIN SII.CGG_KDX_ESPECIE.CKESP_DISPONIBLE_MIN%TYPE,
IN IN_CKESP_DISPONIBLE_MAX SII.CGG_KDX_ESPECIE.CKESP_DISPONIBLE_MAX%TYPE,
IN IN_CKESP_TIPO SII.CGG_KDX_ESPECIE.CKESP_TIPO%TYPE,
IN IN_CKESP_INDICE SII.CGG_KDX_ESPECIE.CKESP_INDICE%TYPE,
IN IN_CKESP_REPORTE SII.CGG_KDX_ESPECIE.CKESP_REPORTE%TYPE,
IN IN_CKESP_ESTADO SII.CGG_KDX_ESPECIE.CKESP_ESTADO%TYPE,
IN IN_CKESP_USUARIO_UPDATE SII.CGG_KDX_ESPECIE.CKESP_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_ESPECIE SET
		CKESP_NOMBRE = IN_CKESP_NOMBRE, 
		CKESP_PRECIO = IN_CKESP_PRECIO, 
		CKESP_CANTIDAD = IN_CKESP_CANTIDAD, 
		CKESP_DISPONIBLE_MIN = IN_CKESP_DISPONIBLE_MIN, 
		CKESP_DISPONIBLE_MAX = IN_CKESP_DISPONIBLE_MAX, 
		CKESP_TIPO = IN_CKESP_TIPO, 
		CKESP_INDICE = IN_CKESP_INDICE, 
		CKESP_REPORTE = IN_CKESP_REPORTE, 
		CKESP_ESTADO = IN_CKESP_ESTADO, 
		CKESP_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKESP_USUARIO_UPDATE = IN_CKESP_USUARIO_UPDATE
	WHERE
		CKESP_CODIGO = IN_CKESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ESPECIE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_SELECT(
IN IN_CKESP_CODIGO SII.CGG_KDX_ESPECIE.CKESP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKESP_CODIGO, 
		CKESP_NOMBRE, 
		CKESP_PRECIO, 
		CKESP_CANTIDAD, 
		CKESP_DISPONIBLE_MIN, 
		CKESP_DISPONIBLE_MAX, 
		CKESP_TIPO, 
		CKESP_INDICE, 
		CKESP_REPORTE, 
		CKESP_ESTADO, 
		CKESP_FECHA_INSERT, 
		CKESP_USUARIO_INSERT, 
		CKESP_FECHA_UPDATE, 
		CKESP_USUARIO_UPDATE
	FROM SII.CGG_KDX_ESPECIE
	WHERE CKESP_ESTADO = TRUE AND 
		CKESP_CODIGO = IN_CKESP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ESPECIE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_DELETE(
IN IN_CKESP_CODIGO SII.CGG_KDX_ESPECIE.CKESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_ESPECIE
	WHERE
		CKESP_CODIGO = IN_CKESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_ESPECIE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_ESPECIE.
* @param IN_CKESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_ESPECIE_DELETE_SOFT(
IN IN_CKESP_CODIGO SII.CGG_KDX_ESPECIE.CKESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_ESPECIE SET
		CKESP_ESTADO = FALSE
	WHERE
		CKESP_CODIGO = IN_CKESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

