/**
* F_DEPURAR_INFORMACION_CRPJR
* ELIMANA LAS EMPRESAS REPETIDAS
* @RETURN VOID
*/
CREATE OR REPLACE FUNCTION F_DEPURAR_INFORMACION_CRPJR(
)RETURNS VOID AS
$$
DECLARE
	TMP_COUNT INT;
	EMPRESA RECORD;
	REPETIDAS RECORD;
	BACKUP RECORD;
	
	TMP_CONT INT;
	TMP_CON_RL VARCHAR;
	TMP_EMPRESA_VALIDA VARCHAR;
	TMP_EMPRESA_ULTIMA VARCHAR;
BEGIN	
	--OBTIENE EL NOMBRE DE LAS EMPRESAS REPETIDAS
	FOR EMPRESA IN (SELECT CRPJR_RAZON_SOCIAL
		FROM CGG_RES_PERSONA_JURIDICA
		WHERE CRPJR_ESTADO
		GROUP BY CRPJR_RAZON_SOCIAL
		HAVING COUNT(CRPJR_RAZON_SOCIAL)>1
		ORDER BY CRPJR_RAZON_SOCIAL)
	LOOP
		TMP_EMPRESA_VALIDA = NULL;
		/*OBTIENE LOS REGISTROS DE UNA EMPRESA REPETIDA
		Y OBTIENE LA EMPRESA QUE VA A SER LA FINAL VALIDA*/
		FOR REPETIDAS IN (SELECT * FROM SII.CGG_RES_PERSONA_JURIDICA WHERE CRPJR_RAZON_SOCIAL = EMPRESA.CRPJR_RAZON_SOCIAL)
		LOOP
			SELECT CRPJR_CODIGO INTO TMP_CON_RL FROM CGG_RES_REPRESENTANTE_LEGAL 
			WHERE CRPJR_CODIGO = REPETIDAS.CRPJR_CODIGO AND CRRPT_ACTIVO;
			IF (TMP_CON_RL IS NOT NULL) THEN
				TMP_EMPRESA_VALIDA:= TMP_CON_RL;
			END IF;
			TMP_EMPRESA_ULTIMA = REPETIDAS.CRPJR_CODIGO;
		END LOOP;
		IF (TMP_EMPRESA_VALIDA IS NULL) THEN
			TMP_EMPRESA_VALIDA:=TMP_EMPRESA_ULTIMA;
		END IF;	
		
		/*OBTIENE LOS REGISTROS DE UNA EMPRESA REPETIDA
		Y OBTIENE LA EMPRESA QUE VA A SER LA FINAL VALIDA*/
		FOR REPETIDAS IN (SELECT * FROM SII.CGG_RES_PERSONA_JURIDICA 
			WHERE CRPJR_RAZON_SOCIAL = EMPRESA.CRPJR_RAZON_SOCIAL AND CRPJR_CODIGO <> TMP_EMPRESA_VALIDA)
		LOOP		
			/*ACTUALIZA LOS REGISTROS REPETIDOS A CODIGO DE EMPRESA VALIDO*/
			FOR BACKUP IN (SELECT CRRPT_CODIGO,CRPJR_CODIGO FROM SII.CGG_RES_REPRESENTANTE_LEGAL WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_REPRESENTANTE_LEGAL',BACKUP.CRRPT_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_RES_REPRESENTANTE_LEGAL SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
						
			FOR BACKUP IN (SELECT CRTRA_CODIGO,CRPJR_CODIGO FROM SII.CGG_RES_TRAMITE WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_TRAMITE',BACKUP.CRTRA_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_RES_TRAMITE SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CUSU_CODIGO,CRPJR_CODIGO FROM SII.CGG_USUARIO WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_USUARIO',BACKUP.CUSU_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;			
			UPDATE SII.CGG_USUARIO SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CRPJC_CODIGO,CRPJR_CODIGO FROM SII.CGG_RES_PJURIDICA_CONTACTO WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_PJURIDICA_CONTACTO',BACKUP.CRPJC_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_RES_PJURIDICA_CONTACTO SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CVHST_CODIGO,CRPJR_CODIGO FROM SII.CGG_VEH_HISTORIAL WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_VEH_HISTORIAL',BACKUP.CVHST_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_VEH_HISTORIAL SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CJACU_CODIGO,CRPJR_CODIGO FROM SII.CGG_JUR_ACUERDO WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_JUR_ACUERDO',BACKUP.CJACU_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_JUR_ACUERDO SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CJPJU_CODIGO,CRPJR_CODIGO FROM SII.CGG_JUR_PROCESO_JUDICIAL WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_JUR_PROCESO_JUDICIAL',BACKUP.CJPJU_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_JUR_PROCESO_JUDICIAL SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CROCL_CODIGO,CRPJR_CODIGO FROM SII.CGG_RES_OCUPACION_LABORAL WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_OCUPACION_LABORAL',BACKUP.CROCL_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_RES_OCUPACION_LABORAL SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CRCPJ_CODIGO,CRPJR_CODIGO FROM SII.CGG_RES_CUENTA_PERSONAJURIDICA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_CUENTA_PERSONAJURIDICA',BACKUP.CRCPJ_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_RES_CUENTA_PERSONAJURIDICA SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CRCOM_CODIGO,CRPJR_CODIGO FROM SII.CGG_RES_COMUNICADO WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_COMUNICADO',BACKUP.CRCOM_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_RES_COMUNICADO SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CGPRE_CODIGO,CRPJR_CODIGO FROM SII.CGG_GEM_PREREGISTRO_EMPRESA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_GEM_PREREGISTRO_EMPRESA',BACKUP.CGPRE_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_GEM_PREREGISTRO_EMPRESA SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CRCPJ_CODIGO,CGG_CRPJR_CODIGO FROM SII.CGG_RES_CUENTA_PERSONAJURIDICA WHERE CGG_CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_CUENTA_PERSONAJURIDICA',BACKUP.CRCPJ_CODIGO,'CGG_CRPJR_CODIGO',BACKUP.CGG_CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_RES_CUENTA_PERSONAJURIDICA SET CGG_CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CGG_CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CRDPT_CODIGO,CRPJR_CODIGO FROM SII.CGG_RES_DEPOSITO_GARANTIA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_DEPOSITO_GARANTIA',BACKUP.CRDPT_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_RES_DEPOSITO_GARANTIA SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CDBEC_CODIGO,CRPJR_CODIGO FROM SII.CGG_DHU_BECA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_DHU_BECA',BACKUP.CDBEC_CODIGO,'CRPJR_CODIGO',BACKUP.CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_DHU_BECA SET CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			FOR BACKUP IN (SELECT CRDPT_CODIGO,CGG_CRPJR_CODIGO FROM SII.CGG_RES_DEPOSITO_GARANTIA WHERE CGG_CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO)
			LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_DEPOSITO_GARANTIA',BACKUP.CRDPT_CODIGO,'CGG_CRPJR_CODIGO',BACKUP.CGG_CRPJR_CODIGO,TMP_EMPRESA_VALIDA);
			END LOOP;
			UPDATE SII.CGG_RES_DEPOSITO_GARANTIA SET CGG_CRPJR_CODIGO = TMP_EMPRESA_VALIDA WHERE CGG_CRPJR_CODIGO= REPETIDAS.CRPJR_CODIGO;
			
			/*ELIMINA LOGICAMENTE EL REGISTRO REPETIDOS*/
			UPDATE CGG_RES_PERSONA_JURIDICA SET CRPJR_ESTADO = FALSE WHERE CRPJR_CODIGO =REPETIDAS.CRPJR_CODIGO;
		END LOOP;
	END LOOP;
END;
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* F_DEPURAR_INFORMACION_CGCRG
* ELIMANA CARGOS DE GESTION DE EMPLEO REPETIDOS
* @RETURN VOID
*/
CREATE OR REPLACE FUNCTION F_DEPURAR_INFORMACION_CGCRG(
)RETURNS VOID AS
$$
DECLARE
	TMP_COUNT INT;
	CARGO RECORD;
	REPETIDAS RECORD;
	BACKUP RECORD;
	
	TMP_CONT INT;
	TMP_CON_RL VARCHAR;
	TMP_CARGO_VALIDO VARCHAR;
	TMP_ULTIMO_CARGO VARCHAR;
BEGIN	
	--OBTIENE EL NOMBRE DE LAS EMPRESAS REPETIDAS
	FOR CARGO IN (
		SELECT CARGOS ,COUNT(CARGOS)
		FROM (SELECT CGARE_CODIGO||' '||CGCRG_NOMBRE AS CARGOS FROM CGG_GEM_CARGO WHERE CGCRG_ESTADO ) TMP_CARGO
		GROUP BY CARGOS
		HAVING COUNT(CARGOS)>1
		ORDER BY CARGOS)
	LOOP
		TMP_CARGO_VALIDO := NULL;
		/*OBTIENE LOS REGISTROS DE UN CARGO REPETIDO|
		Y OBTIENE EL CARGO QUE VA A SER LA FINAL VALIDA*/
		FOR REPETIDAS IN (SELECT * FROM SII.CGG_GEM_CARGO WHERE CGARE_CODIGO||' '||CGCRG_NOMBRE = CARGO.CARGOS)
		LOOP					
			TMP_ULTIMO_CARGO = REPETIDAS.CGCRG_CODIGO;
		END LOOP;
		IF (TMP_CARGO_VALIDO IS NULL) THEN
			TMP_CARGO_VALIDO:=TMP_ULTIMO_CARGO;
		END IF;	
		
		/*OBTIENE LOS REGISTROS DE UNA CARGO REPETIDA
		Y OBTIENE LA CARGO QUE VA A SER LA FINAL VALIDA*/
		FOR REPETIDAS IN (
			SELECT * FROM SII.CGG_GEM_CARGO WHERE CGARE_CODIGO||' '||CGCRG_NOMBRE = CARGO.CARGOS AND CGCRG_CODIGO <> TMP_CARGO_VALIDO)
		LOOP		
			/*ACTUALIZA LOS REGISTROS REPETIDOS A CODIGO DE CARGO VALIDO*/
			FOR BACKUP IN (SELECT CGUCR_CODIGO,CGCRG_CODIGO FROM SII.CGG_GEM_USUARIO_CARGO WHERE CGCRG_CODIGO= REPETIDAS.CGCRG_CODIGO) LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_GEM_USUARIO_CARGO',BACKUP.CGUCR_CODIGO,'CGCRG_CODIGO',BACKUP.CGCRG_CODIGO,TMP_CARGO_VALIDO);
			END LOOP;
			UPDATE SII.CGG_GEM_USUARIO_CARGO SET CGCRG_CODIGO = TMP_CARGO_VALIDO WHERE CGCRG_CODIGO= REPETIDAS.CGCRG_CODIGO;
					
			FOR BACKUP IN (SELECT CROCL_CODIGO,CGCRG_CODIGO FROM SII.CGG_RES_OCUPACION_LABORAL WHERE CGCRG_CODIGO= REPETIDAS.CGCRG_CODIGO)LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_RES_OCUPACION_LABORAL',BACKUP.CROCL_CODIGO,'CGCRG_CODIGO',BACKUP.CGCRG_CODIGO,TMP_CARGO_VALIDO);
			END LOOP;
			UPDATE SII.CGG_RES_OCUPACION_LABORAL SET CGCRG_CODIGO = TMP_CARGO_VALIDO WHERE CGCRG_CODIGO= REPETIDAS.CGCRG_CODIGO;
			
			FOR BACKUP IN (SELECT CGVCN_CODIGO,CGCRG_CODIGO FROM SII.CGG_GEM_VACANTE WHERE CGCRG_CODIGO= REPETIDAS.CGCRG_CODIGO)LOOP
				INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
				VALUES('CGG_GEM_VACANTE',BACKUP.CGVCN_CODIGO,'CGCRG_CODIGO',BACKUP.CGCRG_CODIGO,TMP_CARGO_VALIDO);
			END LOOP;
			UPDATE SII.CGG_GEM_VACANTE SET CGCRG_CODIGO = TMP_CARGO_VALIDO WHERE CGCRG_CODIGO= REPETIDAS.CGCRG_CODIGO;
					
			/*ELIMINA LOGICAMENTE EL REGISTRO REPETIDOS*/
			UPDATE CGG_GEM_CARGO SET CGCRG_ESTADO = FALSE WHERE CGCRG_CODIGO =REPETIDAS.CGCRG_CODIGO;
		END LOOP;
	END LOOP;
END;
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* F_DEPURAR_INFORMACION_CSCTP
* ELIMANA SECTORES PRODUCTIVOS REPETIDOS
* @RETURN VOID
*/
CREATE OR REPLACE FUNCTION F_DEPURAR_INFORMACION_CSCTP(
)RETURNS VOID AS
$$
DECLARE
	DATO_VALIDO VARCHAR;
	ULTIMO_DATO VARCHAR;
	ALL_REPETIDOS RECORD;
	REPETIDO RECORD;
	TMP VARCHAR;
BEGIN
	FOR ALL_REPETIDOS IN (
		SELECT CSCTP_NOMBRE FROM CGG_SECTOR_PRODUCTIVO
		WHERE CSCTP_ESTADO
		GROUP BY CSCTP_NOMBRE
		HAVING COUNT(CSCTP_NOMBRE) >1
		ORDER BY CSCTP_NOMBRE
	)LOOP
		DATO_VALIDO := NULL;		
		FOR REPETIDO IN(SELECT * FROM SII.CGG_SECTOR_PRODUCTIVO WHERE CSCTP_NOMBRE=ALL_REPETIDOS.CSCTP_NOMBRE)LOOP			
			ULTIMO_DATO = REPETIDO.CSCTP_CODIGO;
		END LOOP;
		IF (DATO_VALIDO IS NULL) THEN
			DATO_VALIDO:=ULTIMO_DATO;
		END IF;	
		FOR REPETIDO IN(SELECT * FROM SII.CGG_SECTOR_PRODUCTIVO WHERE CSCTP_NOMBRE=ALL_REPETIDOS.CSCTP_NOMBRE AND CSCTP_CODIGO<>DATO_VALIDO)LOOP			
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_RES_PERSONA_JURIDICA','CRPJR_CODIGO','CSCTP_CODIGO',DATO_VALIDO,REPETIDO.CSCTP_CODIGO) INTO TMP;	
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_VEH_VEHICULO','CVVEH_CODIGO','CSCTP_CODIGO',DATO_VALIDO,REPETIDO.CSCTP_CODIGO) INTO TMP;
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_DHU_CURSO','CDCUR_CODIGO','CSCTP_CODIGO',DATO_VALIDO,REPETIDO.CSCTP_CODIGO) INTO TMP;
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_DHU_ASISTENTE_CURSO','CDASC_CODIGO','CSCTP_CODIGO',DATO_VALIDO,REPETIDO.CSCTP_CODIGO) INTO TMP;
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_GEM_VACANTE','CGVCN_CODIGO','CSCTP_CODIGO',DATO_VALIDO,REPETIDO.CSCTP_CODIGO) INTO TMP;
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_RES_OCUPACION_LABORAL','CROCL_CODIGO','CSCTP_CODIGO',DATO_VALIDO,REPETIDO.CSCTP_CODIGO) INTO TMP;
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_JUR_ACUERDO','CRPJR_CODIGO','CJACU_CODIGO',DATO_VALIDO,REPETIDO.CSCTP_CODIGO) INTO TMP;
			
			UPDATE CGG_SECTOR_PRODUCTIVO SET CSCTP_ESTADO =  FALSE WHERE CSCTP_CODIGO = REPETIDO.CSCTP_CODIGO;
		END LOOP;
	END LOOP;
END;
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;


/**
* F_DEPURAR_INFORMACION_CSCTP
* ELIMANA SECTORES PRODUCTIVOS REPETIDOS
* @RETURN VOID
*/
CREATE OR REPLACE FUNCTION F_DEPURAR_INFORMACION_CGTPR(
)RETURNS VOID AS
$$
DECLARE
	DATO_VALIDO VARCHAR;
	ULTIMO_DATO VARCHAR;
	ALL_REPETIDOS RECORD;
	REPETIDO RECORD;
	TMP VARCHAR;
BEGIN
	FOR ALL_REPETIDOS IN (
		SELECT TITULOS ,COUNT(TITULOS)
		FROM (SELECT CGNES_CODIGO||' '||CGTPR_DESCRIPCION AS TITULOS FROM CGG_TITULO_PROFESIONAL WHERE CGTPR_ESTADO ) TMP_TITULO
		GROUP BY TITULOS
		HAVING COUNT(TITULOS)>1
		ORDER BY TITULOS
	)LOOP
		DATO_VALIDO := NULL;		
		FOR REPETIDO IN(SELECT * FROM SII.CGG_TITULO_PROFESIONAL WHERE CGNES_CODIGO||' '||CGTPR_DESCRIPCION=ALL_REPETIDOS.TITULOS)LOOP			
			ULTIMO_DATO = REPETIDO.CGTPR_CODIGO;
		END LOOP;
		IF (DATO_VALIDO IS NULL) THEN
			DATO_VALIDO:=ULTIMO_DATO;
		END IF;	

		FOR REPETIDO IN(SELECT * FROM SII.CGG_TITULO_PROFESIONAL WHERE CGNES_CODIGO||' '||CGTPR_DESCRIPCION=ALL_REPETIDOS.TITULOS AND CGTPR_CODIGO<>DATO_VALIDO)LOOP			
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_GEM_PERFIL_PROF','CGPPR_CODIGO','CGTPR_CODIGO',DATO_VALIDO,REPETIDO.CGTPR_CODIGO) INTO TMP;	
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_DHU_BECA','CDBEC_CODIGO','CGTPR_CODIGO',DATO_VALIDO,REPETIDO.CGTPR_CODIGO) INTO TMP;
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_GEM_VACANTE','CGVCN_CODIGO','CGTPR_CODIGO',DATO_VALIDO,REPETIDO.CGTPR_CODIGO) INTO TMP;

			UPDATE CGG_TITULO_PROFESIONAL SET CGTPR_ESTADO =  FALSE WHERE CGTPR_CODIGO = REPETIDO.CGTPR_CODIGO;
		END LOOP;
	END LOOP;
END;
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;



/**
* F_DEPURAR_INFORMACION_CSCTP
* ELIMINA INSTITUCIONES EDUCATIVAS REPETIDAS
* @RETURN VOID
*/
CREATE OR REPLACE FUNCTION F_DEPURAR_INFORMACION_CGIED(
)RETURNS VOID AS
$$
DECLARE
	DATO_VALIDO VARCHAR;
	ULTIMO_DATO VARCHAR;
	ALL_REPETIDOS RECORD;
	REPETIDO RECORD;
	TMP VARCHAR;
BEGIN
	FOR ALL_REPETIDOS IN (
		SELECT INTITUCION ,COUNT(INTITUCION)
		FROM (SELECT CPAIS_CODIGO||' '||CGIED_NOMBRE AS INTITUCION FROM CGG_INSTITUCION_EDUCATIVA WHERE CGIED_ESTADO ) TMP_INST
		GROUP BY INTITUCION
		HAVING COUNT(INTITUCION)>1
		ORDER BY INTITUCION
	)LOOP
		DATO_VALIDO := NULL;		
		FOR REPETIDO IN(SELECT * FROM SII.CGG_INSTITUCION_EDUCATIVA WHERE CPAIS_CODIGO||' '||CGIED_NOMBRE=ALL_REPETIDOS.INTITUCION)LOOP			
			ULTIMO_DATO = REPETIDO.CGIED_CODIGO;
		END LOOP;
		IF (DATO_VALIDO IS NULL) THEN
			DATO_VALIDO:=ULTIMO_DATO;
		END IF;	

		FOR REPETIDO IN(SELECT * FROM SII.CGG_INSTITUCION_EDUCATIVA WHERE CPAIS_CODIGO||' '||CGIED_NOMBRE=ALL_REPETIDOS.INTITUCION AND CGIED_CODIGO<>DATO_VALIDO)LOOP			
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_DHU_BECA','CDBEC_CODIGO','CGIED_CODIGO',DATO_VALIDO,REPETIDO.CGIED_CODIGO) INTO TMP;	
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_INSTITUCION_CONTACTO','CINTC_CODIGO','CGIED_CODIGO',DATO_VALIDO,REPETIDO.CGIED_CODIGO) INTO TMP;
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_INSTITUCION_NIVEL','CGIEN_CODIGO','CGIED_CODIGO',DATO_VALIDO,REPETIDO.CGIED_CODIGO) INTO TMP;

			UPDATE CGG_INSTITUCION_EDUCATIVA SET CGIED_ESTADO =  FALSE WHERE CGIED_CODIGO = REPETIDO.CGIED_CODIGO;
		END LOOP;
	END LOOP;
END;
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;


/**
* F_DEPURAR_INFORMACION_CSCTP
* ELIMINA ESPECIALIDADES REPETIDAS
* @RETURN VOID
*/
CREATE OR REPLACE FUNCTION F_DEPURAR_INFORMACION_CGESP(
)RETURNS VOID AS
$$
DECLARE
	DATO_VALIDO VARCHAR;
	ULTIMO_DATO VARCHAR;
	ALL_REPETIDOS RECORD;
	REPETIDO RECORD;
	TMP VARCHAR;
BEGIN
	FOR ALL_REPETIDOS IN (
		SELECT ESPECIALIDAD 
		FROM (SELECT CGNES_CODIGO||' '||CGESP_NOMBRE AS ESPECIALIDAD FROM CGG_ESPECIALIDAD WHERE CGESP_ESTADO ) TMP_TAB
		GROUP BY ESPECIALIDAD
		HAVING COUNT(ESPECIALIDAD)>1
		ORDER BY ESPECIALIDAD
	)LOOP
		DATO_VALIDO := NULL;		
		FOR REPETIDO IN(SELECT * FROM SII.CGG_ESPECIALIDAD WHERE CGNES_CODIGO||' '||CGESP_NOMBRE=ALL_REPETIDOS.ESPECIALIDAD)LOOP			
			ULTIMO_DATO = REPETIDO.CGESP_CODIGO;
		END LOOP;
		IF (DATO_VALIDO IS NULL) THEN
			DATO_VALIDO:=ULTIMO_DATO;
		END IF;	

		FOR REPETIDO IN(SELECT * FROM SII.CGG_ESPECIALIDAD WHERE CGNES_CODIGO||' '||CGESP_NOMBRE=ALL_REPETIDOS.ESPECIALIDAD AND CGESP_CODIGO<>DATO_VALIDO)LOOP			
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_GEM_PERFIL_PROF','CGPPR_CODIGO','CGESP_CODIGO',DATO_VALIDO,REPETIDO.CGESP_CODIGO) INTO TMP;	
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_DHU_BECA','CDBEC_CODIGO','CGESP_CODIGO',DATO_VALIDO,REPETIDO.CGESP_CODIGO) INTO TMP;		

			UPDATE CGG_ESPECIALIDAD SET CGESP_ESTADO =  FALSE WHERE CGESP_CODIGO = REPETIDO.CGESP_CODIGO;
		END LOOP;
	END LOOP;
END;
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;


/**
* F_DEPURAR_INFORMACION_CSCTP
* ELIMANA SECTORES DE VEHICULOS REPETIDOS
* @RETURN VOID
*/
CREATE OR REPLACE FUNCTION F_DEPURAR_INFORMACION_CVSCT(
)RETURNS VOID AS
$$
DECLARE
	DATO_VALIDO VARCHAR;
	ULTIMO_DATO VARCHAR;
	ALL_REPETIDOS RECORD;
	REPETIDO RECORD;
	TMP VARCHAR;
BEGIN
	FOR ALL_REPETIDOS IN (
		SELECT CVSCT_NOMBRE FROM CGG_VEH_SECTOR WHERE CVSCT_ESTADO 
		GROUP BY CVSCT_NOMBRE
		HAVING COUNT(CVSCT_NOMBRE)>1
		ORDER BY CVSCT_NOMBRE
	)LOOP
		DATO_VALIDO := NULL;		
		FOR REPETIDO IN(SELECT * FROM SII.CGG_VEH_SECTOR WHERE CVSCT_NOMBRE=ALL_REPETIDOS.CVSCT_NOMBRE ORDER BY CVSCT_FECHA_INSERT DESC)LOOP			
			ULTIMO_DATO = REPETIDO.CVSCT_CODIGO;
		END LOOP;
		IF (DATO_VALIDO IS NULL) THEN
			DATO_VALIDO:=ULTIMO_DATO;
		END IF;	

		FOR REPETIDO IN(SELECT * FROM SII.CGG_VEH_SECTOR WHERE CVSCT_NOMBRE=ALL_REPETIDOS.CVSCT_NOMBRE AND CVSCT_CODIGO<>DATO_VALIDO )LOOP			
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_VEH_VEHICULO','CVVEH_CODIGO','CVSCT_CODIGO',DATO_VALIDO,REPETIDO.CVSCT_CODIGO) INTO TMP;	
			SELECT F_DEPURAR_INFORMACION_RESPALDO('CGG_RES_PERSONA_JURIDICA','CRPJR_CODIGO','CVSCT_CODIGO',DATO_VALIDO,REPETIDO.CVSCT_CODIGO) INTO TMP;		

			UPDATE CGG_VEH_SECTOR SET CVSCT_ESTADO =  FALSE WHERE CVSCT_CODIGO = REPETIDO.CVSCT_CODIGO;
		END LOOP;
	END LOOP;
END;
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/*
*INSERTA INFORMACION DE RESPALDO
*/
CREATE OR REPLACE FUNCTION F_DEPURAR_INFORMACION_RESPALDO(
	IN_TABLA VARCHAR,
	IN_TABLA_CAMPO_CLAVE VARCHAR,
	IN_CAMPO_RESPALDO VARCHAR,
	IN_DATO_VALIDO VARCHAR,
	IN_CAMPO_FK_CLAVE VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
	TEXTO VARCHAR;
	BACKUP RECORD;
BEGIN
	TEXTO:='SELECT '|| IN_TABLA_CAMPO_CLAVE ||' AS CAMPO1,'|| IN_CAMPO_RESPALDO ||' AS CAMPO2 FROM SII.'|| IN_TABLA ||' WHERE '||IN_CAMPO_RESPALDO||'= '''|| IN_CAMPO_FK_CLAVE ||'''';
	FOR BACKUP IN EXECUTE TEXTO	LOOP
		TEXTO := 'INSERT INTO SII.TMP_LOG_DEPURACION_CRPJR(TABLA,CAMPO_CLAVE,CAMPO,DATO_OLD,DATO_NEW)
		VALUES('''|| IN_TABLA ||''','''||BACKUP.CAMPO1||''','''||IN_CAMPO_RESPALDO||''','''||BACKUP.CAMPO2||''','''|| IN_DATO_VALIDO ||''');';
		EXECUTE TEXTO;	
		TEXTO := 'UPDATE '|| IN_TABLA ||' SET '||IN_CAMPO_RESPALDO||' = '''|| IN_DATO_VALIDO ||''' WHERE '||IN_CAMPO_RESPALDO||'= '''||IN_CAMPO_FK_CLAVE||'''';
		EXECUTE TEXTO;	
	END LOOP;
	TEXTO :='';RETURN TEXTO;
END;
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/*
CREATE TABLE SII.TMP_LOG_DEPURACION_CRPJR(
	TABLA VARCHAR(50),
	CAMPO_CLAVE VARCHAR(50),
	CAMPO VARCHAR(50),
	DATO_OLD VARCHAR(50),
	DATO_NEW VARCHAR(50)
)*/