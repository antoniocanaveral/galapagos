/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_SEGUIMIENTO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CGG_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE DE SEGUIMIENTO
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE ANTERIOR
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRSEG_DESCRIPCION DESCRIPCION DEL SEGUIMIENTO
* @param IN_CRSEG_ESTADO_ATENCION VALORES QUE PUEDE TOMAR UN SEGUIMIENTO
0 - RECIBIDO
1 - REVISADO
2 - DISTRIBUIDO
3 - PENDIENTE
4 - DESPACHADO
5 - FINALIZADO 
6 - INHABILITADO
* @param IN_CRSEG_OBSERVACION DATOS DE INTERES APUNTADOS EN EL SEGUIMIENTO  - HISTORIAL FORMATO JSON
* @param IN_CRSEG_TIPO_RESPUESTA VALORES FINALES RESULTADO DEL SEGUIMIENTO
-1 - INDETERMINADO
0 - NEGADO
1 - APROBADO

* @param IN_CRSEG_TIPO_ACTIVIDAD ACTIVIDAD SUGERIDA EN EL SEGUIMIENTO ANTERIOR
* @param IN_CRSEG_FECHA_RECEPCION FECHA DE RECEPCION DEL SEGUIMIENTO
* @param IN_CRSEG_FECHA_REVISION FECHA DE REVISION DEL SEGUIMIENTO
* @param IN_CRSEG_FECHA_DESPACHO FECHA DE ATENCION Y DESPACHO DEL TRAMITE GENERANDO UN NUEVO SEGUIMIENTO
* @param IN_CRSEG_ESTADO_HIJO ESTADO DE LAS RESPUESTAS DE LOS NODOS HIJOS
-1 - SIN HIJOS
0 - SIN RESPUESTAS
1 - RESPUESTA PARCIAL
2 - RESPUESTA TOTAL
* @param IN_CRSEG_FECHA_REAPERTURA FECHA DE REAPERTURA DEL SEGUIMIENTO
* @param IN_CRSEG_VECES_REVISION NUMERO DE VECES QUE SE HA REVISADO EL SEGUIMIENTO
* @param IN_CRSEG_NUMERO NUMERO ASIGNADO AL SEGUIMIENTO
* @param IN_CRSEG_ESTADO ESTADO DEL REGISTRO
* @param IN_CRSEG_USUARIO_INSERT USUARIO QUE REGISTRO LA INFORMACION
* @param IN_CRSEG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_INSERT(
IN IN_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CRSEG_CODIGO%TYPE, 
IN IN_CGG_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRSEG_CODIGO%TYPE, 
IN IN_CRTRA_CODIGO SII.CGG_RES_SEGUIMIENTO.CRTRA_CODIGO%TYPE, 
IN IN_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CRFAS_CODIGO%TYPE, 
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRFAS_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_SEGUIMIENTO.CUSU_CODIGO%TYPE, 
IN IN_CRSEG_DESCRIPCION SII.CGG_RES_SEGUIMIENTO.CRSEG_DESCRIPCION%TYPE, 
IN IN_CRSEG_ESTADO_ATENCION SII.CGG_RES_SEGUIMIENTO.CRSEG_ESTADO_ATENCION%TYPE, 
IN IN_CRSEG_OBSERVACION SII.CGG_RES_SEGUIMIENTO.CRSEG_OBSERVACION%TYPE, 
IN IN_CRSEG_TIPO_RESPUESTA SII.CGG_RES_SEGUIMIENTO.CRSEG_TIPO_RESPUESTA%TYPE, 
IN IN_CRSEG_TIPO_ACTIVIDAD SII.CGG_RES_SEGUIMIENTO.CRSEG_TIPO_ACTIVIDAD%TYPE, 
IN IN_CRSEG_FECHA_RECEPCION SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_RECEPCION%TYPE, 
IN IN_CRSEG_FECHA_REVISION SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_REVISION%TYPE, 
IN IN_CRSEG_FECHA_DESPACHO SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_DESPACHO%TYPE, 
IN IN_CRSEG_ESTADO_HIJO SII.CGG_RES_SEGUIMIENTO.CRSEG_ESTADO_HIJO%TYPE, 
IN IN_CRSEG_FECHA_REAPERTURA SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_REAPERTURA%TYPE, 
IN IN_CRSEG_VECES_REVISION SII.CGG_RES_SEGUIMIENTO.CRSEG_VECES_REVISION%TYPE, 
IN IN_CRSEG_NUMERO SII.CGG_RES_SEGUIMIENTO.CRSEG_NUMERO%TYPE, 
IN IN_CRSEG_ESTADO SII.CGG_RES_SEGUIMIENTO.CRSEG_ESTADO%TYPE, 
IN IN_CRSEG_USUARIO_INSERT SII.CGG_RES_SEGUIMIENTO.CRSEG_USUARIO_INSERT%TYPE, 
IN IN_CRSEG_USUARIO_UPDATE SII.CGG_RES_SEGUIMIENTO.CRSEG_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRSEG_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_SEGUIMIENTO','CRSEG_CODIGO','CRSEG') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRSEG_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_SEGUIMIENTO(
		CRSEG_CODIGO, 
		CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO, 
		CRFAS_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION, 
		CRSEG_NUMERO, 
		CRSEG_ESTADO, 
		CRSEG_FECHA_INSERT, 
		CRSEG_USUARIO_INSERT, 
		CRSEG_FECHA_UPDATE, 
		CRSEG_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGG_CRSEG_CODIGO, 
		IN_CRTRA_CODIGO, 
		IN_CRFAS_CODIGO, 
		IN_CGG_CRFAS_CODIGO, 
		IN_CUSU_CODIGO, 
		IN_CRSEG_DESCRIPCION, 
		IN_CRSEG_ESTADO_ATENCION, 
		IN_CRSEG_OBSERVACION, 
		IN_CRSEG_TIPO_RESPUESTA, 
		IN_CRSEG_TIPO_ACTIVIDAD, 
		IN_CRSEG_FECHA_RECEPCION, 
		IN_CRSEG_FECHA_REVISION, 
		IN_CRSEG_FECHA_DESPACHO, 
		IN_CRSEG_ESTADO_HIJO, 
		IN_CRSEG_FECHA_REAPERTURA, 
		IN_CRSEG_VECES_REVISION, 
		IN_CRSEG_NUMERO, 
		IN_CRSEG_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRSEG_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRSEG_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_SEGUIMIENTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSEG_CODIGO, 
		CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO, 
		CRFAS_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION, 
		CRSEG_NUMERO, 
		CRSEG_ESTADO, 
		CRSEG_FECHA_INSERT, 
		CRSEG_USUARIO_INSERT, 
		CRSEG_FECHA_UPDATE, 
		CRSEG_USUARIO_UPDATE
	FROM SII.CGG_RES_SEGUIMIENTO
	WHERE CRSEG_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_RES_SEGUIMIENTO__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_SEGUIMIENTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRSEG_CODIGO, 
		CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO, 
		CRFAS_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION, 
		CRSEG_NUMERO, 
		CRSEG_ESTADO, 
		CRSEG_FECHA_INSERT, 
		CRSEG_USUARIO_INSERT, 
		CRSEG_FECHA_UPDATE, 
		CRSEG_USUARIO_UPDATE
	FROM SII.CGG_RES_SEGUIMIENTO
	WHERE CRSEG_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRSEG_CODIGO IS NULL THEN '''' ELSE CRSEG_CODIGO END ||'' ''||CASE WHEN CGG_CRSEG_CODIGO IS NULL THEN '''' ELSE CGG_CRSEG_CODIGO END ||'' ''||CASE WHEN CRTRA_CODIGO IS NULL THEN '''' ELSE CRTRA_CODIGO END ||'' ''||CASE WHEN CRFAS_CODIGO IS NULL THEN '''' ELSE CRFAS_CODIGO END ||'' ''||CASE WHEN CGG_CRFAS_CODIGO IS NULL THEN '''' ELSE CGG_CRFAS_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CRSEG_DESCRIPCION IS NULL THEN '''' ELSE CRSEG_DESCRIPCION END ||'' ''||CASE WHEN CRSEG_ESTADO_ATENCION IS NULL THEN 0 ELSE CRSEG_ESTADO_ATENCION END ||'' ''||CASE WHEN CRSEG_OBSERVACION IS NULL THEN '''' ELSE CRSEG_OBSERVACION END ||'' ''||CASE WHEN CRSEG_TIPO_RESPUESTA IS NULL THEN 0 ELSE CRSEG_TIPO_RESPUESTA END ||'' ''||CASE WHEN CRSEG_TIPO_ACTIVIDAD IS NULL THEN '''' ELSE CRSEG_TIPO_ACTIVIDAD END ||'' ''||CASE WHEN CRSEG_FECHA_RECEPCION IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_RECEPCION END ||'' ''||CASE WHEN CRSEG_FECHA_REVISION IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_REVISION END ||'' ''||CASE WHEN CRSEG_FECHA_DESPACHO IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_DESPACHO END ||'' ''||CASE WHEN CRSEG_ESTADO_HIJO IS NULL THEN 0 ELSE CRSEG_ESTADO_HIJO END ||'' ''||CASE WHEN CRSEG_FECHA_REAPERTURA IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_REAPERTURA END ||'' ''||CASE WHEN CRSEG_VECES_REVISION IS NULL THEN 0 ELSE CRSEG_VECES_REVISION END ||'' ''||CASE WHEN CRSEG_NUMERO IS NULL THEN 0 ELSE CRSEG_NUMERO END ||'' ''||CASE WHEN CRSEG_ESTADO IS NULL THEN FALSE ELSE CRSEG_ESTADO END ||'' ''||CASE WHEN CRSEG_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_INSERT END ||'' ''||CASE WHEN CRSEG_USUARIO_INSERT IS NULL THEN '''' ELSE CRSEG_USUARIO_INSERT END ||'' ''||CASE WHEN CRSEG_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_UPDATE END ||'' ''||CASE WHEN CRSEG_USUARIO_UPDATE IS NULL THEN '''' ELSE CRSEG_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_SEGUIMIENTO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_SEGUIMIENTO
	WHERE CRSEG_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_SEGUIMIENTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_SEGUIMIENTO
	WHERE CRSEG_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRSEG_CODIGO IS NULL THEN '''' ELSE CRSEG_CODIGO END ||' '||CASE WHEN CGG_CRSEG_CODIGO IS NULL THEN '''' ELSE CGG_CRSEG_CODIGO END ||' '||CASE WHEN CRTRA_CODIGO IS NULL THEN '''' ELSE CRTRA_CODIGO END ||' '||CASE WHEN CRFAS_CODIGO IS NULL THEN '''' ELSE CRFAS_CODIGO END ||' '||CASE WHEN CGG_CRFAS_CODIGO IS NULL THEN '''' ELSE CGG_CRFAS_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CRSEG_DESCRIPCION IS NULL THEN '''' ELSE CRSEG_DESCRIPCION END ||' '||CASE WHEN CRSEG_ESTADO_ATENCION IS NULL THEN 0 ELSE CRSEG_ESTADO_ATENCION END ||' '||CASE WHEN CRSEG_OBSERVACION IS NULL THEN '''' ELSE CRSEG_OBSERVACION END ||' '||CASE WHEN CRSEG_TIPO_RESPUESTA IS NULL THEN 0 ELSE CRSEG_TIPO_RESPUESTA END ||' '||CASE WHEN CRSEG_TIPO_ACTIVIDAD IS NULL THEN '''' ELSE CRSEG_TIPO_ACTIVIDAD END ||' '||CASE WHEN CRSEG_FECHA_RECEPCION IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_RECEPCION END ||' '||CASE WHEN CRSEG_FECHA_REVISION IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_REVISION END ||' '||CASE WHEN CRSEG_FECHA_DESPACHO IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_DESPACHO END ||' '||CASE WHEN CRSEG_ESTADO_HIJO IS NULL THEN 0 ELSE CRSEG_ESTADO_HIJO END ||' '||CASE WHEN CRSEG_FECHA_REAPERTURA IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_REAPERTURA END ||' '||CASE WHEN CRSEG_VECES_REVISION IS NULL THEN 0 ELSE CRSEG_VECES_REVISION END ||' '||CASE WHEN CRSEG_NUMERO IS NULL THEN 0 ELSE CRSEG_NUMERO END ||' '||CASE WHEN CRSEG_ESTADO IS NULL THEN FALSE ELSE CRSEG_ESTADO END ||' '||CASE WHEN CRSEG_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_INSERT END ||' '||CASE WHEN CRSEG_USUARIO_INSERT IS NULL THEN '''' ELSE CRSEG_USUARIO_INSERT END ||' '||CASE WHEN CRSEG_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRSEG_FECHA_UPDATE END ||' '||CASE WHEN CRSEG_USUARIO_UPDATE IS NULL THEN '''' ELSE CRSEG_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_SEGUIMIENTO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CGG_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE DE SEGUIMIENTO
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE ANTERIOR
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRSEG_DESCRIPCION DESCRIPCION DEL SEGUIMIENTO
* @param IN_CRSEG_ESTADO_ATENCION VALORES QUE PUEDE TOMAR UN SEGUIMIENTO
0 - RECIBIDO
1 - REVISADO
2 - DISTRIBUIDO
3 - PENDIENTE
4 - DESPACHADO
5 - FINALIZADO 
6 - INHABILITADO
* @param IN_CRSEG_OBSERVACION DATOS DE INTERES APUNTADOS EN EL SEGUIMIENTO  - HISTORIAL FORMATO JSON
* @param IN_CRSEG_TIPO_RESPUESTA VALORES FINALES RESULTADO DEL SEGUIMIENTO
-1 - INDETERMINADO
0 - NEGADO
1 - APROBADO

* @param IN_CRSEG_TIPO_ACTIVIDAD ACTIVIDAD SUGERIDA EN EL SEGUIMIENTO ANTERIOR
* @param IN_CRSEG_FECHA_RECEPCION FECHA DE RECEPCION DEL SEGUIMIENTO
* @param IN_CRSEG_FECHA_REVISION FECHA DE REVISION DEL SEGUIMIENTO
* @param IN_CRSEG_FECHA_DESPACHO FECHA DE ATENCION Y DESPACHO DEL TRAMITE GENERANDO UN NUEVO SEGUIMIENTO
* @param IN_CRSEG_ESTADO_HIJO ESTADO DE LAS RESPUESTAS DE LOS NODOS HIJOS
-1 - SIN HIJOS
0 - SIN RESPUESTAS
1 - RESPUESTA PARCIAL
2 - RESPUESTA TOTAL
* @param IN_CRSEG_FECHA_REAPERTURA FECHA DE REAPERTURA DEL SEGUIMIENTO
* @param IN_CRSEG_VECES_REVISION NUMERO DE VECES QUE SE HA REVISADO EL SEGUIMIENTO
* @param IN_CRSEG_NUMERO NUMERO ASIGNADO AL SEGUIMIENTO
* @param IN_CRSEG_ESTADO ESTADO DEL REGISTRO
* @param IN_CRSEG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_UPDATE(
IN IN_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CRSEG_CODIGO%TYPE, 
IN IN_CGG_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRSEG_CODIGO%TYPE, 
IN IN_CRTRA_CODIGO SII.CGG_RES_SEGUIMIENTO.CRTRA_CODIGO%TYPE, 
IN IN_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CRFAS_CODIGO%TYPE, 
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRFAS_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_SEGUIMIENTO.CUSU_CODIGO%TYPE, 
IN IN_CRSEG_DESCRIPCION SII.CGG_RES_SEGUIMIENTO.CRSEG_DESCRIPCION%TYPE, 
IN IN_CRSEG_ESTADO_ATENCION SII.CGG_RES_SEGUIMIENTO.CRSEG_ESTADO_ATENCION%TYPE, 
IN IN_CRSEG_OBSERVACION SII.CGG_RES_SEGUIMIENTO.CRSEG_OBSERVACION%TYPE, 
IN IN_CRSEG_TIPO_RESPUESTA SII.CGG_RES_SEGUIMIENTO.CRSEG_TIPO_RESPUESTA%TYPE, 
IN IN_CRSEG_TIPO_ACTIVIDAD SII.CGG_RES_SEGUIMIENTO.CRSEG_TIPO_ACTIVIDAD%TYPE, 
IN IN_CRSEG_FECHA_RECEPCION SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_RECEPCION%TYPE, 
IN IN_CRSEG_FECHA_REVISION SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_REVISION%TYPE, 
IN IN_CRSEG_FECHA_DESPACHO SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_DESPACHO%TYPE, 
IN IN_CRSEG_ESTADO_HIJO SII.CGG_RES_SEGUIMIENTO.CRSEG_ESTADO_HIJO%TYPE, 
IN IN_CRSEG_FECHA_REAPERTURA SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_REAPERTURA%TYPE, 
IN IN_CRSEG_VECES_REVISION SII.CGG_RES_SEGUIMIENTO.CRSEG_VECES_REVISION%TYPE, 
IN IN_CRSEG_NUMERO SII.CGG_RES_SEGUIMIENTO.CRSEG_NUMERO%TYPE, 
IN IN_CRSEG_ESTADO SII.CGG_RES_SEGUIMIENTO.CRSEG_ESTADO%TYPE, 
IN IN_CRSEG_USUARIO_UPDATE SII.CGG_RES_SEGUIMIENTO.CRSEG_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_SEGUIMIENTO SET
		CGG_CRSEG_CODIGO = IN_CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO = IN_CRTRA_CODIGO, 
		CRFAS_CODIGO = IN_CRFAS_CODIGO, 
		CGG_CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO, 
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CRSEG_DESCRIPCION = IN_CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION = IN_CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION = IN_CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA = IN_CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD = IN_CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION = IN_CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION = IN_CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO = IN_CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO = IN_CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA = IN_CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION = IN_CRSEG_VECES_REVISION, 
		CRSEG_NUMERO = IN_CRSEG_NUMERO, 
		CRSEG_ESTADO = IN_CRSEG_ESTADO, 
		CRSEG_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRSEG_USUARIO_UPDATE = IN_CRSEG_USUARIO_UPDATE
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_SEGUIMIENTO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_SELECT(
IN IN_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CRSEG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSEG_CODIGO, 
		CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO, 
		FAS.CRFAS_CODIGO, 
		SEG.CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION, 
		CRSEG_NUMERO, 
		CRSEG_ESTADO, 
		CRSEG_FECHA_INSERT, 
		CRSEG_USUARIO_INSERT, 
		CRSEG_FECHA_UPDATE, 
		CRSEG_USUARIO_UPDATE,
		CRFAS_NOMBRE
	FROM SII.CGG_RES_SEGUIMIENTO SEG
	INNER JOIN SII.CGG_RES_FASE FAS ON (SEG.CRFAS_CODIGO = FAS.CRFAS_CODIGO)
	WHERE CRSEG_ESTADO = TRUE AND 
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_SEGUIMIENTO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_DELETE(
IN IN_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_SEGUIMIENTO
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_SEGUIMIENTO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_DELETE_SOFT(
IN IN_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_SEGUIMIENTO SET
		CRSEG_ESTADO = FALSE
	WHERE
		CRSEG_CODIGO = IN_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_S_CGG_RES_TRAMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_S_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_RES_SEGUIMIENTO.CRTRA_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSEG_CODIGO, 
		CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO, 
		CRFAS_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU.CUSU_CODIGO, 
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION, 
		CRSEG_NUMERO, 
		CRSEG_ESTADO, 
		CRSEG_FECHA_INSERT, 
		CRSEG_USUARIO_INSERT, 
		CRSEG_FECHA_UPDATE, 
		CRSEG_USUARIO_UPDATE,
		CUSU.CUSU_NOMBRE_USUARIO,
		(SELECT CRFAS_NOMBRE FROM CGG_RES_FASE CRFAS WHERE CRFAS.CRFAS_CODIGO = CRSEG.CRFAS_CODIGO) CRFAS_NOMBRE
	FROM SII.CGG_RES_SEGUIMIENTO CRSEG
	INNER JOIN CGG_USUARIO CUSU ON (CUSU.CUSU_CODIGO = CRSEG.CUSU_CODIGO)
	WHERE CRSEG_ESTADO = TRUE AND 
		CRTRA_CODIGO = IN_CRTRA_CODIGO
		AND CRSEG_ESTADO_ATENCION IN(0,1,2,3);
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_RES_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_RES_SEGUIMIENTO.CRTRA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_SEGUIMIENTO
	WHERE
		CRTRA_CODIGO = IN_CRTRA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_RES_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_DS_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_RES_SEGUIMIENTO.CRTRA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_SEGUIMIENTO SET
		crseg_estado = false
	WHERE
		CRTRA_CODIGO = IN_CRTRA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_S_CGG_RES_SEGUIMIENTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CGG_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_S_CGG_RES_SEGUIMIENTO(
IN IN_CGG_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRSEG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSEG_CODIGO, 
		CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO, 
		CRFAS_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION, 
		CRSEG_NUMERO, 
		CRSEG_ESTADO, 
		CRSEG_FECHA_INSERT, 
		CRSEG_USUARIO_INSERT, 
		CRSEG_FECHA_UPDATE, 
		CRSEG_USUARIO_UPDATE
	FROM SII.CGG_RES_SEGUIMIENTO
	WHERE CRSEG_ESTADO = TRUE AND 
		CGG_CRSEG_CODIGO = IN_CGG_CRSEG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CGG_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_RES_SEGUIMIENTO(
IN IN_CGG_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_SEGUIMIENTO
	WHERE
		CGG_CRSEG_CODIGO = IN_CGG_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_RES_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SEGUIMIENTO.
* @param IN_CGG_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_DS_CGG_RES_SEGUIMIENTO(
IN IN_CGG_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRSEG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_SEGUIMIENTO SET
		crseg_estado = false
	WHERE
		CGG_CRSEG_CODIGO = IN_CGG_CRSEG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_S_CGG_RES_FASE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE DE SEGUIMIENTO
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE ANTERIOR
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_S_CGG_RES_FASE(
IN IN_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CRFAS_CODIGO%TYPE, 
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRFAS_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSEG_CODIGO, 
		CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO, 
		CRFAS_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION, 
		CRSEG_NUMERO, 
		CRSEG_ESTADO, 
		CRSEG_FECHA_INSERT, 
		CRSEG_USUARIO_INSERT, 
		CRSEG_FECHA_UPDATE, 
		CRSEG_USUARIO_UPDATE
	FROM SII.CGG_RES_SEGUIMIENTO
	WHERE CRSEG_ESTADO = TRUE AND 
		CRFAS_CODIGO = IN_CRFAS_CODIGO AND 
		CGG_CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_RES_FASE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE DE SEGUIMIENTO
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE ANTERIOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_RES_FASE(
IN IN_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CRFAS_CODIGO%TYPE, 
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRFAS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_SEGUIMIENTO
	WHERE
		CRFAS_CODIGO = IN_CRFAS_CODIGO AND 
		CGG_CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_RES_FASE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE DE SEGUIMIENTO
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE ANTERIOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_DS_CGG_RES_FASE(
IN IN_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CRFAS_CODIGO%TYPE, 
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRFAS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_SEGUIMIENTO SET
		crseg_estado = false
	WHERE
		CRFAS_CODIGO = IN_CRFAS_CODIGO AND 
		CGG_CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_SEGUIMIENTO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSEG_CODIGO, 
		CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO, 
		CRFAS_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION, 
		CRSEG_NUMERO, 
		CRSEG_ESTADO, 
		CRSEG_FECHA_INSERT, 
		CRSEG_USUARIO_INSERT, 
		CRSEG_FECHA_UPDATE, 
		CRSEG_USUARIO_UPDATE
	FROM SII.CGG_RES_SEGUIMIENTO
	WHERE CRSEG_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_SEGUIMIENTO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_SEGUIMIENTO
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_SEGUIMIENTO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_SEGUIMIENTO SET
		crseg_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_SELECT1
* SELECCIONA TODOS LOS SEGUIMIENTO DE LA TABLA SEGUIMIENTO QUE CORRESPONDEN AL USUARIO ESTABLECIDO.
* INTERNAMENTE LA FUNCION COMPRUEBA SI EL USUARIO ES SUSTITUIDO POR OTRO PARA PERMITIRLE EL ACCESO A LA INFORMACION DEL USUARIO PRINCIPAL.
* ESTA FUNCION DEVUELVE TODOS LOS SEGUIMIENTO CUYO ESTADO SEAN DIFERENTE A DESPACHADO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRTST_CODIGO IDENTIFICATIVO UNICO DE TIPO DE SOLICITUD DE TRAMITE.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_SELECT1(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text,
IN IN_CRTST_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;		
	TMP_USUARIO_CURSOR REFCURSOR;	
	SQL_STMT TEXT;
	SQL_USUARIOS TEXT;
	CUSUCODIGO VARCHAR(20);
	TMP_ROW RECORD;
	TMP_TST_TIPOS VARCHAR;
	TMP_CRTST_CODIGO VARCHAR;
	TMP_FIND_TEXT VARCHAR;
BEGIN		 
	
	SQL_USUARIOS:=' ';
	SQL_STMT:=' ';
	TMP_CRTST_CODIGO := IN_CRTST_CODIGO;
	TMP_FIND_TEXT := IN_FIND_TEXT;
	TMP_TST_TIPOS := '';
	IF (LENGTH(IN_CRTST_CODIGO) > 0) THEN
		TMP_TST_TIPOS := SII.F_ANCESTOR_OF(IN_CRTST_CODIGO);
	END IF;
	IF (TMP_FIND_TEXT IS NULL) THEN
		TMP_FIND_TEXT :='';
	END IF;
	IF (TMP_CRTST_CODIGO IS NULL) THEN
		TMP_CRTST_CODIGO := '';
	END IF;
	SELECT CUSU_CODIGO INTO CUSUCODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME;	
	TMP_USUARIO_CURSOR := SII.F_CGG_USUARIO_ACCESO_INFORMACION(CUSUCODIGO);
		
	LOOP
		FETCH TMP_USUARIO_CURSOR INTO TMP_ROW;		
		EXIT WHEN NOT FOUND;
		SQL_USUARIOS := SQL_USUARIOS||'S.CUSU_CODIGO = '||QUOTE_LITERAL(TMP_ROW.CUSU_CODIGO)||' OR ';				
	END LOOP;
	CLOSE TMP_USUARIO_CURSOR;
		
	SQL_USUARIOS := SUBSTRING(SQL_USUARIOS FROM 1 FOR LENGTH(SQL_USUARIOS)-3);	
	
	SQL_STMT:='SELECT				
		CRSEG_CODIGO,		
		CGG_CRSEG_CODIGO,	
		CRTRA_CODIGO, 
		CRFAS_CODIGO,        	
		CGG_CRFAS_CODIGO,
		CUSU_CODIGO,		
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 		
		CRSEG_USUARIO_INSERT,
		CRTRA_NUMERO,        		
		CRFAS_NOMBRE,
		CUSU_APELLIDOS,		
		CUSU_ANTERIOR,
		CRTRA_FECHA_RECEPCION,
		CISLA_CODIGO,
		CRSEG_NUMERO,		
		CRPJR_CODIGO,
		CRTRA_OBSERVACION,
		CRTRA_COMUNICADO_RADIAL,
		CRPER_CODIGO,
		CRPER_BENEFICIARIO,
		CGG_CRPER_NUM_DOC_IDENTIFIC,
		CGG_CRPER_CODIGO,	
		CRPER_AUSPICIANTE,
		CRTRA_ANIO,
		CISLA_NOMBRE,				
		CRTRA_ACTIVIDAD_RESIDENCIA,
		CRTST_DESCRIPCION,							
		CRFAS_NOMBRE_ANTERIOR,				
		CRPJR_RAZON_SOCIAL,
		CRTST_CODIGO,
		CRPRO_CODIGO,
		SEGUIMIENTO_HTML,
		CRTRA_FOLIO,
		CRTRA_DIAS_PERMANENCIA,
		VEHICULO,
		CRTRA_FECHA_INGRESO,
		CRTRA_FECHA_SALIDA,
		CRTRA_GRUPO,
		CRTRA_ORDEN,
		CRETT_CODIGO
	FROM (
				SELECT				
				S.CRSEG_CODIGO,		
				S.CGG_CRSEG_CODIGO,	
				S.CRTRA_CODIGO, 
				S.CRFAS_CODIGO,        	
				S.CGG_CRFAS_CODIGO,
				S.CUSU_CODIGO,		
				S.CRSEG_DESCRIPCION, 
				S.CRSEG_ESTADO_ATENCION, 
				S.CRSEG_OBSERVACION, 
				S.CRSEG_TIPO_RESPUESTA, 
				S.CRSEG_TIPO_ACTIVIDAD, 
				S.CRSEG_FECHA_RECEPCION, 
				S.CRSEG_FECHA_REVISION, 
				S.CRSEG_FECHA_DESPACHO, 
				S.CRSEG_ESTADO_HIJO, 				
				S.CRSEG_USUARIO_INSERT,
				S.CRSEG_ESTADO,
				T.CRTRA_NUMERO,        		
				F.CRFAS_NOMBRE,
				COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,'''') AS CUSU_APELLIDOS,
				SII.F_CGG_RES_SEGUIMIENTO_SELECT_USUANTERIOR(S.CGG_CRSEG_CODIGO) AS CUSU_ANTERIOR ,
				T.CRTRA_FECHA_RECEPCION,
				T.CISLA_CODIGO,
				S.CRSEG_NUMERO,		
				T.CRPJR_CODIGO,
				T.CRTRA_OBSERVACION	,
				T.CRTRA_COMUNICADO_RADIAL,
				T.CRPER_CODIGO,
				SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(T.CRPER_CODIGO) AS CRPER_AUSPICIANTE,
				T.CGG_CRPER_CODIGO,	
				COALESCE(PRSB.CRPER_NUM_DOC_IDENTIFIC,'''') CGG_CRPER_NUM_DOC_IDENTIFIC,
				COALESCE(PRSB.CRPER_NOMBRES,'''')||'' ''||COALESCE(PRSB.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PRSB.CRPER_APELLIDO_MATERNO,'''') CRPER_BENEFICIARIO,
				T.CRTRA_ANIO,
				(SELECT I.CISLA_NOMBRE FROM CGG_ISLA I WHERE I.CISLA_CODIGO = T.CISLA_CODIGO) CISLA_NOMBRE,				
				T.CRTRA_ACTIVIDAD_RESIDENCIA,
				(SELECT TST.CRTST_DESCRIPCION FROM SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST WHERE TST.CRTST_CODIGO = T.CRTST_CODIGO) CRTST_DESCRIPCION,							
				(SELECT FAS.CRFAS_NOMBRE FROM SII.CGG_RES_FASE FAS WHERE FAS.CRFAS_CODIGO = S.CGG_CRFAS_CODIGO) CRFAS_NOMBRE_ANTERIOR,				
				(SELECT PJR.CRPJR_RAZON_SOCIAL FROM SII.CGG_RES_PERSONA_JURIDICA PJR WHERE PJR.CRPJR_CODIGO = T.CRPJR_CODIGO) CRPJR_RAZON_SOCIAL,				
				T.CRTST_CODIGO,
				T.CRPRO_CODIGO,
				SII.F_CGG_RES_SEGUIMIENTO_HTML(S.CRSEG_CODIGO) SEGUIMIENTO_HTML,
				T.CRTRA_FOLIO,
				T.CRTRA_DIAS_PERMANENCIA,
				(SELECT COALESCE(CVVEH_NOMBRE,'''')||'' ''||COALESCE(CVVEH_PLACA,'''')||'' ''||COALESCE(CVVEH_CHASIS,'''') FROM SII.CGG_VEH_VEHICULO WHERE CVVEH_CODIGO = T.CVVEH_CODIGO) VEHICULO,
				T.CRTRA_FECHA_INGRESO,
				T.CRTRA_FECHA_SALIDA,
				T.CRTRA_GRUPO,
				T.CRTRA_ORDEN,
				T.CRETT_CODIGO
			FROM SII.CGG_RES_SEGUIMIENTO S
			INNER JOIN SII.CGG_RES_TRAMITE T ON (S.CRTRA_CODIGO=T.CRTRA_CODIGO)
			INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = T.CRTST_CODIGO)
			INNER JOIN SII.CGG_RES_FASE F ON (S.CRFAS_CODIGO=F.CRFAS_CODIGO)
			INNER JOIN SII.CGG_USUARIO U ON (S.CUSU_CODIGO=U.CUSU_CODIGO)
			INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
			LEFT JOIN SII.CGG_RES_PERSONA PRSB ON PRSB.CRPER_CODIGO = T.CGG_CRPER_CODIGO
			WHERE S.CRSEG_ESTADO = TRUE  AND F.CRFAS_ATENCION_NORMAL AND
					(LENGTH('||QUOTE_LITERAL(TMP_CRTST_CODIGO)||') = 0 OR STRPOS('||QUOTE_LITERAL(TMP_TST_TIPOS)||',TST.CRTST_CODIGO) > 0 OR STRPOS('||QUOTE_LITERAL(TMP_TST_TIPOS)||',TST.CRTPT_CODIGO) > 0) AND
				  S.CRSEG_ESTADO_ATENCION <> 4 AND S.CRSEG_ESTADO_ATENCION <> 6 AND
				  ('||SQL_USUARIOS||')
	)AS SE WHERE	  			
	SII.F_STRING_IN('||QUOTE_LITERAL(TMP_FIND_TEXT)||',	   			
	COALESCE(SE.CRSEG_DESCRIPCION,'''')||'' ''||	
	COALESCE(SE.CRSEG_ESTADO_ATENCION,0)||'' ''||	
	COALESCE(SE.CRSEG_OBSERVACION,'''')||'' ''||		
	COALESCE(SE.CRSEG_TIPO_RESPUESTA,0)||'' ''||		
	COALESCE(SE.CRSEG_TIPO_ACTIVIDAD,'''')||'' ''||	
	TO_CHAR(COALESCE(SE.CRTRA_FECHA_RECEPCION,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||		
	TO_CHAR(COALESCE(SE.CRSEG_FECHA_RECEPCION,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||		
	TO_CHAR(COALESCE(SE.CRSEG_FECHA_DESPACHO,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||								
	COALESCE(SE.CRTRA_NUMERO,0)||'' ''||	        		
	COALESCE(SE.CRFAS_NOMBRE,'''')||'' ''||	
	COALESCE(SE.CUSU_APELLIDOS,'''')||'' ''||		
	COALESCE(SE.CRSEG_NUMERO,0)||'' ''||
	COALESCE(SE.CRPJR_RAZON_SOCIAL,'''')||'' ''||
	COALESCE(SE.CRTRA_OBSERVACION,'''')||'' ''||
	COALESCE(SE.CRTRA_COMUNICADO_RADIAL,'''')||'' ''||
	COALESCE(SE.CRPER_CODIGO,'''')||'' ''||
	COALESCE(SE.CRPER_BENEFICIARIO,'''')||'' ''||
	COALESCE(SE.CGG_CRPER_CODIGO,'''')||'' ''||
	COALESCE(SE.CRPER_AUSPICIANTE,'''')||'' ''||
	COALESCE(SE.CRTRA_ANIO,0)||'' ''||
	COALESCE(SE.CISLA_NOMBRE,'' '')
	) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	
	OPEN TMP_REF FOR EXECUTE SQL_STMT;
	
	RETURN NEXT TMP_REF;					
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_COUNT1
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_SEGUIMIENTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRTST_CODIGO CODIGO DE TIPO DE SOLICITUD DE TRAMITE
* @param IN_USER_NAME NOMBRE DEL USUARIO DEL SERVIDOR DE APLICACIONES.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_COUNT1(
IN IN_FIND_TEXT TEXT,
IN IN_USER_NAME VARCHAR(50),
IN IN_CRTST_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
	COUNT_ROW INT2;
	SQL_USUARIOS TEXT;
	SQL_STMT TEXT;
	CUSUCODIGO VARCHAR(20);
	TMP_USUARIO_CURSOR REFCURSOR;
	TMP_ROW RECORD;
	TMP_TST_TIPOS VARCHAR;
	TMP_CRTST_CODIGO VARCHAR;
	TMP_FIND_TEXT VARCHAR;
BEGIN
	SQL_USUARIOS:=' ';
	SQL_STMT:=' ';
	TMP_TST_TIPOS := ' ';
	TMP_FIND_TEXT :=IN_FIND_TEXT;
	TMP_CRTST_CODIGO := IN_CRTST_CODIGO;
	IF (TMP_CRTST_CODIGO IS NULL) THEN
		TMP_CRTST_CODIGO := ' ';
	END IF;
	IF (LENGTH(TMP_CRTST_CODIGO) > 0) THEN
		TMP_TST_TIPOS := SII.F_ANCESTOR_OF(TMP_CRTST_CODIGO);
	END IF;
	IF(TMP_FIND_TEXT IS NULL)THEN
		TMP_FIND_TEXT := '';
	END IF;
	SELECT CUSU_CODIGO INTO CUSUCODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME;	
	TMP_USUARIO_CURSOR := SII.F_CGG_USUARIO_ACCESO_INFORMACION(CUSUCODIGO);
		
	LOOP
		FETCH TMP_USUARIO_CURSOR INTO TMP_ROW;		
		EXIT WHEN NOT FOUND;
		SQL_USUARIOS := SQL_USUARIOS||'S.CUSU_CODIGO = '||QUOTE_LITERAL(TMP_ROW.CUSU_CODIGO)||' OR ';				
	END LOOP;
	CLOSE TMP_USUARIO_CURSOR;
		
	SQL_USUARIOS := SUBSTRING(SQL_USUARIOS FROM 1 FOR LENGTH(SQL_USUARIOS)-3);	
	
	SQL_STMT := 'SELECT				
		COUNT(SE.CRSEG_CODIGO)
		FROM (
					SELECT				
						S.CRSEG_CODIGO,		
						S.CGG_CRSEG_CODIGO,	
						S.CRTRA_CODIGO, 
						S.CRFAS_CODIGO,        	
						S.CGG_CRFAS_CODIGO,
						S.CUSU_CODIGO,		
						S.CRSEG_DESCRIPCION, 
						S.CRSEG_ESTADO_ATENCION, 
						S.CRSEG_OBSERVACION, 
						S.CRSEG_TIPO_RESPUESTA, 
						S.CRSEG_TIPO_ACTIVIDAD, 
						S.CRSEG_FECHA_RECEPCION, 
						S.CRSEG_FECHA_REVISION, 
						S.CRSEG_FECHA_DESPACHO, 
						S.CRSEG_ESTADO_HIJO, 				
						S.CRSEG_USUARIO_INSERT,
						S.CRSEG_ESTADO,
						T.CRTRA_NUMERO,        		
						F.CRFAS_NOMBRE,
						(PER.CRPER_NOMBRES||'' ''||PER.CRPER_APELLIDO_PATERNO||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')) AS CUSU_APELLIDOS,
						SII.F_CGG_RES_SEGUIMIENTO_SELECT_USUANTERIOR(S.CGG_CRSEG_CODIGO) AS CUSU_ANTERIOR ,
						T.CRTRA_FECHA_RECEPCION,
						T.CISLA_CODIGO,
						S.CRSEG_NUMERO,		
						T.CRPJR_CODIGO,
						T.CRTRA_OBSERVACION	,
						T.CRTRA_COMUNICADO_RADIAL,
						T.CRPER_CODIGO,
						SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(T.CRPER_CODIGO) AS CRPER_AUSPICIANTE,
						T.CGG_CRPER_CODIGO,	
						SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(T.CGG_CRPER_CODIGO) AS CRPER_BENEFICIARIO,
						T.CRTRA_ANIO,
						(SELECT I.CISLA_NOMBRE FROM CGG_ISLA I WHERE I.CISLA_CODIGO = T.CISLA_CODIGO) CISLA_NOMBRE,				
						T.CRTRA_ACTIVIDAD_RESIDENCIA,
						(SELECT TST.CRTST_DESCRIPCION FROM SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST WHERE TST.CRTST_CODIGO = T.CRTST_CODIGO) CRTST_DESCRIPCION,							
						(SELECT FAS.CRFAS_NOMBRE FROM SII.CGG_RES_FASE FAS WHERE FAS.CRFAS_CODIGO = S.CGG_CRFAS_CODIGO) CRFAS_NOMBRE_ANTERIOR,				
						(SELECT PJR.CRPJR_RAZON_SOCIAL FROM SII.CGG_RES_PERSONA_JURIDICA PJR WHERE PJR.CRPJR_CODIGO = T.CRPJR_CODIGO) CRPJR_RAZON_SOCIAL,				
						T.CRTST_CODIGO			
				FROM SII.CGG_RES_SEGUIMIENTO S
				INNER JOIN SII.CGG_RES_TRAMITE T ON (S.CRTRA_CODIGO=T.CRTRA_CODIGO)
				INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = T.CRTST_CODIGO)
				INNER JOIN SII.CGG_RES_FASE F ON (S.CRFAS_CODIGO=F.CRFAS_CODIGO)
				INNER JOIN SII.CGG_USUARIO U ON (S.CUSU_CODIGO=U.CUSU_CODIGO)
				INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
				WHERE S.CRSEG_ESTADO AND F.CRFAS_ATENCION_NORMAL AND
					('||QUOTE_LITERAL(TMP_CRTST_CODIGO)||' IS NULL OR LENGTH('||QUOTE_LITERAL(TMP_CRTST_CODIGO)||') = 0 OR STRPOS('||QUOTE_LITERAL(TMP_TST_TIPOS)||',TST.CRTST_CODIGO) > 0 OR STRPOS('||QUOTE_LITERAL(TMP_TST_TIPOS)||',TST.CRTPT_CODIGO) > 0) AND
					  S.CRSEG_ESTADO_ATENCION <> 4 AND S.CRSEG_ESTADO_ATENCION <> 6 AND
					  ('||SQL_USUARIOS||')
		)
	AS SE WHERE	  			
		SII.F_STRING_IN('||QUOTE_LITERAL(TMP_FIND_TEXT)||',	   			
		COALESCE(SE.CRSEG_DESCRIPCION,'''')||'' ''||	
		COALESCE(SE.CRSEG_ESTADO_ATENCION,0)||'' ''||	
		COALESCE(SE.CRSEG_OBSERVACION,'''')||'' ''||		
		COALESCE(SE.CRSEG_TIPO_RESPUESTA,0)||'' ''||		
		COALESCE(SE.CRSEG_TIPO_ACTIVIDAD,'''')||'' ''||	
		TO_CHAR(COALESCE(SE.CRTRA_FECHA_RECEPCION,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||		
		TO_CHAR(COALESCE(SE.CRSEG_FECHA_RECEPCION,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||		
		TO_CHAR(COALESCE(SE.CRSEG_FECHA_DESPACHO,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||								
		COALESCE(SE.CRTRA_NUMERO,0)||'' ''||	        		
		COALESCE(SE.CRFAS_NOMBRE,'''')||'' ''||	
		COALESCE(SE.CUSU_APELLIDOS,'''')||'' ''||		
		COALESCE(SE.CRSEG_NUMERO,0)||'' ''||
		COALESCE(SE.CRPJR_RAZON_SOCIAL,'''')||'' ''||
		COALESCE(SE.CRTRA_OBSERVACION,'''')||'' ''||
		COALESCE(SE.CRTRA_COMUNICADO_RADIAL,'''')||'' ''||
		COALESCE(SE.CRPER_CODIGO,'''')||'' ''||
		COALESCE(SE.CRPER_BENEFICIARIO,'''')||'' ''||
		COALESCE(SE.CGG_CRPER_CODIGO,'''')||'' ''||
		COALESCE(SE.CRPER_AUSPICIANTE,'''')||'' ''||
		COALESCE(SE.CRTRA_ANIO,0)||'' ''||
		COALESCE(SE.CISLA_NOMBRE,'' '')
		) = 1';

	EXECUTE SQL_STMT INTO COUNT_ROW;	

	RETURN COUNT_ROW;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_NOTIFICACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_SEGUIMIENTO
* @PARAM IN_USER_NAME NOMBRE DEL USAURIO CONECTADO
* @param IN_CRTST_CODIGO CODIGO DE TIPO DE SOLICITUD DE TRAMITE
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_NOTIFICACION_COUNT(
IN IN_USER_NAME VARCHAR(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	COUNT_ROW INT2;
	COUNT_OFER INT2;
	SQL_USUARIOS TEXT;
	SQL_STMT TEXT;
	CUSUCODIGO VARCHAR(20);
	CUSUISLA VARCHAR(20);
	TMP_USUARIO_CURSOR REFCURSOR;
	TMP_ROW RECORD;
	TMP_TST_TIPOS VARCHAR;
	TMP_CRTST_CODIGO VARCHAR;
	TMP_FIND_TEXT TEXT;
	TMP_REF REFCURSOR;
	TMP_SW BOOLEAN;
BEGIN
	SQL_USUARIOS:=' ';
	SQL_STMT:=' ';
	TMP_TST_TIPOS := ' ';
	TMP_FIND_TEXT :='';
	TMP_CRTST_CODIGO := '';
	IF (TMP_CRTST_CODIGO IS NULL) THEN
		TMP_CRTST_CODIGO := ' ';
	END IF;
	IF (LENGTH(TMP_CRTST_CODIGO) > 0) THEN
		TMP_TST_TIPOS := SII.F_ANCESTOR_OF(TMP_CRTST_CODIGO);
	END IF;
	IF TMP_TST_TIPOS IS NULL THEN
		TMP_TST_TIPOS := ' ';
	END IF;
	IF(TMP_FIND_TEXT IS NULL)THEN
		TMP_FIND_TEXT := '';
	END IF;
	SELECT CUSU_CODIGO,CISLA_CODIGO INTO CUSUCODIGO,CUSUISLA FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME;		
	TMP_USUARIO_CURSOR := SII.F_CGG_USUARIO_ACCESO_INFORMACION(CUSUCODIGO);
	TMP_SW := FALSE;
	
	LOOP
		FETCH TMP_USUARIO_CURSOR INTO TMP_ROW;		
		EXIT WHEN NOT FOUND;
		SQL_USUARIOS := SQL_USUARIOS||'S.CUSU_CODIGO = '||QUOTE_LITERAL(TMP_ROW.CUSU_CODIGO)||' OR ';
		TMP_SW:=TRUE;
	END LOOP;
	CLOSE TMP_USUARIO_CURSOR;
	
	IF TMP_SW=TRUE THEN
		SQL_USUARIOS := SUBSTRING(SQL_USUARIOS FROM 1 FOR LENGTH(SQL_USUARIOS)-3);	
	END IF;
	
	SQL_STMT := 'SELECT	COUNT(S.CRSEG_CODIGO)
				FROM SII.CGG_RES_SEGUIMIENTO S
				INNER JOIN SII.CGG_RES_TRAMITE T ON (S.CRTRA_CODIGO=T.CRTRA_CODIGO)
				INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = T.CRTST_CODIGO)
				INNER JOIN SII.CGG_RES_FASE F ON (S.CRFAS_CODIGO=F.CRFAS_CODIGO)
				INNER JOIN SII.CGG_USUARIO U ON (S.CUSU_CODIGO=U.CUSU_CODIGO)
				INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
				WHERE S.CRSEG_ESTADO AND
					('||QUOTE_LITERAL(TMP_CRTST_CODIGO)||' IS NULL OR LENGTH('||QUOTE_LITERAL(TMP_CRTST_CODIGO)||') = 0 
					OR STRPOS('||QUOTE_LITERAL(TMP_TST_TIPOS)||',TST.CRTST_CODIGO) > 0 OR 
					STRPOS('||QUOTE_LITERAL(TMP_TST_TIPOS)||',TST.CRTPT_CODIGO) > 0) AND
					  S.CRSEG_ESTADO_ATENCION <> 4 AND S.CRSEG_ESTADO_ATENCION <> 6 AND ';
	IF TMP_SW =TRUE THEN
		SQL_STMT:=SQL_STMT||'('||SQL_USUARIOS||')';
	ELSE
		SQL_STMT:=SQL_STMT||'U.CUSU_CODIGO = '||QUOTE_LITERAL(CUSUCODIGO);
	END IF;
	EXECUTE SQL_STMT INTO COUNT_ROW;
	
	SELECT COUNT(DISTINCT(CGVCN.CGVCN_CODIGO)) INTO COUNT_OFER
	FROM SII.CGG_GEM_VACANTE CGVCN
	INNER JOIN SII.CGG_USUARIO CUSU ON CUSU.CUSU_CODIGO = CGVCN.CUSU_CODIGO
	INNER JOIN SII.CGG_SEC_USUARIO_ROL ROL ON ROL.CUSU_CODIGO = CUSU.CUSU_CODIGO	
	WHERE CGVCN_ESTADO AND CGVCN_ESTADO_OFERTA = 0 AND CGVCN.CUSU_CODIGO = CUSUCODIGO
	AND CGVCN.CISLA_CODIGO = CUSUISLA AND ROL.CUSU_CODIGO = 'CSROL_GEADM';
	
	IF COUNT_ROW IS NULL THEN COUNT_ROW:=0; END IF;
	IF COUNT_OFER IS NULL THEN COUNT_OFER:=0; END IF;
	
	OPEN TMP_REF FOR SELECT COUNT_ROW AS COUNT_TRAMITES,COUNT_OFER AS COUNT_OFERTAS;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_SELECT1
* SELECCIONA TODOS LOS SEGUIMIENTO DE LA TABLA SEGUIMIENTO QUE CORRESPONDEN AL USUARIO ESTABLECIDO.
* INTERNAMENTE LA FUNCION COMPRUEBA SI EL USUARIO ES SUSTITUIDO POR OTRO PARA PERMITIRLE EL ACCESO A LA INFORMACION DEL USUARIO PRINCIPAL.
* ESTA FUNCION DEVUELVE TODOS LOS SEGUIMIENTO CUYO ESTADO SEAN DIFERENTE A DESPACHADO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_SELECT_VEH(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;		
	TMP_USUARIO_CURSOR REFCURSOR;	
	SQL_STMT TEXT;
	SQL_USUARIOS TEXT;
	CUSUCODIGO VARCHAR(20);
	TMP_ROW RECORD;
BEGIN		 
	
	SQL_USUARIOS:=' ';
	SQL_STMT:=' ';
			
	SELECT CUSU_CODIGO INTO CUSUCODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME;	
	TMP_USUARIO_CURSOR := SII.F_CGG_USUARIO_ACCESO_INFORMACION(CUSUCODIGO);
		
	LOOP
		FETCH TMP_USUARIO_CURSOR INTO TMP_ROW;		
		EXIT WHEN NOT FOUND;
		SQL_USUARIOS := SQL_USUARIOS||'S.CUSU_CODIGO = '||QUOTE_LITERAL(TMP_ROW.CUSU_CODIGO)||' OR ';				
	END LOOP;
	CLOSE TMP_USUARIO_CURSOR;
		
	SQL_USUARIOS := SUBSTRING(SQL_USUARIOS FROM 1 FOR LENGTH(SQL_USUARIOS)-3);	
	
	SQL_STMT:='SELECT				
		CRSEG_CODIGO,		
		CGG_CRSEG_CODIGO,	
		CRTRA_CODIGO, 
		CRFAS_CODIGO,        	
		CGG_CRFAS_CODIGO,
		CUSU_CODIGO,		
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 		
		CRSEG_USUARIO_INSERT,
		CRTRA_NUMERO,        		
		CRFAS_NOMBRE,
		CUSU_APELLIDOS,		
		CUSU_ANTERIOR,
		CRTRA_FECHA_RECEPCION,
		CISLA_CODIGO,
		CRSEG_NUMERO,		
		CRPJR_CODIGO,
		CRTRA_OBSERVACION,
		CRTRA_COMUNICADO_RADIAL,
		CRPER_CODIGO,
		CRPER_BENEFICIARIO,
		CGG_CRPER_CODIGO,	
		CRPER_AUSPICIANTE,
		CRTRA_ANIO,
		CISLA_NOMBRE,				
		CRTRA_ACTIVIDAD_RESIDENCIA,
		CRTST_DESCRIPCION,							
		CRFAS_NOMBRE_ANTERIOR,				
		CRPJR_RAZON_SOCIAL,
		CRTST_CODIGO,
		CRPRO_CODIGO,
		SEGUIMIENTO_HTML,
		CRTRA_FOLIO,
		CRTRA_DIAS_PERMANENCIA,
		VEHICULO
	FROM (
				SELECT				
				S.CRSEG_CODIGO,		
				S.CGG_CRSEG_CODIGO,	
				S.CRTRA_CODIGO, 
				S.CRFAS_CODIGO,        	
				S.CGG_CRFAS_CODIGO,
				S.CUSU_CODIGO,		
				S.CRSEG_DESCRIPCION, 
				S.CRSEG_ESTADO_ATENCION, 
				S.CRSEG_OBSERVACION, 
				S.CRSEG_TIPO_RESPUESTA, 
				S.CRSEG_TIPO_ACTIVIDAD, 
				S.CRSEG_FECHA_RECEPCION, 
				S.CRSEG_FECHA_REVISION, 
				S.CRSEG_FECHA_DESPACHO, 
				S.CRSEG_ESTADO_HIJO, 				
				S.CRSEG_USUARIO_INSERT,
				S.CRSEG_ESTADO,
				T.CRTRA_NUMERO,        		
				F.CRFAS_NOMBRE,
				COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,'''') AS CUSU_APELLIDOS,
				SII.F_CGG_RES_SEGUIMIENTO_SELECT_USUANTERIOR(S.CGG_CRSEG_CODIGO) AS CUSU_ANTERIOR ,
				T.CRTRA_FECHA_RECEPCION,
				T.CISLA_CODIGO,
				S.CRSEG_NUMERO,		
				T.CRPJR_CODIGO,
				T.CRTRA_OBSERVACION	,
				T.CRTRA_COMUNICADO_RADIAL,
				T.CRPER_CODIGO,
				SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(T.CRPER_CODIGO) AS CRPER_AUSPICIANTE,
				T.CGG_CRPER_CODIGO,	
				SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(T.CGG_CRPER_CODIGO) AS CRPER_BENEFICIARIO,
				T.CRTRA_ANIO,
				(SELECT I.CISLA_NOMBRE FROM CGG_ISLA I WHERE I.CISLA_CODIGO = T.CISLA_CODIGO) CISLA_NOMBRE,				
				T.CRTRA_ACTIVIDAD_RESIDENCIA,
				(SII.F_TRAMITE_TIPO(T.CRTST_CODIGO)) CRTST_DESCRIPCION,							
				(SELECT FAS.CRFAS_NOMBRE FROM SII.CGG_RES_FASE FAS WHERE FAS.CRFAS_CODIGO = S.CGG_CRFAS_CODIGO) CRFAS_NOMBRE_ANTERIOR,				
				(SELECT PJR.CRPJR_RAZON_SOCIAL FROM SII.CGG_RES_PERSONA_JURIDICA PJR WHERE PJR.CRPJR_CODIGO = T.CRPJR_CODIGO) CRPJR_RAZON_SOCIAL,				
				T.CRTST_CODIGO,
				T.CRPRO_CODIGO,
				SII.F_CGG_RES_SEGUIMIENTO_HTML(S.CRSEG_CODIGO) SEGUIMIENTO_HTML,
				T.CRTRA_FOLIO,
				T.CRTRA_DIAS_PERMANENCIA,
				(SELECT COALESCE(CVVEH_NOMBRE,'''')||'' ''||COALESCE(CVVEH_PLACA,'''')||'' ''||COALESCE(CVVEH_CHASIS,'''') FROM SII.CGG_VEH_VEHICULO WHERE CVVEH_CODIGO = T.CVVEH_CODIGO) VEHICULO
			FROM SII.CGG_RES_SEGUIMIENTO S
			INNER JOIN SII.CGG_RES_TRAMITE T ON (S.CRTRA_CODIGO=T.CRTRA_CODIGO)
			INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON TST.CRTST_CODIGO = T.CRTST_CODIGO AND TST.CRTPT_CODIGO = ''CRTPT2''
			INNER JOIN SII.CGG_RES_FASE F ON (S.CRFAS_CODIGO=F.CRFAS_CODIGO)
			INNER JOIN SII.CGG_USUARIO U ON (S.CUSU_CODIGO=U.CUSU_CODIGO)
			INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
			WHERE S.CRSEG_ESTADO = TRUE AND
				  S.CRSEG_ESTADO_ATENCION <> 4 AND
				  ('||SQL_USUARIOS||')
	)AS SE WHERE	  			
	SII.F_STRING_IN('||QUOTE_LITERAL(IN_FIND_TEXT)||',	   			
	COALESCE(SE.CRSEG_DESCRIPCION,'''')||'' ''||	
	COALESCE(SE.CRSEG_ESTADO_ATENCION,0)||'' ''||	
	COALESCE(SE.CRSEG_OBSERVACION,'''')||'' ''||		
	COALESCE(SE.CRSEG_TIPO_RESPUESTA,0)||'' ''||		
	COALESCE(SE.CRSEG_TIPO_ACTIVIDAD,'''')||'' ''||	
	TO_CHAR(COALESCE(SE.CRTRA_FECHA_RECEPCION,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||		
	TO_CHAR(COALESCE(SE.CRSEG_FECHA_RECEPCION,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||		
	TO_CHAR(COALESCE(SE.CRSEG_FECHA_DESPACHO,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||								
	COALESCE(SE.CRTRA_NUMERO,0)||'' ''||	        		
	COALESCE(SE.CRFAS_NOMBRE,'''')||'' ''||	
	COALESCE(SE.CUSU_APELLIDOS,'''')||'' ''||		
	COALESCE(SE.CRSEG_NUMERO,0)||'' ''||
	COALESCE(SE.CRPJR_RAZON_SOCIAL,'''')||'' ''||
	COALESCE(SE.CRTRA_OBSERVACION,'''')||'' ''||
	COALESCE(SE.CRTRA_COMUNICADO_RADIAL,'''')||'' ''||
	COALESCE(SE.CRPER_CODIGO,'''')||'' ''||
	COALESCE(SE.CRPER_BENEFICIARIO,'''')||'' ''||
	COALESCE(SE.CGG_CRPER_CODIGO,'''')||'' ''||
	COALESCE(SE.CRPER_AUSPICIANTE,'''')||'' ''||
	COALESCE(SE.CRTRA_ANIO,0)||'' ''||
	COALESCE(SE.CISLA_NOMBRE,'' '')
	) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	
	OPEN TMP_REF FOR EXECUTE SQL_STMT;
	
	RETURN NEXT TMP_REF;					
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_COUNT1
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_SEGUIMIENTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_COUNT_VEH(
	IN IN_FIND_TEXT TEXT,
	IN IN_USER_NAME VARCHAR(50)
)RETURNS INT AS
$$
DECLARE
	COUNT_ROW INT2;
	SQL_USUARIOS TEXT;
	SQL_STMT TEXT;
	CUSUCODIGO VARCHAR(20);
	TMP_USUARIO_CURSOR REFCURSOR;
	TMP_ROW RECORD;
BEGIN
SQL_USUARIOS:=' ';
	SQL_STMT:=' ';
			
	SELECT CUSU_CODIGO INTO CUSUCODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = IN_USER_NAME;	
	TMP_USUARIO_CURSOR := SII.F_CGG_USUARIO_ACCESO_INFORMACION(CUSUCODIGO);
		
	LOOP
		FETCH TMP_USUARIO_CURSOR INTO TMP_ROW;		
		EXIT WHEN NOT FOUND;
		SQL_USUARIOS := SQL_USUARIOS||'S.CUSU_CODIGO = '||QUOTE_LITERAL(TMP_ROW.CUSU_CODIGO)||' OR ';				
	END LOOP;
	CLOSE TMP_USUARIO_CURSOR;
		
	SQL_USUARIOS := SUBSTRING(SQL_USUARIOS FROM 1 FOR LENGTH(SQL_USUARIOS)-3);	
	
	SQL_STMT := 'SELECT				
		COUNT(SE.CRSEG_CODIGO)
		FROM (
					SELECT				
						S.CRSEG_CODIGO,		
						S.CGG_CRSEG_CODIGO,	
						S.CRTRA_CODIGO, 
						S.CRFAS_CODIGO,        	
						S.CGG_CRFAS_CODIGO,
						S.CUSU_CODIGO,		
						S.CRSEG_DESCRIPCION, 
						S.CRSEG_ESTADO_ATENCION, 
						S.CRSEG_OBSERVACION, 
						S.CRSEG_TIPO_RESPUESTA, 
						S.CRSEG_TIPO_ACTIVIDAD, 
						S.CRSEG_FECHA_RECEPCION, 
						S.CRSEG_FECHA_REVISION, 
						S.CRSEG_FECHA_DESPACHO, 
						S.CRSEG_ESTADO_HIJO, 				
						S.CRSEG_USUARIO_INSERT,
						S.CRSEG_ESTADO,
						T.CRTRA_NUMERO,        		
						F.CRFAS_NOMBRE,
						(PER.CRPER_NOMBRES||'' ''||PER.CRPER_APELLIDO_PATERNO||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,'''')) AS CUSU_APELLIDOS,
						SII.F_CGG_RES_SEGUIMIENTO_SELECT_USUANTERIOR(S.CGG_CRSEG_CODIGO) AS CUSU_ANTERIOR ,
						T.CRTRA_FECHA_RECEPCION,
						T.CISLA_CODIGO,
						S.CRSEG_NUMERO,		
						T.CRPJR_CODIGO,
						T.CRTRA_OBSERVACION	,
						T.CRTRA_COMUNICADO_RADIAL,
						T.CRPER_CODIGO,
						SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(T.CRPER_CODIGO) AS CRPER_AUSPICIANTE,
						T.CGG_CRPER_CODIGO,	
						SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(T.CGG_CRPER_CODIGO) AS CRPER_BENEFICIARIO,
						T.CRTRA_ANIO,
						(SELECT I.CISLA_NOMBRE FROM CGG_ISLA I WHERE I.CISLA_CODIGO = T.CISLA_CODIGO) CISLA_NOMBRE,				
						T.CRTRA_ACTIVIDAD_RESIDENCIA,
						(SELECT TST.CRTST_DESCRIPCION FROM SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST WHERE TST.CRTST_CODIGO = T.CRTST_CODIGO) CRTST_DESCRIPCION,							
						(SELECT FAS.CRFAS_NOMBRE FROM SII.CGG_RES_FASE FAS WHERE FAS.CRFAS_CODIGO = S.CGG_CRFAS_CODIGO) CRFAS_NOMBRE_ANTERIOR,				
						(SELECT PJR.CRPJR_RAZON_SOCIAL FROM SII.CGG_RES_PERSONA_JURIDICA PJR WHERE PJR.CRPJR_CODIGO = T.CRPJR_CODIGO) CRPJR_RAZON_SOCIAL,				
						T.CRTST_CODIGO			
				FROM SII.CGG_RES_SEGUIMIENTO S
				INNER JOIN SII.CGG_RES_TRAMITE T ON (S.CRTRA_CODIGO=T.CRTRA_CODIGO)
				INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON TST.CRTST_CODIGO = T.CRTST_CODIGO AND TST.CRTPT_CODIGO = ''CRTPT2''
				INNER JOIN SII.CGG_RES_FASE F ON (S.CRFAS_CODIGO=F.CRFAS_CODIGO)
				INNER JOIN SII.CGG_USUARIO U ON (S.CUSU_CODIGO=U.CUSU_CODIGO)
				INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
				WHERE S.CRSEG_ESTADO = TRUE AND
					  S.CRSEG_ESTADO_ATENCION <> 4 AND
					  ('||SQL_USUARIOS||')
		)
	AS SE WHERE	  			
		SII.F_STRING_IN('||QUOTE_LITERAL(IN_FIND_TEXT)||',	   			
		COALESCE(SE.CRSEG_DESCRIPCION,'''')||'' ''||	
		COALESCE(SE.CRSEG_ESTADO_ATENCION,0)||'' ''||	
		COALESCE(SE.CRSEG_OBSERVACION,'''')||'' ''||		
		COALESCE(SE.CRSEG_TIPO_RESPUESTA,0)||'' ''||		
		COALESCE(SE.CRSEG_TIPO_ACTIVIDAD,'''')||'' ''||	
		TO_CHAR(COALESCE(SE.CRTRA_FECHA_RECEPCION,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||		
		TO_CHAR(COALESCE(SE.CRSEG_FECHA_RECEPCION,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||		
		TO_CHAR(COALESCE(SE.CRSEG_FECHA_DESPACHO,CURRENT_TIMESTAMP),'||QUOTE_LITERAL('DD/MM/YYYY')||')||'' ''||								
		COALESCE(SE.CRTRA_NUMERO,0)||'' ''||	        		
		COALESCE(SE.CRFAS_NOMBRE,'''')||'' ''||	
		COALESCE(SE.CUSU_APELLIDOS,'''')||'' ''||		
		COALESCE(SE.CRSEG_NUMERO,0)||'' ''||
		COALESCE(SE.CRPJR_RAZON_SOCIAL,'''')||'' ''||
		COALESCE(SE.CRTRA_OBSERVACION,'''')||'' ''||
		COALESCE(SE.CRTRA_COMUNICADO_RADIAL,'''')||'' ''||
		COALESCE(SE.CRPER_CODIGO,'''')||'' ''||
		COALESCE(SE.CRPER_BENEFICIARIO,'''')||'' ''||
		COALESCE(SE.CGG_CRPER_CODIGO,'''')||'' ''||
		COALESCE(SE.CRPER_AUSPICIANTE,'''')||'' ''||
		COALESCE(SE.CRTRA_ANIO,0)||'' ''||
		COALESCE(SE.CISLA_NOMBRE,'' '')
		) = 1';

	EXECUTE SQL_STMT INTO COUNT_ROW;	

	RETURN COUNT_ROW;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_SELECT_USUANTERIOR 
* SELECCIONA EL USUARIO ANTERIOR DEL SEGUIMIENTO
* @param IN_CGG_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_SELECT_USUANTERIOR(
IN IN_CGG_CRSEG_CODIGO VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
	CUSUNOMBRES VARCHAR;
BEGIN
	SELECT PER.CRPER_NOMBRES||' '||PER.CRPER_APELLIDO_PATERNO||' '||COALESCE(PER.CRPER_APELLIDO_MATERNO,'')
	INTO CUSUNOMBRES
	FROM SII.CGG_RES_SEGUIMIENTO S	
	INNER JOIN SII.CGG_USUARIO U ON (S.CUSU_CODIGO=U.CUSU_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
	WHERE S.CRSEG_CODIGO = IN_CGG_CRSEG_CODIGO;
	RETURN CUSUNOMBRES;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_SEGUIMIENTO
* @param IN_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO
* @param IN_CGG_CRSEG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE DE SEGUIMIENTO
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASE ANTERIOR
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRSEG_DESCRIPCION DESCRIPCION DEL SEGUIMIENTO
* @param IN_CRSEG_ESTADO_ATENCION VALORES QUE PUEDE TOMAR UN SEGUIMIENTO
0 - RECIBIDO
1 - REVISADO
2 - DISTRIBUIDO
3 - PENDIENTE
4 - DESPACHADO
5 - FINALIZADO 
6 - INHABILITADO
* @param IN_CRSEG_OBSERVACION DATOS DE INTERES APUNTADOS EN EL SEGUIMIENTO  - HISTORIAL FORMATO JSON
* @param IN_CRSEG_TIPO_RESPUESTA VALORES FINALES RESULTADO DEL SEGUIMIENTO
-1 - INDETERMINADO
0 - NEGADO
1 - APROBADO

* @param IN_CRSEG_TIPO_ACTIVIDAD ACTIVIDAD SUGERIDA EN EL SEGUIMIENTO ANTERIOR
* @param IN_CRSEG_FECHA_RECEPCION FECHA DE RECEPCION DEL SEGUIMIENTO
* @param IN_CRSEG_FECHA_REVISION FECHA DE REVISION DEL SEGUIMIENTO
* @param IN_CRSEG_FECHA_DESPACHO FECHA DE ATENCION Y DESPACHO DEL TRAMITE GENERANDO UN NUEVO SEGUIMIENTO
* @param IN_CRSEG_ESTADO_HIJO ESTADO DE LAS RESPUESTAS DE LOS NODOS HIJOS
-1 - SIN HIJOS
0 - SIN RESPUESTAS
1 - RESPUESTA PARCIAL
2 - RESPUESTA TOTAL
* @param IN_CRSEG_FECHA_REAPERTURA FECHA DE REAPERTURA DEL SEGUIMIENTO
* @param IN_CRSEG_VECES_REVISION NUMERO DE VECES QUE SE HA REVISADO EL SEGUIMIENTO
* @param IN_CRSEG_NUMERO NUMERO ASIGNADO AL SEGUIMIENTO
* @param IN_CRSEG_ESTADO ESTADO DEL REGISTRO
* @param IN_CRSEG_USUARIO_INSERT USUARIO QUE REGISTRO LA INFORMACION
* @param IN_CRSEG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_INSERT_1(
IN IN_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CRSEG_CODIGO%TYPE, 
IN IN_CGG_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRSEG_CODIGO%TYPE, 
IN IN_CRTRA_CODIGO SII.CGG_RES_SEGUIMIENTO.CRTRA_CODIGO%TYPE, 
IN IN_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CRFAS_CODIGO%TYPE, 
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_SEGUIMIENTO.CGG_CRFAS_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_SEGUIMIENTO.CUSU_CODIGO%TYPE, 
IN IN_CRSEG_DESCRIPCION SII.CGG_RES_SEGUIMIENTO.CRSEG_DESCRIPCION%TYPE, 
IN IN_CRSEG_ESTADO_ATENCION SII.CGG_RES_SEGUIMIENTO.CRSEG_ESTADO_ATENCION%TYPE, 
IN IN_CRSEG_OBSERVACION SII.CGG_RES_SEGUIMIENTO.CRSEG_OBSERVACION%TYPE, 
IN IN_CRSEG_TIPO_RESPUESTA SII.CGG_RES_SEGUIMIENTO.CRSEG_TIPO_RESPUESTA%TYPE, 
IN IN_CRSEG_TIPO_ACTIVIDAD SII.CGG_RES_SEGUIMIENTO.CRSEG_TIPO_ACTIVIDAD%TYPE, 
IN IN_CRSEG_FECHA_RECEPCION SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_RECEPCION%TYPE, 
IN IN_CRSEG_FECHA_REVISION SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_REVISION%TYPE, 
IN IN_CRSEG_FECHA_DESPACHO SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_DESPACHO%TYPE, 
IN IN_CRSEG_ESTADO_HIJO SII.CGG_RES_SEGUIMIENTO.CRSEG_ESTADO_HIJO%TYPE, 
IN IN_CRSEG_FECHA_REAPERTURA SII.CGG_RES_SEGUIMIENTO.CRSEG_FECHA_REAPERTURA%TYPE, 
IN IN_CRSEG_VECES_REVISION SII.CGG_RES_SEGUIMIENTO.CRSEG_VECES_REVISION%TYPE, 
IN IN_CRSEG_NUMERO SII.CGG_RES_SEGUIMIENTO.CRSEG_NUMERO%TYPE, 
IN IN_CRSEG_ESTADO SII.CGG_RES_SEGUIMIENTO.CRSEG_ESTADO%TYPE, 
IN IN_CRSEG_USUARIO_INSERT SII.CGG_RES_SEGUIMIENTO.CRSEG_USUARIO_INSERT%TYPE, 
IN IN_CRSEG_USUARIO_UPDATE SII.CGG_RES_SEGUIMIENTO.CRSEG_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_NUM NUMERIC;
TMP_REC RECORD;
TMP_COUNT INTEGER;
TMP_OUT_KEY VARCHAR;
TMP_EXIST INTEGER DEFAULT 0;
BEGIN
	IF (UPPER(IN_CRSEG_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_SEGUIMIENTO','CRSEG_CODIGO','CRSEG') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRSEG_CODIGO;
	END IF;
	
	IF(IN_CRSEG_NUMERO = 0)THEN
		SELECT SII.F_NUMERO('CGG_RES_SEGUIMIENTO','CRSEG_NUMERO','EXTRACT( YEAR FROM CRSEG_FECHA_INSERT)') INTO TMP_NUM;	
	ELSE
		TMP_NUM = IN_CRSEG_NUMERO;
	END IF;	
	
	SELECT
	COUNT(CRFAS_CODIGO) INTO TMP_EXIST
	FROM CGG_RES_SEGUIMIENTO RES
	WHERE CRTRA_CODIGO = IN_CRTRA_CODIGO AND CRFAS_CODIGO = IN_CRFAS_CODIGO;

	IF (TMP_EXIST = 0) THEN

		INSERT INTO SII.CGG_RES_SEGUIMIENTO(
			CRSEG_CODIGO, 
			CGG_CRSEG_CODIGO, 
			CRTRA_CODIGO, 
			CRFAS_CODIGO, 
			CGG_CRFAS_CODIGO, 
			CUSU_CODIGO, 
			CRSEG_DESCRIPCION, 
			CRSEG_ESTADO_ATENCION, 
			CRSEG_OBSERVACION, 
			CRSEG_TIPO_RESPUESTA, 
			CRSEG_TIPO_ACTIVIDAD, 
			CRSEG_FECHA_RECEPCION, 
			CRSEG_FECHA_REVISION, 
			CRSEG_FECHA_DESPACHO, 
			CRSEG_ESTADO_HIJO, 
			CRSEG_FECHA_REAPERTURA, 
			CRSEG_VECES_REVISION, 
			CRSEG_NUMERO, 
			CRSEG_ESTADO, 
			CRSEG_FECHA_INSERT, 
			CRSEG_USUARIO_INSERT, 
			CRSEG_FECHA_UPDATE, 
			CRSEG_USUARIO_UPDATE
		) VALUES (
			OUT_KEY, 
			IN_CGG_CRSEG_CODIGO, 
			IN_CRTRA_CODIGO, 
			IN_CRFAS_CODIGO, 
			IN_CGG_CRFAS_CODIGO, 
			IN_CUSU_CODIGO, 
			IN_CRSEG_DESCRIPCION, 
			IN_CRSEG_ESTADO_ATENCION, 
			IN_CRSEG_OBSERVACION, 
			IN_CRSEG_TIPO_RESPUESTA, 
			IN_CRSEG_TIPO_ACTIVIDAD, 
			IN_CRSEG_FECHA_RECEPCION, 
			IN_CRSEG_FECHA_REVISION, 
			IN_CRSEG_FECHA_DESPACHO, 
			IN_CRSEG_ESTADO_HIJO, 
			IN_CRSEG_FECHA_REAPERTURA, 
			IN_CRSEG_VECES_REVISION, 
			TMP_NUM, 
			IN_CRSEG_ESTADO, 
			CURRENT_TIMESTAMP, 
			IN_CRSEG_USUARIO_INSERT, 
			CURRENT_TIMESTAMP, 
			IN_CRSEG_USUARIO_UPDATE
		);
		
		FOR TMP_REC IN (SELECT CJCRI_CODIGO,CJCRI_REQUERIDO FROM SII.CGG_JUR_CRITERIO WHERE CJCRI_ESTADO AND CRFAS_CODIGO = IN_CRFAS_CODIGO) LOOP
			SELECT COUNT(*) FROM CGG_JUR_SEGUIMIENTO_CRITERIO INTO TMP_COUNT
			WHERE CRSEG_CODIGO = IN_CRSEG_CODIGO AND CJCRI_CODIGO = TMP_REC.CJCRI_CODIGO AND CJSGC_ESTADO;
			IF TMP_COUNT = 0 THEN 
				SELECT SII.F_CGG_JUR_SEGUIMIENTO_CRITERIO_INSERT(
					'KEYGEN'::VARCHAR,
					OUT_KEY,
					TMP_REC.CJCRI_CODIGO,
					FALSE,
					NULL::TEXT,
					NULL::TEXT,
					NULL::VARCHAR,
					NULL::BYTEA,
					TRUE,
					IN_CRSEG_USUARIO_INSERT,
					IN_CRSEG_USUARIO_INSERT
				) INTO TMP_OUT_KEY;
			END IF;	
		END LOOP;
	END IF;
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_SELECT_AUSPICIANTE
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA EN BASE A SU CRPER_CODIGO
* @param IN_CRPER_CODIGO CODIGO DE IDENTIFICACION DEL AUSPICIANTE.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(
IN IN_CRPER_CODIGO VARCHAR
)RETURNS VARCHAR  AS
$$
DECLARE
	TMP_CRPER_AUSPICIANTE VARCHAR(500);
BEGIN
    SELECT COALESCE(P.CRPER_NOMBRES,'')||' '||COALESCE(P.CRPER_APELLIDO_PATERNO,'')||' '||COALESCE(P.CRPER_APELLIDO_MATERNO,'') 	
	INTO TMP_CRPER_AUSPICIANTE
	FROM SII.CGG_RES_PERSONA P 
	WHERE CRPER_ESTADO AND 
		P.CRPER_CODIGO= IN_CRPER_CODIGO;
	RETURN TMP_CRPER_AUSPICIANTE;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCIONA TODOS LOS SEGUIMIENTOS DE UN SEGUIMIENTO DE MANERA RECURSIVA FORMANDO UN HTML DE SUS HIJOS A MODO DE ARBOL DISPUESTOS EN UNA TABLA.
*@param IN_CRSEG_CODIGO CODIGO DE SEGUIMIENTO.
*@return TEXT  CADENA DE TEXTO EN FORMATO HTML CON INFORMACION DEL SEGUIMIENTO DE UN TAREA.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_HTML(
IN IN_CRSEG_CODIGO VARCHAR
)RETURNS TEXT  AS
$$
DECLARE	
	TMP_HTML TEXT;	
BEGIN	
	TMP_HTML:='';
	TMP_HTML:= SII.F_CGG_RES_SEGUIMIENTO_HIJOS_HTML(IN_CRSEG_CODIGO,' ',' ');
	IF(LENGTH(TRIM(TMP_HTML))=0)THEN
		TMP_HTML :='';
	ELSE 		 		
		TMP_HTML:='<table id="box-table-a" style="width: 100%;" border="0"><tbody><tr><th style="width: 20%;">Seguimiento</th><th style="width: 20%;">Recepcion</th><th style="width: 20%;">Revision</th><th style="width: 20%;">Despacho</th><th style="width: 20%;">Respuesta</th><th style="width: 20%;">Estado</th></tr>'||TMP_HTML||'</tbody></table>';			
	END IF;
	
	RETURN TMP_HTML;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SEGUIMIENTO_HIJOS_HTML SELECCIONA TODOS LOS SEGUIMIENTOS HIJOS DE UN SEGUIMIENTO RECURSIVAMENTE PARA INFORMAR DE SU ESTADO
*@param IN_CRSEG_CODIGO CODIGO DE SEGUIMIENTO.
*@param IN_SEGUIMIENTO_HIJOS_HTML CADENA DE TEXTO PARA INICIALIZACION DEL HTML DE RESPUESTA.
*@param IN_TAB_SPACE CADENA DE TEXTO DEL SANGRADO PARA EL HTML DE SEGUIMIENTO QUE SE MUESTRE A MANERA DE ARBOL.
* @return TEXT CADENA DE DATOS CON INFORMACION DEL SEGUIMIENTO EN FORMATO HTML.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_HIJOS_HTML(
IN IN_CRSEG_CODIGO VARCHAR,
IN IN_SEGUIMIENTO_HIJOS_HTML TEXT,
IN IN_TAB_SPACE VARCHAR
)RETURNS TEXT  AS
$$
DECLARE
	TMP_ROW RECORD;
	TMP_SEGUIMIENTO_HTML TEXT;
	TMP_TAB VARCHAR(1000);
BEGIN
	TMP_SEGUIMIENTO_HTML:=' ';
	TMP_SEGUIMIENTO_HTML:=IN_SEGUIMIENTO_HIJOS_HTML;
	TMP_TAB:='';
	FOR TMP_ROW IN SELECT
		CRSEG_CODIGO, 
		CGG_CRSEG_CODIGO, 
		CRTRA_CODIGO, 
		CRFAS_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA,
		(SELECT ENU.CENUM_DESCRIPCION FROM SII.CGG_ENUMERADOR ENU WHERE ENU.CENUM_TABLA ='CGG_RES_SEGUIMIENTO' AND CENUM_COLUMNA='CRSEG_TIPO_RESPUESTA' AND ENU.CENUM_VALOR=CRSEG_TIPO_RESPUESTA) CRSEG_TIPO_RESPUESTA_DESCRIPCION,
		CRSEG_TIPO_ACTIVIDAD, 
		TO_CHAR(CRSEG_FECHA_RECEPCION,'DD/MM/YYYY') CRSEG_FECHA_RECEPCION, 
		TO_CHAR(CRSEG_FECHA_REVISION,'DD/MM/YYYY') CRSEG_FECHA_REVISION, 
		TO_CHAR(CRSEG_FECHA_DESPACHO,'DD/MM/YYYY') CRSEG_FECHA_DESPACHO,		
		(SELECT ENU.CENUM_DESCRIPCION FROM SII.CGG_ENUMERADOR ENU WHERE ENU.CENUM_TABLA ='CGG_RES_SEGUIMIENTO' AND CENUM_COLUMNA='CRSEG_ESTADO_HIJO' AND ENU.CENUM_VALOR=CRSEG_ESTADO_HIJO) CRSEG_ESTADO_HIJO_DESCRIPCION,                        				
		CRSEG_ESTADO_HIJO, 
		CRSEG_FECHA_REAPERTURA, 
		CRSEG_VECES_REVISION, 
		CRSEG_NUMERO, 
		CRSEG_ESTADO, 
		CRSEG_FECHA_INSERT, 
		CRSEG_USUARIO_INSERT, 
		CRSEG_FECHA_UPDATE, 
		CRSEG_USUARIO_UPDATE
	FROM SII.CGG_RES_SEGUIMIENTO
	WHERE CGG_CRSEG_CODIGO = IN_CRSEG_CODIGO LOOP		
		TMP_TAB:=TMP_TAB||IN_TAB_SPACE;					
		TMP_SEGUIMIENTO_HTML := TMP_SEGUIMIENTO_HTML ||'<tr><td>'||TMP_TAB||TMP_ROW.CRSEG_NUMERO||'</td><td>'||TMP_ROW.CRSEG_FECHA_RECEPCION||'</td><td>'||COALESCE(TMP_ROW.CRSEG_FECHA_REVISION,' ')||'</td><td>'||COALESCE(TMP_ROW.CRSEG_FECHA_DESPACHO,' ')||'</td><td>'||COALESCE(TMP_ROW.CRSEG_TIPO_RESPUESTA_DESCRIPCION,' ')||'</td><td>'||COALESCE(TMP_ROW.CRSEG_ESTADO_HIJO_DESCRIPCION,' ')||'</td></tr>';		
		TMP_SEGUIMIENTO_HTML := SII.F_CGG_RES_SEGUIMIENTO_HIJOS_HTML(TMP_ROW.CRSEG_CODIGO,TMP_SEGUIMIENTO_HTML,TMP_TAB||'&emsp;');			
	END LOOP;		
	RETURN TMP_SEGUIMIENTO_HTML;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_PADRE(
IN_CRTRA_CODIGO CHARACTER VARYING
)RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		SEG.CRSEG_CODIGO, 
		SEG.CGG_CRSEG_CODIGO, 
		SEG.CRTRA_CODIGO, 
		SEG.CRFAS_CODIGO, 
		SEG.CGG_CRFAS_CODIGO, 
		SEG.CUSU_CODIGO, 
		SEG.CRSEG_DESCRIPCION, 
		SEG.CRSEG_ESTADO_ATENCION, 
		SEG.CRSEG_OBSERVACION, 
		SEG.CRSEG_TIPO_RESPUESTA, 
		SEG.CRSEG_TIPO_ACTIVIDAD, 
		SEG.CRSEG_FECHA_RECEPCION, 
		SEG.CRSEG_FECHA_REVISION, 
		SEG.CRSEG_FECHA_DESPACHO, 
		SEG.CRSEG_ESTADO_HIJO, 
		SEG.CRSEG_FECHA_REAPERTURA, 
		SEG.CRSEG_VECES_REVISION, 
		SEG.CRSEG_NUMERO, 
		SEG.CRSEG_ESTADO, 
		SEG.CRSEG_FECHA_INSERT, 
		SEG.CRSEG_USUARIO_INSERT, 
		SEG.CRSEG_FECHA_UPDATE, 
		SEG.CRSEG_USUARIO_UPDATE
	FROM SII.CGG_RES_SEGUIMIENTO SEG
	INNER JOIN SII.CGG_RES_FASE FAS ON SEG.CRFAS_CODIGO = FAS.CRFAS_CODIGO AND FAS.CRFAS_ESTADO
	WHERE SEG.CRSEG_ESTADO AND 
	     SEG.CRTRA_CODIGO = IN_CRTRA_CODIGO AND 
		SEG.CGG_CRSEG_CODIGO IS NULL
		ORDER BY FAS.CRFAS_ORDEN;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

  /**FUNCION SII.F_CGG_RES_SEGUIMIENTO_TRAMITE
  *SELECCIONA UN SEGUIMIENTO CON INFORMAICON DE TRAMITE Y OTRAS TABLAS RELACIONADAS.  
  * @param IN_CRSEG_CODIGO CODIGO DE SEGUIMIENTO.
  *@return CURSOR CON INFORMACION.
  */
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SEGUIMIENTO_TRAMITE(
IN IN_CRSEG_CODIGO SII.CGG_RES_SEGUIMIENTO.CRSEG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;		
	TMP_USUARIO_CURSOR REFCURSOR;	
	SQL_STMT TEXT;	
BEGIN		 
	
	SQL_STMT:='SELECT				
		CRSEG_CODIGO,		
		CGG_CRSEG_CODIGO,	
		CRTRA_CODIGO, 
		CRFAS_CODIGO,        	
		CGG_CRFAS_CODIGO,
		CUSU_CODIGO,		
		CRSEG_DESCRIPCION, 
		CRSEG_ESTADO_ATENCION, 
		CRSEG_OBSERVACION, 
		CRSEG_TIPO_RESPUESTA, 
		CRSEG_TIPO_ACTIVIDAD, 
		CRSEG_FECHA_RECEPCION, 
		CRSEG_FECHA_REVISION, 
		CRSEG_FECHA_DESPACHO, 
		CRSEG_ESTADO_HIJO, 		
		CRSEG_USUARIO_INSERT,
		CRTRA_NUMERO,        		
		CRFAS_NOMBRE,
		CUSU_APELLIDOS,		
		CUSU_ANTERIOR,
		CRTRA_FECHA_RECEPCION,
		CISLA_CODIGO,
		CRSEG_NUMERO,		
		CRPJR_CODIGO,
		CRTRA_OBSERVACION,
		CRTRA_COMUNICADO_RADIAL,
		CRPER_CODIGO,
		CRPER_BENEFICIARIO,
		CGG_CRPER_CODIGO,	
		CRPER_AUSPICIANTE,
		CRTRA_ANIO,
		CISLA_NOMBRE,				
		CRTRA_ACTIVIDAD_RESIDENCIA,
		CRTST_DESCRIPCION,							
		CRFAS_NOMBRE_ANTERIOR,				
		CRPJR_RAZON_SOCIAL,
		CRTST_CODIGO,
		CRPRO_CODIGO,
		SEGUIMIENTO_HTML,
		CRTRA_FOLIO,
		CRTRA_DIAS_PERMANENCIA,
		VEHICULO,
		CRTRA_FECHA_INGRESO,
		CRTRA_FECHA_SALIDA,
		CRTRA_GRUPO,
		CRTRA_ORDEN,
		CRETT_CODIGO
	FROM (
				SELECT				
				S.CRSEG_CODIGO,		
				S.CGG_CRSEG_CODIGO,	
				S.CRTRA_CODIGO, 
				S.CRFAS_CODIGO,        	
				S.CGG_CRFAS_CODIGO,
				S.CUSU_CODIGO,		
				S.CRSEG_DESCRIPCION, 
				S.CRSEG_ESTADO_ATENCION, 
				S.CRSEG_OBSERVACION, 
				S.CRSEG_TIPO_RESPUESTA, 
				S.CRSEG_TIPO_ACTIVIDAD, 
				S.CRSEG_FECHA_RECEPCION, 
				S.CRSEG_FECHA_REVISION, 
				S.CRSEG_FECHA_DESPACHO, 
				S.CRSEG_ESTADO_HIJO, 				
				S.CRSEG_USUARIO_INSERT,
				S.CRSEG_ESTADO,
				T.CRTRA_NUMERO,        		
				F.CRFAS_NOMBRE,
				COALESCE(PER.CRPER_NOMBRES,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,'''') AS CUSU_APELLIDOS,
				SII.F_CGG_RES_SEGUIMIENTO_SELECT_USUANTERIOR(S.CGG_CRSEG_CODIGO) AS CUSU_ANTERIOR ,
				T.CRTRA_FECHA_RECEPCION,
				T.CISLA_CODIGO,
				S.CRSEG_NUMERO,		
				T.CRPJR_CODIGO,
				T.CRTRA_OBSERVACION	,
				T.CRTRA_COMUNICADO_RADIAL,
				T.CRPER_CODIGO,
				SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(T.CRPER_CODIGO) AS CRPER_AUSPICIANTE,
				T.CGG_CRPER_CODIGO,	
				SII.F_CGG_RES_PERSONA_SELECT_NOMBRES(T.CGG_CRPER_CODIGO) AS CRPER_BENEFICIARIO,
				T.CRTRA_ANIO,
				(SELECT I.CISLA_NOMBRE FROM CGG_ISLA I WHERE I.CISLA_CODIGO = T.CISLA_CODIGO) CISLA_NOMBRE,				
				T.CRTRA_ACTIVIDAD_RESIDENCIA,
				(SELECT TST.CRTST_DESCRIPCION FROM SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST WHERE TST.CRTST_CODIGO = T.CRTST_CODIGO) CRTST_DESCRIPCION,							
				(SELECT FAS.CRFAS_NOMBRE FROM SII.CGG_RES_FASE FAS WHERE FAS.CRFAS_CODIGO = S.CGG_CRFAS_CODIGO) CRFAS_NOMBRE_ANTERIOR,				
				(SELECT PJR.CRPJR_RAZON_SOCIAL FROM SII.CGG_RES_PERSONA_JURIDICA PJR WHERE PJR.CRPJR_CODIGO = T.CRPJR_CODIGO) CRPJR_RAZON_SOCIAL,				
				T.CRTST_CODIGO,
				T.CRPRO_CODIGO,
				SII.F_CGG_RES_SEGUIMIENTO_HTML(S.CRSEG_CODIGO) SEGUIMIENTO_HTML,
				T.CRTRA_FOLIO,
				T.CRTRA_DIAS_PERMANENCIA,
				(SELECT COALESCE(CVVEH_NOMBRE,'''')||'' ''||COALESCE(CVVEH_PLACA,'''')||'' ''||COALESCE(CVVEH_CHASIS,'''') FROM SII.CGG_VEH_VEHICULO WHERE CVVEH_CODIGO = T.CVVEH_CODIGO) VEHICULO,
				T.CRTRA_FECHA_INGRESO,
				T.CRTRA_FECHA_SALIDA,
				T.CRTRA_GRUPO,
				T.CRTRA_ORDEN,
				T.CRETT_CODIGO
			FROM SII.CGG_RES_SEGUIMIENTO S
			INNER JOIN SII.CGG_RES_TRAMITE T ON (S.CRTRA_CODIGO=T.CRTRA_CODIGO)
			INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON (TST.CRTST_CODIGO = T.CRTST_CODIGO)
			INNER JOIN SII.CGG_RES_FASE F ON (S.CRFAS_CODIGO=F.CRFAS_CODIGO)
			INNER JOIN SII.CGG_USUARIO U ON (S.CUSU_CODIGO=U.CUSU_CODIGO)
			INNER JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO = U.CRPER_CODIGO
			WHERE S.CRSEG_ESTADO = TRUE AND					
				  S.CRSEG_CODIGO = '||QUOTE_LITERAL(IN_CRSEG_CODIGO)||'
	)AS SE ';		
	OPEN TMP_REF FOR EXECUTE SQL_STMT;	
	RETURN NEXT TMP_REF;					
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;




