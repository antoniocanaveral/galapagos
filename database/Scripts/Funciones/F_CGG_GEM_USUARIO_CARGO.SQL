/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_USUARIO_CARGO
* @param IN_CGUCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CARGO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @param IN_CGCRG_ESTADO_SUBSCRIPCION ESTADO DE LAS SUBSCRIPCIONES DE SUBSCRIPCIONES 
0 - NO SUBSCRIPCIONES 
1 - SUBSCRIPCIONES
* @param IN_CGUCR_ESTADO ESTADO DEL REGISTRO
* @param IN_CGUCR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGUCR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_INSERT(
IN IN_CGUCR_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGUCR_CODIGO%TYPE,
IN IN_CUSU_CODIGO SII.CGG_GEM_USUARIO_CARGO.CUSU_CODIGO%TYPE,
IN IN_CGCRG_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGCRG_CODIGO%TYPE,
IN IN_CGCRG_ESTADO_SUBSCRIPCION SII.CGG_GEM_USUARIO_CARGO.CGCRG_ESTADO_SUBSCRIPCION%TYPE,
IN IN_CGUCR_ESTADO SII.CGG_GEM_USUARIO_CARGO.CGUCR_ESTADO%TYPE,
IN IN_CGUCR_USUARIO_INSERT SII.CGG_GEM_USUARIO_CARGO.CGUCR_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGUCR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_USUARIO_CARGO','CGUCR_CODIGO','CGUCR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGUCR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_USUARIO_CARGO(
		CGUCR_CODIGO, 
		CUSU_CODIGO, 
		CGCRG_CODIGO, 
		CGCRG_ESTADO_SUBSCRIPCION, 
		CGUCR_ESTADO, 
		CGUCR_FECHA_INSERT, 
		CGUCR_USUARIO_INSERT, 
		CGUCR_FECHA_UPDATE, 
		CGUCR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CUSU_CODIGO, 
		IN_CGCRG_CODIGO, 
		IN_CGCRG_ESTADO_SUBSCRIPCION, 
		IN_CGUCR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGUCR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGUCR_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_INSERT_ALL(
IN IN_CUSU_CODIGO VARCHAR,
IN IN_CGARE_CODIGO VARCHAR,
IN IN_BUSQUEDA TEXT,
IN IN_ESTADO INT,
IN IN_ESTADO1 BOOLEAN,
IN IN_CGUCR_USUARIO_INSERT SII.CGG_GEM_USUARIO_CARGO.CGUCR_USUARIO_INSERT%TYPE
)RETURNS varchar AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_PART_SQL varchar;
REC_CARGOS record;
TMP_SQL TEXT;
BEGIN	
	TMP_PART_SQL:='';
	IF LENGTH(TRIM(IN_CGARE_CODIGO)) >0 THEN
		TMP_PART_SQL:= ' AND CGARE_CODIGO= '''|| IN_CGARE_CODIGO ||'''' ;
	END IF;

	TMP_SQL:='SELECT
		CGUCR.CGUCR_CODIGO,
		CGCRG.CGCRG_CODIGO,		
		CGCRG_NOMBRE, 
		CGCRG_DESCRIPCION,
		CGUCR.CGCRG_ESTADO_SUBSCRIPCION
	FROM SII.CGG_GEM_CARGO	CGCRG
	LEFT JOIN SII.CGG_GEM_USUARIO_CARGO	CGUCR ON CGCRG.CGCRG_CODIGO = CGUCR.CGCRG_CODIGO
	WHERE CGCRG_ESTADO = TRUE '||TMP_PART_SQL||' AND SII.F_STRING_IN('''||COALESCE (IN_BUSQUEDA,'')||''',
		COALESCE(CGCRG_NOMBRE, '''')||'' ''||
		COALESCE(CGCRG_DESCRIPCION, '''')
	) = 1';
	FOR REC_CARGOS IN EXECUTE TMP_SQL
	LOOP
	
		IF (UPPER(REC_CARGOS.CGUCR_CODIGO) IS NULL) THEN
			SELECT SII.F_KEYGEN('CGG_GEM_USUARIO_CARGO','CGUCR_CODIGO','CGUCR') INTO OUT_KEY;
		
			INSERT INTO SII.CGG_GEM_USUARIO_CARGO(
				CGUCR_CODIGO, 
				CUSU_CODIGO, 
				CGCRG_CODIGO, 
				CGCRG_ESTADO_SUBSCRIPCION, 
				CGUCR_ESTADO, 
				CGUCR_FECHA_INSERT, 
				CGUCR_USUARIO_INSERT, 
				CGUCR_FECHA_UPDATE, 
				CGUCR_USUARIO_UPDATE
			) VALUES (
				OUT_KEY, 
				IN_CUSU_CODIGO, 
				REC_CARGOS.CGCRG_CODIGO, 
				IN_ESTADO, 
				IN_ESTADO1, 
				CURRENT_TIMESTAMP, 
				IN_CGUCR_USUARIO_INSERT, 
				CURRENT_TIMESTAMP, 
				IN_CGUCR_USUARIO_INSERT
			);
		ELSE
			UPDATE SII.CGG_GEM_USUARIO_CARGO SET
			CGCRG_ESTADO_SUBSCRIPCION = IN_ESTADO ,
			CGUCR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
			CGUCR_USUARIO_UPDATE=IN_CGUCR_USUARIO_INSERT
			WHERE CGUCR_CODIGO=REC_CARGOS.CGUCR_CODIGO;	
		END IF;
	
	END LOOP;
	return '';
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_USUARIO_CARGO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGUCR_CODIGO, 
		CUSU_CODIGO, 
		CGCRG_CODIGO, 
		CGCRG_ESTADO_SUBSCRIPCION, 
		CGUCR_ESTADO, 
		CGUCR_FECHA_INSERT, 
		CGUCR_USUARIO_INSERT, 
		CGUCR_FECHA_UPDATE, 
		CGUCR_USUARIO_UPDATE
	FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE CGUCR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_USUARIO_CARGO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGUCR_CODIGO, 
		CUSU_CODIGO, 
		CGCRG_CODIGO, 
		CGCRG_ESTADO_SUBSCRIPCION, 
		CGUCR_ESTADO, 
		CGUCR_FECHA_INSERT, 
		CGUCR_USUARIO_INSERT, 
		CGUCR_FECHA_UPDATE, 
		CGUCR_USUARIO_UPDATE
	FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE CGUCR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGCRG_ESTADO_SUBSCRIPCION, 0)||'' ''||COALESCE(CGUCR_ESTADO, FALSE)||'' ''||COALESCE(CGUCR_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGUCR_USUARIO_INSERT, '''')||'' ''||COALESCE(CGUCR_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGUCR_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_USUARIO_CARGO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE CGUCR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_USUARIO_CARGO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE CGUCR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGCRG_ESTADO_SUBSCRIPCION, 0)||' '||COALESCE(CGUCR_ESTADO, FALSE)||' '||COALESCE(CGUCR_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGUCR_USUARIO_INSERT, '''')||' '||COALESCE(CGUCR_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGUCR_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_USUARIO_CARGO
* @param IN_CGUCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CARGO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @param IN_CGCRG_ESTADO_SUBSCRIPCION ESTADO DE LAS SUBSCRIPCIONES DE SUBSCRIPCIONES 
0 - NO SUBSCRIPCIONES 
1 - SUBSCRIPCIONES
* @param IN_CGUCR_ESTADO ESTADO DEL REGISTRO
* @param IN_CGUCR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_UPDATE(
IN IN_CGUCR_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGUCR_CODIGO%TYPE,
IN IN_CUSU_CODIGO SII.CGG_GEM_USUARIO_CARGO.CUSU_CODIGO%TYPE,
IN IN_CGCRG_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGCRG_CODIGO%TYPE,
IN IN_CGCRG_ESTADO_SUBSCRIPCION SII.CGG_GEM_USUARIO_CARGO.CGCRG_ESTADO_SUBSCRIPCION%TYPE,
IN IN_CGUCR_ESTADO SII.CGG_GEM_USUARIO_CARGO.CGUCR_ESTADO%TYPE,
IN IN_CGUCR_USUARIO_UPDATE SII.CGG_GEM_USUARIO_CARGO.CGUCR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_USUARIO_CARGO SET
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CGCRG_CODIGO = IN_CGCRG_CODIGO, 
		CGCRG_ESTADO_SUBSCRIPCION = IN_CGCRG_ESTADO_SUBSCRIPCION, 
		CGUCR_ESTADO = IN_CGUCR_ESTADO, 
		CGUCR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGUCR_USUARIO_UPDATE = IN_CGUCR_USUARIO_UPDATE
	WHERE
		CGUCR_CODIGO = IN_CGUCR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_USUARIO_CARGO
* @param IN_CGUCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CARGO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_SELECT(
IN IN_CGUCR_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGUCR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGUCR_CODIGO, 
		CUSU_CODIGO, 
		CGCRG_CODIGO, 
		CGCRG_ESTADO_SUBSCRIPCION, 
		CGUCR_ESTADO, 
		CGUCR_FECHA_INSERT, 
		CGUCR_USUARIO_INSERT, 
		CGUCR_FECHA_UPDATE, 
		CGUCR_USUARIO_UPDATE
	FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE CGUCR_ESTADO = TRUE AND 
		CGUCR_CODIGO = IN_CGUCR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_USUARIO_CARGO
* @param IN_CGUCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CARGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_DELETE(
IN IN_CGUCR_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGUCR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE
		CGUCR_CODIGO = IN_CGUCR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_USUARIO_CARGO
* @param IN_CGUCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CARGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_DELETE_SOFT(
IN IN_CGUCR_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGUCR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_USUARIO_CARGO SET
		CGUCR_ESTADO = FALSE
	WHERE
		CGUCR_CODIGO = IN_CGUCR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_USUARIO_CARGO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_GEM_USUARIO_CARGO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGUCR_CODIGO, 
		CUSU_CODIGO, 
		CGCRG_CODIGO, 
		CGCRG_ESTADO_SUBSCRIPCION, 
		CGUCR_ESTADO, 
		CGUCR_FECHA_INSERT, 
		CGUCR_USUARIO_INSERT, 
		CGUCR_FECHA_UPDATE, 
		CGUCR_USUARIO_UPDATE
	FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE CGUCR_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_USUARIO_CARGO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_GEM_USUARIO_CARGO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_USUARIO_CARGO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_GEM_USUARIO_CARGO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_USUARIO_CARGO SET
		cgucr_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_S_CGG_GEM_CARGO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_USUARIO_CARGO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_CARGO.
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_S_CGG_GEM_CARGO(
IN IN_CGCRG_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGCRG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGUCR_CODIGO, 
		CUSU_CODIGO, 
		CGCRG_CODIGO, 
		CGCRG_ESTADO_SUBSCRIPCION, 
		CGUCR_ESTADO, 
		CGUCR_FECHA_INSERT, 
		CGUCR_USUARIO_INSERT, 
		CGUCR_FECHA_UPDATE, 
		CGUCR_USUARIO_UPDATE
	FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE CGUCR_ESTADO = TRUE AND 
		CGCRG_CODIGO = IN_CGCRG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_D_CGG_GEM_CARGO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_USUARIO_CARGO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_CARGO.
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_D_CGG_GEM_CARGO(
IN IN_CGCRG_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGCRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_USUARIO_CARGO
	WHERE
		CGCRG_CODIGO = IN_CGCRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_USUARIO_CARGO_D_CGG_GEM_CARGO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_GEM_USUARIO_CARGO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_GEM_CARGO.
* @param IN_CGCRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CARGO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_USUARIO_CARGO_DS_CGG_GEM_CARGO(
IN IN_CGCRG_CODIGO SII.CGG_GEM_USUARIO_CARGO.CGCRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_USUARIO_CARGO SET
		cgucr_estado = false
	WHERE
		CGCRG_CODIGO = IN_CGCRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

