/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_MATRIMONIO
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE QUE PERMITE HACER EL SEGUIMIENTO DE PAREJA
* @param IN_CRMTR_FECHA_MATRIMONIO FECHA DE REALIZACION DE MATRIMONIO O UNION DE HECHO
* @param IN_CRMTR_TIPO TIPO DE RELACION FORMALIZADA Y LEGALIZADA
MATRIMONIO
UNION DE HECHO
* @param IN_CRMTR_ESTADO_SEGUIMIENTO ESTADO DEL SEGUIMIENTO REALIZADO AL MATRIMONIO
0.- EN PROCESO
1.- FINALIZADO
* @param IN_CRMTR_ESTADO ESTADO DEL REGISTRO
* @param IN_CRMTR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRMTR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_INSERT(
IN IN_CRMTR_CODIGO SII.CGG_RES_MATRIMONIO.CRMTR_CODIGO%TYPE,
IN IN_CRTRA_CODIGO SII.CGG_RES_MATRIMONIO.CRTRA_CODIGO%TYPE,
IN IN_CRMTR_FECHA_MATRIMONIO SII.CGG_RES_MATRIMONIO.CRMTR_FECHA_MATRIMONIO%TYPE,
IN IN_CRMTR_TIPO SII.CGG_RES_MATRIMONIO.CRMTR_TIPO%TYPE,
IN IN_CRMTR_ESTADO_SEGUIMIENTO SII.CGG_RES_MATRIMONIO.CRMTR_ESTADO_SEGUIMIENTO%TYPE,
IN IN_CRMTR_ESTADO SII.CGG_RES_MATRIMONIO.CRMTR_ESTADO%TYPE,
IN IN_CRMTR_USUARIO_INSERT SII.CGG_RES_MATRIMONIO.CRMTR_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRMTR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_MATRIMONIO','CRMTR_CODIGO','CRMTR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRMTR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_MATRIMONIO(
		CRMTR_CODIGO, 
		CRTRA_CODIGO, 
		CRMTR_FECHA_MATRIMONIO, 
		CRMTR_TIPO, 
		CRMTR_ESTADO_SEGUIMIENTO, 
		CRMTR_ESTADO, 
		CRMTR_FECHA_INSERT, 
		CRMTR_USUARIO_INSERT, 
		CRMTR_FECHA_UPDATE, 
		CRMTR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRTRA_CODIGO, 
		IN_CRMTR_FECHA_MATRIMONIO, 
		IN_CRMTR_TIPO, 
		IN_CRMTR_ESTADO_SEGUIMIENTO, 
		IN_CRMTR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRMTR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRMTR_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_MATRIMONIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRMTR_CODIGO, 
		CRTRA_CODIGO, 
		CRMTR_FECHA_MATRIMONIO, 
		CRMTR_TIPO, 
		CRMTR_ESTADO_SEGUIMIENTO, 
		CRMTR_ESTADO, 
		CRMTR_FECHA_INSERT, 
		CRMTR_USUARIO_INSERT, 
		CRMTR_FECHA_UPDATE, 
		CRMTR_USUARIO_UPDATE
	FROM SII.CGG_RES_MATRIMONIO
	WHERE CRMTR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_MATRIMONIO
* @PARAM IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @PARAM IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @PARAM IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @PARAM IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @PARAM IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @PARAM IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @RETURN REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		M.CRMTR_CODIGO, 
		M.CRTRA_CODIGO,
		T.CRTRA_ANIO||''-''||T.CRTRA_NUMERO AS CRTRA_NUMERO,
		R.CRPER_NOMBRES||'' ''||R.CRPER_APELLIDO_PATERNO||'' ''||COALESCE(R.CRPER_APELLIDO_MATERNO,'''')  AS RESIDENTE,
		C.CRPER_NOMBRES||'' ''||C.CRPER_APELLIDO_PATERNO||'' ''||COALESCE(C.CRPER_APELLIDO_MATERNO,'''')  AS CONYUGE,
		M.CRMTR_FECHA_MATRIMONIO, 		
		M.CRMTR_TIPO, 
		M.CRMTR_ESTADO_SEGUIMIENTO,
		M.CRMTR_ESTADO, 
		M.CRMTR_FECHA_INSERT, 
		M.CRMTR_USUARIO_INSERT, 
		M.CRMTR_FECHA_UPDATE, 
		M.CRMTR_USUARIO_UPDATE
	FROM SII.CGG_RES_MATRIMONIO M 
	INNER JOIN CGG_RES_TRAMITE T ON (T.CRTRA_CODIGO = M.CRTRA_CODIGO)
	INNER JOIN CGG_RES_PERSONA R ON (R.CRPER_CODIGO = T.CRPER_CODIGO)
	INNER JOIN CGG_RES_PERSONA C ON (C.CRPER_CODIGO = T.CGG_CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_OFICIAL_MATRIMONIO OM ON (OM.CRMTR_CODIGO = M.CRMTR_CODIGO)
	WHERE (OM.CUSU_CODIGO IS NULL OR SII.F_CHECK_USER_NAME(OM.CUSU_CODIGO, '''||IN_USER_NAME||''')) AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(CRMTR_FECHA_MATRIMONIO, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(CRMTR_TIPO, 0)||'' ''||
	COALESCE(CRMTR_ESTADO_SEGUIMIENTO, 0)||'' ''||
	COALESCE(R.CRPER_NOMBRES, '''')||'' ''||
	COALESCE(R.CRPER_APELLIDO_PATERNO, '''')||'' ''||
	COALESCE(C.CRPER_NOMBRES, '''')||'' ''||
	COALESCE(C.CRPER_APELLIDO_PATERNO, '''')||'' ''||
	COALESCE(T.CRTRA_NUMERO, 0)) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_MATRIMONIO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_COUNT(
IN IN_USER_NAME VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_MATRIMONIO M
	INNER JOIN CGG_RES_TRAMITE T ON (T.CRTRA_CODIGO = M.CRTRA_CODIGO)
	INNER JOIN CGG_RES_PERSONA R ON (R.CRPER_CODIGO = T.CRPER_CODIGO)
	INNER JOIN CGG_RES_PERSONA C ON (C.CRPER_CODIGO = T.CGG_CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_OFICIAL_MATRIMONIO OM ON OM.CRMTR_CODIGO = M.CRMTR_CODIGO
	WHERE (OM.CUSU_CODIGO IS NULL OR SII.F_CHECK_USER_NAME(OM.CUSU_CODIGO, IN_USER_NAME)) AND CRMTR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_MATRIMONIO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_USER_NAME NOMBRE DEL USUARIO DEL SERVIDOR DE APLICACIONES.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_USER_NAME VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_MATRIMONIO M
	INNER JOIN CGG_RES_TRAMITE T ON (T.CRTRA_CODIGO = M.CRTRA_CODIGO)
	INNER JOIN CGG_RES_PERSONA R ON (R.CRPER_CODIGO = T.CRPER_CODIGO)
	INNER JOIN CGG_RES_PERSONA C ON (C.CRPER_CODIGO = T.CGG_CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_OFICIAL_MATRIMONIO OM ON OM.CRMTR_CODIGO = M.CRMTR_CODIGO
	WHERE SII.F_CHECK_USER_NAME(OM.CUSU_CODIGO, IN_USER_NAME) AND CRMTR_ESTADO = TRUE
	AND SII.F_STRING_IN(IN_FIND_TEXT,
	COALESCE(CRMTR_FECHA_MATRIMONIO, CURRENT_TIMESTAMP)||' '||
	COALESCE(CRMTR_TIPO, 0)||' '||
	COALESCE(CRMTR_ESTADO_SEGUIMIENTO, 0)||' '||
	COALESCE(R.CRPER_NOMBRES, '''')||' '||
	COALESCE(R.CRPER_APELLIDO_PATERNO, '''')||' '||
	COALESCE(C.CRPER_NOMBRES, '''')||' '||
	COALESCE(C.CRPER_APELLIDO_PATERNO, '''')||' '||
	COALESCE(T.CRTRA_NUMERO, 0)) = 1;	
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_MATRIMONIO
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE QUE PERMITE HACER EL SEGUIMIENTO DE PAREJA
* @param IN_CRMTR_FECHA_MATRIMONIO FECHA DE REALIZACION DE MATRIMONIO O UNION DE HECHO
* @param IN_CRMTR_TIPO TIPO DE RELACION FORMALIZADA Y LEGALIZADA
MATRIMONIO
UNION DE HECHO
* @param IN_CRMTR_ESTADO_SEGUIMIENTO ESTADO DEL SEGUIMIENTO REALIZADO AL MATRIMONIO
0.- EN PROCESO
1.- FINALIZADO
* @param IN_CRMTR_ESTADO ESTADO DEL REGISTRO
* @param IN_CRMTR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_UPDATE(
IN IN_CRMTR_CODIGO SII.CGG_RES_MATRIMONIO.CRMTR_CODIGO%TYPE,
IN IN_CRTRA_CODIGO SII.CGG_RES_MATRIMONIO.CRTRA_CODIGO%TYPE,
IN IN_CRMTR_FECHA_MATRIMONIO SII.CGG_RES_MATRIMONIO.CRMTR_FECHA_MATRIMONIO%TYPE,
IN IN_CRMTR_TIPO SII.CGG_RES_MATRIMONIO.CRMTR_TIPO%TYPE,
IN IN_CRMTR_ESTADO_SEGUIMIENTO SII.CGG_RES_MATRIMONIO.CRMTR_ESTADO_SEGUIMIENTO%TYPE,
IN IN_CRMTR_ESTADO SII.CGG_RES_MATRIMONIO.CRMTR_ESTADO%TYPE,
IN IN_CRMTR_USUARIO_UPDATE SII.CGG_RES_MATRIMONIO.CRMTR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_MATRIMONIO SET
		CRTRA_CODIGO = IN_CRTRA_CODIGO, 
		CRMTR_FECHA_MATRIMONIO = IN_CRMTR_FECHA_MATRIMONIO, 
		CRMTR_TIPO = IN_CRMTR_TIPO, 
		CRMTR_ESTADO_SEGUIMIENTO = IN_CRMTR_ESTADO_SEGUIMIENTO, 
		CRMTR_ESTADO = IN_CRMTR_ESTADO, 
		CRMTR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRMTR_USUARIO_UPDATE = IN_CRMTR_USUARIO_UPDATE
	WHERE
		CRMTR_CODIGO = IN_CRMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_MATRIMONIO
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_SELECT(
IN IN_CRMTR_CODIGO SII.CGG_RES_MATRIMONIO.CRMTR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRMTR_CODIGO, 
		CRTRA_CODIGO, 
		CRMTR_FECHA_MATRIMONIO, 
		CRMTR_TIPO, 
		CRMTR_ESTADO_SEGUIMIENTO, 
		CRMTR_ESTADO, 
		CRMTR_FECHA_INSERT, 
		CRMTR_USUARIO_INSERT, 
		CRMTR_FECHA_UPDATE, 
		CRMTR_USUARIO_UPDATE
	FROM SII.CGG_RES_MATRIMONIO
	WHERE CRMTR_ESTADO = TRUE AND 
		CRMTR_CODIGO = IN_CRMTR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_MATRIMONIO
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_DELETE(
IN IN_CRMTR_CODIGO SII.CGG_RES_MATRIMONIO.CRMTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_MATRIMONIO
	WHERE
		CRMTR_CODIGO = IN_CRMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_MATRIMONIO
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_DELETE_SOFT(
IN IN_CRMTR_CODIGO SII.CGG_RES_MATRIMONIO.CRMTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_MATRIMONIO SET
		CRMTR_ESTADO = FALSE
	WHERE
		CRMTR_CODIGO = IN_CRMTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_S_CGG_RES_TRAMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE QUE PERMITE HACER EL SEGUIMIENTO DE PAREJA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_S_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_RES_MATRIMONIO.CRTRA_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRMTR_CODIGO, 
		CRTRA_CODIGO, 
		CRMTR_FECHA_MATRIMONIO, 
		CRMTR_TIPO, 
		CRMTR_ESTADO_SEGUIMIENTO, 
		CRMTR_ESTADO, 
		CRMTR_FECHA_INSERT, 
		CRMTR_USUARIO_INSERT, 
		CRMTR_FECHA_UPDATE, 
		CRMTR_USUARIO_UPDATE
	FROM SII.CGG_RES_MATRIMONIO
	WHERE CRMTR_ESTADO = TRUE AND 
		CRTRA_CODIGO = IN_CRTRA_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_D_CGG_RES_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE QUE PERMITE HACER EL SEGUIMIENTO DE PAREJA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_D_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_RES_MATRIMONIO.CRTRA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_MATRIMONIO
	WHERE
		CRTRA_CODIGO = IN_CRTRA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_MATRIMONIO_D_CGG_RES_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_MATRIMONIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRTRA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TRAMITE QUE PERMITE HACER EL SEGUIMIENTO DE PAREJA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_MATRIMONIO_DS_CGG_RES_TRAMITE(
IN IN_CRTRA_CODIGO SII.CGG_RES_MATRIMONIO.CRTRA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_MATRIMONIO SET
		crmtr_estado = false
	WHERE
		CRTRA_CODIGO = IN_CRTRA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


