/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_WEB_PREGUNTAS
* @param IN_CWPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO PREGUNTAS
* @param IN_CWMOD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CWPRG_PREGUNTA PREGUNTA EMITIDA POR EL USUARIO
* @param IN_CWPRG_RESPUESTA RESPUESTA DE PARTE DEL RESPONSABLE DEL MODULO
* @param IN_CWPRG_OBSERVACION OBSERVACION REFERENTE AL MODULO
* @param IN_CWPRG_PRIORIDAD ALMACENA LA PRIORIDAD DE LA PREGUNTA.
0 - BUENA
1 - MALA
2 - PESIMA
* @param IN_CWPRG_ESTADO ESTADO DEL REGISTRO
* @param IN_CWPRG_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CWPRG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_INSERT(
IN IN_CWPRG_CODIGO SII.CGG_WEB_PREGUNTAS.CWPRG_CODIGO%TYPE,
IN IN_CWMOD_CODIGO SII.CGG_WEB_PREGUNTAS.CWMOD_CODIGO%TYPE,
IN IN_CWPRG_PREGUNTA SII.CGG_WEB_PREGUNTAS.CWPRG_PREGUNTA%TYPE,
IN IN_CWPRG_RESPUESTA SII.CGG_WEB_PREGUNTAS.CWPRG_RESPUESTA%TYPE,
IN IN_CWPRG_OBSERVACION SII.CGG_WEB_PREGUNTAS.CWPRG_OBSERVACION%TYPE,
IN IN_CWPRG_PRIORIDAD SII.CGG_WEB_PREGUNTAS.CWPRG_PRIORIDAD%TYPE,
IN IN_CWPRG_ESTADO SII.CGG_WEB_PREGUNTAS.CWPRG_ESTADO%TYPE,
IN IN_CWPRG_USUARIO_INSERT SII.CGG_WEB_PREGUNTAS.CWPRG_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CWPRG_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_WEB_PREGUNTAS','CWPRG_CODIGO','CWPRG') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CWPRG_CODIGO;
	END IF;
	INSERT INTO SII.CGG_WEB_PREGUNTAS(
		CWPRG_CODIGO, 
		CWMOD_CODIGO, 
		CWPRG_PREGUNTA, 
		CWPRG_RESPUESTA, 
		CWPRG_OBSERVACION, 
		CWPRG_PRIORIDAD, 
		CWPRG_ESTADO, 
		CWPRG_FECHA_INSERT, 
		CWPRG_USUARIO_INSERT, 
		CWPRG_FECHA_UPDATE, 
		CWPRG_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CWMOD_CODIGO, 
		IN_CWPRG_PREGUNTA, 
		IN_CWPRG_RESPUESTA, 
		IN_CWPRG_OBSERVACION, 
		IN_CWPRG_PRIORIDAD, 
		IN_CWPRG_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CWPRG_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CWPRG_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_WEB_PREGUNTAS
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CWPRG_CODIGO, 
		CWMOD_CODIGO, 
		CWPRG_PREGUNTA, 
		CWPRG_RESPUESTA, 
		CWPRG_OBSERVACION, 
		CWPRG_PRIORIDAD, 
		CWPRG_ESTADO, 
		CWPRG_FECHA_INSERT, 
		CWPRG_USUARIO_INSERT, 
		CWPRG_FECHA_UPDATE, 
		CWPRG_USUARIO_UPDATE
	FROM SII.CGG_WEB_PREGUNTAS
	WHERE CWPRG_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_WEB_PREGUNTAS
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CWPRG_CODIGO, 
		PRE.CWMOD_CODIGO, 
		CWPRG_PREGUNTA, 
		CWPRG_RESPUESTA, 
		CWPRG_OBSERVACION, 
		CWPRG_PRIORIDAD, 
		CWPRG_ESTADO, 
		CWPRG_FECHA_INSERT, 
		CWPRG_USUARIO_INSERT, 
		CWPRG_FECHA_UPDATE, 
		CWPRG_USUARIO_UPDATE,
		CWMOD_NOMBRE
	FROM SII.CGG_WEB_PREGUNTAS PRE INNER JOIN SII.CGG_WEB_MODULO MOD ON(MOD.CWMOD_CODIGO = PRE.CWMOD_CODIGO)
	WHERE CWPRG_ESTADO = TRUE AND
	SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CWPRG_PREGUNTA, '''')||'' ''||COALESCE(CWPRG_RESPUESTA, '''')||'' ''||COALESCE(CWPRG_OBSERVACION, '''')||'' ''||COALESCE(CWPRG_PRIORIDAD, 0)||'' ''||COALESCE(CWPRG_ESTADO, FALSE)||'' ''||COALESCE(CWPRG_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CWPRG_USUARIO_INSERT, '''')||'' ''||COALESCE(CWPRG_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CWPRG_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_WEB_PREGUNTAS
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_WEB_PREGUNTAS
	WHERE CWPRG_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_WEB_PREGUNTAS
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_WEB_PREGUNTAS
	WHERE CWPRG_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CWPRG_PREGUNTA, '''')||' '||COALESCE(CWPRG_RESPUESTA, '''')||' '||COALESCE(CWPRG_OBSERVACION, '''')||' '||COALESCE(CWPRG_PRIORIDAD, 0)||' '||COALESCE(CWPRG_ESTADO, FALSE)||' '||COALESCE(CWPRG_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CWPRG_USUARIO_INSERT, '''')||' '||COALESCE(CWPRG_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CWPRG_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_WEB_PREGUNTAS
* @param IN_CWPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO PREGUNTAS
* @param IN_CWMOD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CWPRG_PREGUNTA PREGUNTA EMITIDA POR EL USUARIO
* @param IN_CWPRG_RESPUESTA RESPUESTA DE PARTE DEL RESPONSABLE DEL MODULO
* @param IN_CWPRG_OBSERVACION OBSERVACION REFERENTE AL MODULO
* @param IN_CWPRG_PRIORIDAD ALMACENA LA PRIORIDAD DE LA PREGUNTA.
0 - BUENA
1 - MALA
2 - PESIMA
* @param IN_CWPRG_ESTADO ESTADO DEL REGISTRO
* @param IN_CWPRG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_UPDATE(
IN IN_CWPRG_CODIGO SII.CGG_WEB_PREGUNTAS.CWPRG_CODIGO%TYPE,
IN IN_CWMOD_CODIGO SII.CGG_WEB_PREGUNTAS.CWMOD_CODIGO%TYPE,
IN IN_CWPRG_PREGUNTA SII.CGG_WEB_PREGUNTAS.CWPRG_PREGUNTA%TYPE,
IN IN_CWPRG_RESPUESTA SII.CGG_WEB_PREGUNTAS.CWPRG_RESPUESTA%TYPE,
IN IN_CWPRG_OBSERVACION SII.CGG_WEB_PREGUNTAS.CWPRG_OBSERVACION%TYPE,
IN IN_CWPRG_PRIORIDAD SII.CGG_WEB_PREGUNTAS.CWPRG_PRIORIDAD%TYPE,
IN IN_CWPRG_ESTADO SII.CGG_WEB_PREGUNTAS.CWPRG_ESTADO%TYPE,
IN IN_CWPRG_USUARIO_UPDATE SII.CGG_WEB_PREGUNTAS.CWPRG_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_WEB_PREGUNTAS SET
		CWMOD_CODIGO = IN_CWMOD_CODIGO, 
		CWPRG_PREGUNTA = IN_CWPRG_PREGUNTA, 
		CWPRG_RESPUESTA = IN_CWPRG_RESPUESTA, 
		CWPRG_OBSERVACION = IN_CWPRG_OBSERVACION, 
		CWPRG_PRIORIDAD = IN_CWPRG_PRIORIDAD, 
		CWPRG_ESTADO = IN_CWPRG_ESTADO, 
		CWPRG_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CWPRG_USUARIO_UPDATE = IN_CWPRG_USUARIO_UPDATE
	WHERE
		CWPRG_CODIGO = IN_CWPRG_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_WEB_PREGUNTAS
* @param IN_CWPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO PREGUNTAS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_SELECT(
IN IN_CWPRG_CODIGO SII.CGG_WEB_PREGUNTAS.CWPRG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CWPRG_CODIGO, 
		CWMOD_CODIGO, 
		CWPRG_PREGUNTA, 
		CWPRG_RESPUESTA, 
		CWPRG_OBSERVACION, 
		CWPRG_PRIORIDAD, 
		CWPRG_ESTADO, 
		CWPRG_FECHA_INSERT, 
		CWPRG_USUARIO_INSERT, 
		CWPRG_FECHA_UPDATE, 
		CWPRG_USUARIO_UPDATE
	FROM SII.CGG_WEB_PREGUNTAS
	WHERE CWPRG_ESTADO = TRUE AND 
		CWPRG_CODIGO = IN_CWPRG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_WEB_PREGUNTAS
* @param IN_CWPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO PREGUNTAS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_DELETE(
IN IN_CWPRG_CODIGO SII.CGG_WEB_PREGUNTAS.CWPRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_WEB_PREGUNTAS
	WHERE
		CWPRG_CODIGO = IN_CWPRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_WEB_PREGUNTAS
* @param IN_CWPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO PREGUNTAS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_DELETE_SOFT(
IN IN_CWPRG_CODIGO SII.CGG_WEB_PREGUNTAS.CWPRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_WEB_PREGUNTAS SET
		CWPRG_ESTADO = FALSE
	WHERE
		CWPRG_CODIGO = IN_CWPRG_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_S_CGG_WEB_MODULO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_WEB_PREGUNTAS QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_WEB_MODULO.
* @param IN_CWMOD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_S_CGG_WEB_MODULO(
IN IN_CWMOD_CODIGO SII.CGG_WEB_PREGUNTAS.CWMOD_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CWPRG_CODIGO, 
		CWMOD_CODIGO, 
		CWPRG_PREGUNTA, 
		CWPRG_RESPUESTA, 
		CWPRG_OBSERVACION, 
		CWPRG_PRIORIDAD, 
		CWPRG_ESTADO, 
		CWPRG_FECHA_INSERT, 
		CWPRG_USUARIO_INSERT, 
		CWPRG_FECHA_UPDATE, 
		CWPRG_USUARIO_UPDATE
	FROM SII.CGG_WEB_PREGUNTAS
	WHERE CWPRG_ESTADO = TRUE AND 
		CWMOD_CODIGO = IN_CWMOD_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_D_CGG_WEB_MODULO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_WEB_PREGUNTAS QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_WEB_MODULO.
* @param IN_CWMOD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_D_CGG_WEB_MODULO(
IN IN_CWMOD_CODIGO SII.CGG_WEB_PREGUNTAS.CWMOD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_WEB_PREGUNTAS
	WHERE
		CWMOD_CODIGO = IN_CWMOD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_D_CGG_WEB_MODULO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_WEB_PREGUNTAS QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_WEB_MODULO.
* @param IN_CWMOD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_DS_CGG_WEB_MODULO(
IN IN_CWMOD_CODIGO SII.CGG_WEB_PREGUNTAS.CWMOD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_WEB_PREGUNTAS SET
		cwprg_estado = false
	WHERE
		CWMOD_CODIGO = IN_CWMOD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;




/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_SELECT_BY_MODULO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_WEB_PREGUNTAS
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CWMOD_CODIGO CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_SELECT_BY_MODULO(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CWMOD_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CWPRG_CODIGO, 
		CWMOD_CODIGO, 
		CWPRG_PREGUNTA, 
		CWPRG_RESPUESTA, 
		CWPRG_OBSERVACION, 
		CWPRG_PRIORIDAD, 
		CWPRG_ESTADO, 
		CWPRG_FECHA_INSERT, 
		CWPRG_USUARIO_INSERT, 
		CWPRG_FECHA_UPDATE, 
		CWPRG_USUARIO_UPDATE
	FROM SII.CGG_WEB_PREGUNTAS
	WHERE CWPRG_ESTADO = TRUE AND 
	CWMOD_CODIGO = '''||IN_CWMOD_CODIGO||''' AND 
	SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CWPRG_PREGUNTA, '''')||'' ''||COALESCE(CWPRG_RESPUESTA, '''')||'' ''||COALESCE(CWPRG_OBSERVACION, '''')||'' ''||COALESCE(CWPRG_PRIORIDAD, 0)||'' ''||COALESCE(CWPRG_ESTADO, FALSE)||'' ''||COALESCE(CWPRG_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CWPRG_USUARIO_INSERT, '''')||'' ''||COALESCE(CWPRG_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CWPRG_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_WEB_PREGUNTAS_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_WEB_PREGUNTAS
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CWMOD_CODIGO CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_WEB_PREGUNTAS_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_CWMOD_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_WEB_PREGUNTAS
	WHERE CWPRG_ESTADO = TRUE AND CWMOD_CODIGO = IN_CWMOD_CODIGO AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CWPRG_PREGUNTA, '''')||' '||COALESCE(CWPRG_RESPUESTA, '''')||' '||COALESCE(CWPRG_OBSERVACION, '''')||' '||COALESCE(CWPRG_PRIORIDAD, 0)||' '||COALESCE(CWPRG_ESTADO, FALSE)||' '||COALESCE(CWPRG_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CWPRG_USUARIO_INSERT, '''')||' '||COALESCE(CWPRG_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CWPRG_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;