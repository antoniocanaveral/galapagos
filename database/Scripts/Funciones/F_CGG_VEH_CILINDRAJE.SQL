/**
* FUNCION SII.F_CGG_VEH_CILINDRAJE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_VEH_CILINDRAJE
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @param IN_CVCLN_CILINDRAJE CILINDRAJE DEL MOTOR
* @param IN_CVCLN_OBSERVACION INFORMACION ADICIONAL
* @param IN_CVCLN_ESTADO ESTADO DEL REGISTRO
* @param IN_CVCLN_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CVCLN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CILINDRAJE_INSERT(
IN IN_CVCLN_CODIGO SII.CGG_VEH_CILINDRAJE.CVCLN_CODIGO%TYPE, 
IN IN_CVCLN_CILINDRAJE SII.CGG_VEH_CILINDRAJE.CVCLN_CILINDRAJE%TYPE, 
IN IN_CVCLN_OBSERVACION SII.CGG_VEH_CILINDRAJE.CVCLN_OBSERVACION%TYPE, 
IN IN_CVCLN_ESTADO SII.CGG_VEH_CILINDRAJE.CVCLN_ESTADO%TYPE, 
IN IN_CVCLN_USUARIO_INSERT SII.CGG_VEH_CILINDRAJE.CVCLN_USUARIO_INSERT%TYPE, 
IN IN_CVCLN_USUARIO_UPDATE SII.CGG_VEH_CILINDRAJE.CVCLN_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN
	SELECT COUNT(CVCLN_CODIGO) INTO TMP_COUNT FROM SII.CGG_VEH_CILINDRAJE WHERE CVCLN_CILINDRAJE = IN_CVCLN_CILINDRAJE;
	IF (TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'El valor % de cilindraje ya esta registrado.',IN_CVCLN_CILINDRAJE;
	END IF;
	IF (UPPER(IN_CVCLN_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_VEH_CILINDRAJE','CVCLN_CODIGO','CVCLN') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CVCLN_CODIGO;
	END IF;
	INSERT INTO SII.CGG_VEH_CILINDRAJE(
		CVCLN_CODIGO, 
		CVCLN_CILINDRAJE, 
		CVCLN_OBSERVACION, 
		CVCLN_ESTADO, 
		CVCLN_FECHA_INSERT, 
		CVCLN_USUARIO_INSERT, 
		CVCLN_FECHA_UPDATE, 
		CVCLN_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CVCLN_CILINDRAJE, 
		IN_CVCLN_OBSERVACION, 
		IN_CVCLN_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CVCLN_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CVCLN_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CILINDRAJE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_VEH_CILINDRAJE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CILINDRAJE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVCLN_CODIGO, 
		CVCLN_CILINDRAJE, 
		CVCLN_OBSERVACION, 
		CVCLN_ESTADO, 
		CVCLN_FECHA_INSERT, 
		CVCLN_USUARIO_INSERT, 
		CVCLN_FECHA_UPDATE, 
		CVCLN_USUARIO_UPDATE
	FROM SII.CGG_VEH_CILINDRAJE
	WHERE CVCLN_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CILINDRAJE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_VEH_CILINDRAJE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CILINDRAJE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CVCLN_CODIGO, 
		CVCLN_CILINDRAJE, 
		CVCLN_OBSERVACION, 
		CVCLN_ESTADO, 
		CVCLN_FECHA_INSERT, 
		CVCLN_USUARIO_INSERT, 
		CVCLN_FECHA_UPDATE, 
		CVCLN_USUARIO_UPDATE
	FROM SII.CGG_VEH_CILINDRAJE
	WHERE CVCLN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CVCLN_CILINDRAJE, 0)||'' ''||COALESCE(CVCLN_OBSERVACION, '''')||'' ''||COALESCE(CVCLN_ESTADO, FALSE)||'' ''||COALESCE(CVCLN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVCLN_USUARIO_INSERT, '''')||'' ''||COALESCE(CVCLN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVCLN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CILINDRAJE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_CILINDRAJE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CILINDRAJE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_CILINDRAJE
	WHERE CVCLN_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CILINDRAJE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_CILINDRAJE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CILINDRAJE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_CILINDRAJE
	WHERE CVCLN_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CVCLN_CILINDRAJE, 0)||' '||COALESCE(CVCLN_OBSERVACION, '''')||' '||COALESCE(CVCLN_ESTADO, FALSE)||' '||COALESCE(CVCLN_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CVCLN_USUARIO_INSERT, '''')||' '||COALESCE(CVCLN_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CVCLN_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CILINDRAJE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_VEH_CILINDRAJE
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @param IN_CVCLN_CILINDRAJE CILINDRAJE DEL MOTOR
* @param IN_CVCLN_OBSERVACION INFORMACION ADICIONAL
* @param IN_CVCLN_ESTADO ESTADO DEL REGISTRO
* @param IN_CVCLN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CILINDRAJE_UPDATE(
IN IN_CVCLN_CODIGO SII.CGG_VEH_CILINDRAJE.CVCLN_CODIGO%TYPE, 
IN IN_CVCLN_CILINDRAJE SII.CGG_VEH_CILINDRAJE.CVCLN_CILINDRAJE%TYPE, 
IN IN_CVCLN_OBSERVACION SII.CGG_VEH_CILINDRAJE.CVCLN_OBSERVACION%TYPE, 
IN IN_CVCLN_ESTADO SII.CGG_VEH_CILINDRAJE.CVCLN_ESTADO%TYPE, 
IN IN_CVCLN_USUARIO_UPDATE SII.CGG_VEH_CILINDRAJE.CVCLN_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
TMP_COUNT INT;
BEGIN
	SELECT COUNT(CVCLN_CODIGO) INTO TMP_COUNT FROM SII.CGG_VEH_CILINDRAJE WHERE CVCLN_CILINDRAJE = IN_CVCLN_CILINDRAJE;
	IF (TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'El valor % de cilindraje ya esta registrado.',IN_CVCLN_CILINDRAJE;
	END IF;
	UPDATE SII.CGG_VEH_CILINDRAJE SET
		CVCLN_CILINDRAJE = IN_CVCLN_CILINDRAJE, 
		CVCLN_OBSERVACION = IN_CVCLN_OBSERVACION, 
		CVCLN_ESTADO = IN_CVCLN_ESTADO, 
		CVCLN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CVCLN_USUARIO_UPDATE = IN_CVCLN_USUARIO_UPDATE
	WHERE
		CVCLN_CODIGO = IN_CVCLN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CILINDRAJE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_VEH_CILINDRAJE
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CILINDRAJE_SELECT(
IN IN_CVCLN_CODIGO SII.CGG_VEH_CILINDRAJE.CVCLN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVCLN_CODIGO, 
		CVCLN_CILINDRAJE, 
		CVCLN_OBSERVACION, 
		CVCLN_ESTADO, 
		CVCLN_FECHA_INSERT, 
		CVCLN_USUARIO_INSERT, 
		CVCLN_FECHA_UPDATE, 
		CVCLN_USUARIO_UPDATE
	FROM SII.CGG_VEH_CILINDRAJE
	WHERE CVCLN_ESTADO = TRUE AND 
		CVCLN_CODIGO = IN_CVCLN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CILINDRAJE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_VEH_CILINDRAJE
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CILINDRAJE_DELETE(
IN IN_CVCLN_CODIGO SII.CGG_VEH_CILINDRAJE.CVCLN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_CILINDRAJE
	WHERE
		CVCLN_CODIGO = IN_CVCLN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_CILINDRAJE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_VEH_CILINDRAJE
* @param IN_CVCLN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CILINDRAJE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_CILINDRAJE_DELETE_SOFT(
IN IN_CVCLN_CODIGO SII.CGG_VEH_CILINDRAJE.CVCLN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_CILINDRAJE SET
		CVCLN_ESTADO = FALSE
	WHERE
		CVCLN_CODIGO = IN_CVCLN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

