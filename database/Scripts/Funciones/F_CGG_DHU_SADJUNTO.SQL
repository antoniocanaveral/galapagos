/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_SADJUNTO.
* @param IN_CDSAD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL ADJUNTO DE SEGUIMIENTO
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @param IN_CDBCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CDSAD_FECHA_REGISTRO FECHA DE REGISTRO DEL ADJUNTO
* @param IN_CDSAD_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CDSAD_ADJUNTO DOCUMENTO DIGITALIZADO
* @param IN_CDSAD_OBSERVACION INFORMACION ADICIONAL
* @param IN_CDSAD_ESTADO ESTADO DEL REGISTRO
* @param IN_CDSAD_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDSAD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_INSERT(
IN IN_CDSAD_CODIGO SII.CGG_DHU_SADJUNTO.CDSAD_CODIGO%TYPE, 
IN IN_CDACD_CODIGO SII.CGG_DHU_SADJUNTO.CDACD_CODIGO%TYPE, 
IN IN_CDBCR_CODIGO SII.CGG_DHU_SADJUNTO.CDBCR_CODIGO%TYPE, 
IN IN_CDSAD_FECHA_REGISTRO SII.CGG_DHU_SADJUNTO.CDSAD_FECHA_REGISTRO%TYPE, 
IN IN_CDSAD_NOMBRE_ADJUNTO SII.CGG_DHU_SADJUNTO.CDSAD_NOMBRE_ADJUNTO%TYPE, 
IN IN_CDSAD_ADJUNTO SII.CGG_DHU_SADJUNTO.CDSAD_ADJUNTO%TYPE, 
IN IN_CDSAD_OBSERVACION SII.CGG_DHU_SADJUNTO.CDSAD_OBSERVACION%TYPE, 
IN IN_CDSAD_ESTADO SII.CGG_DHU_SADJUNTO.CDSAD_ESTADO%TYPE, 
IN IN_CDSAD_USUARIO_INSERT SII.CGG_DHU_SADJUNTO.CDSAD_USUARIO_INSERT%TYPE, 
IN IN_CDSAD_USUARIO_UPDATE SII.CGG_DHU_SADJUNTO.CDSAD_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDSAD_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_SADJUNTO','CDSAD_CODIGO','CDSAD') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDSAD_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_SADJUNTO(
		CDSAD_CODIGO, 
		CDACD_CODIGO, 
		CDBCR_CODIGO, 
		CDSAD_FECHA_REGISTRO, 
		CDSAD_NOMBRE_ADJUNTO, 
		CDSAD_ADJUNTO, 
		CDSAD_OBSERVACION, 
		CDSAD_ESTADO, 
		CDSAD_FECHA_INSERT, 
		CDSAD_USUARIO_INSERT, 
		CDSAD_FECHA_UPDATE, 
		CDSAD_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CDACD_CODIGO, 
		IN_CDBCR_CODIGO, 
		IN_CDSAD_FECHA_REGISTRO, 
		IN_CDSAD_NOMBRE_ADJUNTO, 
		IN_CDSAD_ADJUNTO, 
		IN_CDSAD_OBSERVACION, 
		IN_CDSAD_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDSAD_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDSAD_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_SADJUNTO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDSAD_CODIGO, 
		CDACD_CODIGO, 
		CDBCR_CODIGO, 
		CDSAD_FECHA_REGISTRO, 
		CDSAD_NOMBRE_ADJUNTO, 
		CDSAD_ADJUNTO, 
		CDSAD_OBSERVACION, 
		CDSAD_ESTADO, 
		CDSAD_FECHA_INSERT, 
		CDSAD_USUARIO_INSERT, 
		CDSAD_FECHA_UPDATE, 
		CDSAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_SADJUNTO
	WHERE CDSAD_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_SADJUNTO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CDSAD_CODIGO, 
		CDACD_CODIGO, 
		CDBCR_CODIGO, 
		CDSAD_FECHA_REGISTRO, 
		CDSAD_NOMBRE_ADJUNTO, 
		CDSAD_ADJUNTO, 
		CDSAD_OBSERVACION, 
		CDSAD_ESTADO, 
		CDSAD_FECHA_INSERT, 
		CDSAD_USUARIO_INSERT, 
		CDSAD_FECHA_UPDATE, 
		CDSAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_SADJUNTO
	WHERE CDSAD_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CDSAD_CODIGO IS NULL THEN '''' ELSE CDSAD_CODIGO END ||'' ''||CASE WHEN CDACD_CODIGO IS NULL THEN '''' ELSE CDACD_CODIGO END ||'' ''||CASE WHEN CDBCR_CODIGO IS NULL THEN '''' ELSE CDBCR_CODIGO END ||'' ''||CASE WHEN CDSAD_FECHA_REGISTRO IS NULL THEN CURRENT_TIMESTAMP ELSE CDSAD_FECHA_REGISTRO END ||'' ''||CASE WHEN CDSAD_NOMBRE_ADJUNTO IS NULL THEN '''' ELSE CDSAD_NOMBRE_ADJUNTO END ||'' ''||CASE WHEN CDSAD_OBSERVACION IS NULL THEN '''' ELSE CDSAD_OBSERVACION END ||'' ''||CASE WHEN CDSAD_ESTADO IS NULL THEN FALSE ELSE CDSAD_ESTADO END ||'' ''||CASE WHEN CDSAD_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDSAD_FECHA_INSERT END ||'' ''||CASE WHEN CDSAD_USUARIO_INSERT IS NULL THEN '''' ELSE CDSAD_USUARIO_INSERT END ||'' ''||CASE WHEN CDSAD_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDSAD_FECHA_UPDATE END ||'' ''||CASE WHEN CDSAD_USUARIO_UPDATE IS NULL THEN '''' ELSE CDSAD_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_SADJUNTO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_SADJUNTO
	WHERE CDSAD_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_SADJUNTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_SADJUNTO
	WHERE CDSAD_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CDSAD_CODIGO IS NULL THEN '''' ELSE CDSAD_CODIGO END ||' '||CASE WHEN CDACD_CODIGO IS NULL THEN '''' ELSE CDACD_CODIGO END ||' '||CASE WHEN CDBCR_CODIGO IS NULL THEN '''' ELSE CDBCR_CODIGO END ||' '||CASE WHEN CDSAD_FECHA_REGISTRO IS NULL THEN CURRENT_TIMESTAMP ELSE CDSAD_FECHA_REGISTRO END ||' '||CASE WHEN CDSAD_NOMBRE_ADJUNTO IS NULL THEN '''' ELSE CDSAD_NOMBRE_ADJUNTO END ||' '||CASE WHEN CDSAD_OBSERVACION IS NULL THEN '''' ELSE CDSAD_OBSERVACION END ||' '||CASE WHEN CDSAD_ESTADO IS NULL THEN FALSE ELSE CDSAD_ESTADO END ||' '||CASE WHEN CDSAD_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDSAD_FECHA_INSERT END ||' '||CASE WHEN CDSAD_USUARIO_INSERT IS NULL THEN '''' ELSE CDSAD_USUARIO_INSERT END ||' '||CASE WHEN CDSAD_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDSAD_FECHA_UPDATE END ||' '||CASE WHEN CDSAD_USUARIO_UPDATE IS NULL THEN '''' ELSE CDSAD_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_SADJUNTO.
* @param IN_CDSAD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL ADJUNTO DE SEGUIMIENTO
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @param IN_CDBCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CDSAD_FECHA_REGISTRO FECHA DE REGISTRO DEL ADJUNTO
* @param IN_CDSAD_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CDSAD_ADJUNTO DOCUMENTO DIGITALIZADO
* @param IN_CDSAD_OBSERVACION INFORMACION ADICIONAL
* @param IN_CDSAD_ESTADO ESTADO DEL REGISTRO
* @param IN_CDSAD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_UPDATE(
IN IN_CDSAD_CODIGO SII.CGG_DHU_SADJUNTO.CDSAD_CODIGO%TYPE, 
IN IN_CDACD_CODIGO SII.CGG_DHU_SADJUNTO.CDACD_CODIGO%TYPE, 
IN IN_CDBCR_CODIGO SII.CGG_DHU_SADJUNTO.CDBCR_CODIGO%TYPE, 
IN IN_CDSAD_FECHA_REGISTRO SII.CGG_DHU_SADJUNTO.CDSAD_FECHA_REGISTRO%TYPE, 
IN IN_CDSAD_NOMBRE_ADJUNTO SII.CGG_DHU_SADJUNTO.CDSAD_NOMBRE_ADJUNTO%TYPE, 
IN IN_CDSAD_ADJUNTO SII.CGG_DHU_SADJUNTO.CDSAD_ADJUNTO%TYPE, 
IN IN_CDSAD_OBSERVACION SII.CGG_DHU_SADJUNTO.CDSAD_OBSERVACION%TYPE, 
IN IN_CDSAD_ESTADO SII.CGG_DHU_SADJUNTO.CDSAD_ESTADO%TYPE, 
IN IN_CDSAD_USUARIO_UPDATE SII.CGG_DHU_SADJUNTO.CDSAD_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SADJUNTO SET
		CDACD_CODIGO = IN_CDACD_CODIGO, 
		CDBCR_CODIGO = IN_CDBCR_CODIGO, 
		CDSAD_FECHA_REGISTRO = IN_CDSAD_FECHA_REGISTRO, 
		CDSAD_NOMBRE_ADJUNTO = IN_CDSAD_NOMBRE_ADJUNTO, 
		CDSAD_ADJUNTO = IN_CDSAD_ADJUNTO, 
		CDSAD_OBSERVACION = IN_CDSAD_OBSERVACION, 
		CDSAD_ESTADO = IN_CDSAD_ESTADO, 
		CDSAD_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDSAD_USUARIO_UPDATE = IN_CDSAD_USUARIO_UPDATE
	WHERE
		CDSAD_CODIGO = IN_CDSAD_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_SADJUNTO
* @param IN_CDSAD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL ADJUNTO DE SEGUIMIENTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_SELECT(
IN IN_CDSAD_CODIGO SII.CGG_DHU_SADJUNTO.CDSAD_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDSAD_CODIGO, 
		CDACD_CODIGO, 
		CDBCR_CODIGO, 
		CDSAD_FECHA_REGISTRO, 
		CDSAD_NOMBRE_ADJUNTO, 
		CDSAD_ADJUNTO, 
		CDSAD_OBSERVACION, 
		CDSAD_ESTADO, 
		CDSAD_FECHA_INSERT, 
		CDSAD_USUARIO_INSERT, 
		CDSAD_FECHA_UPDATE, 
		CDSAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_SADJUNTO
	WHERE CDSAD_ESTADO = TRUE AND 
		CDSAD_CODIGO = IN_CDSAD_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_SADJUNTO.
* @param IN_CDSAD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL ADJUNTO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_DELETE(
IN IN_CDSAD_CODIGO SII.CGG_DHU_SADJUNTO.CDSAD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_SADJUNTO
	WHERE
		CDSAD_CODIGO = IN_CDSAD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_SADJUNTO
* @param IN_CDSAD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DEL ADJUNTO DE SEGUIMIENTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_DELETE_SOFT(
IN IN_CDSAD_CODIGO SII.CGG_DHU_SADJUNTO.CDSAD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SADJUNTO SET
		CDSAD_ESTADO = FALSE
	WHERE
		CDSAD_CODIGO = IN_CDSAD_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_S_CGG_DHU_BECA_CERTIFICADO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA_CERTIFICADO.
* @param IN_CDBCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_S_CGG_DHU_BECA_CERTIFICADO(
IN IN_CDBCR_CODIGO SII.CGG_DHU_SADJUNTO.CDBCR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDSAD_CODIGO, 
		CDACD_CODIGO, 
		CDBCR_CODIGO, 
		CDSAD_FECHA_REGISTRO, 
		CDSAD_NOMBRE_ADJUNTO, 
		CDSAD_ADJUNTO, 
		CDSAD_OBSERVACION, 
		CDSAD_ESTADO, 
		CDSAD_FECHA_INSERT, 
		CDSAD_USUARIO_INSERT, 
		CDSAD_FECHA_UPDATE, 
		CDSAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_SADJUNTO
	WHERE CDSAD_ESTADO = TRUE AND 
		CDBCR_CODIGO = IN_CDBCR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_D_CGG_DHU_BECA_CERTIFICADO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA_CERTIFICADO.
* @param IN_CDBCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_D_CGG_DHU_BECA_CERTIFICADO(
IN IN_CDBCR_CODIGO SII.CGG_DHU_SADJUNTO.CDBCR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_SADJUNTO
	WHERE
		CDBCR_CODIGO = IN_CDBCR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_D_CGG_DHU_BECA_CERTIFICADO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA_CERTIFICADO.
* @param IN_CDBCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_DS_CGG_DHU_BECA_CERTIFICADO(
IN IN_CDBCR_CODIGO SII.CGG_DHU_SADJUNTO.CDBCR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SADJUNTO SET
		cdsad_estado = false
	WHERE
		CDBCR_CODIGO = IN_CDBCR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_S_CGG_DHU_SEGUIMIENTO_ACADEMICO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_S_CGG_DHU_SEGUIMIENTO_ACADEMICO(
IN IN_CDACD_CODIGO SII.CGG_DHU_SADJUNTO.CDACD_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDSAD_CODIGO, 
		CDACD_CODIGO, 
		CDBCR_CODIGO, 
		CDSAD_FECHA_REGISTRO, 
		CDSAD_NOMBRE_ADJUNTO, 
		CDSAD_ADJUNTO, 
		CDSAD_OBSERVACION, 
		CDSAD_ESTADO, 
		CDSAD_FECHA_INSERT, 
		CDSAD_USUARIO_INSERT, 
		CDSAD_FECHA_UPDATE, 
		CDSAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_SADJUNTO
	WHERE CDSAD_ESTADO = TRUE AND 
		CDACD_CODIGO = IN_CDACD_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_D_CGG_DHU_SEGUIMIENTO_ACADEMICO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_D_CGG_DHU_SEGUIMIENTO_ACADEMICO(
IN IN_CDACD_CODIGO SII.CGG_DHU_SADJUNTO.CDACD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_SADJUNTO
	WHERE
		CDACD_CODIGO = IN_CDACD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SADJUNTO_D_CGG_DHU_SEGUIMIENTO_ACADEMICO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SADJUNTO_DS_CGG_DHU_SEGUIMIENTO_ACADEMICO(
IN IN_CDACD_CODIGO SII.CGG_DHU_SADJUNTO.CDACD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SADJUNTO SET
		cdsad_estado = false
	WHERE
		CDACD_CODIGO = IN_CDACD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

