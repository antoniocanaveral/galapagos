/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE
* @param IN_CRPEX_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CGG_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRPEX_FECHA_OPERACION FECHA REGISTRADA DE ULTIMO MOVIMIENTO ENTRADA/SALIDA
* @param IN_CRPEX_MOVIMIENTO TIPO DE OPERACION REALIZADA ENTRADA/SALIDA
* @param IN_CRPEX_OBSERVACION OBSERVACION DE LA OPERACION REALIZADA
* @param IN_CRPEX_ESTADO ESTADO DEL REGISTRO
* @param IN_CRPEX_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRPEX_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_INSERT(
IN IN_CRPEX_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CUSU_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPER_CODIGO%TYPE, 
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CGG_CRPER_CODIGO%TYPE, 
IN IN_CRPEX_FECHA_OPERACION SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_FECHA_OPERACION%TYPE, 
IN IN_CRPEX_MOVIMIENTO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_MOVIMIENTO%TYPE, 
IN IN_CRPEX_OBSERVACION SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_OBSERVACION%TYPE, 
IN IN_CRPEX_ESTADO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_ESTADO%TYPE, 
IN IN_CRPEX_USUARIO_INSERT SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_USUARIO_INSERT%TYPE, 
IN IN_CRPEX_USUARIO_UPDATE SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRPEX_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_PRESTAMO_EXPEDIENTE','CRPEX_CODIGO','CRPEX') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRPEX_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_PRESTAMO_EXPEDIENTE(
		CRPEX_CODIGO, 
		CUSU_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPEX_FECHA_OPERACION, 
		CRPEX_MOVIMIENTO, 
		CRPEX_OBSERVACION, 
		CRPEX_ESTADO, 
		CRPEX_FECHA_INSERT, 
		CRPEX_USUARIO_INSERT, 
		CRPEX_FECHA_UPDATE, 
		CRPEX_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CUSU_CODIGO, 
		IN_CRPER_CODIGO, 
		IN_CGG_CRPER_CODIGO, 
		IN_CRPEX_FECHA_OPERACION, 
		IN_CRPEX_MOVIMIENTO, 
		IN_CRPEX_OBSERVACION, 
		IN_CRPEX_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRPEX_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRPEX_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPEX_CODIGO, 
		CUSU_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPEX_FECHA_OPERACION, 
		CRPEX_MOVIMIENTO, 
		CRPEX_OBSERVACION, 
		CRPEX_ESTADO, 
		CRPEX_FECHA_INSERT, 
		CRPEX_USUARIO_INSERT, 
		CRPEX_FECHA_UPDATE, 
		CRPEX_USUARIO_UPDATE
	FROM SII.CGG_RES_PRESTAMO_EXPEDIENTE
	WHERE CRPEX_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRPEX_CODIGO, 
		CUSU_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPEX_FECHA_OPERACION, 
		CRPEX_MOVIMIENTO, 
		CRPEX_OBSERVACION, 
		CRPEX_ESTADO, 
		CRPEX_FECHA_INSERT, 
		CRPEX_USUARIO_INSERT, 
		CRPEX_FECHA_UPDATE, 
		CRPEX_USUARIO_UPDATE
	FROM SII.CGG_RES_PRESTAMO_EXPEDIENTE
	WHERE CRPEX_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRPEX_FECHA_OPERACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRPEX_MOVIMIENTO, 0)||'' ''||COALESCE(CRPEX_OBSERVACION, '''')||'' ''||COALESCE(CRPEX_ESTADO, FALSE)||'' ''||COALESCE(CRPEX_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRPEX_USUARIO_INSERT, '''')||'' ''||COALESCE(CRPEX_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRPEX_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_PERSONA PER
		LEFT JOIN SII.CGG_RES_PRESTAMO_EXPEDIENTE PEX
		ON (PER.CRPER_CODIGO = PEX.CRPER_CODIGO)
		WHERE PER.CRPER_NUMERO_EXPEDIENTE IS NOT NULL AND PER.CRPER_ESTADO=TRUE AND CRPEX_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_PRESTAMO_EXPEDIENTE
	WHERE CRPEX_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRPEX_FECHA_OPERACION, CURRENT_TIMESTAMP)||' '||COALESCE(CRPEX_MOVIMIENTO, 0)||' '||COALESCE(CRPEX_OBSERVACION, '''')||' '||COALESCE(CRPEX_ESTADO, FALSE)||' '||COALESCE(CRPEX_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRPEX_USUARIO_INSERT, '''')||' '||COALESCE(CRPEX_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRPEX_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_PRESTAMO_EXPEDIENTE
* @param IN_CRPEX_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CGG_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRPEX_FECHA_OPERACION FECHA REGISTRADA DE ULTIMO MOVIMIENTO ENTRADA/SALIDA
* @param IN_CRPEX_MOVIMIENTO TIPO DE OPERACION REALIZADA ENTRADA/SALIDA
* @param IN_CRPEX_OBSERVACION OBSERVACION DE LA OPERACION REALIZADA
* @param IN_CRPEX_ESTADO ESTADO DEL REGISTRO
* @param IN_CRPEX_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_UPDATE(
IN IN_CRPEX_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CUSU_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPER_CODIGO%TYPE, 
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CGG_CRPER_CODIGO%TYPE, 
IN IN_CRPEX_FECHA_OPERACION SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_FECHA_OPERACION%TYPE, 
IN IN_CRPEX_MOVIMIENTO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_MOVIMIENTO%TYPE, 
IN IN_CRPEX_OBSERVACION SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_OBSERVACION%TYPE, 
IN IN_CRPEX_ESTADO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_ESTADO%TYPE, 
IN IN_CRPEX_USUARIO_UPDATE SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PRESTAMO_EXPEDIENTE SET
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CGG_CRPER_CODIGO = IN_CGG_CRPER_CODIGO, 
		CRPEX_FECHA_OPERACION = IN_CRPEX_FECHA_OPERACION, 
		CRPEX_MOVIMIENTO = IN_CRPEX_MOVIMIENTO, 
		CRPEX_OBSERVACION = IN_CRPEX_OBSERVACION, 
		CRPEX_ESTADO = IN_CRPEX_ESTADO, 
		CRPEX_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRPEX_USUARIO_UPDATE = IN_CRPEX_USUARIO_UPDATE
	WHERE
		CRPEX_CODIGO = IN_CRPEX_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE
* @param IN_CRPEX_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_SELECT(
IN IN_CRPEX_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPEX_CODIGO, 
		CUSU_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPEX_FECHA_OPERACION, 
		CRPEX_MOVIMIENTO, 
		CRPEX_OBSERVACION, 
		CRPEX_ESTADO, 
		CRPEX_FECHA_INSERT, 
		CRPEX_USUARIO_INSERT, 
		CRPEX_FECHA_UPDATE, 
		CRPEX_USUARIO_UPDATE
	FROM SII.CGG_RES_PRESTAMO_EXPEDIENTE
	WHERE CRPEX_ESTADO = TRUE AND 
		CRPEX_CODIGO = IN_CRPEX_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE
* @param IN_CRPEX_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_DELETE(
IN IN_CRPEX_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_PRESTAMO_EXPEDIENTE
	WHERE
		CRPEX_CODIGO = IN_CRPEX_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE
* @param IN_CRPEX_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_DELETE_SOFT(
IN IN_CRPEX_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPEX_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PRESTAMO_EXPEDIENTE SET
		CRPEX_ESTADO = FALSE
	WHERE
		CRPEX_CODIGO = IN_CRPEX_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPEX_CODIGO, 
		CUSU_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPEX_FECHA_OPERACION, 
		CRPEX_MOVIMIENTO, 
		CRPEX_OBSERVACION, 
		CRPEX_ESTADO, 
		CRPEX_FECHA_INSERT, 
		CRPEX_USUARIO_INSERT, 
		CRPEX_FECHA_UPDATE, 
		CRPEX_USUARIO_UPDATE
	FROM SII.CGG_RES_PRESTAMO_EXPEDIENTE
	WHERE CRPEX_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_PRESTAMO_EXPEDIENTE
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PRESTAMO_EXPEDIENTE SET
		crpex_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CGG_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPER_CODIGO%TYPE, 
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CGG_CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPEX_CODIGO, 
		CUSU_CODIGO, 
		CRPER_CODIGO, 
		CGG_CRPER_CODIGO, 
		CRPEX_FECHA_OPERACION, 
		CRPEX_MOVIMIENTO, 
		CRPEX_OBSERVACION, 
		CRPEX_ESTADO, 
		CRPEX_FECHA_INSERT, 
		CRPEX_USUARIO_INSERT, 
		CRPEX_FECHA_UPDATE, 
		CRPEX_USUARIO_UPDATE
	FROM SII.CGG_RES_PRESTAMO_EXPEDIENTE
	WHERE CRPEX_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO AND 
		CGG_CRPER_CODIGO = IN_CGG_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CGG_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPER_CODIGO%TYPE, 
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CGG_CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_PRESTAMO_EXPEDIENTE
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO AND 
		CGG_CRPER_CODIGO = IN_CGG_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PRESTAMO_EXPEDIENTE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CGG_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PRESTAMO_EXPEDIENTE_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CRPER_CODIGO%TYPE, 
IN IN_CGG_CRPER_CODIGO SII.CGG_RES_PRESTAMO_EXPEDIENTE.CGG_CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PRESTAMO_EXPEDIENTE SET
		crpex_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO AND 
		CGG_CRPER_CODIGO = IN_CGG_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

