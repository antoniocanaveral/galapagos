/**
* FUNCION SII.F_CGG_SEC_OBJETO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_SEC_OBJETO
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @param IN_CSOBJ_NOMBRE NOMBRE DEL OBJETO
* @param IN_CSOBJ_RUTA RUTA DEL ARCHIVO QUE CONTIENE AL OBJETO
* @param IN_CSOBJ_DESCRIPCION TEXTO DESCRIPTIVO DEL OBJETO
* @param IN_CSOBJ_TIPO TIPO DE OBJETO
0 - INTERFACE VISUAL
1 - SERVICIOS WEB
* @param IN_CSOBJ_ESTADO ESTADO DEL REGISTRO
* @param IN_CSOBJ_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CSOBJ_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_INSERT(
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO.CSOBJ_CODIGO%TYPE,
IN IN_CSOBJ_NOMBRE SII.CGG_SEC_OBJETO.CSOBJ_NOMBRE%TYPE,
IN IN_CSOBJ_RUTA SII.CGG_SEC_OBJETO.CSOBJ_RUTA%TYPE,
IN IN_CSOBJ_DESCRIPCION SII.CGG_SEC_OBJETO.CSOBJ_DESCRIPCION%TYPE,
IN IN_CSOBJ_TIPO SII.CGG_SEC_OBJETO.CSOBJ_TIPO%TYPE,
IN IN_CSOBJ_ESTADO SII.CGG_SEC_OBJETO.CSOBJ_ESTADO%TYPE,
IN IN_CSOBJ_USUARIO_INSERT SII.CGG_SEC_OBJETO.CSOBJ_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN
	SELECT COUNT(CSOBJ_CODIGO) INTO TMP_COUNT FROM SII.CGG_SEC_OBJETO WHERE CSOBJ_NOMBRE = IN_CSOBJ_NOMBRE AND CSOBJ_RUTA = IN_CSOBJ_RUTA;
	IF (TMP_COUNT > 0) THEN
		SELECT CSOBJ_CODIGO INTO OUT_KEY FROM SII.CGG_SEC_OBJETO WHERE CSOBJ_NOMBRE = IN_CSOBJ_NOMBRE AND CSOBJ_RUTA = IN_CSOBJ_RUTA;
		RETURN OUT_KEY;
	END IF;
	IF (UPPER(IN_CSOBJ_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_SEC_OBJETO','CSOBJ_CODIGO','CSOBJ') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CSOBJ_CODIGO;
	END IF;
	INSERT INTO SII.CGG_SEC_OBJETO(
		CSOBJ_CODIGO, 
		CSOBJ_NOMBRE, 
		CSOBJ_RUTA, 
		CSOBJ_DESCRIPCION, 
		CSOBJ_TIPO, 
		CSOBJ_ESTADO, 
		CSOBJ_FECHA_INSERT, 
		CSOBJ_USUARIO_INSERT, 
		CSOBJ_FECHA_UPDATE, 
		CSOBJ_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CSOBJ_NOMBRE, 
		IN_CSOBJ_RUTA, 
		IN_CSOBJ_DESCRIPCION, 
		IN_CSOBJ_TIPO, 
		IN_CSOBJ_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CSOBJ_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CSOBJ_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_SEC_OBJETO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSOBJ_CODIGO, 
		CSOBJ_NOMBRE, 
		CSOBJ_RUTA, 
		CSOBJ_DESCRIPCION, 
		CSOBJ_TIPO, 
		CSOBJ_ESTADO, 
		CSOBJ_FECHA_INSERT, 
		CSOBJ_USUARIO_INSERT, 
		CSOBJ_FECHA_UPDATE, 
		CSOBJ_USUARIO_UPDATE
	FROM SII.CGG_SEC_OBJETO
	WHERE CSOBJ_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SEC_OBJETO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRSOL_CODIGO IDENTIFICATIVO UNICO DE ROL.
* @param IN_TYPE_OBJECT TIPO DE OBJETOS DEL SISTEMA. 0 - INTERFACE VISUAL, 1 - SERVICIOS WEB
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_TYPE_OBJECT INT,
IN IN_CSROL_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		OBJ.CSOBJ_CODIGO, 
		OBJ.CSOBJ_NOMBRE, 
		OBJ.CSOBJ_RUTA, 
		OBJ.CSOBJ_DESCRIPCION, 
		OBJ.CSOBJ_TIPO, 
		OBJ.CSOBJ_ESTADO, 
		OBJ.CSOBJ_FECHA_INSERT, 
		OBJ.CSOBJ_USUARIO_INSERT, 
		OBJ.CSOBJ_FECHA_UPDATE, 
		OBJ.CSOBJ_USUARIO_UPDATE,
		(SELECT COUNT(CSBJD_CODIGO) FROM SII.CGG_SEC_OBJ_DEPENDENCIA WHERE CSOBJ_CODIGO = OBJ.CSOBJ_CODIGO) DEPENDENCIAS
	FROM SII.CGG_SEC_OBJETO OBJ
	WHERE CSOBJ_ESTADO AND
		CSOBJ_TIPO = '||IN_TYPE_OBJECT||' AND
		(LENGTH('||QUOTE_LITERAL(IN_CSROL_CODIGO)||') = 0 OR CSOBJ_CODIGO NOT IN (SELECT CSOBJ_CODIGO FROM SII.CGG_SEC_OBJETO_ROL WHERE CSBJR_ESTADO AND CSROL_CODIGO = '||QUOTE_LITERAL(IN_CSROL_CODIGO)||') ) AND 
		SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CSOBJ_NOMBRE, '''')||'' ''||COALESCE(CSOBJ_RUTA, '''')||'' ''||COALESCE(CSOBJ_DESCRIPCION, '''')||'' ''||COALESCE(CSOBJ_TIPO, 0)||'' ''||COALESCE(CSOBJ_ESTADO, FALSE)||'' ''||COALESCE(CSOBJ_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CSOBJ_USUARIO_INSERT, '''')||'' ''||COALESCE(CSOBJ_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CSOBJ_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_OBJETO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_COUNT(
IN IN_TYPE_OBJECT INT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_OBJETO
	WHERE CSOBJ_ESTADO AND
		CSOBJ_TIPO = IN_TYPE_OBJECT;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_OBJETO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_TYPE_OBJECT TIPO DE OBJETOS DEL SISTEMA. 0 - INTERFACE VISUAL, 1 - SERVICIOS WEB
* @param IN_CSROL_CODIGO IDENTIFICATIVO UNICO DE ROL.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_TYPE_OBJECT INT,
IN IN_CSROL_CODIGO SII.CGG_SEC_ROL.CSROL_CODIGO%TYPE
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_OBJETO
	WHERE CSOBJ_ESTADO AND
		CSOBJ_TIPO = IN_TYPE_OBJECT AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CSOBJ_NOMBRE, '')||' '||COALESCE(CSOBJ_RUTA, '')||' '||COALESCE(CSOBJ_DESCRIPCION, '''')||' '||COALESCE(CSOBJ_TIPO, 0)) = 1 AND
		(LENGTH(IN_CSROL_CODIGO) = 0 OR CSOBJ_CODIGO NOT IN (SELECT CSOBJ_CODIGO FROM SII.CGG_SEC_OBJETO_ROL WHERE CSROL_CODIGO = IN_CSROL_CODIGO) );
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_SEC_OBJETO
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @param IN_CSOBJ_NOMBRE NOMBRE DEL OBJETO
* @param IN_CSOBJ_RUTA RUTA DEL ARCHIVO QUE CONTIENE AL OBJETO
* @param IN_CSOBJ_DESCRIPCION TEXTO DESCRIPTIVO DEL OBJETO
* @param IN_CSOBJ_TIPO TIPO DE OBJETO
0 - INTERFACE VISUAL
1 - SERVICIOS WEB
* @param IN_CSOBJ_ESTADO ESTADO DEL REGISTRO
* @param IN_CSOBJ_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_UPDATE(
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO.CSOBJ_CODIGO%TYPE,
IN IN_CSOBJ_NOMBRE SII.CGG_SEC_OBJETO.CSOBJ_NOMBRE%TYPE,
IN IN_CSOBJ_RUTA SII.CGG_SEC_OBJETO.CSOBJ_RUTA%TYPE,
IN IN_CSOBJ_DESCRIPCION SII.CGG_SEC_OBJETO.CSOBJ_DESCRIPCION%TYPE,
IN IN_CSOBJ_TIPO SII.CGG_SEC_OBJETO.CSOBJ_TIPO%TYPE,
IN IN_CSOBJ_ESTADO SII.CGG_SEC_OBJETO.CSOBJ_ESTADO%TYPE,
IN IN_CSOBJ_USUARIO_UPDATE SII.CGG_SEC_OBJETO.CSOBJ_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_OBJETO SET
		CSOBJ_NOMBRE = IN_CSOBJ_NOMBRE, 
		CSOBJ_RUTA = IN_CSOBJ_RUTA, 
		CSOBJ_DESCRIPCION = IN_CSOBJ_DESCRIPCION, 
		CSOBJ_TIPO = IN_CSOBJ_TIPO, 
		CSOBJ_ESTADO = IN_CSOBJ_ESTADO, 
		CSOBJ_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CSOBJ_USUARIO_UPDATE = IN_CSOBJ_USUARIO_UPDATE
	WHERE
		CSOBJ_CODIGO = IN_CSOBJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_SEC_OBJETO
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_SELECT(
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO.CSOBJ_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSOBJ_CODIGO, 
		CSOBJ_NOMBRE, 
		CSOBJ_RUTA, 
		CSOBJ_DESCRIPCION, 
		CSOBJ_TIPO, 
		CSOBJ_ESTADO, 
		CSOBJ_FECHA_INSERT, 
		CSOBJ_USUARIO_INSERT, 
		CSOBJ_FECHA_UPDATE, 
		CSOBJ_USUARIO_UPDATE
	FROM SII.CGG_SEC_OBJETO
	WHERE CSOBJ_ESTADO = TRUE AND 
		CSOBJ_CODIGO = IN_CSOBJ_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_SEC_OBJETO
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_DELETE(
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO.CSOBJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_OBJETO
	WHERE
		CSOBJ_CODIGO = IN_CSOBJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_OBJETO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_SEC_OBJETO
* @param IN_CSOBJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OBJETO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_OBJETO_DELETE_SOFT(
IN IN_CSOBJ_CODIGO SII.CGG_SEC_OBJETO.CSOBJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_OBJETO SET
		CSOBJ_ESTADO = FALSE
	WHERE
		CSOBJ_CODIGO = IN_CSOBJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_SELECT_OBJ_FOR
* SELECCIONA LOS OBJETOS QUE TIENE PRIVILEGIOS EL USUARIO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_SELECT_OBJ_FOR(
IN IN_USER_NAME VARCHAR,
IN IN_DESKTOP BOOLEAN
)RETURNS REFCURSOR AS
$$
DECLARE
OUT_CURSOR REFCURSOR;
BEGIN
	IF (IN_DESKTOP) THEN
		OPEN OUT_CURSOR FOR
			SELECT DISTINCT(OBJ.CSOBJ_RUTA), CSBJR_ACCESO_DIRECTO_TEXTO
			FROM SII.CGG_SEC_OBJETO OBJ
			INNER JOIN SII.CGG_SEC_OBJETO_ROL BJR ON BJR.CSOBJ_CODIGO = OBJ.CSOBJ_CODIGO AND BJR.CSBJR_ESTADO AND BJR.CSBJR_ACCESO_DIRECTO
			INNER JOIN SII.CGG_SEC_USUARIO_ROL UR ON UR.CSROL_CODIGO = BJR.CSROL_CODIGO AND UR.CSPER_ESTADO
			INNER JOIN SII.CGG_USUARIO U ON U.CUSU_CODIGO = UR.CUSU_CODIGO AND U.CUSU_NOMBRE_USUARIO = IN_USER_NAME
			WHERE OBJ.CSOBJ_TIPO = 0;
	ELSE
		OPEN OUT_CURSOR FOR
			SELECT DISTINCT(OBJ.CSOBJ_RUTA), NULL
			FROM SII.CGG_SEC_OBJETO OBJ
			INNER JOIN SII.CGG_SEC_OBJETO_ROL BJR ON BJR.CSOBJ_CODIGO = OBJ.CSOBJ_CODIGO AND BJR.CSBJR_ESTADO
			INNER JOIN SII.CGG_SEC_USUARIO_ROL UR ON UR.CSROL_CODIGO = BJR.CSROL_CODIGO AND UR.CSPER_ESTADO
			INNER JOIN SII.CGG_USUARIO U ON U.CUSU_CODIGO = UR.CUSU_CODIGO AND U.CUSU_NOMBRE_USUARIO = IN_USER_NAME
			WHERE OBJ.CSOBJ_TIPO = 0;
	END IF;
	RETURN OUT_CURSOR;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_SELECT_DEP_OBJ_FOR
* SELECCIONA LAS DEPENDENCIAS DE UN OBJETO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_SELECT_DEP_OBJ_FOR(
IN IN_USER_NAME VARCHAR
)RETURNS REFCURSOR AS
$$
DECLARE
OUT_CURSOR REFCURSOR;
BEGIN
	OPEN OUT_CURSOR FOR
		SELECT DISTINCT(OBJ.CSOBJ_RUTA)
		FROM SII.CGG_SEC_OBJ_DEPENDENCIA DPD
		INNER JOIN SII.CGG_SEC_OBJETO OBJ ON OBJ.CSOBJ_CODIGO = DPD.CGG_CSOBJ_CODIGO 
		WHERE DPD.CSOBJ_CODIGO IN (SELECT OBJ.CSOBJ_CODIGO
			FROM SII.CGG_SEC_OBJETO OBJ
			INNER JOIN SII.CGG_SEC_OBJETO_ROL BJR ON BJR.CSOBJ_CODIGO = OBJ.CSOBJ_CODIGO AND BJR.CSBJR_ESTADO
			INNER JOIN SII.CGG_SEC_USUARIO_ROL UR ON UR.CSROL_CODIGO = BJR.CSROL_CODIGO AND UR.CSPER_ESTADO
			INNER JOIN SII.CGG_USUARIO U ON U.CUSU_CODIGO = UR.CUSU_CODIGO AND U.CUSU_NOMBRE_USUARIO = IN_USER_NAME
		);
	RETURN OUT_CURSOR;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;