/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_NOTIFICACION
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @param IN_CRTNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE NOTIFICACION
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CUSU_CODIGO IDENTIFICATIVO DE USUARIO QUE REGISTRO LA NOTIFICACION
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO DE USUARIO ENCARGADO DE REALIZAR LA AUDIENCIA
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DENUNCIA
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE RALIZO LA NOTIFICACION
* @param IN_CGG_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE REALIZO LA AUDIENCIA
* @param IN_CRNOT_NUMERO_NOTIFICACION NUMERO SECUENCIAL UNICO DE IDENTIFICACION
* @param IN_CRNOT_FECHA_NOTIFICACION FECHA EN QUE SE REALIZO LA NOTIFICACION
* @param IN_CRNOT_LUGAR_NOTIFICACION LUGAR/LOCAL DE LA NOTIFICACION
* @param IN_CRNOT_REFERENCIA REFERENCIA DONDE SE ENTREGO LA NOTIFICACION
* @param IN_CRNOT_OBSERVACION OBSERVACION DE LA NOTIFICACION
* @param IN_CRNOT_ESTADO_NOTIFICACION ESTADO DE LA NOTIFICACION
0 - REGISTRADA
1 - PROCESADA
2 - ANULADA
* @param IN_CRNOT_ESTADO ESTADO DEL REGISTRO
REGISTRADA
APLICADA
ANULADA

* @param IN_CRNOT_REGULARIZACION DEFINICION DE EL STATUS MIGRATORIO DE LA PERSONA
* @param IN_CRNOT_FECHA_AUDIENCIA FECHA DE  AUDIENCIA PARA ANALISIS O JUSTIFICACION DE LA NOTIFICACION
* @param IN_CRNOT_EXTRACTO_AUDIENCIA RESUMEN DEL CONTENIDO DE LA AUDIENCIA
* @param IN_CRNOT_OBSERVACION_AUDIENCIA OBSERVACION REGSITRADA EN AL AUDIENCIA
* @param IN_CRNOT_PROCEDE_NOTIFICACION ESTADO QUE DETERMINA SI SE  APLICA LA NOTIFICACION
SI
NO
* @param IN_CRNOT_DESCRIPCION_ADJUNTO_AUD DESCRIPCION DEL DOCUMENTO ADJUNTO
* @param IN_CRNOT_NOMBRE_ADJUNTO_AUDIENCIA NOMBRE DEL DOCUMENTO ADJUNTO DE LA AUDIENCIA
* @param IN_CRNOT_ADJUNTO_AUDIENCIA DOCUMENTO DIGITAL ADJUNTO DE LA AUDIENCIA
* @param IN_CRNOT_FECHA_SALIDA_VOLUNT FECHA DE SALIDA VOLUNTARIA COMO CONSECUENCIA DE LA APLICACION DE LA RESOLUCION
* @param IN_CRNOT_FECHA_EXPULSION FECHA DE EXPULSION COMO CONSECUENCIA DE LA APLICACION DE LA RESOLUCION
* @param IN_CRNOT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRNOT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_INSERT(
IN IN_CRNOT_CODIGO SII.CGG_RES_NOTIFICACION.CRNOT_CODIGO%TYPE, 
IN IN_CRTNT_CODIGO SII.CGG_RES_NOTIFICACION.CRTNT_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_NOTIFICACION.CRPER_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CUSU_CODIGO%TYPE, 
IN IN_CRRES_CODIGO SII.CGG_RES_NOTIFICACION.CRRES_CODIGO%TYPE, 
IN IN_CRDEN_CODIGO SII.CGG_RES_NOTIFICACION.CRDEN_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_RES_NOTIFICACION.CCTN_CODIGO%TYPE, 
IN IN_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CROSG_CODIGO%TYPE, 
IN IN_CGG_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CROSG_CODIGO%TYPE, 
IN IN_CRNOT_NUMERO_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_NUMERO_NOTIFICACION%TYPE, 
IN IN_CRNOT_FECHA_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_FECHA_NOTIFICACION%TYPE, 
IN IN_CRNOT_LUGAR_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_LUGAR_NOTIFICACION%TYPE, 
IN IN_CRNOT_REFERENCIA SII.CGG_RES_NOTIFICACION.CRNOT_REFERENCIA%TYPE, 
IN IN_CRNOT_OBSERVACION SII.CGG_RES_NOTIFICACION.CRNOT_OBSERVACION%TYPE, 
IN IN_CRNOT_ESTADO_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_ESTADO_NOTIFICACION%TYPE, 
IN IN_CRNOT_ESTADO SII.CGG_RES_NOTIFICACION.CRNOT_ESTADO%TYPE, 
IN IN_CRNOT_REGULARIZACION SII.CGG_RES_NOTIFICACION.CRNOT_REGULARIZACION%TYPE, 
IN IN_CRNOT_FECHA_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_FECHA_AUDIENCIA%TYPE, 
IN IN_CRNOT_EXTRACTO_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_EXTRACTO_AUDIENCIA%TYPE, 
IN IN_CRNOT_OBSERVACION_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_OBSERVACION_AUDIENCIA%TYPE, 
IN IN_CRNOT_PROCEDE_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_PROCEDE_NOTIFICACION%TYPE, 
IN IN_CRNOT_DESCRIPCION_ADJUNTO_AUD SII.CGG_RES_NOTIFICACION.CRNOT_DESCRIPCION_ADJUNTO_AUD%TYPE, 
IN IN_CRNOT_NOMBRE_ADJUNTO_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_NOMBRE_ADJUNTO_AUDIENCIA%TYPE, 
IN IN_CRNOT_ADJUNTO_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_ADJUNTO_AUDIENCIA%TYPE, 
IN IN_CRNOT_FECHA_SALIDA_VOLUNT SII.CGG_RES_NOTIFICACION.CRNOT_FECHA_SALIDA_VOLUNT%TYPE, 
IN IN_CRNOT_FECHA_EXPULSION SII.CGG_RES_NOTIFICACION.CRNOT_FECHA_EXPULSION%TYPE, 
IN IN_CRNOT_USUARIO_INSERT SII.CGG_RES_NOTIFICACION.CRNOT_USUARIO_INSERT%TYPE, 
IN IN_CRNOT_USUARIO_UPDATE SII.CGG_RES_NOTIFICACION.CRNOT_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRNOT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_NOTIFICACION','CRNOT_CODIGO','CRNOT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRNOT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_NOTIFICACION(
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRTNT_CODIGO, 
		IN_CRPER_CODIGO, 
		IN_CUSU_CODIGO, 
		IN_CGG_CUSU_CODIGO, 
		IN_CRRES_CODIGO, 
		IN_CRDEN_CODIGO, 
		IN_CCTN_CODIGO, 
		IN_CROSG_CODIGO, 
		IN_CGG_CROSG_CODIGO, 
		IN_CRNOT_NUMERO_NOTIFICACION, 
		IN_CRNOT_FECHA_NOTIFICACION, 
		IN_CRNOT_LUGAR_NOTIFICACION, 
		IN_CRNOT_REFERENCIA, 
		IN_CRNOT_OBSERVACION, 
		IN_CRNOT_ESTADO_NOTIFICACION, 
		IN_CRNOT_ESTADO, 
		IN_CRNOT_REGULARIZACION, 
		IN_CRNOT_FECHA_AUDIENCIA, 
		IN_CRNOT_EXTRACTO_AUDIENCIA, 
		IN_CRNOT_OBSERVACION_AUDIENCIA, 
		IN_CRNOT_PROCEDE_NOTIFICACION, 
		IN_CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		IN_CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		IN_CRNOT_ADJUNTO_AUDIENCIA, 
		IN_CRNOT_FECHA_SALIDA_VOLUNT, 
		IN_CRNOT_FECHA_EXPULSION, 
		CURRENT_TIMESTAMP, 
		IN_CRNOT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRNOT_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_NOTIFICACION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_NOTIFICACION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRNOT_CODIGO IS NULL THEN '''' ELSE CRNOT_CODIGO END ||'' ''||CASE WHEN CRTNT_CODIGO IS NULL THEN '''' ELSE CRTNT_CODIGO END ||'' ''||CASE WHEN CRPER_CODIGO IS NULL THEN '''' ELSE CRPER_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CGG_CUSU_CODIGO IS NULL THEN '''' ELSE CGG_CUSU_CODIGO END ||'' ''||CASE WHEN CRRES_CODIGO IS NULL THEN '''' ELSE CRRES_CODIGO END ||'' ''||CASE WHEN CRDEN_CODIGO IS NULL THEN '''' ELSE CRDEN_CODIGO END ||'' ''||CASE WHEN CCTN_CODIGO IS NULL THEN '''' ELSE CCTN_CODIGO END ||'' ''||CASE WHEN CROSG_CODIGO IS NULL THEN '''' ELSE CROSG_CODIGO END ||'' ''||CASE WHEN CGG_CROSG_CODIGO IS NULL THEN '''' ELSE CGG_CROSG_CODIGO END ||'' ''||CASE WHEN CRNOT_NUMERO_NOTIFICACION IS NULL THEN '''' ELSE CRNOT_NUMERO_NOTIFICACION END ||'' ''||CASE WHEN CRNOT_FECHA_NOTIFICACION IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_NOTIFICACION END ||'' ''||CASE WHEN CRNOT_LUGAR_NOTIFICACION IS NULL THEN '''' ELSE CRNOT_LUGAR_NOTIFICACION END ||'' ''||CASE WHEN CRNOT_REFERENCIA IS NULL THEN '''' ELSE CRNOT_REFERENCIA END ||'' ''||CASE WHEN CRNOT_OBSERVACION IS NULL THEN '''' ELSE CRNOT_OBSERVACION END ||'' ''||CASE WHEN CRNOT_ESTADO_NOTIFICACION IS NULL THEN 0 ELSE CRNOT_ESTADO_NOTIFICACION END ||'' ''||CASE WHEN CRNOT_ESTADO IS NULL THEN FALSE ELSE CRNOT_ESTADO END ||'' ''||CASE WHEN CRNOT_REGULARIZACION IS NULL THEN '''' ELSE CRNOT_REGULARIZACION END ||'' ''||CASE WHEN CRNOT_FECHA_AUDIENCIA IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_AUDIENCIA END ||'' ''||CASE WHEN CRNOT_EXTRACTO_AUDIENCIA IS NULL THEN '''' ELSE CRNOT_EXTRACTO_AUDIENCIA END ||'' ''||CASE WHEN CRNOT_OBSERVACION_AUDIENCIA IS NULL THEN '''' ELSE CRNOT_OBSERVACION_AUDIENCIA END ||'' ''||CASE WHEN CRNOT_PROCEDE_NOTIFICACION IS NULL THEN FALSE ELSE CRNOT_PROCEDE_NOTIFICACION END ||'' ''||CASE WHEN CRNOT_DESCRIPCION_ADJUNTO_AUD IS NULL THEN '''' ELSE CRNOT_DESCRIPCION_ADJUNTO_AUD END ||'' ''||CASE WHEN CRNOT_NOMBRE_ADJUNTO_AUDIENCIA IS NULL THEN '''' ELSE CRNOT_NOMBRE_ADJUNTO_AUDIENCIA END ||'' ''||CASE WHEN CRNOT_FECHA_SALIDA_VOLUNT IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_SALIDA_VOLUNT END ||'' ''||CASE WHEN CRNOT_FECHA_EXPULSION IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_EXPULSION END ||'' ''||CASE WHEN CRNOT_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_INSERT END ||'' ''||CASE WHEN CRNOT_USUARIO_INSERT IS NULL THEN '''' ELSE CRNOT_USUARIO_INSERT END ||'' ''||CASE WHEN CRNOT_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_UPDATE END ||'' ''||CASE WHEN CRNOT_USUARIO_UPDATE IS NULL THEN '''' ELSE CRNOT_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_NOTIFICACION
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_NOTIFICACION
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRNOT_CODIGO IS NULL THEN '''' ELSE CRNOT_CODIGO END ||' '||CASE WHEN CRTNT_CODIGO IS NULL THEN '''' ELSE CRTNT_CODIGO END ||' '||CASE WHEN CRPER_CODIGO IS NULL THEN '''' ELSE CRPER_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CGG_CUSU_CODIGO IS NULL THEN '''' ELSE CGG_CUSU_CODIGO END ||' '||CASE WHEN CRRES_CODIGO IS NULL THEN '''' ELSE CRRES_CODIGO END ||' '||CASE WHEN CRDEN_CODIGO IS NULL THEN '''' ELSE CRDEN_CODIGO END ||' '||CASE WHEN CCTN_CODIGO IS NULL THEN '''' ELSE CCTN_CODIGO END ||' '||CASE WHEN CROSG_CODIGO IS NULL THEN '''' ELSE CROSG_CODIGO END ||' '||CASE WHEN CGG_CROSG_CODIGO IS NULL THEN '''' ELSE CGG_CROSG_CODIGO END ||' '||CASE WHEN CRNOT_NUMERO_NOTIFICACION IS NULL THEN '''' ELSE CRNOT_NUMERO_NOTIFICACION END ||' '||CASE WHEN CRNOT_FECHA_NOTIFICACION IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_NOTIFICACION END ||' '||CASE WHEN CRNOT_LUGAR_NOTIFICACION IS NULL THEN '''' ELSE CRNOT_LUGAR_NOTIFICACION END ||' '||CASE WHEN CRNOT_REFERENCIA IS NULL THEN '''' ELSE CRNOT_REFERENCIA END ||' '||CASE WHEN CRNOT_OBSERVACION IS NULL THEN '''' ELSE CRNOT_OBSERVACION END ||' '||CASE WHEN CRNOT_ESTADO_NOTIFICACION IS NULL THEN 0 ELSE CRNOT_ESTADO_NOTIFICACION END ||' '||CASE WHEN CRNOT_ESTADO IS NULL THEN FALSE ELSE CRNOT_ESTADO END ||' '||CASE WHEN CRNOT_REGULARIZACION IS NULL THEN '''' ELSE CRNOT_REGULARIZACION END ||' '||CASE WHEN CRNOT_FECHA_AUDIENCIA IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_AUDIENCIA END ||' '||CASE WHEN CRNOT_EXTRACTO_AUDIENCIA IS NULL THEN '''' ELSE CRNOT_EXTRACTO_AUDIENCIA END ||' '||CASE WHEN CRNOT_OBSERVACION_AUDIENCIA IS NULL THEN '''' ELSE CRNOT_OBSERVACION_AUDIENCIA END ||' '||CASE WHEN CRNOT_PROCEDE_NOTIFICACION IS NULL THEN FALSE ELSE CRNOT_PROCEDE_NOTIFICACION END ||' '||CASE WHEN CRNOT_DESCRIPCION_ADJUNTO_AUD IS NULL THEN '''' ELSE CRNOT_DESCRIPCION_ADJUNTO_AUD END ||' '||CASE WHEN CRNOT_NOMBRE_ADJUNTO_AUDIENCIA IS NULL THEN '''' ELSE CRNOT_NOMBRE_ADJUNTO_AUDIENCIA END ||' '||CASE WHEN CRNOT_FECHA_SALIDA_VOLUNT IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_SALIDA_VOLUNT END ||' '||CASE WHEN CRNOT_FECHA_EXPULSION IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_EXPULSION END ||' '||CASE WHEN CRNOT_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_INSERT END ||' '||CASE WHEN CRNOT_USUARIO_INSERT IS NULL THEN '''' ELSE CRNOT_USUARIO_INSERT END ||' '||CASE WHEN CRNOT_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRNOT_FECHA_UPDATE END ||' '||CASE WHEN CRNOT_USUARIO_UPDATE IS NULL THEN '''' ELSE CRNOT_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_NOTIFICACION
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @param IN_CRTNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE NOTIFICACION
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CUSU_CODIGO IDENTIFICATIVO DE USUARIO QUE REGISTRO LA NOTIFICACION
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO DE USUARIO ENCARGADO DE REALIZAR LA AUDIENCIA
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DENUNCIA
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE RALIZO LA NOTIFICACION
* @param IN_CGG_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE REALIZO LA AUDIENCIA
* @param IN_CRNOT_NUMERO_NOTIFICACION NUMERO SECUENCIAL UNICO DE IDENTIFICACION
* @param IN_CRNOT_FECHA_NOTIFICACION FECHA EN QUE SE REALIZO LA NOTIFICACION
* @param IN_CRNOT_LUGAR_NOTIFICACION LUGAR/LOCAL DE LA NOTIFICACION
* @param IN_CRNOT_REFERENCIA REFERENCIA DONDE SE ENTREGO LA NOTIFICACION
* @param IN_CRNOT_OBSERVACION OBSERVACION DE LA NOTIFICACION
* @param IN_CRNOT_ESTADO_NOTIFICACION ESTADO DE LA NOTIFICACION
0 - REGISTRADA
1 - PROCESADA
2 - ANULADA
* @param IN_CRNOT_ESTADO ESTADO DEL REGISTRO
REGISTRADA
APLICADA
ANULADA

* @param IN_CRNOT_REGULARIZACION DEFINICION DE EL STATUS MIGRATORIO DE LA PERSONA
* @param IN_CRNOT_FECHA_AUDIENCIA FECHA DE  AUDIENCIA PARA ANALISIS O JUSTIFICACION DE LA NOTIFICACION
* @param IN_CRNOT_EXTRACTO_AUDIENCIA RESUMEN DEL CONTENIDO DE LA AUDIENCIA
* @param IN_CRNOT_OBSERVACION_AUDIENCIA OBSERVACION REGSITRADA EN AL AUDIENCIA
* @param IN_CRNOT_PROCEDE_NOTIFICACION ESTADO QUE DETERMINA SI SE  APLICA LA NOTIFICACION
SI
NO
* @param IN_CRNOT_DESCRIPCION_ADJUNTO_AUD DESCRIPCION DEL DOCUMENTO ADJUNTO
* @param IN_CRNOT_NOMBRE_ADJUNTO_AUDIENCIA NOMBRE DEL DOCUMENTO ADJUNTO DE LA AUDIENCIA
* @param IN_CRNOT_ADJUNTO_AUDIENCIA DOCUMENTO DIGITAL ADJUNTO DE LA AUDIENCIA
* @param IN_CRNOT_FECHA_SALIDA_VOLUNT FECHA DE SALIDA VOLUNTARIA COMO CONSECUENCIA DE LA APLICACION DE LA RESOLUCION
* @param IN_CRNOT_FECHA_EXPULSION FECHA DE EXPULSION COMO CONSECUENCIA DE LA APLICACION DE LA RESOLUCION
* @param IN_CRNOT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_UPDATE(
IN IN_CRNOT_CODIGO SII.CGG_RES_NOTIFICACION.CRNOT_CODIGO%TYPE, 
IN IN_CRTNT_CODIGO SII.CGG_RES_NOTIFICACION.CRTNT_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_NOTIFICACION.CRPER_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CUSU_CODIGO%TYPE, 
IN IN_CRRES_CODIGO SII.CGG_RES_NOTIFICACION.CRRES_CODIGO%TYPE, 
IN IN_CRDEN_CODIGO SII.CGG_RES_NOTIFICACION.CRDEN_CODIGO%TYPE, 
IN IN_CCTN_CODIGO SII.CGG_RES_NOTIFICACION.CCTN_CODIGO%TYPE, 
IN IN_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CROSG_CODIGO%TYPE, 
IN IN_CGG_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CROSG_CODIGO%TYPE, 
IN IN_CRNOT_NUMERO_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_NUMERO_NOTIFICACION%TYPE, 
IN IN_CRNOT_FECHA_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_FECHA_NOTIFICACION%TYPE, 
IN IN_CRNOT_LUGAR_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_LUGAR_NOTIFICACION%TYPE, 
IN IN_CRNOT_REFERENCIA SII.CGG_RES_NOTIFICACION.CRNOT_REFERENCIA%TYPE, 
IN IN_CRNOT_OBSERVACION SII.CGG_RES_NOTIFICACION.CRNOT_OBSERVACION%TYPE, 
IN IN_CRNOT_ESTADO_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_ESTADO_NOTIFICACION%TYPE, 
IN IN_CRNOT_ESTADO SII.CGG_RES_NOTIFICACION.CRNOT_ESTADO%TYPE, 
IN IN_CRNOT_REGULARIZACION SII.CGG_RES_NOTIFICACION.CRNOT_REGULARIZACION%TYPE, 
IN IN_CRNOT_FECHA_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_FECHA_AUDIENCIA%TYPE, 
IN IN_CRNOT_EXTRACTO_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_EXTRACTO_AUDIENCIA%TYPE, 
IN IN_CRNOT_OBSERVACION_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_OBSERVACION_AUDIENCIA%TYPE, 
IN IN_CRNOT_PROCEDE_NOTIFICACION SII.CGG_RES_NOTIFICACION.CRNOT_PROCEDE_NOTIFICACION%TYPE, 
IN IN_CRNOT_DESCRIPCION_ADJUNTO_AUD SII.CGG_RES_NOTIFICACION.CRNOT_DESCRIPCION_ADJUNTO_AUD%TYPE, 
IN IN_CRNOT_NOMBRE_ADJUNTO_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_NOMBRE_ADJUNTO_AUDIENCIA%TYPE, 
IN IN_CRNOT_ADJUNTO_AUDIENCIA SII.CGG_RES_NOTIFICACION.CRNOT_ADJUNTO_AUDIENCIA%TYPE, 
IN IN_CRNOT_FECHA_SALIDA_VOLUNT SII.CGG_RES_NOTIFICACION.CRNOT_FECHA_SALIDA_VOLUNT%TYPE, 
IN IN_CRNOT_FECHA_EXPULSION SII.CGG_RES_NOTIFICACION.CRNOT_FECHA_EXPULSION%TYPE, 
IN IN_CRNOT_USUARIO_UPDATE SII.CGG_RES_NOTIFICACION.CRNOT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOTIFICACION SET
		CRTNT_CODIGO = IN_CRTNT_CODIGO, 
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO, 
		CRRES_CODIGO = IN_CRRES_CODIGO, 
		CRDEN_CODIGO = IN_CRDEN_CODIGO, 
		CCTN_CODIGO = IN_CCTN_CODIGO, 
		CROSG_CODIGO = IN_CROSG_CODIGO, 
		CGG_CROSG_CODIGO = IN_CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION = IN_CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION = IN_CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION = IN_CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA = IN_CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION = IN_CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION = IN_CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO = IN_CRNOT_ESTADO, 
		CRNOT_REGULARIZACION = IN_CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA = IN_CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA = IN_CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA = IN_CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION = IN_CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD = IN_CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA = IN_CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA = IN_CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT = IN_CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION = IN_CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRNOT_USUARIO_UPDATE = IN_CRNOT_USUARIO_UPDATE
	WHERE
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_NOTIFICACION
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_SELECT(
IN IN_CRNOT_CODIGO SII.CGG_RES_NOTIFICACION.CRNOT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND 
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_NOTIFICACION
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_DELETE(
IN IN_CRNOT_CODIGO SII.CGG_RES_NOTIFICACION.CRNOT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOTIFICACION
	WHERE
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_NOTIFICACION
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_DELETE_SOFT(
IN IN_CRNOT_CODIGO SII.CGG_RES_NOTIFICACION.CRNOT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOTIFICACION SET
		CRNOT_ESTADO = FALSE
	WHERE
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_RESOLUCION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_NOTIFICACION.CRRES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND 
		CRRES_CODIGO = IN_CRRES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_RESOLUCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_NOTIFICACION.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOTIFICACION
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_RESOLUCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_RESOLUCION.
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_DS_CGG_RES_RESOLUCION(
IN IN_CRRES_CODIGO SII.CGG_RES_NOTIFICACION.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOTIFICACION SET
		crnot_estado = false
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_S_CGG_CANTON
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_S_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_RES_NOTIFICACION.CCTN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND 
		CCTN_CODIGO = IN_CCTN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_D_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_RES_NOTIFICACION.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOTIFICACION
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_CANTON
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_DS_CGG_CANTON(
IN IN_CCTN_CODIGO SII.CGG_RES_NOTIFICACION.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOTIFICACION SET
		crnot_estado = false
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_DENUNCIA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_DENUNCIA.
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DENUNCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_DENUNCIA(
IN IN_CRDEN_CODIGO SII.CGG_RES_NOTIFICACION.CRDEN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND 
		CRDEN_CODIGO = IN_CRDEN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_DENUNCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_DENUNCIA.
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DENUNCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_DENUNCIA(
IN IN_CRDEN_CODIGO SII.CGG_RES_NOTIFICACION.CRDEN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOTIFICACION
	WHERE
		CRDEN_CODIGO = IN_CRDEN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_DENUNCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_DENUNCIA.
* @param IN_CRDEN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DENUNCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_DS_CGG_RES_DENUNCIA(
IN IN_CRDEN_CODIGO SII.CGG_RES_NOTIFICACION.CRDEN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOTIFICACION SET
		crnot_estado = false
	WHERE
		CRDEN_CODIGO = IN_CRDEN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_OFICIAL_SEGUIMIENTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_OFICIAL_SEGUIMIENTO.
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE RALIZO LA NOTIFICACION
* @param IN_CGG_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE REALIZO LA AUDIENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_OFICIAL_SEGUIMIENTO(
IN IN_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CROSG_CODIGO%TYPE, 
IN IN_CGG_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CROSG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND 
		CROSG_CODIGO = IN_CROSG_CODIGO AND 
		CGG_CROSG_CODIGO = IN_CGG_CROSG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_OFICIAL_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_OFICIAL_SEGUIMIENTO.
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE RALIZO LA NOTIFICACION
* @param IN_CGG_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE REALIZO LA AUDIENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_OFICIAL_SEGUIMIENTO(
IN IN_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CROSG_CODIGO%TYPE, 
IN IN_CGG_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CROSG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOTIFICACION
	WHERE
		CROSG_CODIGO = IN_CROSG_CODIGO AND 
		CGG_CROSG_CODIGO = IN_CGG_CROSG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_OFICIAL_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_OFICIAL_SEGUIMIENTO.
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE RALIZO LA NOTIFICACION
* @param IN_CGG_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE SEGUIMIENTO QUE REALIZO LA AUDIENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_DS_CGG_RES_OFICIAL_SEGUIMIENTO(
IN IN_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CROSG_CODIGO%TYPE, 
IN IN_CGG_CROSG_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CROSG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOTIFICACION SET
		crnot_estado = false
	WHERE
		CROSG_CODIGO = IN_CROSG_CODIGO AND 
		CGG_CROSG_CODIGO = IN_CGG_CROSG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_NOTIFICACION.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_NOTIFICACION.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOTIFICACION
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_NOTIFICACION.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOTIFICACION SET
		crnot_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_TIPO_NOTIFICACION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_NOTIFICACION.
* @param IN_CRTNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE NOTIFICACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_S_CGG_RES_TIPO_NOTIFICACION(
IN IN_CRTNT_CODIGO SII.CGG_RES_NOTIFICACION.CRTNT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND 
		CRTNT_CODIGO = IN_CRTNT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_TIPO_NOTIFICACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_NOTIFICACION.
* @param IN_CRTNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE NOTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_TIPO_NOTIFICACION(
IN IN_CRTNT_CODIGO SII.CGG_RES_NOTIFICACION.CRTNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOTIFICACION
	WHERE
		CRTNT_CODIGO = IN_CRTNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_RES_TIPO_NOTIFICACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_NOTIFICACION.
* @param IN_CRTNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE NOTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_DS_CGG_RES_TIPO_NOTIFICACION(
IN IN_CRTNT_CODIGO SII.CGG_RES_NOTIFICACION.CRTNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOTIFICACION SET
		crnot_estado = false
	WHERE
		CRTNT_CODIGO = IN_CRTNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO DE USUARIO QUE REGISTRO LA NOTIFICACION
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO DE USUARIO ENCARGADO DE REALIZAR LA AUDIENCIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRNOT_CODIGO, 
		CRTNT_CODIGO, 
		CRPER_CODIGO, 
		CUSU_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRRES_CODIGO, 
		CRDEN_CODIGO, 
		CCTN_CODIGO, 
		CROSG_CODIGO, 
		CGG_CROSG_CODIGO, 
		CRNOT_NUMERO_NOTIFICACION, 
		CRNOT_FECHA_NOTIFICACION, 
		CRNOT_LUGAR_NOTIFICACION, 
		CRNOT_REFERENCIA, 
		CRNOT_OBSERVACION, 
		CRNOT_ESTADO_NOTIFICACION, 
		CRNOT_ESTADO, 
		CRNOT_REGULARIZACION, 
		CRNOT_FECHA_AUDIENCIA, 
		CRNOT_EXTRACTO_AUDIENCIA, 
		CRNOT_OBSERVACION_AUDIENCIA, 
		CRNOT_PROCEDE_NOTIFICACION, 
		CRNOT_DESCRIPCION_ADJUNTO_AUD, 
		CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
		CRNOT_ADJUNTO_AUDIENCIA, 
		CRNOT_FECHA_SALIDA_VOLUNT, 
		CRNOT_FECHA_EXPULSION, 
		CRNOT_FECHA_INSERT, 
		CRNOT_USUARIO_INSERT, 
		CRNOT_FECHA_UPDATE, 
		CRNOT_USUARIO_UPDATE
	FROM SII.CGG_RES_NOTIFICACION
	WHERE CRNOT_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO AND 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO DE USUARIO QUE REGISTRO LA NOTIFICACION
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO DE USUARIO ENCARGADO DE REALIZAR LA AUDIENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_NOTIFICACION
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO AND 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_NOTIFICACION_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_NOTIFICACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO DE USUARIO QUE REGISTRO LA NOTIFICACION
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO DE USUARIO ENCARGADO DE REALIZAR LA AUDIENCIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CUSU_CODIGO%TYPE, 
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_NOTIFICACION.CGG_CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_NOTIFICACION SET
		crnot_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO AND 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
*SELECCIONA DATOS DE LA TABLA CGG_RES_PERSONA
*@param in_user_name
*@param IN_CANTON filtro de informacion por canton
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_OFFLINE(
	IN_USER_NAME character varying,
	IN_CANTON character varying 
)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	TMP TEXT;
BEGIN

	TMP := 'WITH REGISTRO AS(
		SELECT * FROM SII.CGG_res_residencia WHERE CRRSD_VIGENTE = TRUE AND  CRRSD_ESTADO	
		)
	SELECT  DISTINCT PER.CRPER_CODIGO,
	 NC.CGNCN_NACIONALIDAD,
	(SELECT PAR.CPRR_NOMBRE FROM SII.CGG_PARROQUIA PAR WHERE PAR.CPRR_CODIGO =PER.CPRR_CODIGO)AS CPRR_NOMBRE,
	 CTN.CCTN_NOMBRE, 
       PER.CRPER_NOMBRES,
       (PER.CRPER_APELLIDO_PATERNO||'' ''||PER.CRPER_APELLIDO_MATERNO)as APELLIDOS,
       PER.CRPER_NUM_DOC_IDENTIFIC,
       PER.CRPER_NUMERO_RESIDENCIA,
	   RS.CRRSD_FECHA_INICIO,
       RS.CRRSD_FECHA_CADUCIDAD,
       (SII.F_TRAMITE_TIPO(RS.CRTST_CODIGO))TIPO_RESIDENCIA,
       CASE (SELECT CGCNF_CODIGO FROM CGG_CONFIGURACION
	WHERE CGCNF_VALOR_CADENA=(WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
			SELECT TS.CRTST_CODIGO, TS.CGG_CRTST_CODIGO, TS.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TS WHERE (TS.CRTST_CODIGO = RS.CRTST_CODIGO)
			UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
			WHERE TP.CGG_CRTST_CODIGO = TST.CRTST_CODIGO) SELECT CRTST_CODIGO  FROM TIPO WHERE CGG_CRTST_CODIGO IS NULL ) )
			WHEN ''03'' THEN TRUE 
			ELSE
				FALSE
			END AS CODIGO
	FROM SII.CGG_RES_RESIDENCIA RS 	
	INNER JOIN REGISTRO RGT ON RGT.CRRSD_CODIGO=RS.CRRSD_CODIGO
	INNER JOIN SII.CGG_RES_PERSONA PER ON (PER.CRPER_CODIGO = RS.CRPER_CODIGO)AND PER.CRPER_ESTADO	
	LEFT JOIN SII.CGG_CANTON CTN ON CTN.CCTN_CODIGO =PER.CCTN_CODIGO AND CTN.CCTN_ESTADO
	LEFT JOIN CGG_NACIONALIDAD NC ON (NC.CGNCN_CODIGO = PER.CGNCN_CODIGO)AND NC.CGNCN_ESTADO
	LEFT JOIN CGG_RES_AEROPUERTO AER ON(AER.CCTN_CODIGO=CTN.CCTN_CODIGO)AND AER.CARPT_ESTADO
	WHERE PER.CRPER_ESTADO = TRUE  AND  (LENGTH('||QUOTE_LITERAL(IN_CANTON)||') = 0 OR PER.CCTN_CODIGO = '||QUOTE_LITERAL(IN_CANTON)||' AND AER.CCTN_CODIGO='||QUOTE_LITERAL(IN_CANTON)||')';
	OPEN TMP_REF FOR EXECUTE TMP;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;
  
  /**
* FUNCION QUE SELECCIONA VARIOS REGISTROS DE LA TABLA CGG_RES_NOTIFICACION PARA EL FORMULARIO DEL LISTADO PRINCIPAL.
* FUNCION F_CGG_RES_NOTIFICACION_S_CONSU
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_NOTIFICACION RELACIONADA CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_S_CONSU(
IN_USER_NAME CHARACTER VARYING, 
IN_START_INDEX INTEGER, 
IN_LIMIT INTEGER, 
IN_SORT_FIELD_NAME CHARACTER VARYING, 
IN_DIRECTION CHARACTER VARYING, 
IN_FIND_TEXT TEXT)
  RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TMP_SQL TEXT;	
BEGIN
	TMP_SQL='';
	
	TMP_SQL='SELECT
C.CRNOT_CODIGO, 
C.CRTNT_CODIGO,
C.CRTNT_SUSTENTO_LEGAL,
C.CRPER_CODIGO, 
C.CRPER_NOMBRES,
C.CRPER_NUM_DOC_IDENTIFIC,
C.CRPER_NUMERO_RESIDENCIA,
C.CRPER_PARROQUIA,
C.CRPER_NACIONALIDAD,
C.CUSU_CODIGO,
C.NOMBRES_USUARIO_REGISTRO,
C.CGG_CUSU_CODIGO, 
C.NOMBRES_USUARIO_AUDIENCIA,
C.CRRES_CODIGO, 
C.CRRES_RESOLUCION,
C.CRDEN_CODIGO,
C.CRDEN_NUMERO,
C.CRDEN_DESCRIPCION,
C.CCTN_CODIGO,
C.CANTON_NOTIFICACION,
C.CROSG_CODIGO, 
C.NOMBRE_OFICIAL,
C.CGG_CROSG_CODIGO, 
C.NOMBRE_AUDIENCIA,
C.CRNOT_NUMERO_NOTIFICACION, 
C.CRNOT_FECHA_NOTIFICACION, 
C.CRNOT_LUGAR_NOTIFICACION, 
C.CRNOT_REFERENCIA, 
C.CRNOT_OBSERVACION,
C.CRNOT_ESTADO_NOTIFICACION, 
C.CRNOT_ESTADO, 
C.CRNOT_REGULARIZACION, 
C.CRNOT_FECHA_AUDIENCIA, 
C.CRNOT_EXTRACTO_AUDIENCIA, 
C.CRNOT_OBSERVACION_AUDIENCIA, 
C.CRNOT_PROCEDE_NOTIFICACION, 
C.CRNOT_DESCRIPCION_ADJUNTO_AUD, 
C.CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
C.CRNOT_ADJUNTO_AUDIENCIA, 
C.CRNOT_FECHA_SALIDA_VOLUNT, 
C.CRNOT_FECHA_EXPULSION
FROM (
	SELECT
	N.CRNOT_CODIGO, 
	N.CRTNT_CODIGO,
	(SELECT CRTNT_SUSTENTO_LEGAL FROM SII.CGG_RES_TIPO_NOTIFICACION WHERE CRTNT_CODIGO=N.CRTNT_CODIGO) AS CRTNT_SUSTENTO_LEGAL,
	N.CRPER_CODIGO, 
	TRIM(COALESCE(PER.CRPER_NOMBRES,'' '')||'' ''||COALESCE(PER.CRPER_APELLIDO_PATERNO,'' '')||'' ''||COALESCE(PER.CRPER_APELLIDO_MATERNO,'' '')) CRPER_NOMBRES,
	PER.CRPER_NUM_DOC_IDENTIFIC,
	PER.CRPER_NUMERO_RESIDENCIA,
	(SELECT PAR.CPRR_NOMBRE FROM SII.CGG_PARROQUIA PAR WHERE PER.CPRR_CODIGO=PAR.CPRR_CODIGO) CRPER_PARROQUIA,
	(SELECT NC.CGNCN_NACIONALIDAD FROM SII.CGG_NACIONALIDAD NC WHERE PER.CGNCN_CODIGO=NC.CGNCN_CODIGO) CRPER_NACIONALIDAD,
	US1.CUSU_CODIGO,
	(SELECT TRIM(COALESCE(PER1.CRPER_NOMBRES,'' '')||'' ''||COALESCE(PER1.CRPER_APELLIDO_PATERNO,'' '')||'' ''||COALESCE(PER1.CRPER_APELLIDO_MATERNO,'' '')) FROM SII.CGG_RES_PERSONA PER1 WHERE US1.CRPER_CODIGO=PER1.CRPER_CODIGO) NOMBRES_USUARIO_REGISTRO,
	USU1.CUSU_CODIGO CGG_CUSU_CODIGO, 
	(SELECT TRIM(COALESCE(PER2.CRPER_NOMBRES,'' '')||'' ''||COALESCE(PER2.CRPER_APELLIDO_PATERNO,'' '')||'' ''||COALESCE(PER2.CRPER_APELLIDO_MATERNO,'' '')) FROM SII.CGG_RES_PERSONA PER2 WHERE USU1.CRPER_CODIGO=PER2.CRPER_CODIGO) NOMBRES_USUARIO_AUDIENCIA,
	N.CRRES_CODIGO, 
	(SELECT CRRES_EXTRACTO_RESOLUCION FROM SII.CGG_RES_RESOLUCION WHERE CRRES_CODIGO=N.CRRES_CODIGO) AS CRRES_RESOLUCION,
	N.CRDEN_CODIGO,
	(SELECT CRDEN_NUMERO FROM SII.CGG_RES_DENUNCIA WHERE CRDEN_CODIGO=N.CRDEN_CODIGO)AS CRDEN_NUMERO,
	(SELECT CRDEN_DESCRIPCION FROM SII.CGG_RES_DENUNCIA WHERE CRDEN_CODIGO=N.CRDEN_CODIGO)AS CRDEN_DESCRIPCION,
	N.CCTN_CODIGO,
	(SELECT CCTN_NOMBRE FROM SII.CGG_CANTON WHERE CCTN_CODIGO =N.CCTN_CODIGO)AS CANTON_NOTIFICACION,
	N.CROSG_CODIGO, 
	(PSN.CRPER_NOMBRES ||'' ''||PSN.CRPER_APELLIDO_PATERNO ||'' ''||PSN.CRPER_APELLIDO_MATERNO)AS NOMBRE_OFICIAL,
	N.CGG_CROSG_CODIGO, 
	(PNA.CRPER_NOMBRES ||'' ''||PNA.CRPER_APELLIDO_PATERNO ||'' ''||PNA.CRPER_APELLIDO_MATERNO) AS NOMBRE_AUDIENCIA,
	N.CRNOT_NUMERO_NOTIFICACION, 
	N.CRNOT_FECHA_NOTIFICACION, 
	N.CRNOT_LUGAR_NOTIFICACION, 
	N.CRNOT_REFERENCIA, 
	N.CRNOT_OBSERVACION,
	N.CRNOT_ESTADO_NOTIFICACION, 
	N.CRNOT_ESTADO, 
	N.CRNOT_REGULARIZACION, 
	N.CRNOT_FECHA_AUDIENCIA, 
	N.CRNOT_EXTRACTO_AUDIENCIA, 
	N.CRNOT_OBSERVACION_AUDIENCIA, 
	N.CRNOT_PROCEDE_NOTIFICACION, 
	N.CRNOT_DESCRIPCION_ADJUNTO_AUD, 
	N.CRNOT_NOMBRE_ADJUNTO_AUDIENCIA, 
	NULL AS CRNOT_ADJUNTO_AUDIENCIA, 
	N.CRNOT_FECHA_SALIDA_VOLUNT, 
	N.CRNOT_FECHA_EXPULSION
	FROM SII.CGG_RES_NOTIFICACION N
	INNER JOIN CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=N.CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_OFICIAL_SEGUIMIENTO OSE ON (OSE.CROSG_CODIGO=N.CROSG_CODIGO)
	LEFT JOIN SII.CGG_RES_OFICIAL_SEGUIMIENTO OS ON (OS.CROSG_CODIGO=N.CGG_CROSG_CODIGO)
	LEFT JOIN SII.CGG_USUARIO US ON(US.CUSU_CODIGO=OSE.CUSU_CODIGO)
	LEFT JOIN SII.CGG_USUARIO USU ON(USU.CUSU_CODIGO=OS.CUSU_CODIGO)
	LEFT JOIN CGG_RES_PERSONA PSN ON(US.CRPER_CODIGO=PSN.CRPER_CODIGO)
	LEFT JOIN CGG_RES_PERSONA PNA ON(USU.CRPER_CODIGO=PNA.CRPER_CODIGO)
	LEFT JOIN SII.CGG_USUARIO US1 ON(US1.CUSU_CODIGO=N.CUSU_CODIGO)
	LEFT JOIN SII.CGG_USUARIO USU1 ON(USU1.CUSU_CODIGO=N.CGG_CUSU_CODIGO)
) AS C
WHERE C.CRNOT_ESTADO = TRUE  AND
(LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',
				COALESCE(C.CRTNT_SUSTENTO_LEGAL, '''')||'' ''||					
				COALESCE(C.CRPER_NOMBRES, '''')||'' ''||	
				COALESCE(C.CRPER_NUM_DOC_IDENTIFIC, '''')||'' ''||	
				COALESCE(C.NOMBRES_USUARIO_REGISTRO, '''')||'' ''||	
				COALESCE(C.NOMBRE_OFICIAL, '''')||'' ''||	
				COALESCE(C.CRNOT_NUMERO_NOTIFICACION, '''')) = 1)     
		ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
		' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
			
	OPEN TMP_REF FOR EXECUTE TMP_SQL;
      
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/** FUNCTION: F_CGG_RES_NOTIFICACION_S_CONSU_COUNT(TEXT)
* CONTABILIZA N REGISTROS DE LA TABLA SII.CGG_RES_NOTIFICACION.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TMP_ROWS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_NOTIFICACION_S_CONSU_COUNT(IN_FIND_TEXT TEXT)
  RETURNS INTEGER AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
SELECT
COUNT(C.CRNOT_CODIGO) INTO TMP_ROWS
FROM (
	SELECT
	N.CRNOT_CODIGO, 	
	(SELECT CRTNT_SUSTENTO_LEGAL FROM SII.CGG_RES_TIPO_NOTIFICACION WHERE CRTNT_CODIGO=N.CRTNT_CODIGO) AS CRTNT_SUSTENTO_LEGAL,	
	TRIM(COALESCE(PER.CRPER_NOMBRES,' ')||' '||COALESCE(PER.CRPER_APELLIDO_PATERNO,' ')||' '||COALESCE(PER.CRPER_APELLIDO_MATERNO,' ')) CRPER_NOMBRES,
	PER.CRPER_NUM_DOC_IDENTIFIC,	
	(SELECT TRIM(COALESCE(PER1.CRPER_NOMBRES,' ')||' '||COALESCE(PER1.CRPER_APELLIDO_PATERNO,' ')||' '||COALESCE(PER1.CRPER_APELLIDO_MATERNO,' ')) FROM SII.CGG_RES_PERSONA PER1 WHERE US1.CRPER_CODIGO=PER1.CRPER_CODIGO) NOMBRES_USUARIO_REGISTRO,	
	(PSN.CRPER_NOMBRES ||' '||PSN.CRPER_APELLIDO_PATERNO ||' '||PSN.CRPER_APELLIDO_MATERNO)AS NOMBRE_OFICIAL,
	N.CRNOT_ESTADO,
	N.CRNOT_NUMERO_NOTIFICACION
	FROM SII.CGG_RES_NOTIFICACION N
	INNER JOIN CGG_RES_PERSONA PER ON(PER.CRPER_CODIGO=N.CRPER_CODIGO)
	LEFT JOIN SII.CGG_RES_OFICIAL_SEGUIMIENTO OSE ON (OSE.CROSG_CODIGO=N.CROSG_CODIGO)
	LEFT JOIN SII.CGG_RES_OFICIAL_SEGUIMIENTO OS ON (OS.CROSG_CODIGO=N.CGG_CROSG_CODIGO)
	LEFT JOIN SII.CGG_USUARIO US ON(US.CUSU_CODIGO=OSE.CUSU_CODIGO)
	LEFT JOIN SII.CGG_USUARIO USU ON(USU.CUSU_CODIGO=OS.CUSU_CODIGO)
	LEFT JOIN CGG_RES_PERSONA PSN ON(US.CRPER_CODIGO=PSN.CRPER_CODIGO)
	LEFT JOIN CGG_RES_PERSONA PNA ON(USU.CRPER_CODIGO=PNA.CRPER_CODIGO)
	LEFT JOIN SII.CGG_USUARIO US1 ON(US1.CUSU_CODIGO=N.CUSU_CODIGO)
	LEFT JOIN SII.CGG_USUARIO USU1 ON(USU1.CUSU_CODIGO=N.CGG_CUSU_CODIGO)
) AS C
WHERE C.CRNOT_ESTADO = TRUE  AND
(LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,
				COALESCE(C.CRTNT_SUSTENTO_LEGAL, '')||' '||					
				COALESCE(C.CRPER_NOMBRES, '')||' '||	
				COALESCE(C.CRPER_NUM_DOC_IDENTIFIC, '')||' '||	
				COALESCE(C.NOMBRES_USUARIO_REGISTRO, '')||' '||	
				COALESCE(C.NOMBRE_OFICIAL, '')||' '||	
				COALESCE(C.CRNOT_NUMERO_NOTIFICACION, '')) = 1) ;		
		
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

