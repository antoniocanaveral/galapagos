/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_ADJUNTO.
* @param IN_CDAD_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO DE UNA BECA 
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @param IN_CDAD_DESCRIPCION CAMPO DE TEXTO DE UNA DESCRIPCION DE DOCUMENTO
* @param IN_CDAD_OBSERVACION CAMPO DE TEXTO DE OBSERVACION DEL DOCUMENTO
* @param IN_CDAD_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CDAD_ADJUNTO CONTENIDO BINARIO DEL DOCUMENTO ADJUNTO
* @param IN_CDAD_TIPO TIPO DEL DOCUMENTO ADJUNTO A LA BECA VALORES:
0 - CONTRATO DE BECA
1 - INFORME
2 - MEMORANDUM DE APROBACIONES
3 - OTROS
* @param IN_CDAD_DESCRIPCION_CONTENIDO CAMPO DE TEXTO DESCRIPCION CONTENIDO
* @param IN_CDAD_ESTADO ESTADO DEL REGISTRO
* @param IN_CDAD_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDAD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_INSERT(
IN IN_CDAD_CODIGO SII.CGG_DHU_ADJUNTO.CDAD_CODIGO%TYPE, 
IN IN_CDBEC_CODIGO SII.CGG_DHU_ADJUNTO.CDBEC_CODIGO%TYPE, 
IN IN_CDAD_DESCRIPCION SII.CGG_DHU_ADJUNTO.CDAD_DESCRIPCION%TYPE, 
IN IN_CDAD_OBSERVACION SII.CGG_DHU_ADJUNTO.CDAD_OBSERVACION%TYPE, 
IN IN_CDAD_NOMBRE_ADJUNTO SII.CGG_DHU_ADJUNTO.CDAD_NOMBRE_ADJUNTO%TYPE, 
IN IN_CDAD_ADJUNTO SII.CGG_DHU_ADJUNTO.CDAD_ADJUNTO%TYPE, 
IN IN_CDAD_TIPO SII.CGG_DHU_ADJUNTO.CDAD_TIPO%TYPE, 
IN IN_CDAD_DESCRIPCION_CONTENIDO SII.CGG_DHU_ADJUNTO.CDAD_DESCRIPCION_CONTENIDO%TYPE, 
IN IN_CDAD_ESTADO SII.CGG_DHU_ADJUNTO.CDAD_ESTADO%TYPE, 
IN IN_CDAD_USUARIO_INSERT SII.CGG_DHU_ADJUNTO.CDAD_USUARIO_INSERT%TYPE, 
IN IN_CDAD_USUARIO_UPDATE SII.CGG_DHU_ADJUNTO.CDAD_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDAD_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_ADJUNTO','CDAD_CODIGO','CDAD') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDAD_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_ADJUNTO(
		CDAD_CODIGO, 
		CDBEC_CODIGO, 
		CDAD_DESCRIPCION, 
		CDAD_OBSERVACION, 
		CDAD_NOMBRE_ADJUNTO, 
		CDAD_ADJUNTO, 
		CDAD_TIPO, 
		CDAD_DESCRIPCION_CONTENIDO, 
		CDAD_ESTADO, 
		CDAD_FECHA_INSERT, 
		CDAD_USUARIO_INSERT, 
		CDAD_FECHA_UPDATE, 
		CDAD_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CDBEC_CODIGO, 
		IN_CDAD_DESCRIPCION, 
		IN_CDAD_OBSERVACION, 
		IN_CDAD_NOMBRE_ADJUNTO, 
		IN_CDAD_ADJUNTO, 
		IN_CDAD_TIPO, 
		IN_CDAD_DESCRIPCION_CONTENIDO, 
		IN_CDAD_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDAD_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDAD_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_ADJUNTO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDAD_CODIGO, 
		CDBEC_CODIGO, 
		CDAD_DESCRIPCION, 
		CDAD_OBSERVACION, 
		CDAD_NOMBRE_ADJUNTO, 
		CDAD_ADJUNTO, 
		CDAD_TIPO, 
		CDAD_DESCRIPCION_CONTENIDO, 
		CDAD_ESTADO, 
		CDAD_FECHA_INSERT, 
		CDAD_USUARIO_INSERT, 
		CDAD_FECHA_UPDATE, 
		CDAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_ADJUNTO
	WHERE CDAD_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_ADJUNTO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CDAD_CODIGO, 
		CDBEC_CODIGO, 
		CDAD_DESCRIPCION, 
		CDAD_OBSERVACION, 
		CDAD_NOMBRE_ADJUNTO, 
		CDAD_ADJUNTO, 
		CDAD_TIPO, 
		CDAD_DESCRIPCION_CONTENIDO, 
		CDAD_ESTADO, 
		CDAD_FECHA_INSERT, 
		CDAD_USUARIO_INSERT, 
		CDAD_FECHA_UPDATE, 
		CDAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_ADJUNTO
	WHERE CDAD_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CDAD_DESCRIPCION, '''')||'' ''||COALESCE(CDAD_OBSERVACION, '''')||'' ''||COALESCE(CDAD_NOMBRE_ADJUNTO, '''')||'' ''||COALESCE(CDAD_TIPO, 0)||'' ''||COALESCE(CDAD_DESCRIPCION_CONTENIDO, '''')||'' ''||COALESCE(CDAD_ESTADO, FALSE)||'' ''||COALESCE(CDAD_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CDAD_USUARIO_INSERT, '''')||'' ''||COALESCE(CDAD_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CDAD_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_ADJUNTO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_ADJUNTO
	WHERE CDAD_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_ADJUNTO.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_ADJUNTO
	WHERE CDAD_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CDAD_DESCRIPCION, '''')||' '||COALESCE(CDAD_OBSERVACION, '''')||' '||COALESCE(CDAD_NOMBRE_ADJUNTO, '''')||' '||COALESCE(CDAD_TIPO, 0)||' '||COALESCE(CDAD_DESCRIPCION_CONTENIDO, '''')||' '||COALESCE(CDAD_ESTADO, FALSE)||' '||COALESCE(CDAD_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CDAD_USUARIO_INSERT, '''')||' '||COALESCE(CDAD_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CDAD_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_ADJUNTO.
* @param IN_CDAD_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO DE UNA BECA 
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @param IN_CDAD_DESCRIPCION CAMPO DE TEXTO DE UNA DESCRIPCION DE DOCUMENTO
* @param IN_CDAD_OBSERVACION CAMPO DE TEXTO DE OBSERVACION DEL DOCUMENTO
* @param IN_CDAD_NOMBRE_ADJUNTO NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CDAD_ADJUNTO CONTENIDO BINARIO DEL DOCUMENTO ADJUNTO
* @param IN_CDAD_TIPO TIPO DEL DOCUMENTO ADJUNTO A LA BECA VALORES:
0 - CONTRATO DE BECA
1 - INFORME
2 - MEMORANDUM DE APROBACIONES
3 - OTROS
* @param IN_CDAD_DESCRIPCION_CONTENIDO CAMPO DE TEXTO DESCRIPCION CONTENIDO
* @param IN_CDAD_ESTADO ESTADO DEL REGISTRO
* @param IN_CDAD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_UPDATE(
IN IN_CDAD_CODIGO SII.CGG_DHU_ADJUNTO.CDAD_CODIGO%TYPE, 
IN IN_CDBEC_CODIGO SII.CGG_DHU_ADJUNTO.CDBEC_CODIGO%TYPE, 
IN IN_CDAD_DESCRIPCION SII.CGG_DHU_ADJUNTO.CDAD_DESCRIPCION%TYPE, 
IN IN_CDAD_OBSERVACION SII.CGG_DHU_ADJUNTO.CDAD_OBSERVACION%TYPE, 
IN IN_CDAD_NOMBRE_ADJUNTO SII.CGG_DHU_ADJUNTO.CDAD_NOMBRE_ADJUNTO%TYPE, 
IN IN_CDAD_ADJUNTO SII.CGG_DHU_ADJUNTO.CDAD_ADJUNTO%TYPE, 
IN IN_CDAD_TIPO SII.CGG_DHU_ADJUNTO.CDAD_TIPO%TYPE, 
IN IN_CDAD_DESCRIPCION_CONTENIDO SII.CGG_DHU_ADJUNTO.CDAD_DESCRIPCION_CONTENIDO%TYPE, 
IN IN_CDAD_ESTADO SII.CGG_DHU_ADJUNTO.CDAD_ESTADO%TYPE, 
IN IN_CDAD_USUARIO_UPDATE SII.CGG_DHU_ADJUNTO.CDAD_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_ADJUNTO SET
		CDBEC_CODIGO = IN_CDBEC_CODIGO, 
		CDAD_DESCRIPCION = IN_CDAD_DESCRIPCION, 
		CDAD_OBSERVACION = IN_CDAD_OBSERVACION, 
		CDAD_NOMBRE_ADJUNTO = IN_CDAD_NOMBRE_ADJUNTO, 
		CDAD_ADJUNTO = IN_CDAD_ADJUNTO, 
		CDAD_TIPO = IN_CDAD_TIPO, 
		CDAD_DESCRIPCION_CONTENIDO = IN_CDAD_DESCRIPCION_CONTENIDO, 
		CDAD_ESTADO = IN_CDAD_ESTADO, 
		CDAD_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDAD_USUARIO_UPDATE = IN_CDAD_USUARIO_UPDATE
	WHERE
		CDAD_CODIGO = IN_CDAD_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_ADJUNTO.
* @param IN_CDAD_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO DE UNA BECA 
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_SELECT(
IN IN_CDAD_CODIGO SII.CGG_DHU_ADJUNTO.CDAD_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDAD_CODIGO, 
		CDBEC_CODIGO, 
		CDAD_DESCRIPCION, 
		CDAD_OBSERVACION, 
		CDAD_NOMBRE_ADJUNTO, 
		CDAD_ADJUNTO, 
		CDAD_TIPO, 
		CDAD_DESCRIPCION_CONTENIDO, 
		CDAD_ESTADO, 
		CDAD_FECHA_INSERT, 
		CDAD_USUARIO_INSERT, 
		CDAD_FECHA_UPDATE, 
		CDAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_ADJUNTO
	WHERE CDAD_ESTADO = TRUE AND 
		CDAD_CODIGO = IN_CDAD_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_ADJUNTO.
* @param IN_CDAD_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO DE UNA BECA 
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_DELETE(
IN IN_CDAD_CODIGO SII.CGG_DHU_ADJUNTO.CDAD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_ADJUNTO
	WHERE
		CDAD_CODIGO = IN_CDAD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_ADJUNTO.
* @param IN_CDAD_CODIGO CODIGO QUE IDENTIFICA EL ADJUNTO DE UNA BECA 
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_DELETE_SOFT(
IN IN_CDAD_CODIGO SII.CGG_DHU_ADJUNTO.CDAD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_ADJUNTO SET
		CDAD_ESTADO = FALSE
	WHERE
		CDAD_CODIGO = IN_CDAD_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_S_CGG_DHU_BECA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_S_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_ADJUNTO.CDBEC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDAD_CODIGO, 
		CDBEC_CODIGO, 
		CDAD_DESCRIPCION, 
		CDAD_OBSERVACION, 
		CDAD_NOMBRE_ADJUNTO, 
		CDAD_ADJUNTO, 
		CDAD_TIPO, 
		CDAD_DESCRIPCION_CONTENIDO, 
		CDAD_ESTADO, 
		CDAD_FECHA_INSERT, 
		CDAD_USUARIO_INSERT, 
		CDAD_FECHA_UPDATE, 
		CDAD_USUARIO_UPDATE
	FROM SII.CGG_DHU_ADJUNTO
	WHERE CDAD_ESTADO = TRUE AND 
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_D_CGG_DHU_BECA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_D_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_ADJUNTO.CDBEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_ADJUNTO
	WHERE
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_ADJUNTO_D_CGG_DHU_BECA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_ADJUNTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_ADJUNTO_DS_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_ADJUNTO.CDBEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_ADJUNTO SET
		cdad_estado = false
	WHERE
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

