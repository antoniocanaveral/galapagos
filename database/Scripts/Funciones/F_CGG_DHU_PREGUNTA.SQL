/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @param IN_CDCAT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA CATEGORIA
* @param IN_CDPRG_DESCRIPCION DESCRIPCION DE LA PREGUNTA
* @param IN_CDPRG_CUANTIFICABLE ESTADO QUE DETERMINA SI LA PREGUNTA SE PUEDE CUANTIFICAR
* @param IN_CDPRG_MULTIPLE IDENTIFICA SI LA PREGUNTA ES DE SELECCION MULTIPLE O SI SOLO PUEDE ESCOGER SOLO UNA OPCION 
* @param IN_CDPRG_ESTADO ESTADO DEL REGISTRO
* @param IN_CDPRG_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDPRG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_INSERT(
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA.CDPRG_CODIGO%TYPE,
IN IN_CDCAT_CODIGO SII.CGG_DHU_PREGUNTA.CDCAT_CODIGO%TYPE,
IN IN_CDPRG_DESCRIPCION SII.CGG_DHU_PREGUNTA.CDPRG_DESCRIPCION%TYPE,
IN IN_CDPRG_CUANTIFICABLE SII.CGG_DHU_PREGUNTA.CDPRG_CUANTIFICABLE%TYPE,
IN IN_CDPRG_MULTIPLE SII.CGG_DHU_PREGUNTA.CDPRG_MULTIPLE%TYPE,
IN IN_CDPRG_ESTADO SII.CGG_DHU_PREGUNTA.CDPRG_ESTADO%TYPE,
IN IN_CDPRG_USUARIO_INSERT SII.CGG_DHU_PREGUNTA.CDPRG_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF(UPPER(IN_CDPRG_CODIGO) <> 'KEYGEN') THEN
		UPDATE SII.CGG_DHU_PREGUNTA SET
			CDCAT_CODIGO = IN_CDCAT_CODIGO, 
			CDPRG_DESCRIPCION = IN_CDPRG_DESCRIPCION, 
			CDPRG_CUANTIFICABLE = IN_CDPRG_CUANTIFICABLE, 
			CDPRG_MULTIPLE = IN_CDPRG_MULTIPLE, 
			CDPRG_ESTADO = IN_CDPRG_ESTADO, 
			CDPRG_FECHA_UPDATE = CURRENT_TIMESTAMP, 
			CDPRG_USUARIO_UPDATE = IN_CDPRG_USUARIO_INSERT
		WHERE CDPRG_CODIGO = IN_CDPRG_CODIGO;
		OUT_KEY := IN_CDPRG_CODIGO;
	
	ELSE	
		IF (UPPER(IN_CDPRG_CODIGO) = 'KEYGEN') THEN
			SELECT SII.F_KEYGEN('CGG_DHU_PREGUNTA','CDPRG_CODIGO','CDPRG') INTO OUT_KEY;
		ELSE
			OUT_KEY := IN_CDPRG_CODIGO;
		END IF;
		INSERT INTO SII.CGG_DHU_PREGUNTA(
			CDPRG_CODIGO, 
			CDCAT_CODIGO, 
			CDPRG_DESCRIPCION, 
			CDPRG_CUANTIFICABLE, 
			CDPRG_MULTIPLE, 
			CDPRG_ESTADO, 
			CDPRG_FECHA_INSERT, 
			CDPRG_USUARIO_INSERT, 
			CDPRG_FECHA_UPDATE, 
			CDPRG_USUARIO_UPDATE
		) VALUES (
			OUT_KEY, 
			IN_CDCAT_CODIGO, 
			IN_CDPRG_DESCRIPCION, 
			IN_CDPRG_CUANTIFICABLE, 
			IN_CDPRG_MULTIPLE, 
			IN_CDPRG_ESTADO, 
			CURRENT_TIMESTAMP, 
			IN_CDPRG_USUARIO_INSERT, 
			CURRENT_TIMESTAMP, 
			IN_CDPRG_USUARIO_INSERT
		);
	END IF;
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDPRG_CODIGO, 
		CDCAT_CODIGO, 
		CDPRG_DESCRIPCION, 
		CDPRG_CUANTIFICABLE, 
		CDPRG_MULTIPLE, 
		CDPRG_ESTADO, 
		CDPRG_FECHA_INSERT, 
		CDPRG_USUARIO_INSERT, 
		CDPRG_FECHA_UPDATE, 
		CDPRG_USUARIO_UPDATE
	FROM SII.CGG_DHU_PREGUNTA
	WHERE CDPRG_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		PR.CDPRG_CODIGO, 
		PR.CDCAT_CODIGO, 
		CT.CDCAT_NOMBRE,
		PR.CDPRG_DESCRIPCION, 
		PR.CDPRG_CUANTIFICABLE, 
		PR.CDPRG_MULTIPLE, 
		PR.CDPRG_ESTADO, 
		PR.CDPRG_FECHA_INSERT, 
		PR.CDPRG_USUARIO_INSERT, 
		PR.CDPRG_FECHA_UPDATE, 
		PR.CDPRG_USUARIO_UPDATE
	FROM SII.CGG_DHU_PREGUNTA PR
	INNER JOIN CGG_DHU_CATEGORIA CT ON (CT.CDCAT_CODIGO = PR.CDCAT_CODIGO)
	WHERE CDPRG_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN PR.CDPRG_CODIGO IS NULL THEN '''' ELSE PR.CDPRG_CODIGO END ||'' ''||
	CASE WHEN PR.CDCAT_CODIGO IS NULL THEN '''' ELSE PR.CDCAT_CODIGO END ||'' ''||
	CASE WHEN CT.CDCAT_NOMBRE IS NULL THEN '''' ELSE CT.CDCAT_NOMBRE END ||'' ''||
	CASE WHEN PR.CDPRG_DESCRIPCION IS NULL THEN '''' ELSE PR.CDPRG_DESCRIPCION END ||'' ''||
	CASE WHEN PR.CDPRG_CUANTIFICABLE IS NULL THEN FALSE ELSE PR.CDPRG_CUANTIFICABLE END ||'' ''||
	CASE WHEN PR.CDPRG_ESTADO IS NULL THEN FALSE ELSE PR.CDPRG_ESTADO END ||'' ''||
	CASE WHEN PR.CDPRG_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE PR.CDPRG_FECHA_INSERT END ||'' ''||
	CASE WHEN PR.CDPRG_USUARIO_INSERT IS NULL THEN '''' ELSE PR.CDPRG_USUARIO_INSERT END ||'' ''||
	CASE WHEN PR.CDPRG_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE PR.CDPRG_FECHA_UPDATE END ||'' ''||
	CASE WHEN PR.CDPRG_USUARIO_UPDATE IS NULL THEN '''' ELSE PR.CDPRG_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_PREGUNTA PR
	INNER JOIN CGG_DHU_CATEGORIA CT ON (CT.CDCAT_CODIGO = PR.CDCAT_CODIGO)
	WHERE CDPRG_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_PREGUNTA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_PREGUNTA PR
	INNER JOIN CGG_DHU_CATEGORIA CT ON (CT.CDCAT_CODIGO = PR.CDCAT_CODIGO)
	WHERE CDPRG_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,
	CASE WHEN PR.CDPRG_CODIGO IS NULL THEN '''' ELSE PR.CDPRG_CODIGO END ||' '||
	CASE WHEN CT.PR.CDCAT_CODIGO IS NULL THEN '''' ELSE CT.CDCAT_CODIGO END ||' '||
	CASE WHEN CDCAT_NOMBRE IS NULL THEN '''' ELSE CDCAT_NOMBRE END ||' '||
	CASE WHEN PR.CDPRG_DESCRIPCION IS NULL THEN '''' ELSE PR.CDPRG_DESCRIPCION END ||' '||
	CASE WHEN PR.CDPRG_CUANTIFICABLE IS NULL THEN FALSE ELSE PR.CDPRG_CUANTIFICABLE END ||' '||
	CASE WHEN PR.CDPRG_ESTADO IS NULL THEN FALSE ELSE PR.CDPRG_ESTADO END ||' '||
	CASE WHEN PR.CDPRG_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE PR.CDPRG_FECHA_INSERT END ||' '||
	CASE WHEN PR.CDPRG_USUARIO_INSERT IS NULL THEN '''' ELSE PR.CDPRG_USUARIO_INSERT END ||' '||
	CASE WHEN PR.CDPRG_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE PR.CDPRG_FECHA_UPDATE END ||' '||
	CASE WHEN PR.CDPRG_USUARIO_UPDATE IS NULL THEN '''' ELSE PR.CDPRG_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @param IN_CDCAT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA CATEGORIA
* @param IN_CDPRG_DESCRIPCION DESCRIPCION DE LA PREGUNTA
* @param IN_CDPRG_CUANTIFICABLE ESTADO QUE DETERMINA SI LA PREGUNTA SE PUEDE CUANTIFICAR
* @param IN_CDPRG_MULTIPLE IDENTIFICA SI LA PREGUNTA ES DE SELECCION MULTIPLE O SI SOLO PUEDE ESCOGER SOLO UNA OPCION 
* @param IN_CDPRG_ESTADO ESTADO DEL REGISTRO
* @param IN_CDPRG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_UPDATE(
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA.CDPRG_CODIGO%TYPE,
IN IN_CDCAT_CODIGO SII.CGG_DHU_PREGUNTA.CDCAT_CODIGO%TYPE,
IN IN_CDPRG_DESCRIPCION SII.CGG_DHU_PREGUNTA.CDPRG_DESCRIPCION%TYPE,
IN IN_CDPRG_CUANTIFICABLE SII.CGG_DHU_PREGUNTA.CDPRG_CUANTIFICABLE%TYPE,
IN IN_CDPRG_MULTIPLE SII.CGG_DHU_PREGUNTA.CDPRG_MULTIPLE%TYPE,
IN IN_CDPRG_ESTADO SII.CGG_DHU_PREGUNTA.CDPRG_ESTADO%TYPE,
IN IN_CDPRG_USUARIO_UPDATE SII.CGG_DHU_PREGUNTA.CDPRG_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_PREGUNTA SET
		CDCAT_CODIGO = IN_CDCAT_CODIGO, 
		CDPRG_DESCRIPCION = IN_CDPRG_DESCRIPCION, 
		CDPRG_CUANTIFICABLE = IN_CDPRG_CUANTIFICABLE, 
		CDPRG_MULTIPLE = IN_CDPRG_MULTIPLE, 
		CDPRG_ESTADO = IN_CDPRG_ESTADO, 
		CDPRG_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDPRG_USUARIO_UPDATE = IN_CDPRG_USUARIO_UPDATE
	WHERE
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_SELECT(
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA.CDPRG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDPRG_CODIGO, 
		CDCAT_CODIGO, 
		CDPRG_DESCRIPCION, 
		CDPRG_CUANTIFICABLE, 
		CDPRG_MULTIPLE, 
		CDPRG_ESTADO, 
		CDPRG_FECHA_INSERT, 
		CDPRG_USUARIO_INSERT, 
		CDPRG_FECHA_UPDATE, 
		CDPRG_USUARIO_UPDATE
	FROM SII.CGG_DHU_PREGUNTA
	WHERE CDPRG_ESTADO = TRUE AND 
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_DELETE(
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA.CDPRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_PREGUNTA
	WHERE
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_PREGUNTA.
* @param IN_CDPRG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA PREGUNTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_DELETE_SOFT(
IN IN_CDPRG_CODIGO SII.CGG_DHU_PREGUNTA.CDPRG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_PREGUNTA SET
		CDPRG_ESTADO = FALSE
	WHERE
		CDPRG_CODIGO = IN_CDPRG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_S_CGG_DHU_CATEGORIA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_PREGUNTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_CATEGORIA.
* @param IN_CDCAT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA CATEGORIA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_S_CGG_DHU_CATEGORIA(
IN IN_CDCAT_CODIGO SII.CGG_DHU_PREGUNTA.CDCAT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDPRG_CODIGO, 
		CDCAT_CODIGO, 
		CDPRG_DESCRIPCION, 
		CDPRG_CUANTIFICABLE, 
		CDPRG_MULTIPLE, 
		CDPRG_ESTADO, 
		CDPRG_FECHA_INSERT, 
		CDPRG_USUARIO_INSERT, 
		CDPRG_FECHA_UPDATE, 
		CDPRG_USUARIO_UPDATE
	FROM SII.CGG_DHU_PREGUNTA
	WHERE CDPRG_ESTADO = TRUE AND 
		CDCAT_CODIGO = IN_CDCAT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_D_CGG_DHU_CATEGORIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_PREGUNTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_CATEGORIA.
* @param IN_CDCAT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA CATEGORIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_D_CGG_DHU_CATEGORIA(
IN IN_CDCAT_CODIGO SII.CGG_DHU_PREGUNTA.CDCAT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_PREGUNTA
	WHERE
		CDCAT_CODIGO = IN_CDCAT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_PREGUNTA_D_CGG_DHU_CATEGORIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_PREGUNTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_CATEGORIA.
* @param IN_CDCAT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE LA CATEGORIA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_PREGUNTA_DS_CGG_DHU_CATEGORIA(
IN IN_CDCAT_CODIGO SII.CGG_DHU_PREGUNTA.CDCAT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_PREGUNTA SET
		cdprg_estado = false
	WHERE
		CDCAT_CODIGO = IN_CDCAT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

