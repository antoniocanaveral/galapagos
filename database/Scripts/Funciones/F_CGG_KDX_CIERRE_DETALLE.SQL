/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_CIERRE_DETALLE.
* @param IN_CKCDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CKCDT_CANTIDAD CANTIDAD
* @param IN_CKCDT_VALOR VALOR MONETARIO DE LA DENOMINACION
* @param IN_CKCDT_TOTAL TOTAL CONTABLE
* @param IN_CKCDT_OBSERVACION DATO AUXILIAR REFERENCIA AL TIPO DE DENOMINACION
* @param IN_CKCDT_ESTADO ESTADO DEL REGISTRO
* @param IN_CKCDT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKCDT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_INSERT(
IN IN_CKCDT_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCDT_CODIGO%TYPE,
IN IN_CKDNM_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKDNM_CODIGO%TYPE,
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCRR_CODIGO%TYPE,
IN IN_CKCDT_CANTIDAD SII.CGG_KDX_CIERRE_DETALLE.CKCDT_CANTIDAD%TYPE,
IN IN_CKCDT_VALOR SII.CGG_KDX_CIERRE_DETALLE.CKCDT_VALOR%TYPE,
IN IN_CKCDT_TOTAL SII.CGG_KDX_CIERRE_DETALLE.CKCDT_TOTAL%TYPE,
IN IN_CKCDT_OBSERVACION SII.CGG_KDX_CIERRE_DETALLE.CKCDT_OBSERVACION%TYPE,
IN IN_CKCDT_ESTADO SII.CGG_KDX_CIERRE_DETALLE.CKCDT_ESTADO%TYPE,
IN IN_CKCDT_USUARIO_INSERT SII.CGG_KDX_CIERRE_DETALLE.CKCDT_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CKCDT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_CIERRE_DETALLE','CKCDT_CODIGO','CKCDT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CKCDT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_CIERRE_DETALLE(
		CKCDT_CODIGO, 
		CKDNM_CODIGO, 
		CKCRR_CODIGO, 
		CKCDT_CANTIDAD, 
		CKCDT_VALOR, 
		CKCDT_TOTAL, 
		CKCDT_OBSERVACION, 
		CKCDT_ESTADO, 
		CKCDT_FECHA_INSERT, 
		CKCDT_USUARIO_INSERT, 
		CKCDT_FECHA_UPDATE, 
		CKCDT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKDNM_CODIGO, 
		IN_CKCRR_CODIGO, 
		IN_CKCDT_CANTIDAD, 
		IN_CKCDT_VALOR, 
		IN_CKCDT_TOTAL, 
		IN_CKCDT_OBSERVACION, 
		IN_CKCDT_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKCDT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKCDT_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCDT_CODIGO, 
		CKDNM_CODIGO, 
		CKCRR_CODIGO, 
		CKCDT_CANTIDAD, 
		CKCDT_VALOR, 
		CKCDT_TOTAL, 
		CKCDT_OBSERVACION, 
		CKCDT_ESTADO, 
		CKCDT_FECHA_INSERT, 
		CKCDT_USUARIO_INSERT, 
		CKCDT_FECHA_UPDATE, 
		CKCDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE CKCDT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKCDT_CODIGO, 
		CKDNM_CODIGO, 
		CKCRR_CODIGO, 
		CKCDT_CANTIDAD, 
		CKCDT_VALOR, 
		CKCDT_TOTAL, 
		CKCDT_OBSERVACION, 
		CKCDT_ESTADO, 
		CKCDT_FECHA_INSERT, 
		CKCDT_USUARIO_INSERT, 
		CKCDT_FECHA_UPDATE, 
		CKCDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE CKCDT_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKCDT_CANTIDAD, 0)||'' ''||COALESCE(CKCDT_VALOR, 0)||'' ''||COALESCE(CKCDT_TOTAL, 0)||'' ''||COALESCE(CKCDT_OBSERVACION, '''')||'' ''||COALESCE(CKCDT_ESTADO, FALSE)||'' ''||COALESCE(CKCDT_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKCDT_USUARIO_INSERT, '''')||'' ''||COALESCE(CKCDT_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKCDT_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE CKCDT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE CKCDT_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKCDT_CANTIDAD, 0)||' '||COALESCE(CKCDT_VALOR, 0)||' '||COALESCE(CKCDT_TOTAL, 0)||' '||COALESCE(CKCDT_OBSERVACION, '''')||' '||COALESCE(CKCDT_ESTADO, FALSE)||' '||COALESCE(CKCDT_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKCDT_USUARIO_INSERT, '''')||' '||COALESCE(CKCDT_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKCDT_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_CIERRE_DETALLE.
* @param IN_CKCDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CKCDT_CANTIDAD CANTIDAD
* @param IN_CKCDT_VALOR VALOR MONETARIO DE LA DENOMINACION
* @param IN_CKCDT_TOTAL TOTAL CONTABLE
* @param IN_CKCDT_OBSERVACION DATO AUXILIAR REFERENCIA AL TIPO DE DENOMINACION
* @param IN_CKCDT_ESTADO ESTADO DEL REGISTRO
* @param IN_CKCDT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_UPDATE(
IN IN_CKCDT_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCDT_CODIGO%TYPE,
IN IN_CKDNM_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKDNM_CODIGO%TYPE,
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCRR_CODIGO%TYPE,
IN IN_CKCDT_CANTIDAD SII.CGG_KDX_CIERRE_DETALLE.CKCDT_CANTIDAD%TYPE,
IN IN_CKCDT_VALOR SII.CGG_KDX_CIERRE_DETALLE.CKCDT_VALOR%TYPE,
IN IN_CKCDT_TOTAL SII.CGG_KDX_CIERRE_DETALLE.CKCDT_TOTAL%TYPE,
IN IN_CKCDT_OBSERVACION SII.CGG_KDX_CIERRE_DETALLE.CKCDT_OBSERVACION%TYPE,
IN IN_CKCDT_ESTADO SII.CGG_KDX_CIERRE_DETALLE.CKCDT_ESTADO%TYPE,
IN IN_CKCDT_USUARIO_UPDATE SII.CGG_KDX_CIERRE_DETALLE.CKCDT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_CIERRE_DETALLE SET
		CKDNM_CODIGO = IN_CKDNM_CODIGO, 
		CKCRR_CODIGO = IN_CKCRR_CODIGO, 
		CKCDT_CANTIDAD = IN_CKCDT_CANTIDAD, 
		CKCDT_VALOR = IN_CKCDT_VALOR, 
		CKCDT_TOTAL = IN_CKCDT_TOTAL, 
		CKCDT_OBSERVACION = IN_CKCDT_OBSERVACION, 
		CKCDT_ESTADO = IN_CKCDT_ESTADO, 
		CKCDT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKCDT_USUARIO_UPDATE = IN_CKCDT_USUARIO_UPDATE
	WHERE
		CKCDT_CODIGO = IN_CKCDT_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_CIERRE_DETALLE.
* @param IN_CKCDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_SELECT(
IN IN_CKCDT_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCDT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCDT_CODIGO, 
		CKDNM_CODIGO, 
		CKCRR_CODIGO, 
		CKCDT_CANTIDAD, 
		CKCDT_VALOR, 
		CKCDT_TOTAL, 
		CKCDT_OBSERVACION, 
		CKCDT_ESTADO, 
		CKCDT_FECHA_INSERT, 
		CKCDT_USUARIO_INSERT, 
		CKCDT_FECHA_UPDATE, 
		CKCDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE CKCDT_ESTADO = TRUE AND 
		CKCDT_CODIGO = IN_CKCDT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_CIERRE_DETALLE.
* @param IN_CKCDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_DELETE(
IN IN_CKCDT_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCDT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE
		CKCDT_CODIGO = IN_CKCDT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_CIERRE_DETALLE.
* @param IN_CKCDT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_DELETE_SOFT(
IN IN_CKCDT_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCDT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_CIERRE_DETALLE SET
		CKCDT_ESTADO = FALSE
	WHERE
		CKCDT_CODIGO = IN_CKCDT_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_S_CGG_KDX_DENOMINACION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_S_CGG_KDX_DENOMINACION(
IN IN_CKDNM_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKDNM_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCDT_CODIGO, 
		CKDNM_CODIGO, 
		CKCRR_CODIGO, 
		CKCDT_CANTIDAD, 
		CKCDT_VALOR, 
		CKCDT_TOTAL, 
		CKCDT_OBSERVACION, 
		CKCDT_ESTADO, 
		CKCDT_FECHA_INSERT, 
		CKCDT_USUARIO_INSERT, 
		CKCDT_FECHA_UPDATE, 
		CKCDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE CKCDT_ESTADO = TRUE AND 
		CKDNM_CODIGO = IN_CKDNM_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_D_CGG_KDX_DENOMINACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_D_CGG_KDX_DENOMINACION(
IN IN_CKDNM_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKDNM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE
		CKDNM_CODIGO = IN_CKDNM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_D_CGG_KDX_DENOMINACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_DENOMINACION.
* @param IN_CKDNM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_DS_CGG_KDX_DENOMINACION(
IN IN_CKDNM_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKDNM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_CIERRE_DETALLE SET
		ckcdt_estado = false
	WHERE
		CKDNM_CODIGO = IN_CKDNM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_S_CGG_KDX_CIERRE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_S_CGG_KDX_CIERRE(
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCRR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKCDT_CODIGO, 
		CKDNM_CODIGO, 
		CKCRR_CODIGO, 
		CKCDT_CANTIDAD, 
		CKCDT_VALOR, 
		CKCDT_TOTAL, 
		CKCDT_OBSERVACION, 
		CKCDT_ESTADO, 
		CKCDT_FECHA_INSERT, 
		CKCDT_USUARIO_INSERT, 
		CKCDT_FECHA_UPDATE, 
		CKCDT_USUARIO_UPDATE
	FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE CKCDT_ESTADO = TRUE AND 
		CKCRR_CODIGO = IN_CKCRR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_D_CGG_KDX_CIERRE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_D_CGG_KDX_CIERRE(
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCRR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_CIERRE_DETALLE
	WHERE
		CKCRR_CODIGO = IN_CKCRR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_CIERRE_DETALLE_D_CGG_KDX_CIERRE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_CIERRE_DETALLE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_CIERRE.
* @param IN_CKCRR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_CIERRE_DETALLE_DS_CGG_KDX_CIERRE(
IN IN_CKCRR_CODIGO SII.CGG_KDX_CIERRE_DETALLE.CKCRR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_CIERRE_DETALLE SET
		ckcdt_estado = false
	WHERE
		CKCRR_CODIGO = IN_CKCRR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

