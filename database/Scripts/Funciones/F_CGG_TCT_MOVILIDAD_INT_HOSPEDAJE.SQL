/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
* @param IN_CTMHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CTTHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE HOSPEDAJE
* @param IN_CRMVI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOVILIDAD INTERNA
* @param IN_CTMHJ_LUGAR_HOSPEDAJE NOMBRE DEL LUGAR DONDE SE ALOJARA LA PERSONA
* @param IN_CTMHJ_ESTADO ESTADO DEL REGISTRO
* @param IN_CTMHJ_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CTMHJ_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_INSERT(
IN IN_CTMHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_CODIGO%TYPE, 
IN IN_CTTHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTTHJ_CODIGO%TYPE, 
IN IN_CRMVI_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CRMVI_CODIGO%TYPE, 
IN IN_CTMHJ_LUGAR_HOSPEDAJE SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_LUGAR_HOSPEDAJE%TYPE, 
IN IN_CTMHJ_ESTADO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_ESTADO%TYPE, 
IN IN_CTMHJ_USUARIO_INSERT SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_USUARIO_INSERT%TYPE, 
IN IN_CTMHJ_USUARIO_UPDATE SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CTMHJ_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_TCT_MOVILIDAD_INT_HOSPEDAJE','CTMHJ_CODIGO','CTMHJ') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CTMHJ_CODIGO;
	END IF;
	INSERT INTO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE(
		CTMHJ_CODIGO, 
		CTTHJ_CODIGO, 
		CRMVI_CODIGO, 
		CTMHJ_LUGAR_HOSPEDAJE, 
		CTMHJ_ESTADO, 
		CTMHJ_FECHA_INSERT, 
		CTMHJ_USUARIO_INSERT, 
		CTMHJ_FECHA_UPDATE, 
		CTMHJ_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CTTHJ_CODIGO, 
		IN_CRMVI_CODIGO, 
		IN_CTMHJ_LUGAR_HOSPEDAJE, 
		IN_CTMHJ_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CTMHJ_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CTMHJ_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTMHJ_CODIGO, 
		CTTHJ_CODIGO, 
		CRMVI_CODIGO, 
		CTMHJ_LUGAR_HOSPEDAJE, 
		CTMHJ_ESTADO, 
		CTMHJ_FECHA_INSERT, 
		CTMHJ_USUARIO_INSERT, 
		CTMHJ_FECHA_UPDATE, 
		CTMHJ_USUARIO_UPDATE
	FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE CTMHJ_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CTMHJ_CODIGO, 
		CTTHJ_CODIGO, 
		CRMVI_CODIGO, 
		CTMHJ_LUGAR_HOSPEDAJE, 
		CTMHJ_ESTADO, 
		CTMHJ_FECHA_INSERT, 
		CTMHJ_USUARIO_INSERT, 
		CTMHJ_FECHA_UPDATE, 
		CTMHJ_USUARIO_UPDATE
	FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE CTMHJ_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CTMHJ_CODIGO IS NULL THEN '''' ELSE CTMHJ_CODIGO END ||'' ''||CASE WHEN CTTHJ_CODIGO IS NULL THEN '''' ELSE CTTHJ_CODIGO END ||'' ''||CASE WHEN CRMVI_CODIGO IS NULL THEN '''' ELSE CRMVI_CODIGO END ||'' ''||CASE WHEN CTMHJ_LUGAR_HOSPEDAJE IS NULL THEN '''' ELSE CTMHJ_LUGAR_HOSPEDAJE END ||'' ''||CASE WHEN CTMHJ_ESTADO IS NULL THEN FALSE ELSE CTMHJ_ESTADO END ||'' ''||CASE WHEN CTMHJ_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CTMHJ_FECHA_INSERT END ||'' ''||CASE WHEN CTMHJ_USUARIO_INSERT IS NULL THEN '''' ELSE CTMHJ_USUARIO_INSERT END ||'' ''||CASE WHEN CTMHJ_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CTMHJ_FECHA_UPDATE END ||'' ''||CASE WHEN CTMHJ_USUARIO_UPDATE IS NULL THEN '''' ELSE CTMHJ_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE CTMHJ_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE CTMHJ_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CTMHJ_CODIGO IS NULL THEN '''' ELSE CTMHJ_CODIGO END ||' '||CASE WHEN CTTHJ_CODIGO IS NULL THEN '''' ELSE CTTHJ_CODIGO END ||' '||CASE WHEN CRMVI_CODIGO IS NULL THEN '''' ELSE CRMVI_CODIGO END ||' '||CASE WHEN CTMHJ_LUGAR_HOSPEDAJE IS NULL THEN '''' ELSE CTMHJ_LUGAR_HOSPEDAJE END ||' '||CASE WHEN CTMHJ_ESTADO IS NULL THEN FALSE ELSE CTMHJ_ESTADO END ||' '||CASE WHEN CTMHJ_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CTMHJ_FECHA_INSERT END ||' '||CASE WHEN CTMHJ_USUARIO_INSERT IS NULL THEN '''' ELSE CTMHJ_USUARIO_INSERT END ||' '||CASE WHEN CTMHJ_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CTMHJ_FECHA_UPDATE END ||' '||CASE WHEN CTMHJ_USUARIO_UPDATE IS NULL THEN '''' ELSE CTMHJ_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
* @param IN_CTMHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CTTHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE HOSPEDAJE
* @param IN_CRMVI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOVILIDAD INTERNA
* @param IN_CTMHJ_LUGAR_HOSPEDAJE NOMBRE DEL LUGAR DONDE SE ALOJARA LA PERSONA
* @param IN_CTMHJ_ESTADO ESTADO DEL REGISTRO
* @param IN_CTMHJ_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_UPDATE(
IN IN_CTMHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_CODIGO%TYPE, 
IN IN_CTTHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTTHJ_CODIGO%TYPE, 
IN IN_CRMVI_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CRMVI_CODIGO%TYPE, 
IN IN_CTMHJ_LUGAR_HOSPEDAJE SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_LUGAR_HOSPEDAJE%TYPE, 
IN IN_CTMHJ_ESTADO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_ESTADO%TYPE, 
IN IN_CTMHJ_USUARIO_UPDATE SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE SET
		CTTHJ_CODIGO = IN_CTTHJ_CODIGO, 
		CRMVI_CODIGO = IN_CRMVI_CODIGO, 
		CTMHJ_LUGAR_HOSPEDAJE = IN_CTMHJ_LUGAR_HOSPEDAJE, 
		CTMHJ_ESTADO = IN_CTMHJ_ESTADO, 
		CTMHJ_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CTMHJ_USUARIO_UPDATE = IN_CTMHJ_USUARIO_UPDATE
	WHERE
		CTMHJ_CODIGO = IN_CTMHJ_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
* @param IN_CTMHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_SELECT(
IN IN_CTMHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTMHJ_CODIGO, 
		CTTHJ_CODIGO, 
		CRMVI_CODIGO, 
		CTMHJ_LUGAR_HOSPEDAJE, 
		CTMHJ_ESTADO, 
		CTMHJ_FECHA_INSERT, 
		CTMHJ_USUARIO_INSERT, 
		CTMHJ_FECHA_UPDATE, 
		CTMHJ_USUARIO_UPDATE
	FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE CTMHJ_ESTADO = TRUE AND 
		CTMHJ_CODIGO = IN_CTMHJ_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
* @param IN_CTMHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_DELETE(
IN IN_CTMHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE
		CTMHJ_CODIGO = IN_CTMHJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
* @param IN_CTMHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_DELETE_SOFT(
IN IN_CTMHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTMHJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE SET
		CTMHJ_ESTADO = FALSE
	WHERE
		CTMHJ_CODIGO = IN_CTMHJ_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_S_CGG_TCT_TIPO_HOSPEDAJE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_TIPO_HOSPEDAJE.
* @param IN_CTTHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE HOSPEDAJE
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_S_CGG_TCT_TIPO_HOSPEDAJE(
IN IN_CTTHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTTHJ_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTMHJ_CODIGO, 
		CTTHJ_CODIGO, 
		CRMVI_CODIGO, 
		CTMHJ_LUGAR_HOSPEDAJE, 
		CTMHJ_ESTADO, 
		CTMHJ_FECHA_INSERT, 
		CTMHJ_USUARIO_INSERT, 
		CTMHJ_FECHA_UPDATE, 
		CTMHJ_USUARIO_UPDATE
	FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE CTMHJ_ESTADO = TRUE AND 
		CTTHJ_CODIGO = IN_CTTHJ_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_D_CGG_TCT_TIPO_HOSPEDAJE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_TIPO_HOSPEDAJE.
* @param IN_CTTHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE HOSPEDAJE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_D_CGG_TCT_TIPO_HOSPEDAJE(
IN IN_CTTHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTTHJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE
		CTTHJ_CODIGO = IN_CTTHJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_D_CGG_TCT_TIPO_HOSPEDAJE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_TIPO_HOSPEDAJE.
* @param IN_CTTHJ_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE HOSPEDAJE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_DS_CGG_TCT_TIPO_HOSPEDAJE(
IN IN_CTTHJ_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CTTHJ_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE SET
		ctmhj_estado = false
	WHERE
		CTTHJ_CODIGO = IN_CTTHJ_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_S_CGG_RES_MOVILIDAD_INTERNA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MOVILIDAD_INTERNA.
* @param IN_CRMVI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOVILIDAD INTERNA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_S_CGG_RES_MOVILIDAD_INTERNA(
IN IN_CRMVI_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CRMVI_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTMHJ_CODIGO, 
		CTTHJ_CODIGO, 
		CRMVI_CODIGO, 
		CTMHJ_LUGAR_HOSPEDAJE, 
		CTMHJ_ESTADO, 
		CTMHJ_FECHA_INSERT, 
		CTMHJ_USUARIO_INSERT, 
		CTMHJ_FECHA_UPDATE, 
		CTMHJ_USUARIO_UPDATE
	FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE CTMHJ_ESTADO = TRUE AND 
		CRMVI_CODIGO = IN_CRMVI_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_D_CGG_RES_MOVILIDAD_INTERNA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MOVILIDAD_INTERNA.
* @param IN_CRMVI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOVILIDAD INTERNA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_D_CGG_RES_MOVILIDAD_INTERNA(
IN IN_CRMVI_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CRMVI_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE
	WHERE
		CRMVI_CODIGO = IN_CRMVI_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_D_CGG_RES_MOVILIDAD_INTERNA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MOVILIDAD_INTERNA.
* @param IN_CRMVI_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MOVILIDAD INTERNA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_MOVILIDAD_INT_HOSPEDAJE_DS_CGG_RES_MOVILIDAD_INTERNA(
IN IN_CRMVI_CODIGO SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE.CRMVI_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_MOVILIDAD_INT_HOSPEDAJE SET
		ctmhj_estado = false
	WHERE
		CRMVI_CODIGO = IN_CRMVI_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

