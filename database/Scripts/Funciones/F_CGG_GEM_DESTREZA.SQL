/**
* FUNCION SII.F_CGG_GEM_DESTREZA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_DESTREZA.
* @param IN_CGDST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGDST_DESCRIPCION DESCRIPCION DE LA EXPERIENCIA LABORAL
* @param IN_CGDST_TIPO TIPO DE REGISTRO TRUE - DESTREZA / FALSE - HABILIDAD
* @param IN_CGDST_ESTADO ESTADO DEL REGISTRO
* @param IN_CGDST_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGDST_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_INSERT(
IN IN_CGDST_CODIGO SII.CGG_GEM_DESTREZA.CGDST_CODIGO%TYPE, 
IN IN_CGDST_DESCRIPCION SII.CGG_GEM_DESTREZA.CGDST_DESCRIPCION%TYPE, 
IN IN_CGDST_TIPO SII.CGG_GEM_DESTREZA.CGDST_TIPO%TYPE,
IN IN_CGDST_ESTADO SII.CGG_GEM_DESTREZA.CGDST_ESTADO%TYPE, 
IN IN_CGDST_USUARIO_INSERT SII.CGG_GEM_DESTREZA.CGDST_USUARIO_INSERT%TYPE, 
IN IN_CGDST_USUARIO_UPDATE SII.CGG_GEM_DESTREZA.CGDST_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGDST_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_DESTREZA','CGDST_CODIGO','CGDST') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGDST_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_DESTREZA(
		CGDST_CODIGO, 
		CGDST_DESCRIPCION,
		CGDST_TIPO,
		CGDST_ESTADO, 
		CGDST_FECHA_INSERT, 
		CGDST_USUARIO_INSERT, 
		CGDST_FECHA_UPDATE, 
		CGDST_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGDST_DESCRIPCION, 
		IN_CGDST_TIPO,
		IN_CGDST_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGDST_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGDST_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGDST_CODIGO, 
		CGDST_DESCRIPCION, 
		CGDST_TIPO,
		CGDST_ESTADO, 
		CGDST_FECHA_INSERT, 
		CGDST_USUARIO_INSERT, 
		CGDST_FECHA_UPDATE, 
		CGDST_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA
	WHERE CGDST_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGDST_CODIGO, 
		CGDST_DESCRIPCION,
		CGDST_TIPO,
		CGDST_ESTADO, 
		CGDST_FECHA_INSERT, 
		CGDST_USUARIO_INSERT, 
		CGDST_FECHA_UPDATE, 
		CGDST_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA
	WHERE CGDST_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGDST_DESCRIPCION, '''')||'' ''||COALESCE(CGDST_TIPO, FALSE)||'' ''||COALESCE(CGDST_ESTADO, FALSE)||'' ''||COALESCE(CGDST_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGDST_USUARIO_INSERT, '''')||'' ''||COALESCE(CGDST_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGDST_USUARIO_UPDATE, '''')) = 1
	ORDER BY CGDST_TIPO,'||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_DESTREZA
	WHERE CGDST_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_DESTREZA
	WHERE CGDST_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGDST_DESCRIPCION, '''')||' '||COALESCE(CGDST_TIPO, FALSE)||' '||COALESCE(CGDST_ESTADO, FALSE)||' '||COALESCE(CGDST_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGDST_USUARIO_INSERT, '''')||' '||COALESCE(CGDST_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGDST_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_DESTREZA.
* @param IN_CGDST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGDST_DESCRIPCION DESCRIPCION DE LA EXPERIENCIA LABORAL
* @param IN_CGDST_TIPO TIPO DE REGISTRO TRUE - DESTREZA / FALSE - HABILIDAD
* @param IN_CGDST_ESTADO ESTADO DEL REGISTRO
* @param IN_CGDST_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_UPDATE(
IN IN_CGDST_CODIGO SII.CGG_GEM_DESTREZA.CGDST_CODIGO%TYPE, 
IN IN_CGDST_DESCRIPCION SII.CGG_GEM_DESTREZA.CGDST_DESCRIPCION%TYPE, 
IN IN_CGDST_TIPO SII.CGG_GEM_DESTREZA.CGDST_TIPO%TYPE,
IN IN_CGDST_ESTADO SII.CGG_GEM_DESTREZA.CGDST_ESTADO%TYPE, 
IN IN_CGDST_USUARIO_UPDATE SII.CGG_GEM_DESTREZA.CGDST_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_DESTREZA SET
		CGDST_DESCRIPCION = IN_CGDST_DESCRIPCION, 
		CGDST_TIPO = IN_CGDST_TIPO,
		CGDST_ESTADO = IN_CGDST_ESTADO, 
		CGDST_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGDST_USUARIO_UPDATE = IN_CGDST_USUARIO_UPDATE
	WHERE
		CGDST_CODIGO = IN_CGDST_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_GEM_DESTREZA.
* @param IN_CGDST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_SELECT(
IN IN_CGDST_CODIGO SII.CGG_GEM_DESTREZA.CGDST_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGDST_CODIGO, 
		CGDST_DESCRIPCION,
		CGDST_TIPO,
		CGDST_ESTADO, 
		CGDST_FECHA_INSERT, 
		CGDST_USUARIO_INSERT, 
		CGDST_FECHA_UPDATE, 
		CGDST_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA
	WHERE CGDST_ESTADO = TRUE AND 
		CGDST_CODIGO = IN_CGDST_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_DESTREZA.
* @param IN_CGDST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_DELETE(
IN IN_CGDST_CODIGO SII.CGG_GEM_DESTREZA.CGDST_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_DESTREZA
	WHERE
		CGDST_CODIGO = IN_CGDST_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_GEM_DESTREZA.
* @param IN_CGDST_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE DESTREZAS.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_DELETE_SOFT(
IN IN_CGDST_CODIGO SII.CGG_GEM_DESTREZA.CGDST_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_GEM_DESTREZA SET
		CGDST_ESTADO = FALSE
	WHERE
		CGDST_CODIGO = IN_CGDST_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_DESTREZA_SELECT_AS_BYTIPO
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_CGDST_TIPO TIPO DE REGISTRO / TRUE - DESTREZAS / FALSE - HABILIDADES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_SELECT_AS_BYTIPO(
IN IN_USER_NAME VARCHAR,
IN IN_CGDST_TIPO BOOL
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGDST_CODIGO, 
		CGDST_DESCRIPCION, 
		CGDST_TIPO,
		CGDST_ESTADO, 
		CGDST_FECHA_INSERT, 
		CGDST_USUARIO_INSERT, 
		CGDST_FECHA_UPDATE, 
		CGDST_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA
	WHERE CGDST_ESTADO = TRUE AND CGDST_TIPO = IN_CGDST_TIPO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_DESTREZA_SELECT_BY_TIPO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CGDST_TIPO CRITERIO DE BUSQUEDA, TIPO DESTREZA / HABILIDAD
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_SELECT_BY_TIPO(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CGDST_TIPO BOOL
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGDST_CODIGO, 
		CGDST_DESCRIPCION,
		CGDST_TIPO,
		CGDST_ESTADO, 
		CGDST_FECHA_INSERT, 
		CGDST_USUARIO_INSERT, 
		CGDST_FECHA_UPDATE, 
		CGDST_USUARIO_UPDATE
	FROM SII.CGG_GEM_DESTREZA
	WHERE CGDST_ESTADO = TRUE AND CGDST_TIPO = '''||IN_CGDST_TIPO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGDST_DESCRIPCION, '''')||'' ''||COALESCE(CGDST_TIPO, FALSE)||'' ''||COALESCE(CGDST_ESTADO, FALSE)||'' ''||COALESCE(CGDST_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGDST_USUARIO_INSERT, '''')||'' ''||COALESCE(CGDST_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGDST_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_DESTREZA_COUNT_BY_TIPO
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_GEM_DESTREZA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CGDST_TIPO CRITERIO DE BUSQUEDA. HABILIDAD / DESTREZA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_DESTREZA_COUNT_BY_TIPO(
IN IN_FIND_TEXT TEXT,
IN IN_CGDST_TIPO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_GEM_DESTREZA
	WHERE CGDST_ESTADO = TRUE AND CGDST_TIPO = IN_CGDST_TIPO AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGDST_DESCRIPCION, '''')||' '||COALESCE(CGDST_TIPO, FALSE)||' '||COALESCE(CGDST_ESTADO, FALSE)||' '||COALESCE(CGDST_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGDST_USUARIO_INSERT, '''')||' '||COALESCE(CGDST_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGDST_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;