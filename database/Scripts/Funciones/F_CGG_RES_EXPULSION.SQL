/**
* FUNCION SII.F_CGG_RES_EXPULSION_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_EXPULSION
* @param IN_CREXP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRMOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA TESTIGO DE EXPULSION
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE EXPULSION
* @param IN_CTFSL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CREXP_FECHA_EXPULSION FECHA QUE SE REALIZA LA EXPULSION
* @param IN_CREXP_TIPO_PAGO TIPO DE PAGO
0 - PROPIO
1 - CGG
* @param IN_CREXP_VALOR_VUELO COSTO DEL VUELO
* @param IN_CREXP_OBSERVACION OBSERVACION DE LA EXPULSION
* @param IN_CREXP_ESTADO ESTADO DEL REGISTRO
* @param IN_CREXP_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CREXP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_INSERT(
IN IN_CREXP_CODIGO SII.CGG_RES_EXPULSION.CREXP_CODIGO%TYPE, 
IN IN_CRMOV_CODIGO SII.CGG_RES_EXPULSION.CRMOV_CODIGO%TYPE, 
IN IN_CRNOT_CODIGO SII.CGG_RES_EXPULSION.CRNOT_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_EXPULSION.CRPER_CODIGO%TYPE, 
IN IN_CROSG_CODIGO SII.CGG_RES_EXPULSION.CROSG_CODIGO%TYPE, 
IN IN_CTFSL_CODIGO SII.CGG_RES_EXPULSION.CTFSL_CODIGO%TYPE, 
IN IN_CREXP_FECHA_EXPULSION SII.CGG_RES_EXPULSION.CREXP_FECHA_EXPULSION%TYPE, 
IN IN_CREXP_TIPO_PAGO SII.CGG_RES_EXPULSION.CREXP_TIPO_PAGO%TYPE, 
IN IN_CREXP_VALOR_VUELO SII.CGG_RES_EXPULSION.CREXP_VALOR_VUELO%TYPE, 
IN IN_CREXP_OBSERVACION SII.CGG_RES_EXPULSION.CREXP_OBSERVACION%TYPE, 
IN IN_CREXP_ESTADO SII.CGG_RES_EXPULSION.CREXP_ESTADO%TYPE, 
IN IN_CREXP_USUARIO_INSERT SII.CGG_RES_EXPULSION.CREXP_USUARIO_INSERT%TYPE, 
IN IN_CREXP_USUARIO_UPDATE SII.CGG_RES_EXPULSION.CREXP_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CREXP_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_EXPULSION','CREXP_CODIGO','CREXP') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CREXP_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_EXPULSION(
		CREXP_CODIGO, 
		CRMOV_CODIGO, 
		CRNOT_CODIGO, 
		CRPER_CODIGO, 
		CROSG_CODIGO, 
		CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION, 
		CREXP_ESTADO, 
		CREXP_FECHA_INSERT, 
		CREXP_USUARIO_INSERT, 
		CREXP_FECHA_UPDATE, 
		CREXP_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRMOV_CODIGO, 
		IN_CRNOT_CODIGO, 
		IN_CRPER_CODIGO, 
		IN_CROSG_CODIGO, 
		IN_CTFSL_CODIGO, 
		IN_CREXP_FECHA_EXPULSION, 
		IN_CREXP_TIPO_PAGO, 
		IN_CREXP_VALOR_VUELO, 
		IN_CREXP_OBSERVACION, 
		IN_CREXP_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CREXP_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CREXP_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_EXPULSION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CREXP_CODIGO, 
		CRMOV_CODIGO, 
		CRNOT_CODIGO, 
		CRPER_CODIGO, 
		CROSG_CODIGO, 
		CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION, 
		CREXP_ESTADO, 
		CREXP_FECHA_INSERT, 
		CREXP_USUARIO_INSERT, 
		CREXP_FECHA_UPDATE, 
		CREXP_USUARIO_UPDATE
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_EXPULSION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CREXP_CODIGO, 
		CRMOV_CODIGO, 
		CRNOT_CODIGO, 
		CRPER_CODIGO, 
		CROSG_CODIGO, 
		CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION, 
		CREXP_ESTADO, 
		CREXP_FECHA_INSERT, 
		CREXP_USUARIO_INSERT, 
		CREXP_FECHA_UPDATE, 
		CREXP_USUARIO_UPDATE
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CREXP_FECHA_EXPULSION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CREXP_TIPO_PAGO, 0)||'' ''||COALESCE(CREXP_VALOR_VUELO, 0)||'' ''||COALESCE(CREXP_OBSERVACION, '''')||'' ''||COALESCE(CREXP_ESTADO, FALSE)||'' ''||COALESCE(CREXP_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CREXP_USUARIO_INSERT, '''')||'' ''||COALESCE(CREXP_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CREXP_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_EXPULSION
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_EXPULSION
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CREXP_FECHA_EXPULSION, CURRENT_TIMESTAMP)||' '||COALESCE(CREXP_TIPO_PAGO, 0)||' '||COALESCE(CREXP_VALOR_VUELO, 0)||' '||COALESCE(CREXP_OBSERVACION, '''')||' '||COALESCE(CREXP_ESTADO, FALSE)||' '||COALESCE(CREXP_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CREXP_USUARIO_INSERT, '''')||' '||COALESCE(CREXP_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CREXP_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_EXPULSION
* @param IN_CREXP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRMOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA TESTIGO DE EXPULSION
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE EXPULSION
* @param IN_CTFSL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CREXP_FECHA_EXPULSION FECHA QUE SE REALIZA LA EXPULSION
* @param IN_CREXP_TIPO_PAGO TIPO DE PAGO
0 - PROPIO
1 - CGG
* @param IN_CREXP_VALOR_VUELO COSTO DEL VUELO
* @param IN_CREXP_OBSERVACION OBSERVACION DE LA EXPULSION
* @param IN_CREXP_ESTADO ESTADO DEL REGISTRO
* @param IN_CREXP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_UPDATE(
IN IN_CREXP_CODIGO SII.CGG_RES_EXPULSION.CREXP_CODIGO%TYPE, 
IN IN_CRMOV_CODIGO SII.CGG_RES_EXPULSION.CRMOV_CODIGO%TYPE, 
IN IN_CRNOT_CODIGO SII.CGG_RES_EXPULSION.CRNOT_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_EXPULSION.CRPER_CODIGO%TYPE, 
IN IN_CROSG_CODIGO SII.CGG_RES_EXPULSION.CROSG_CODIGO%TYPE, 
IN IN_CTFSL_CODIGO SII.CGG_RES_EXPULSION.CTFSL_CODIGO%TYPE, 
IN IN_CREXP_FECHA_EXPULSION SII.CGG_RES_EXPULSION.CREXP_FECHA_EXPULSION%TYPE, 
IN IN_CREXP_TIPO_PAGO SII.CGG_RES_EXPULSION.CREXP_TIPO_PAGO%TYPE, 
IN IN_CREXP_VALOR_VUELO SII.CGG_RES_EXPULSION.CREXP_VALOR_VUELO%TYPE, 
IN IN_CREXP_OBSERVACION SII.CGG_RES_EXPULSION.CREXP_OBSERVACION%TYPE, 
IN IN_CREXP_ESTADO SII.CGG_RES_EXPULSION.CREXP_ESTADO%TYPE, 
IN IN_CREXP_USUARIO_UPDATE SII.CGG_RES_EXPULSION.CREXP_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_EXPULSION SET
		CRMOV_CODIGO = IN_CRMOV_CODIGO, 
		CRNOT_CODIGO = IN_CRNOT_CODIGO, 
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CROSG_CODIGO = IN_CROSG_CODIGO, 
		CTFSL_CODIGO = IN_CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION = IN_CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO = IN_CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO = IN_CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION = IN_CREXP_OBSERVACION, 
		CREXP_ESTADO = IN_CREXP_ESTADO, 
		CREXP_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CREXP_USUARIO_UPDATE = IN_CREXP_USUARIO_UPDATE
	WHERE
		CREXP_CODIGO = IN_CREXP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_EXPULSION
* @param IN_CREXP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_SELECT(
IN IN_CREXP_CODIGO SII.CGG_RES_EXPULSION.CREXP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CREXP_CODIGO, 
		CRMOV_CODIGO, 
		CRNOT_CODIGO, 
		CRPER_CODIGO, 
		CROSG_CODIGO, 
		CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION, 
		CREXP_ESTADO, 
		CREXP_FECHA_INSERT, 
		CREXP_USUARIO_INSERT, 
		CREXP_FECHA_UPDATE, 
		CREXP_USUARIO_UPDATE
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE AND 
		CREXP_CODIGO = IN_CREXP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_EXPULSION
* @param IN_CREXP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_DELETE(
IN IN_CREXP_CODIGO SII.CGG_RES_EXPULSION.CREXP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_EXPULSION
	WHERE
		CREXP_CODIGO = IN_CREXP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_EXPULSION
* @param IN_CREXP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_DELETE_SOFT(
IN IN_CREXP_CODIGO SII.CGG_RES_EXPULSION.CREXP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_EXPULSION SET
		CREXP_ESTADO = FALSE
	WHERE
		CREXP_CODIGO = IN_CREXP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_S_CGG_RES_MOVILIDAD
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MOVILIDAD.
* @param IN_CRMOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_S_CGG_RES_MOVILIDAD(
IN IN_CRMOV_CODIGO SII.CGG_RES_EXPULSION.CRMOV_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CREXP_CODIGO, 
		CRMOV_CODIGO, 
		CRNOT_CODIGO, 
		CRPER_CODIGO, 
		CROSG_CODIGO, 
		CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION, 
		CREXP_ESTADO, 
		CREXP_FECHA_INSERT, 
		CREXP_USUARIO_INSERT, 
		CREXP_FECHA_UPDATE, 
		CREXP_USUARIO_UPDATE
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE AND 
		CRMOV_CODIGO = IN_CRMOV_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_RES_MOVILIDAD
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MOVILIDAD.
* @param IN_CRMOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_D_CGG_RES_MOVILIDAD(
IN IN_CRMOV_CODIGO SII.CGG_RES_EXPULSION.CRMOV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_EXPULSION
	WHERE
		CRMOV_CODIGO = IN_CRMOV_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_RES_MOVILIDAD
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MOVILIDAD.
* @param IN_CRMOV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_DS_CGG_RES_MOVILIDAD(
IN IN_CRMOV_CODIGO SII.CGG_RES_EXPULSION.CRMOV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_EXPULSION SET
		crexp_estado = false
	WHERE
		CRMOV_CODIGO = IN_CRMOV_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_S_CGG_TCT_FORMA_SALIDA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_FORMA_SALIDA.
* @param IN_CTFSL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_S_CGG_TCT_FORMA_SALIDA(
IN IN_CTFSL_CODIGO SII.CGG_RES_EXPULSION.CTFSL_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CREXP_CODIGO, 
		CRMOV_CODIGO, 
		CRNOT_CODIGO, 
		CRPER_CODIGO, 
		CROSG_CODIGO, 
		CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION, 
		CREXP_ESTADO, 
		CREXP_FECHA_INSERT, 
		CREXP_USUARIO_INSERT, 
		CREXP_FECHA_UPDATE, 
		CREXP_USUARIO_UPDATE
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE AND 
		CTFSL_CODIGO = IN_CTFSL_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_TCT_FORMA_SALIDA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_FORMA_SALIDA.
* @param IN_CTFSL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_D_CGG_TCT_FORMA_SALIDA(
IN IN_CTFSL_CODIGO SII.CGG_RES_EXPULSION.CTFSL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_EXPULSION
	WHERE
		CTFSL_CODIGO = IN_CTFSL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_TCT_FORMA_SALIDA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_FORMA_SALIDA.
* @param IN_CTFSL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_DS_CGG_TCT_FORMA_SALIDA(
IN IN_CTFSL_CODIGO SII.CGG_RES_EXPULSION.CTFSL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_EXPULSION SET
		crexp_estado = false
	WHERE
		CTFSL_CODIGO = IN_CTFSL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA TESTIGO DE EXPULSION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_EXPULSION.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CREXP_CODIGO, 
		CRMOV_CODIGO, 
		CRNOT_CODIGO, 
		CRPER_CODIGO, 
		CROSG_CODIGO, 
		CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION, 
		CREXP_ESTADO, 
		CREXP_FECHA_INSERT, 
		CREXP_USUARIO_INSERT, 
		CREXP_FECHA_UPDATE, 
		CREXP_USUARIO_UPDATE
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA TESTIGO DE EXPULSION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_EXPULSION.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_EXPULSION
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA TESTIGO DE EXPULSION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_EXPULSION.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_EXPULSION SET
		crexp_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_S_CGG_RES_NOTIFICACION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_NOTIFICACION.
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_S_CGG_RES_NOTIFICACION(
IN IN_CRNOT_CODIGO SII.CGG_RES_EXPULSION.CRNOT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CREXP_CODIGO, 
		CRMOV_CODIGO, 
		CRNOT_CODIGO, 
		CRPER_CODIGO, 
		CROSG_CODIGO, 
		CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION, 
		CREXP_ESTADO, 
		CREXP_FECHA_INSERT, 
		CREXP_USUARIO_INSERT, 
		CREXP_FECHA_UPDATE, 
		CREXP_USUARIO_UPDATE
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE AND 
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_RES_NOTIFICACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_NOTIFICACION.
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_D_CGG_RES_NOTIFICACION(
IN IN_CRNOT_CODIGO SII.CGG_RES_EXPULSION.CRNOT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_EXPULSION
	WHERE
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_RES_NOTIFICACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_NOTIFICACION.
* @param IN_CRNOT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NOTIFICACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_DS_CGG_RES_NOTIFICACION(
IN IN_CRNOT_CODIGO SII.CGG_RES_EXPULSION.CRNOT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_EXPULSION SET
		crexp_estado = false
	WHERE
		CRNOT_CODIGO = IN_CRNOT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_S_CGG_RES_OFICIAL_SEGUIMIENTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_OFICIAL_SEGUIMIENTO.
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE EXPULSION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_S_CGG_RES_OFICIAL_SEGUIMIENTO(
IN IN_CROSG_CODIGO SII.CGG_RES_EXPULSION.CROSG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CREXP_CODIGO, 
		CRMOV_CODIGO, 
		CRNOT_CODIGO, 
		CRPER_CODIGO, 
		CROSG_CODIGO, 
		CTFSL_CODIGO, 
		CREXP_FECHA_EXPULSION, 
		CREXP_TIPO_PAGO, 
		CREXP_VALOR_VUELO, 
		CREXP_OBSERVACION, 
		CREXP_ESTADO, 
		CREXP_FECHA_INSERT, 
		CREXP_USUARIO_INSERT, 
		CREXP_FECHA_UPDATE, 
		CREXP_USUARIO_UPDATE
	FROM SII.CGG_RES_EXPULSION
	WHERE CREXP_ESTADO = TRUE AND 
		CROSG_CODIGO = IN_CROSG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_RES_OFICIAL_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_OFICIAL_SEGUIMIENTO.
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE EXPULSION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_D_CGG_RES_OFICIAL_SEGUIMIENTO(
IN IN_CROSG_CODIGO SII.CGG_RES_EXPULSION.CROSG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_EXPULSION
	WHERE
		CROSG_CODIGO = IN_CROSG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_EXPULSION_D_CGG_RES_OFICIAL_SEGUIMIENTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_EXPULSION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_OFICIAL_SEGUIMIENTO.
* @param IN_CROSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE OFICIAL DE EXPULSION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_EXPULSION_DS_CGG_RES_OFICIAL_SEGUIMIENTO(
IN IN_CROSG_CODIGO SII.CGG_RES_EXPULSION.CROSG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_EXPULSION SET
		crexp_estado = false
	WHERE
		CROSG_CODIGO = IN_CROSG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

