/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_INFORME_PAREJA
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRINF_FECHA_ENTREGA FECHA DE ENTREGA DEL INFORME DE SEGUIMEINTO A PAREJAS
* @param IN_CRINF_EXTRACTO RESUMEN DEL CONTENIDO DEL INFORME
* @param IN_CRINF_NUMERO_DOCUMENTO NUMERO SECUENCIAL DE INFORME
* @param IN_CRINF_OBSERVACION INFORMACION ADICIONAL - HISTORIAL JSON
* @param IN_CRINF_ESTADO ESTADO DEL REGISTRO
* @param IN_CRINF_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRINF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_INSERT(
IN IN_CRINF_CODIGO SII.CGG_RES_INFORME_PAREJA.CRINF_CODIGO%TYPE, 
IN IN_CROFM_CODIGO SII.CGG_RES_INFORME_PAREJA.CROFM_CODIGO%TYPE, 
IN IN_CRINF_FECHA_ENTREGA SII.CGG_RES_INFORME_PAREJA.CRINF_FECHA_ENTREGA%TYPE, 
IN IN_CRINF_EXTRACTO SII.CGG_RES_INFORME_PAREJA.CRINF_EXTRACTO%TYPE, 
IN IN_CRINF_NUMERO_DOCUMENTO SII.CGG_RES_INFORME_PAREJA.CRINF_NUMERO_DOCUMENTO%TYPE, 
IN IN_CRINF_OBSERVACION SII.CGG_RES_INFORME_PAREJA.CRINF_OBSERVACION%TYPE, 
IN IN_CRINF_ESTADO SII.CGG_RES_INFORME_PAREJA.CRINF_ESTADO%TYPE, 
IN IN_CRINF_USUARIO_INSERT SII.CGG_RES_INFORME_PAREJA.CRINF_USUARIO_INSERT%TYPE, 
IN IN_CRINF_USUARIO_UPDATE SII.CGG_RES_INFORME_PAREJA.CRINF_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRINF_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_INFORME_PAREJA','CRINF_CODIGO','CRINF') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRINF_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_INFORME_PAREJA(
		CRINF_CODIGO, 
		CROFM_CODIGO, 
		CRINF_FECHA_ENTREGA, 
		CRINF_EXTRACTO, 
		CRINF_NUMERO_DOCUMENTO, 
		CRINF_OBSERVACION, 
		CRINF_ESTADO, 
		CRINF_FECHA_INSERT, 
		CRINF_USUARIO_INSERT, 
		CRINF_FECHA_UPDATE, 
		CRINF_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CROFM_CODIGO, 
		IN_CRINF_FECHA_ENTREGA, 
		IN_CRINF_EXTRACTO, 
		IN_CRINF_NUMERO_DOCUMENTO, 
		IN_CRINF_OBSERVACION, 
		IN_CRINF_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRINF_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRINF_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_INFORME_PAREJA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRINF_CODIGO, 
		CROFM_CODIGO, 
		CRINF_FECHA_ENTREGA, 
		CRINF_EXTRACTO, 
		CRINF_NUMERO_DOCUMENTO, 
		CRINF_OBSERVACION, 
		CRINF_ESTADO, 
		CRINF_FECHA_INSERT, 
		CRINF_USUARIO_INSERT, 
		CRINF_FECHA_UPDATE, 
		CRINF_USUARIO_UPDATE
	FROM SII.CGG_RES_INFORME_PAREJA
	WHERE CRINF_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_INFORME_PAREJA
* @param IN_CRMTR_CODIGO CODIGO DEL MATRIMONIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_SELECT(
IN IN_CRMTR_CODIGO CHARACTER VARYING,
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		INP.CRINF_CODIGO, 
		(SELECT CRADJ_CODIGO FROM SII.CGG_RES_ADJUNTO WHERE CRINF_CODIGO = INP.CRINF_CODIGO) CODIGO_ADJUNTO,
		(SELECT CRADJ_NOMBRE_ADJUNTO FROM SII.CGG_RES_ADJUNTO WHERE CRINF_CODIGO = INP.CRINF_CODIGO) ADJUNTO,
		INP.CROFM_CODIGO, 
		INP.CRINF_FECHA_ENTREGA, 
		INP.CRINF_EXTRACTO, 
		INP.CRINF_NUMERO_DOCUMENTO, 
		INP.CRINF_OBSERVACION, 
		INP.CRINF_ESTADO, 
		INP.CRINF_FECHA_INSERT, 
		INP.CRINF_USUARIO_INSERT, 
		INP.CRINF_FECHA_UPDATE, 
		INP.CRINF_USUARIO_UPDATE
	FROM SII.CGG_RES_INFORME_PAREJA INP
	INNER JOIN SII.CGG_RES_OFICIAL_MATRIMONIO OM ON (OM.CROFM_CODIGO = INP.CROFM_CODIGO)
	WHERE INP.CRINF_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN INP.CRINF_CODIGO IS NULL THEN '''' ELSE INP.CRINF_CODIGO END ||'' ''||
	CASE WHEN INP.CROFM_CODIGO IS NULL THEN '''' ELSE INP.CROFM_CODIGO END ||'' ''||
	CASE WHEN INP.CRINF_FECHA_ENTREGA IS NULL THEN CURRENT_TIMESTAMP ELSE INP.CRINF_FECHA_ENTREGA END ||'' ''||
	CASE WHEN INP.CRINF_EXTRACTO IS NULL THEN '''' ELSE INP.CRINF_EXTRACTO END ||'' ''||
	CASE WHEN INP.CRINF_NUMERO_DOCUMENTO IS NULL THEN '''' ELSE INP.CRINF_NUMERO_DOCUMENTO END ||'' ''||
	CASE WHEN INP.CRINF_OBSERVACION IS NULL THEN '''' ELSE INP.CRINF_OBSERVACION END ) = 1 
	AND OM.CRMTR_CODIGO = '''||IN_CRMTR_CODIGO||'''
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_INFORME_PAREJA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_COUNT(
IN IN_CRMTR_CODIGO CHARACTER VARYING
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_INFORME_PAREJA INP
	INNER JOIN SII.CGG_RES_OFICIAL_MATRIMONIO OM ON OM.CROFM_CODIGO = INP.CROFM_CODIGO
	WHERE CRINF_ESTADO = TRUE AND OM.CRMTR_CODIGO = IN_CRMTR_CODIGO;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_INFORME_PAREJA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRMTR_CODIGO IDENTIFICATIVO UNICO DE MATRIMONIO.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_COUNT( 
IN IN_CRMTR_CODIGO CHARACTER VARYING,
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_INFORME_PAREJA INP
	INNER JOIN SII.CGG_RES_OFICIAL_MATRIMONIO OM ON OM.CROFM_CODIGO = INP.CROFM_CODIGO
	WHERE INP.CRINF_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,
	CASE WHEN INP.CRINF_CODIGO IS NULL THEN '''' ELSE INP.CRINF_CODIGO END ||' '||
	CASE WHEN INP.CROFM_CODIGO IS NULL THEN '''' ELSE INP.CROFM_CODIGO END ||' '||
	CASE WHEN INP.CRINF_FECHA_ENTREGA IS NULL THEN CURRENT_TIMESTAMP ELSE INP.CRINF_FECHA_ENTREGA END ||' '||
	CASE WHEN INP.CRINF_EXTRACTO IS NULL THEN '''' ELSE INP.CRINF_EXTRACTO END ||' '||
	CASE WHEN INP.CRINF_NUMERO_DOCUMENTO IS NULL THEN '''' ELSE INP.CRINF_NUMERO_DOCUMENTO END ||' '||
	CASE WHEN INP.CRINF_OBSERVACION IS NULL THEN '''' ELSE INP.CRINF_OBSERVACION END ||' '||
	CASE WHEN INP.CRINF_ESTADO IS NULL THEN FALSE ELSE INP.CRINF_ESTADO END ||' '||
	CASE WHEN INP.CRINF_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE INP.CRINF_FECHA_INSERT END ||' '||
	CASE WHEN INP.CRINF_USUARIO_INSERT IS NULL THEN '''' ELSE INP.CRINF_USUARIO_INSERT END ||' '||
	CASE WHEN INP.CRINF_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE INP.CRINF_FECHA_UPDATE END ||' '||
	CASE WHEN INP.CRINF_USUARIO_UPDATE IS NULL THEN '''' ELSE INP.CRINF_USUARIO_UPDATE END ) = 1
	AND OM.CRMTR_CODIGO = IN_CRMTR_CODIGO;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_INFORME_PAREJA
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRINF_FECHA_ENTREGA FECHA DE ENTREGA DEL INFORME DE SEGUIMEINTO A PAREJAS
* @param IN_CRINF_EXTRACTO RESUMEN DEL CONTENIDO DEL INFORME
* @param IN_CRINF_NUMERO_DOCUMENTO NUMERO SECUENCIAL DE INFORME
* @param IN_CRINF_OBSERVACION INFORMACION ADICIONAL - HISTORIAL JSON
* @param IN_CRINF_ESTADO ESTADO DEL REGISTRO
* @param IN_CRINF_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_UPDATE(
IN IN_CRINF_CODIGO SII.CGG_RES_INFORME_PAREJA.CRINF_CODIGO%TYPE, 
IN IN_CROFM_CODIGO SII.CGG_RES_INFORME_PAREJA.CROFM_CODIGO%TYPE, 
IN IN_CRINF_FECHA_ENTREGA SII.CGG_RES_INFORME_PAREJA.CRINF_FECHA_ENTREGA%TYPE, 
IN IN_CRINF_EXTRACTO SII.CGG_RES_INFORME_PAREJA.CRINF_EXTRACTO%TYPE, 
IN IN_CRINF_NUMERO_DOCUMENTO SII.CGG_RES_INFORME_PAREJA.CRINF_NUMERO_DOCUMENTO%TYPE, 
IN IN_CRINF_OBSERVACION SII.CGG_RES_INFORME_PAREJA.CRINF_OBSERVACION%TYPE, 
IN IN_CRINF_ESTADO SII.CGG_RES_INFORME_PAREJA.CRINF_ESTADO%TYPE, 
IN IN_CRINF_USUARIO_UPDATE SII.CGG_RES_INFORME_PAREJA.CRINF_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_INFORME_PAREJA SET
		CROFM_CODIGO = IN_CROFM_CODIGO, 
		CRINF_FECHA_ENTREGA = IN_CRINF_FECHA_ENTREGA, 
		CRINF_EXTRACTO = IN_CRINF_EXTRACTO, 
		CRINF_NUMERO_DOCUMENTO = IN_CRINF_NUMERO_DOCUMENTO, 
		CRINF_OBSERVACION = IN_CRINF_OBSERVACION, 
		CRINF_ESTADO = IN_CRINF_ESTADO, 
		CRINF_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRINF_USUARIO_UPDATE = IN_CRINF_USUARIO_UPDATE
	WHERE
		CRINF_CODIGO = IN_CRINF_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_INFORME_PAREJA
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_SELECT(
IN IN_CRINF_CODIGO SII.CGG_RES_INFORME_PAREJA.CRINF_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRINF_CODIGO, 
		CROFM_CODIGO, 
		CRINF_FECHA_ENTREGA, 
		CRINF_EXTRACTO, 
		CRINF_NUMERO_DOCUMENTO, 
		CRINF_OBSERVACION, 
		CRINF_ESTADO, 
		CRINF_FECHA_INSERT, 
		CRINF_USUARIO_INSERT, 
		CRINF_FECHA_UPDATE, 
		CRINF_USUARIO_UPDATE
	FROM SII.CGG_RES_INFORME_PAREJA
	WHERE CRINF_ESTADO = TRUE AND 
		CRINF_CODIGO = IN_CRINF_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_INFORME_PAREJA
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_DELETE(
IN IN_CRINF_CODIGO SII.CGG_RES_INFORME_PAREJA.CRINF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_INFORME_PAREJA
	WHERE
		CRINF_CODIGO = IN_CRINF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_INFORME_PAREJA
* @param IN_CRINF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_DELETE_SOFT(
IN IN_CRINF_CODIGO SII.CGG_RES_INFORME_PAREJA.CRINF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_INFORME_PAREJA SET
		CRINF_ESTADO = FALSE
	WHERE
		CRINF_CODIGO = IN_CRINF_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_S_CGG_RES_OFICIAL_MATRIMONIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_INFORME_PAREJA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO.
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_S_CGG_RES_OFICIAL_MATRIMONIO(
IN IN_CROFM_CODIGO SII.CGG_RES_INFORME_PAREJA.CROFM_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRINF_CODIGO, 
		CROFM_CODIGO, 
		CRINF_FECHA_ENTREGA, 
		CRINF_EXTRACTO, 
		CRINF_NUMERO_DOCUMENTO, 
		CRINF_OBSERVACION, 
		CRINF_ESTADO, 
		CRINF_FECHA_INSERT, 
		CRINF_USUARIO_INSERT, 
		CRINF_FECHA_UPDATE, 
		CRINF_USUARIO_UPDATE
	FROM SII.CGG_RES_INFORME_PAREJA
	WHERE CRINF_ESTADO = TRUE AND 
		CROFM_CODIGO = IN_CROFM_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_D_CGG_RES_OFICIAL_MATRIMONIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_INFORME_PAREJA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO.
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_D_CGG_RES_OFICIAL_MATRIMONIO(
IN IN_CROFM_CODIGO SII.CGG_RES_INFORME_PAREJA.CROFM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_INFORME_PAREJA
	WHERE
		CROFM_CODIGO = IN_CROFM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_INFORME_PAREJA_D_CGG_RES_OFICIAL_MATRIMONIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_INFORME_PAREJA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_OFICIAL_MATRIMONIO.
* @param IN_CROFM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_INFORME_PAREJA_DS_CGG_RES_OFICIAL_MATRIMONIO(
IN IN_CROFM_CODIGO SII.CGG_RES_INFORME_PAREJA.CROFM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_INFORME_PAREJA SET
		crinf_estado = false
	WHERE
		CROFM_CODIGO = IN_CROFM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

