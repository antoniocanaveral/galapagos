/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @param IN_CGIED_DESCRIPCION DESCRIPCION DE LA INSTITUCION EDUCATIVA
* @param IN_CGIED_DIRECCION DIRECCION DE UBICACION DE LA INSTITUCION EDUCATIVA
* @param IN_CGIED_ESTADO ESTADO DEL REGISTRO
* @param IN_CGIED_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGIED_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @param IN_CGIED_NOMBRE NOMBRE DE LA INTITUCION EDUCATIVA
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_INSERT(
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CGIED_CODIGO%TYPE, 
IN IN_CPAIS_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CPAIS_CODIGO%TYPE, 
IN IN_CGIED_DESCRIPCION SII.CGG_INSTITUCION_EDUCATIVA.CGIED_DESCRIPCION%TYPE, 
IN IN_CGIED_DIRECCION SII.CGG_INSTITUCION_EDUCATIVA.CGIED_DIRECCION%TYPE, 
IN IN_CGIED_ESTADO SII.CGG_INSTITUCION_EDUCATIVA.CGIED_ESTADO%TYPE, 
IN IN_CGIED_USUARIO_INSERT SII.CGG_INSTITUCION_EDUCATIVA.CGIED_USUARIO_INSERT%TYPE, 
IN IN_CGIED_USUARIO_UPDATE SII.CGG_INSTITUCION_EDUCATIVA.CGIED_USUARIO_UPDATE%TYPE,
IN IN_CGIED_NOMBRE SII.CGG_INSTITUCION_EDUCATIVA.CGIED_NOMBRE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGIED_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_INSTITUCION_EDUCATIVA','CGIED_CODIGO','CGIED') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGIED_CODIGO;
	END IF;
	INSERT INTO SII.CGG_INSTITUCION_EDUCATIVA(
		CGIED_CODIGO, 
		CPAIS_CODIGO, 
		CGIED_NOMBRE,
		CGIED_DESCRIPCION, 
		CGIED_DIRECCION, 
		CGIED_ESTADO, 
		CGIED_FECHA_INSERT, 
		CGIED_USUARIO_INSERT, 
		CGIED_FECHA_UPDATE, 
		CGIED_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CPAIS_CODIGO, 
		IN_CGIED_NOMBRE,
		IN_CGIED_DESCRIPCION, 
		IN_CGIED_DIRECCION, 
		IN_CGIED_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGIED_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGIED_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIED_CODIGO, 
		CPAIS_CODIGO, 
		CGIED_DESCRIPCION, 
		CGIED_DIRECCION, 
		CGIED_ESTADO, 
		CGIED_FECHA_INSERT, 
		CGIED_USUARIO_INSERT, 
		CGIED_FECHA_UPDATE, 
		CGIED_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_EDUCATIVA
	WHERE CGIED_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGIED_CODIGO, 
		CPAIS_CODIGO, 
		CGIED_DESCRIPCION, 
		CGIED_DIRECCION, 
		CGIED_ESTADO,
		CGIED_NOMBRE,
		CGIED_FECHA_INSERT, 
		CGIED_USUARIO_INSERT, 
		CGIED_FECHA_UPDATE, 
		CGIED_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_EDUCATIVA
	WHERE CGIED_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGIED_CODIGO, '''')||'' ''||COALESCE(CPAIS_CODIGO, '''')||'' ''||COALESCE(CGIED_NOMBRE, '''')||'' ''||COALESCE(CGIED_DESCRIPCION, '''')||'' ''||COALESCE(CGIED_DIRECCION, '''')||'' ''||COALESCE(CGIED_ESTADO, FALSE)||'' ''||COALESCE(CGIED_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGIED_USUARIO_INSERT, '''')||'' ''||COALESCE(CGIED_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGIED_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_INSTITUCION_EDUCATIVA
	WHERE CGIED_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_INSTITUCION_EDUCATIVA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_INSTITUCION_EDUCATIVA	
	WHERE CGIED_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGIED_CODIGO, '''')||' '||COALESCE(CPAIS_CODIGO, '''')||' '||COALESCE(CGIED_NOMBRE, '''')||' '||COALESCE(CGIED_DESCRIPCION, '''')||' '||COALESCE(CGIED_DIRECCION, '''')||' '||COALESCE(CGIED_ESTADO, FALSE)||' '||COALESCE(CGIED_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGIED_USUARIO_INSERT, '''')||' '||COALESCE(CGIED_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGIED_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_INSTITUCION_EDUCATIVA.
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @param IN_CGIED_DESCRIPCION DESCRIPCION DE LA INSTITUCION EDUCATIVA
* @param IN_CGIED_DIRECCION DIRECCION DE UBICACION DE LA INSTITUCION EDUCATIVA
* @param IN_CGIED_ESTADO ESTADO DEL REGISTRO
* @param IN_CGIED_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @param IN_CGIED_NOMBRE NOMBRE DE LA INSTITUCION EDUCATIVA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_UPDATE(
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CGIED_CODIGO%TYPE, 
IN IN_CPAIS_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CPAIS_CODIGO%TYPE, 
IN IN_CGIED_DESCRIPCION SII.CGG_INSTITUCION_EDUCATIVA.CGIED_DESCRIPCION%TYPE, 
IN IN_CGIED_DIRECCION SII.CGG_INSTITUCION_EDUCATIVA.CGIED_DIRECCION%TYPE, 
IN IN_CGIED_ESTADO SII.CGG_INSTITUCION_EDUCATIVA.CGIED_ESTADO%TYPE, 
IN IN_CGIED_USUARIO_UPDATE SII.CGG_INSTITUCION_EDUCATIVA.CGIED_USUARIO_UPDATE%TYPE,
IN IN_CGIED_NOMBRE SII.CGG_INSTITUCION_EDUCATIVA.CGIED_NOMBRE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_INSTITUCION_EDUCATIVA SET
		CPAIS_CODIGO = IN_CPAIS_CODIGO, 
		CGIED_NOMBRE = IN_CGIED_NOMBRE,
		CGIED_DESCRIPCION = IN_CGIED_DESCRIPCION, 
		CGIED_DIRECCION = IN_CGIED_DIRECCION, 
		CGIED_ESTADO = IN_CGIED_ESTADO, 
		CGIED_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGIED_USUARIO_UPDATE = IN_CGIED_USUARIO_UPDATE
	WHERE
		CGIED_CODIGO = IN_CGIED_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_SELECT(
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CGIED_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIED_CODIGO, 
		CPAIS_CODIGO, 
		CGIED_DESCRIPCION, 
		CGIED_DIRECCION, 
		CGIED_ESTADO, 
		CGIED_FECHA_INSERT, 
		CGIED_USUARIO_INSERT, 
		CGIED_FECHA_UPDATE, 
		CGIED_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_EDUCATIVA
	WHERE CGIED_ESTADO = TRUE AND 
		CGIED_CODIGO = IN_CGIED_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_DELETE(
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CGIED_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_INSTITUCION_EDUCATIVA
	WHERE
		CGIED_CODIGO = IN_CGIED_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_DELETE_SOFT(
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CGIED_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_INSTITUCION_EDUCATIVA SET
		CGIED_ESTADO = FALSE
	WHERE
		CGIED_CODIGO = IN_CGIED_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_S_CGG_PAIS
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_EDUCATIVA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_PAIS.
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_S_CGG_PAIS(
IN IN_CPAIS_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CPAIS_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIED_CODIGO, 
		CPAIS_CODIGO, 
		CGIED_DESCRIPCION, 
		CGIED_DIRECCION, 
		CGIED_ESTADO, 
		CGIED_FECHA_INSERT, 
		CGIED_USUARIO_INSERT, 
		CGIED_FECHA_UPDATE, 
		CGIED_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_EDUCATIVA
	WHERE CGIED_ESTADO = TRUE AND 
		CPAIS_CODIGO = IN_CPAIS_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_D_CGG_PAIS
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_EDUCATIVA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_PAIS.
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_D_CGG_PAIS(
IN IN_CPAIS_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CPAIS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_INSTITUCION_EDUCATIVA
	WHERE
		CPAIS_CODIGO = IN_CPAIS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_EDUCATIVA_D_CGG_PAIS
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_EDUCATIVA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_PAIS.
* @param IN_CPAIS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PAIS
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_EDUCATIVA_DS_CGG_PAIS(
IN IN_CPAIS_CODIGO SII.CGG_INSTITUCION_EDUCATIVA.CPAIS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_INSTITUCION_EDUCATIVA SET
		cgied_estado = false
	WHERE
		CPAIS_CODIGO = IN_CPAIS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

