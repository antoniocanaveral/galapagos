/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_TCT_GRUPO_TURISTA
* @param IN_CTGTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CTADC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO CSV
* @param IN_CTGTR_NUMERO NUMERO SECUENCIAL UNICO DE IDENTIFICACION DEL GRUPO
* @param IN_CTGTR_FECHA_RESERVA FECHA DE RESERVA 
* @param IN_CTGTR_FECHA_INGRESO FECHA DE INGRESO  A LA PROVINCIA
* @param IN_CTGTR_FECHA_SALIDA FECHA DE SALIDA DE LA PROVINCIA
* @param IN_CTGTR_ESTADO ESTADO DEL REGISTRO
* @param IN_CTGTR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CTGTR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_INSERT(
IN IN_CTGTR_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CUSU_CODIGO%TYPE, 
IN IN_CTADC_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTADC_CODIGO%TYPE, 
IN IN_CTGTR_NUMERO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_NUMERO%TYPE, 
IN IN_CTGTR_FECHA_RESERVA SII.CGG_TCT_GRUPO_TURISTA.CTGTR_FECHA_RESERVA%TYPE, 
IN IN_CTGTR_FECHA_INGRESO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_FECHA_INGRESO%TYPE, 
IN IN_CTGTR_FECHA_SALIDA SII.CGG_TCT_GRUPO_TURISTA.CTGTR_FECHA_SALIDA%TYPE, 
IN IN_CTGTR_ESTADO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_ESTADO%TYPE, 
IN IN_CTGTR_USUARIO_INSERT SII.CGG_TCT_GRUPO_TURISTA.CTGTR_USUARIO_INSERT%TYPE, 
IN IN_CTGTR_USUARIO_UPDATE SII.CGG_TCT_GRUPO_TURISTA.CTGTR_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CTGTR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_TCT_GRUPO_TURISTA','CTGTR_CODIGO','CTGTR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CTGTR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_TCT_GRUPO_TURISTA(
		CTGTR_CODIGO, 
		CUSU_CODIGO, 
		CTADC_CODIGO, 
		CTGTR_NUMERO, 
		CTGTR_FECHA_RESERVA, 
		CTGTR_FECHA_INGRESO, 
		CTGTR_FECHA_SALIDA, 
		CTGTR_ESTADO, 
		CTGTR_FECHA_INSERT, 
		CTGTR_USUARIO_INSERT, 
		CTGTR_FECHA_UPDATE, 
		CTGTR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CUSU_CODIGO, 
		IN_CTADC_CODIGO, 
		IN_CTGTR_NUMERO, 
		IN_CTGTR_FECHA_RESERVA, 
		IN_CTGTR_FECHA_INGRESO, 
		IN_CTGTR_FECHA_SALIDA, 
		IN_CTGTR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CTGTR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CTGTR_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTGTR_CODIGO, 
		CUSU_CODIGO, 
		CTADC_CODIGO, 
		CTGTR_NUMERO, 
		CTGTR_FECHA_RESERVA, 
		CTGTR_FECHA_INGRESO, 
		CTGTR_FECHA_SALIDA, 
		CTGTR_ESTADO, 
		CTGTR_FECHA_INSERT, 
		CTGTR_USUARIO_INSERT, 
		CTGTR_FECHA_UPDATE, 
		CTGTR_USUARIO_UPDATE
	FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE CTGTR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CTGTR_CODIGO, 
		CUSU_CODIGO, 
		CTADC_CODIGO, 
		CTGTR_NUMERO, 
		CTGTR_FECHA_RESERVA, 
		CTGTR_FECHA_INGRESO, 
		CTGTR_FECHA_SALIDA, 
		CTGTR_ESTADO, 
		CTGTR_FECHA_INSERT, 
		CTGTR_USUARIO_INSERT, 
		CTGTR_FECHA_UPDATE, 
		CTGTR_USUARIO_UPDATE
	FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE CTGTR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CTGTR_CODIGO IS NULL THEN '''' ELSE CTGTR_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CTADC_CODIGO IS NULL THEN '''' ELSE CTADC_CODIGO END ||'' ''||CASE WHEN CTGTR_NUMERO IS NULL THEN 0 ELSE CTGTR_NUMERO END ||'' ''||CASE WHEN CTGTR_FECHA_RESERVA IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_RESERVA END ||'' ''||CASE WHEN CTGTR_FECHA_INGRESO IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_INGRESO END ||'' ''||CASE WHEN CTGTR_FECHA_SALIDA IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_SALIDA END ||'' ''||CASE WHEN CTGTR_ESTADO IS NULL THEN FALSE ELSE CTGTR_ESTADO END ||'' ''||CASE WHEN CTGTR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_INSERT END ||'' ''||CASE WHEN CTGTR_USUARIO_INSERT IS NULL THEN '''' ELSE CTGTR_USUARIO_INSERT END ||'' ''||CASE WHEN CTGTR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_UPDATE END ||'' ''||CASE WHEN CTGTR_USUARIO_UPDATE IS NULL THEN '''' ELSE CTGTR_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE CTGTR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE CTGTR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CTGTR_CODIGO IS NULL THEN '''' ELSE CTGTR_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CTADC_CODIGO IS NULL THEN '''' ELSE CTADC_CODIGO END ||' '||CASE WHEN CTGTR_NUMERO IS NULL THEN 0 ELSE CTGTR_NUMERO END ||' '||CASE WHEN CTGTR_FECHA_RESERVA IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_RESERVA END ||' '||CASE WHEN CTGTR_FECHA_INGRESO IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_INGRESO END ||' '||CASE WHEN CTGTR_FECHA_SALIDA IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_SALIDA END ||' '||CASE WHEN CTGTR_ESTADO IS NULL THEN FALSE ELSE CTGTR_ESTADO END ||' '||CASE WHEN CTGTR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_INSERT END ||' '||CASE WHEN CTGTR_USUARIO_INSERT IS NULL THEN '''' ELSE CTGTR_USUARIO_INSERT END ||' '||CASE WHEN CTGTR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CTGTR_FECHA_UPDATE END ||' '||CASE WHEN CTGTR_USUARIO_UPDATE IS NULL THEN '''' ELSE CTGTR_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_TCT_GRUPO_TURISTA
* @param IN_CTGTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CTADC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO CSV
* @param IN_CTGTR_NUMERO NUMERO SECUENCIAL UNICO DE IDENTIFICACION DEL GRUPO
* @param IN_CTGTR_FECHA_RESERVA FECHA DE RESERVA 
* @param IN_CTGTR_FECHA_INGRESO FECHA DE INGRESO  A LA PROVINCIA
* @param IN_CTGTR_FECHA_SALIDA FECHA DE SALIDA DE LA PROVINCIA
* @param IN_CTGTR_ESTADO ESTADO DEL REGISTRO
* @param IN_CTGTR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_UPDATE(
IN IN_CTGTR_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CUSU_CODIGO%TYPE, 
IN IN_CTADC_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTADC_CODIGO%TYPE, 
IN IN_CTGTR_NUMERO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_NUMERO%TYPE, 
IN IN_CTGTR_FECHA_RESERVA SII.CGG_TCT_GRUPO_TURISTA.CTGTR_FECHA_RESERVA%TYPE, 
IN IN_CTGTR_FECHA_INGRESO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_FECHA_INGRESO%TYPE, 
IN IN_CTGTR_FECHA_SALIDA SII.CGG_TCT_GRUPO_TURISTA.CTGTR_FECHA_SALIDA%TYPE, 
IN IN_CTGTR_ESTADO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_ESTADO%TYPE, 
IN IN_CTGTR_USUARIO_UPDATE SII.CGG_TCT_GRUPO_TURISTA.CTGTR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_GRUPO_TURISTA SET
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CTADC_CODIGO = IN_CTADC_CODIGO, 
		CTGTR_NUMERO = IN_CTGTR_NUMERO, 
		CTGTR_FECHA_RESERVA = IN_CTGTR_FECHA_RESERVA, 
		CTGTR_FECHA_INGRESO = IN_CTGTR_FECHA_INGRESO, 
		CTGTR_FECHA_SALIDA = IN_CTGTR_FECHA_SALIDA, 
		CTGTR_ESTADO = IN_CTGTR_ESTADO, 
		CTGTR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CTGTR_USUARIO_UPDATE = IN_CTGTR_USUARIO_UPDATE
	WHERE
		CTGTR_CODIGO = IN_CTGTR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_TCT_GRUPO_TURISTA
* @param IN_CTGTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_SELECT(
IN IN_CTGTR_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTGTR_CODIGO, 
		CUSU_CODIGO, 
		CTADC_CODIGO, 
		CTGTR_NUMERO, 
		CTGTR_FECHA_RESERVA, 
		CTGTR_FECHA_INGRESO, 
		CTGTR_FECHA_SALIDA, 
		CTGTR_ESTADO, 
		CTGTR_FECHA_INSERT, 
		CTGTR_USUARIO_INSERT, 
		CTGTR_FECHA_UPDATE, 
		CTGTR_USUARIO_UPDATE
	FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE CTGTR_ESTADO = TRUE AND 
		CTGTR_CODIGO = IN_CTGTR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_TCT_GRUPO_TURISTA
* @param IN_CTGTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_DELETE(
IN IN_CTGTR_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE
		CTGTR_CODIGO = IN_CTGTR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_TCT_GRUPO_TURISTA
* @param IN_CTGTR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_DELETE_SOFT(
IN IN_CTGTR_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_GRUPO_TURISTA SET
		CTGTR_ESTADO = FALSE
	WHERE
		CTGTR_CODIGO = IN_CTGTR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTGTR_CODIGO, 
		CUSU_CODIGO, 
		CTADC_CODIGO, 
		CTGTR_NUMERO, 
		CTGTR_FECHA_RESERVA, 
		CTGTR_FECHA_INGRESO, 
		CTGTR_FECHA_SALIDA, 
		CTGTR_ESTADO, 
		CTGTR_FECHA_INSERT, 
		CTGTR_USUARIO_INSERT, 
		CTGTR_FECHA_UPDATE, 
		CTGTR_USUARIO_UPDATE
	FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE CTGTR_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_GRUPO_TURISTA SET
		ctgtr_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_S_CGG_TCT_ADJUNTO_CSV
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_ADJUNTO_CSV.
* @param IN_CTADC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO CSV
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_S_CGG_TCT_ADJUNTO_CSV(
IN IN_CTADC_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTADC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CTGTR_CODIGO, 
		CUSU_CODIGO, 
		CTADC_CODIGO, 
		CTGTR_NUMERO, 
		CTGTR_FECHA_RESERVA, 
		CTGTR_FECHA_INGRESO, 
		CTGTR_FECHA_SALIDA, 
		CTGTR_ESTADO, 
		CTGTR_FECHA_INSERT, 
		CTGTR_USUARIO_INSERT, 
		CTGTR_FECHA_UPDATE, 
		CTGTR_USUARIO_UPDATE
	FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE CTGTR_ESTADO = TRUE AND 
		CTADC_CODIGO = IN_CTADC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_D_CGG_TCT_ADJUNTO_CSV
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_ADJUNTO_CSV.
* @param IN_CTADC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO CSV
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_D_CGG_TCT_ADJUNTO_CSV(
IN IN_CTADC_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTADC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_TCT_GRUPO_TURISTA
	WHERE
		CTADC_CODIGO = IN_CTADC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_TCT_GRUPO_TURISTA_D_CGG_TCT_ADJUNTO_CSV
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_TCT_GRUPO_TURISTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_TCT_ADJUNTO_CSV.
* @param IN_CTADC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ADJUNTO CSV
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_DS_CGG_TCT_ADJUNTO_CSV(
IN IN_CTADC_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTADC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_TCT_GRUPO_TURISTA SET
		ctgtr_estado = false
	WHERE
		CTADC_CODIGO = IN_CTADC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* SELECCIONA INFORMACION ADICIONAL DE UN GRUPO DE TURISTA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_TCT_GRUPO_TURISTA_SELECT_INFO(
IN IN_CTGTR_CODIGO SII.CGG_TCT_GRUPO_TURISTA.CTGTR_CODIGO%TYPE
)RETURNS REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		GT.CTGTR_CODIGO, 
		GT.CUSU_CODIGO, 
		GT.CTADC_CODIGO, 
		GT.CTGTR_NUMERO, 
		GT.CTGTR_FECHA_RESERVA, 
		GT.CTGTR_FECHA_INGRESO, 
		GT.CTGTR_FECHA_SALIDA, 
		GT.CTGTR_ESTADO, 
		GT.CTGTR_FECHA_INSERT, 
		GT.CTGTR_USUARIO_INSERT, 
		GT.CTGTR_FECHA_UPDATE, 
		GT.CTGTR_USUARIO_UPDATE,
		(SELECT COUNT(*) FROM SII.CGG_TCT_REGISTRO TRG WHERE NOT TRG.CTREG_COMPLETO AND TRG.CTGTR_CODIGO = GT.CTGTR_CODIGO AND TRG.CRTRA_CODIGO IS NOT NULL) TOTAL_TRANS,
		(SELECT COUNT(CTREG_ESTADO_REGISTRO) FROM SII.CGG_TCT_REGISTRO WHERE CTGTR_CODIGO = GT.CTGTR_CODIGO AND CTREG_ESTADO_REGISTRO > 0) IMPRESAS
	FROM SII.CGG_TCT_GRUPO_TURISTA GT
	WHERE CTGTR_ESTADO AND CTGTR_CODIGO = IN_CTGTR_CODIGO;
	RETURN TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;