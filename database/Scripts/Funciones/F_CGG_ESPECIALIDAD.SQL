/**
* FUNCION SII.F_CGG_ESPECIALIDAD_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @param IN_CGESP_DESCRIPCION DESCRIPCION DE LA ESPECIALIDAD O PROFESION
* @param IN_CGESP_ESTADO ESTADO DEL REGISTRO
* @param IN_CGESP_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGESP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @param IN_CGNES_CODIGO CODIGO DEL NIVEL DE ESTUDIO
* @param IN_CGESP_NOMBRE NOMBRE DE LA ESPECIALIDAD
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_INSERT(
IN IN_CGESP_CODIGO SII.CGG_ESPECIALIDAD.CGESP_CODIGO%TYPE, 
IN IN_CGESP_DESCRIPCION SII.CGG_ESPECIALIDAD.CGESP_DESCRIPCION%TYPE, 
IN IN_CGESP_ESTADO SII.CGG_ESPECIALIDAD.CGESP_ESTADO%TYPE, 
IN IN_CGESP_USUARIO_INSERT SII.CGG_ESPECIALIDAD.CGESP_USUARIO_INSERT%TYPE, 
IN IN_CGESP_USUARIO_UPDATE SII.CGG_ESPECIALIDAD.CGESP_USUARIO_UPDATE%TYPE,
IN IN_CGNES_CODIGO SII.CGG_ESPECIALIDAD.CGNES_CODIGO%TYPE,
IN IN_CGESP_NOMBRE SII.CGG_ESPECIALIDAD.CGESP_NOMBRE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGESP_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_ESPECIALIDAD','CGESP_CODIGO','CGESP') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGESP_CODIGO;
	END IF;
	INSERT INTO SII.CGG_ESPECIALIDAD(		
		CGESP_CODIGO, 
		CGNES_CODIGO, 
		CGESP_NOMBRE, 
		CGESP_DESCRIPCION, 
		CGESP_ESTADO, 
		CGESP_FECHA_INSERT, 
		CGESP_USUARIO_INSERT, 
		CGESP_FECHA_UPDATE, 
		CGESP_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGNES_CODIGO,
		IN_CGESP_NOMBRE,
		IN_CGESP_DESCRIPCION, 
		IN_CGESP_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGESP_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGESP_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ESPECIALIDAD_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGESP_CODIGO, 
		CGESP_DESCRIPCION, 
		CGESP_ESTADO, 
		CGESP_FECHA_INSERT, 
		CGESP_USUARIO_INSERT, 
		CGESP_FECHA_UPDATE, 
		CGESP_USUARIO_UPDATE
	FROM SII.CGG_ESPECIALIDAD
	WHERE CGESP_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ESPECIALIDAD_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		ESP.CGESP_CODIGO, 
		ESP.CGESP_DESCRIPCION, 
		ESP.CGESP_ESTADO, 
		ESP.CGNES_CODIGO, 
		ESP.CGESP_NOMBRE, 
		NES.CGNES_DESCRIPCION,
		ESP.CGESP_FECHA_INSERT, 
		ESP.CGESP_USUARIO_INSERT, 
		ESP.CGESP_FECHA_UPDATE, 
		ESP.CGESP_USUARIO_UPDATE
	FROM SII.CGG_ESPECIALIDAD ESP INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(ESP.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE ESP.CGESP_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(NES.CGNES_DESCRIPCION, '''')||'' ''||COALESCE(ESP.CGESP_NOMBRE, '''')||'' ''||COALESCE(ESP.CGESP_DESCRIPCION, '''')||'' ''||COALESCE(ESP.CGESP_ESTADO, FALSE)||'' ''||COALESCE(ESP.CGESP_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(ESP.CGESP_USUARIO_INSERT, '''')||'' ''||COALESCE(ESP.CGESP_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(ESP.CGESP_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ESPECIALIDAD_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_ESPECIALIDAD.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_ESPECIALIDAD
	WHERE CGESP_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ESPECIALIDAD_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_ESPECIALIDAD
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_ESPECIALIDAD ESP INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(ESP.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE CGESP_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(NES.CGNES_DESCRIPCION, '''')||' '||COALESCE(ESP.CGESP_NOMBRE, '''')||' '||COALESCE(ESP.CGESP_DESCRIPCION, '''')||' '||COALESCE(ESP.CGESP_ESTADO, FALSE)||' '||COALESCE(ESP.CGESP_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(ESP.CGESP_USUARIO_INSERT, '''')||' '||COALESCE(ESP.CGESP_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(ESP.CGESP_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ESPECIALIDAD_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_ESPECIALIDAD.
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @param IN_CGESP_DESCRIPCION DESCRIPCION DE LA ESPECIALIDAD O PROFESION
* @param IN_CGESP_ESTADO ESTADO DEL REGISTRO
* @param IN_CGESP_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @param IN_CGNES_CODIGO CODIGO DEL NIVEL DE ESTUDIO
* @param IN_CGESP_NOMBRE NOMBRE DE LA ESPECIALIDAD
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_UPDATE(
IN IN_CGESP_CODIGO SII.CGG_ESPECIALIDAD.CGESP_CODIGO%TYPE, 
IN IN_CGESP_DESCRIPCION SII.CGG_ESPECIALIDAD.CGESP_DESCRIPCION%TYPE, 
IN IN_CGESP_ESTADO SII.CGG_ESPECIALIDAD.CGESP_ESTADO%TYPE, 
IN IN_CGESP_USUARIO_UPDATE SII.CGG_ESPECIALIDAD.CGESP_USUARIO_UPDATE%TYPE,
IN IN_CGNES_CODIGO SII.CGG_ESPECIALIDAD.CGNES_CODIGO%TYPE, 
IN IN_CGESP_NOMBRE SII.CGG_ESPECIALIDAD.CGESP_NOMBRE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_ESPECIALIDAD SET
		CGNES_CODIGO = IN_CGNES_CODIGO,
		CGESP_NOMBRE = IN_CGESP_NOMBRE,
		CGESP_DESCRIPCION = IN_CGESP_DESCRIPCION, 
		CGESP_ESTADO = IN_CGESP_ESTADO, 
		CGESP_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGESP_USUARIO_UPDATE = IN_CGESP_USUARIO_UPDATE
	WHERE
		CGESP_CODIGO = IN_CGESP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ESPECIALIDAD_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_SELECT(
IN IN_CGESP_CODIGO SII.CGG_ESPECIALIDAD.CGESP_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGESP_CODIGO, 
		CGESP_DESCRIPCION, 
		CGESP_ESTADO, 
		CGESP_FECHA_INSERT, 
		CGESP_USUARIO_INSERT, 
		CGESP_FECHA_UPDATE, 
		CGESP_USUARIO_UPDATE
	FROM SII.CGG_ESPECIALIDAD
	WHERE CGESP_ESTADO = TRUE AND 
		CGESP_CODIGO = IN_CGESP_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ESPECIALIDAD_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_DELETE(
IN IN_CGESP_CODIGO SII.CGG_ESPECIALIDAD.CGESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_ESPECIALIDAD
	WHERE
		CGESP_CODIGO = IN_CGESP_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_ESPECIALIDAD_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_CGESP_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESPECIALIDAD
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_DELETE_SOFT(
IN IN_CGESP_CODIGO SII.CGG_ESPECIALIDAD.CGESP_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_ESPECIALIDAD SET
		CGESP_ESTADO = FALSE
	WHERE
		CGESP_CODIGO = IN_CGESP_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION sii.F_CGG_ESPECIALIDAD_BYID_NIVELESTUDIO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CGNES_CODIGO CRITERIO DE BUSQUEDA. CODIGO DEL NIVEL DE ESTUDIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION sii.F_CGG_ESPECIALIDAD_BYID_NIVELESTUDIO(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		ESP.CGESP_CODIGO, 
		ESP.CGESP_DESCRIPCION, 
		ESP.CGESP_ESTADO, 
		ESP.CGNES_CODIGO, 
		ESP.CGESP_NOMBRE, 
		NES.CGNES_DESCRIPCION,
		ESP.CGESP_FECHA_INSERT, 
		ESP.CGESP_USUARIO_INSERT, 
		ESP.CGESP_FECHA_UPDATE, 
		ESP.CGESP_USUARIO_UPDATE
	FROM SII.CGG_ESPECIALIDAD ESP INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(ESP.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE ESP.CGESP_ESTADO = TRUE AND ESP.CGNES_CODIGO='''||IN_CGNES_CODIGO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(NES.CGNES_DESCRIPCION, '''')||'' ''||COALESCE(ESP.CGESP_NOMBRE, '''')||'' ''||COALESCE(ESP.CGESP_DESCRIPCION, '''')||'' ''||COALESCE(ESP.CGESP_ESTADO, FALSE)||'' ''||COALESCE(ESP.CGESP_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(ESP.CGESP_USUARIO_INSERT, '''')||'' ''||COALESCE(ESP.CGESP_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(ESP.CGESP_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION  SII.F_CGG_ESPECIALIDAD_COUNT_BYID_NIVEL
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_ESPECIALIDAD QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CGNES_CODIGO CRITERIO DE BUSQUEDA. CODIGO DEL NIVEL DE ESTUDIO
* @return TMP_ROWS TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_COUNT_BYID_NIVEL(
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_ESPECIALIDAD ESP INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(ESP.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE CGESP_ESTADO = TRUE AND ESP.CGNES_CODIGO=IN_CGNES_CODIGO AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(NES.CGNES_DESCRIPCION, '''')||' '||COALESCE(ESP.CGESP_NOMBRE, '''')||' '||COALESCE(ESP.CGESP_DESCRIPCION, '''')||' '||COALESCE(ESP.CGESP_ESTADO, FALSE)||' '||COALESCE(ESP.CGESP_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(ESP.CGESP_USUARIO_INSERT, '''')||' '||COALESCE(ESP.CGESP_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(ESP.CGESP_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION sii.F_CGG_ESPECIALIDAD_VARIOSNIVELES
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_ESPECIALIDAD.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CGNES_CODIGO CRITERIO DE BUSQUEDA. CODIGO DEL NIVEL DE ESTUDIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION sii.F_CGG_ESPECIALIDAD_VARIOSNIVELES(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	TOTALCADENA INT;
	CODIGONIVEL TEXT[];
	TMPWHERE TEXT;
BEGIN	
	CODIGONIVEL := STRING_TO_ARRAY(IN_CGNES_CODIGO, ';');
	TOTALCADENA := ARRAY_LENGTH(CODIGONIVEL, 1);	
	TMPWHERE:='';
	FOR I IN 1..TOTALCADENA LOOP
			TMPWHERE := TMPWHERE||'ESP.CGNES_CODIGO='''||CODIGONIVEL[I]||'''';
			IF (I < TOTALCADENA) THEN
				TMPWHERE := TMPWHERE||' OR ';
			END IF;
	END LOOP;	
	
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		ESP.CGESP_CODIGO, 
		ESP.CGESP_DESCRIPCION, 
		ESP.CGESP_ESTADO, 
		ESP.CGNES_CODIGO, 
		ESP.CGESP_NOMBRE, 
		NES.CGNES_DESCRIPCION,
		ESP.CGESP_FECHA_INSERT, 
		ESP.CGESP_USUARIO_INSERT, 
		ESP.CGESP_FECHA_UPDATE, 
		ESP.CGESP_USUARIO_UPDATE
	FROM SII.CGG_ESPECIALIDAD ESP INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(ESP.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE ESP.CGESP_ESTADO = TRUE AND '||TMPWHERE||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(NES.CGNES_DESCRIPCION, '''')||'' ''||COALESCE(ESP.CGESP_NOMBRE, '''')||'' ''||COALESCE(ESP.CGESP_DESCRIPCION, '''')||'' ''||COALESCE(ESP.CGESP_ESTADO, FALSE)||'' ''||COALESCE(ESP.CGESP_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(ESP.CGESP_USUARIO_INSERT, '''')||'' ''||COALESCE(ESP.CGESP_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(ESP.CGESP_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION  SII.F_CGG_ESPECIALIDAD_COUNT_BYNIVELES
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_ESPECIALIDAD QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CGNES_CODIGO CRITERIO DE BUSQUEDA. CODIGO DEL NIVEL DE ESTUDIO
* @return TMP_ROWS TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_ESPECIALIDAD_COUNT_BYNIVELES(
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO TEXT
)RETURNS INT AS
$$
DECLARE
	TMP_ROWS INT2;
	TOTALCADENA INT;
	CODIGONIVEL TEXT[];
	TMPWHERE TEXT;
	TMP TEXT;
BEGIN
	CODIGONIVEL := STRING_TO_ARRAY(IN_CGNES_CODIGO, ';');
	TOTALCADENA := ARRAY_LENGTH(CODIGONIVEL, 1);	
	TMPWHERE:='';
	FOR I IN 1..TOTALCADENA LOOP
			TMPWHERE := TMPWHERE||'ESP.CGNES_CODIGO='''||CODIGONIVEL[I]||'''';
			IF (I < TOTALCADENA) THEN
				TMPWHERE := TMPWHERE||' OR ';
			END IF;
	END LOOP;
	TMP='SELECT COUNT(*)
	FROM SII.CGG_ESPECIALIDAD ESP INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(ESP.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE ESP.CGESP_ESTADO = TRUE AND '||TMPWHERE||' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(NES.CGNES_DESCRIPCION, '''')||'' ''||COALESCE(ESP.CGESP_NOMBRE, '''')||'' ''||COALESCE(ESP.CGESP_DESCRIPCION, '''')||'' ''||COALESCE(ESP.CGESP_ESTADO, FALSE)||'' ''||COALESCE(ESP.CGESP_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(ESP.CGESP_USUARIO_INSERT, '''')||'' ''||COALESCE(ESP.CGESP_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(ESP.CGESP_USUARIO_UPDATE, '''')) = 1;';
	EXECUTE TMP INTO TMP_ROWS;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;