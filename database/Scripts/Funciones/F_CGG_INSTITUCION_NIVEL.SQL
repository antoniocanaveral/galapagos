/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_CGIEN_CODIGO NO ESPECIFICADO
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @param IN_CGIEN_ESTADO ESTADO DEL REGISTRO
* @param IN_CGIEN_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGIEN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_INSERT(
IN IN_CGIEN_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIEN_CODIGO%TYPE,
IN IN_CGNES_CODIGO SII.CGG_INSTITUCION_NIVEL.CGNES_CODIGO%TYPE,
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIED_CODIGO%TYPE,
IN IN_CGIEN_ESTADO SII.CGG_INSTITUCION_NIVEL.CGIEN_ESTADO%TYPE,
IN IN_CGIEN_USUARIO_INSERT SII.CGG_INSTITUCION_NIVEL.CGIEN_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGIEN_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_INSTITUCION_NIVEL','CGIEN_CODIGO','CGIEN') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGIEN_CODIGO;
	END IF;
	INSERT INTO SII.CGG_INSTITUCION_NIVEL(
		CGIEN_CODIGO, 
		CGNES_CODIGO, 
		CGIED_CODIGO, 
		CGIEN_ESTADO, 
		CGIEN_FECHA_INSERT, 
		CGIEN_USUARIO_INSERT, 
		CGIEN_FECHA_UPDATE, 
		CGIEN_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGNES_CODIGO, 
		IN_CGIED_CODIGO, 
		IN_CGIEN_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGIEN_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGIEN_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIEN_CODIGO, 
		CGNES_CODIGO, 
		CGIED_CODIGO, 
		CGIEN_ESTADO, 
		CGIEN_FECHA_INSERT, 
		CGIEN_USUARIO_INSERT, 
		CGIEN_FECHA_UPDATE, 
		CGIEN_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_NIVEL
	WHERE CGIEN_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CGIEN_CODIGO, 
		CGNES_CODIGO, 
		CGIED_CODIGO, 
		CGIEN_ESTADO, 
		CGIEN_FECHA_INSERT, 
		CGIEN_USUARIO_INSERT, 
		CGIEN_FECHA_UPDATE, 
		CGIEN_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_NIVEL
	WHERE CGIEN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CGIEN_ESTADO, FALSE)||'' ''||COALESCE(CGIEN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGIEN_USUARIO_INSERT, '''')||'' ''||COALESCE(CGIEN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CGIEN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_INSTITUCION_NIVEL
	WHERE CGIEN_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_INSTITUCION_NIVEL.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_INSTITUCION_NIVEL
	WHERE CGIEN_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CGIEN_ESTADO, FALSE)||' '||COALESCE(CGIEN_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CGIEN_USUARIO_INSERT, '''')||' '||COALESCE(CGIEN_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CGIEN_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_INSTITUCION_NIVEL.
* @param IN_CGIEN_CODIGO IDENTIFICATIVO UNICO DE INSTITUCION DE NIVEL.
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @param IN_CGIEN_ESTADO ESTADO DEL REGISTRO
* @param IN_CGIEN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_UPDATE(
IN IN_CGIEN_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIEN_CODIGO%TYPE,
IN IN_CGNES_CODIGO SII.CGG_INSTITUCION_NIVEL.CGNES_CODIGO%TYPE,
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIED_CODIGO%TYPE,
IN IN_CGIEN_ESTADO SII.CGG_INSTITUCION_NIVEL.CGIEN_ESTADO%TYPE,
IN IN_CGIEN_USUARIO_UPDATE SII.CGG_INSTITUCION_NIVEL.CGIEN_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_INSTITUCION_NIVEL SET
		CGNES_CODIGO = IN_CGNES_CODIGO, 
		CGIED_CODIGO = IN_CGIED_CODIGO, 
		CGIEN_ESTADO = IN_CGIEN_ESTADO, 
		CGIEN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CGIEN_USUARIO_UPDATE = IN_CGIEN_USUARIO_UPDATE
	WHERE
		CGIEN_CODIGO = IN_CGIEN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_CGIEN_CODIGO IDENTIFICATIVO UNICO DE INSTITUCION DE NIVEL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_SELECT(
IN IN_CGIEN_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIEN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIEN_CODIGO, 
		CGNES_CODIGO, 
		CGIED_CODIGO, 
		CGIEN_ESTADO, 
		CGIEN_FECHA_INSERT, 
		CGIEN_USUARIO_INSERT, 
		CGIEN_FECHA_UPDATE, 
		CGIEN_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_NIVEL
	WHERE CGIEN_ESTADO = TRUE AND 
		CGIEN_CODIGO = IN_CGIEN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_CGIEN_CODIGO IDENTIFICACION UNICO DE INSTITUCION DE NIVELES.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_DELETE(
IN IN_CGIEN_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIEN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_INSTITUCION_NIVEL
	WHERE
		CGIEN_CODIGO = IN_CGIEN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_CGIEN_CODIGO IDENTIFICATIVO UNICO DE INSTITUCION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_DELETE_SOFT(
IN IN_CGIEN_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIEN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_INSTITUCION_NIVEL SET
		CGIEN_ESTADO = FALSE
	WHERE
		CGIEN_CODIGO = IN_CGIEN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_S_CGG_INSTITUCION_EDUCATIVA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_NIVEL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_S_CGG_INSTITUCION_EDUCATIVA(
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIED_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIEN_CODIGO, 
		CGNES_CODIGO, 
		CGIED_CODIGO, 
		CGIEN_ESTADO, 
		CGIEN_FECHA_INSERT, 
		CGIEN_USUARIO_INSERT, 
		CGIEN_FECHA_UPDATE, 
		CGIEN_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_NIVEL
	WHERE CGIEN_ESTADO = TRUE AND 
		CGIED_CODIGO = IN_CGIED_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_D_CGG_INSTITUCION_EDUCATIVA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_NIVEL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_D_CGG_INSTITUCION_EDUCATIVA(
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIED_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_INSTITUCION_NIVEL
	WHERE
		CGIED_CODIGO = IN_CGIED_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_D_CGG_INSTITUCION_EDUCATIVA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_NIVEL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_DS_CGG_INSTITUCION_EDUCATIVA(
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIED_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_INSTITUCION_NIVEL SET
		cgien_estado = false
	WHERE
		CGIED_CODIGO = IN_CGIED_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_S_CGG_NIVEL_ESTUDIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_NIVEL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_NIVEL_ESTUDIO.
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_S_CGG_NIVEL_ESTUDIO(
IN IN_CGNES_CODIGO SII.CGG_INSTITUCION_NIVEL.CGNES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CGIEN_CODIGO, 
		CGNES_CODIGO, 
		CGIED_CODIGO, 
		CGIEN_ESTADO, 
		CGIEN_FECHA_INSERT, 
		CGIEN_USUARIO_INSERT, 
		CGIEN_FECHA_UPDATE, 
		CGIEN_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_NIVEL
	WHERE CGIEN_ESTADO = TRUE AND 
		CGNES_CODIGO = IN_CGNES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_D_CGG_NIVEL_ESTUDIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_NIVEL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_NIVEL_ESTUDIO.
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_D_CGG_NIVEL_ESTUDIO(
IN IN_CGNES_CODIGO SII.CGG_INSTITUCION_NIVEL.CGNES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_INSTITUCION_NIVEL
	WHERE
		CGNES_CODIGO = IN_CGNES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_D_CGG_NIVEL_ESTUDIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_NIVEL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_NIVEL_ESTUDIO.
* @param IN_CGNES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE NIVEL DE ESTUDIO.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_DS_CGG_NIVEL_ESTUDIO(
IN IN_CGNES_CODIGO SII.CGG_INSTITUCION_NIVEL.CGNES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_INSTITUCION_NIVEL SET
		cgien_estado = false
	WHERE
		CGNES_CODIGO = IN_CGNES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_INSTITUCION_NIVEL_SELECT_INSTITUCION_NIVEL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_INSTITUCION_NIVEL QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_INSTITUCION_EDUCATIVA.
* @param IN_CGIED_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE INSTITUCION EDUCATIVA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_NIVEL_SELECT_INSTITUCION_NIVEL(
IN IN_CGIED_CODIGO SII.CGG_INSTITUCION_NIVEL.CGIED_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		INI.CGIEN_CODIGO, 
		INI.CGNES_CODIGO,
		NES.CGNES_DESCRIPCION,
		INI.CGIED_CODIGO, 
		INI.CGIEN_ESTADO, 
		INI.CGIEN_FECHA_INSERT, 
		INI.CGIEN_USUARIO_INSERT, 
		INI.CGIEN_FECHA_UPDATE, 
		INI.CGIEN_USUARIO_UPDATE
	FROM SII.CGG_INSTITUCION_NIVEL INI INNER JOIN SII.CGG_NIVEL_ESTUDIO NES ON(INI.CGNES_CODIGO=NES.CGNES_CODIGO)
	WHERE INI.CGIEN_ESTADO = TRUE AND 
		INI.CGIED_CODIGO = IN_CGIED_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION sii.F_CGG_INSTITUCION_BYID_NIVELESTUDIO
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_INSTITUCION_NIVEL.
* @param IN_CGNES_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION sii.F_CGG_INSTITUCION_BYID_NIVELESTUDIO(
IN IN_CGNES_CODIGO SII.CGG_INSTITUCION_NIVEL.CGNES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT		
		INI.CGIEN_CODIGO,
		INI.CGNES_CODIGO,
		INI.CGIED_CODIGO,
		INI.CGIEN_ESTADO,
		IED.CGIED_NOMBRE,
		IED.CGIED_DESCRIPCION,
		IED.CGIED_DIRECCION
	FROM SII.CGG_INSTITUCION_NIVEL INI INNER JOIN SII.CGG_INSTITUCION_EDUCATIVA IED ON(IED.CGIED_CODIGO=INI.CGIED_CODIGO)
	WHERE INI.CGIEN_ESTADO = TRUE AND 
		INI.CGNES_CODIGO = IN_CGNES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_INSTITUCION_BYID_NIVELESTUDIO
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_CERTIFICADO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CGNES_CODIGO CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_BYID_NIVELESTUDIO(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		INI.CGIEN_CODIGO,
		INI.CGNES_CODIGO,
		INI.CGIED_CODIGO,
		INI.CGIEN_ESTADO,
		IED.CGIED_NOMBRE,
		IED.CGIED_DESCRIPCION,
		IED.CGIED_DIRECCION
	FROM SII.CGG_INSTITUCION_NIVEL INI INNER JOIN SII.CGG_INSTITUCION_EDUCATIVA IED ON(IED.CGIED_CODIGO=INI.CGIED_CODIGO)
	WHERE INI.CGIEN_ESTADO = TRUE AND INI.CGNES_CODIGO = '''||IN_CGNES_CODIGO||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(IED.CGIED_NOMBRE, '''')||'' ''||COALESCE(IED.CGIED_DESCRIPCION, '''')||'' ''||COALESCE(IED.CGIED_DIRECCION, '''')||'' ''||COALESCE(INI.CGIEN_ESTADO, FALSE)||'' ''||COALESCE(INI.CGIEN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(INI.CGIEN_USUARIO_INSERT, '''')||'' ''||COALESCE(INI.CGIEN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(INI.CGIEN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_INSTITUCION_COUNT_BYID_NIVEL
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_INSTITUCION_NIVEL
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @param IN_CGNES_CODIGO CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_INSTITUCION_COUNT_BYID_NIVEL(
IN IN_FIND_TEXT TEXT,
IN IN_CGNES_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_INSTITUCION_NIVEL INI INNER JOIN SII.CGG_INSTITUCION_EDUCATIVA IED ON(IED.CGIED_CODIGO=INI.CGIED_CODIGO)
	WHERE INI.CGIEN_ESTADO = TRUE AND INI.CGNES_CODIGO = IN_CGNES_CODIGO  AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(IED.CGIED_NOMBRE, '''')||' '||COALESCE(IED.CGIED_DESCRIPCION, '''')||' '||COALESCE(IED.CGIED_DIRECCION, '''')||' '||COALESCE(INI.CGIEN_ESTADO, FALSE)||' '||COALESCE(INI.CGIEN_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(INI.CGIEN_USUARIO_INSERT, '''')||' '||COALESCE(INI.CGIEN_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(INI.CGIEN_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;