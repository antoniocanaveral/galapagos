/**
* FUNCION SII.F_CGG_KDX_VENTA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_KDX_VENTA
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  VENTA
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @param IN_CKVNT_LOTE LOTE AL QUE CORRESPONDE LA VENTA
* @param IN_CKVNT_FECHA_INGRESO FECHA DE INGRESO DE LAS ESPECIES
* @param IN_CKVNT_NUMERO_VENTA NUMERO SECUENCIAL UNICO DE IDENTIFICACION DE LA VENTA
* @param IN_CKVNT_SERIE_INICIO SERIE DE INICIO DE ESPECIES
* @param IN_CKVNT_SERIE_FIN SERIE DE FIN DE ESPECIES
* @param IN_CKVNT_CANTIDAD TOTAL DE ESPECIES DE LA FACTURA
* @param IN_CKVNT_TOTAL TOTAL DE LA FACTURA
* @param IN_CKVNT_ESTADO_VENTA ESTADO DEL REGISTRO DE VENTA UTILIZADO PARA OPERACIONES
0.-  REGISTRADA
1.-  CONTABILIZADA
* @param IN_CKVNT_ESTADO ESTADO DEL REGISTRO
* @param IN_CKVNT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CKVNT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_INSERT(
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA.CKVNT_CODIGO%TYPE,
IN IN_CKASG_CODIGO SII.CGG_KDX_VENTA.CKASG_CODIGO%TYPE,
IN IN_CKVNT_LOTE SII.CGG_KDX_VENTA.CKVNT_LOTE%TYPE,
IN IN_CKVNT_FECHA_INGRESO SII.CGG_KDX_VENTA.CKVNT_FECHA_INGRESO%TYPE,
IN IN_CKVNT_NUMERO_VENTA SII.CGG_KDX_VENTA.CKVNT_NUMERO_VENTA%TYPE,
IN IN_CKVNT_SERIE_INICIO SII.CGG_KDX_VENTA.CKVNT_SERIE_INICIO%TYPE,
IN IN_CKVNT_SERIE_FIN SII.CGG_KDX_VENTA.CKVNT_SERIE_FIN%TYPE,
IN IN_CKVNT_CANTIDAD SII.CGG_KDX_VENTA.CKVNT_CANTIDAD%TYPE,
IN IN_CKVNT_TOTAL SII.CGG_KDX_VENTA.CKVNT_TOTAL%TYPE,
IN IN_CKVNT_ESTADO_VENTA SII.CGG_KDX_VENTA.CKVNT_ESTADO_VENTA%TYPE,
IN IN_CKVNT_ESTADO SII.CGG_KDX_VENTA.CKVNT_ESTADO%TYPE,
IN IN_CKVNT_USUARIO_INSERT SII.CGG_KDX_VENTA.CKVNT_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_VENTA_NUMERO VARCHAR;
BEGIN
	IF (UPPER(IN_CKVNT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_KDX_VENTA','CKVNT_CODIGO','CKVNT') INTO OUT_KEY;
		SELECT SII.F_CGG_KDX_VENTA_GENERA_NUMERO(IN_CKVNT_USUARIO_INSERT) INTO TMP_VENTA_NUMERO;
	ELSE
		OUT_KEY := IN_CKVNT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_KDX_VENTA(
		CKVNT_CODIGO, 
		CKASG_CODIGO, 
		CKVNT_LOTE, 
		CKVNT_FECHA_INGRESO, 
		CKVNT_NUMERO_VENTA, 
		CKVNT_SERIE_INICIO, 
		CKVNT_SERIE_FIN, 
		CKVNT_CANTIDAD, 
		CKVNT_TOTAL, 
		CKVNT_ESTADO_VENTA, 
		CKVNT_ESTADO, 
		CKVNT_FECHA_INSERT, 
		CKVNT_USUARIO_INSERT, 
		CKVNT_FECHA_UPDATE, 
		CKVNT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CKASG_CODIGO, 
		IN_CKVNT_LOTE, 
		IN_CKVNT_FECHA_INGRESO, 
		TMP_VENTA_NUMERO, 
		IN_CKVNT_SERIE_INICIO, 
		IN_CKVNT_SERIE_FIN, 
		IN_CKVNT_CANTIDAD, 
		IN_CKVNT_TOTAL, 
		IN_CKVNT_ESTADO_VENTA, 
		IN_CKVNT_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CKVNT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CKVNT_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_KDX_VENTA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVNT_CODIGO, 
		CKASG_CODIGO, 
		CKVNT_LOTE, 
		CKVNT_FECHA_INGRESO, 
		CKVNT_NUMERO_VENTA, 
		CKVNT_SERIE_INICIO, 
		CKVNT_SERIE_FIN, 
		CKVNT_CANTIDAD, 
		CKVNT_TOTAL, 
		CKVNT_ESTADO_VENTA, 
		CKVNT_ESTADO, 
		CKVNT_FECHA_INSERT, 
		CKVNT_USUARIO_INSERT, 
		CKVNT_FECHA_UPDATE, 
		CKVNT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA
	WHERE CKVNT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_KDX_VENTA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CKVNT_CODIGO, 
		CKASG_CODIGO, 
		CKVNT_LOTE, 
		CKVNT_FECHA_INGRESO, 
		CKVNT_NUMERO_VENTA, 
		CKVNT_SERIE_INICIO, 
		CKVNT_SERIE_FIN, 
		CKVNT_CANTIDAD, 
		CKVNT_TOTAL, 
		CKVNT_ESTADO_VENTA, 
		CKVNT_ESTADO, 
		CKVNT_FECHA_INSERT, 
		CKVNT_USUARIO_INSERT, 
		CKVNT_FECHA_UPDATE, 
		CKVNT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA
	WHERE CKVNT_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CKVNT_LOTE, 0)||'' ''||COALESCE(CKVNT_FECHA_INGRESO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKVNT_NUMERO_VENTA, '''')||'' ''||COALESCE(CKVNT_SERIE_INICIO, 0)||'' ''||COALESCE(CKVNT_SERIE_FIN, 0)||'' ''||COALESCE(CKVNT_CANTIDAD, 0)||'' ''||COALESCE(CKVNT_TOTAL, '''')||'' ''||COALESCE(CKVNT_ESTADO_VENTA, 0)||'' ''||COALESCE(CKVNT_ESTADO, FALSE)||'' ''||COALESCE(CKVNT_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKVNT_USUARIO_INSERT, '''')||'' ''||COALESCE(CKVNT_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CKVNT_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_VENTA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_VENTA
	WHERE CKVNT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_KDX_VENTA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_KDX_VENTA
	WHERE CKVNT_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CKVNT_LOTE, 0)||' '||COALESCE(CKVNT_FECHA_INGRESO, CURRENT_TIMESTAMP)||' '||COALESCE(CKVNT_NUMERO_VENTA, '''')||' '||COALESCE(CKVNT_SERIE_INICIO, 0)||' '||COALESCE(CKVNT_SERIE_FIN, 0)||' '||COALESCE(CKVNT_CANTIDAD, 0)||' '||COALESCE(CKVNT_TOTAL, '''')||' '||COALESCE(CKVNT_ESTADO_VENTA, 0)||' '||COALESCE(CKVNT_ESTADO, FALSE)||' '||COALESCE(CKVNT_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CKVNT_USUARIO_INSERT, '''')||' '||COALESCE(CKVNT_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CKVNT_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_KDX_VENTA
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  VENTA
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @param IN_CKVNT_LOTE LOTE AL QUE CORRESPONDE LA VENTA
* @param IN_CKVNT_FECHA_INGRESO FECHA DE INGRESO DE LAS ESPECIES
* @param IN_CKVNT_NUMERO_VENTA NUMERO SECUENCIAL UNICO DE IDENTIFICACION DE LA VENTA
* @param IN_CKVNT_SERIE_INICIO SERIE DE INICIO DE ESPECIES
* @param IN_CKVNT_SERIE_FIN SERIE DE FIN DE ESPECIES
* @param IN_CKVNT_CANTIDAD TOTAL DE ESPECIES DE LA FACTURA
* @param IN_CKVNT_TOTAL TOTAL DE LA FACTURA
* @param IN_CKVNT_ESTADO_VENTA ESTADO DEL REGISTRO DE VENTA UTILIZADO PARA OPERACIONES
0.-  REGISTRADA
1.-  CONTABILIZADA
* @param IN_CKVNT_ESTADO ESTADO DEL REGISTRO
* @param IN_CKVNT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_UPDATE(
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA.CKVNT_CODIGO%TYPE,
IN IN_CKASG_CODIGO SII.CGG_KDX_VENTA.CKASG_CODIGO%TYPE,
IN IN_CKVNT_LOTE SII.CGG_KDX_VENTA.CKVNT_LOTE%TYPE,
IN IN_CKVNT_FECHA_INGRESO SII.CGG_KDX_VENTA.CKVNT_FECHA_INGRESO%TYPE,
IN IN_CKVNT_NUMERO_VENTA SII.CGG_KDX_VENTA.CKVNT_NUMERO_VENTA%TYPE,
IN IN_CKVNT_SERIE_INICIO SII.CGG_KDX_VENTA.CKVNT_SERIE_INICIO%TYPE,
IN IN_CKVNT_SERIE_FIN SII.CGG_KDX_VENTA.CKVNT_SERIE_FIN%TYPE,
IN IN_CKVNT_CANTIDAD SII.CGG_KDX_VENTA.CKVNT_CANTIDAD%TYPE,
IN IN_CKVNT_TOTAL SII.CGG_KDX_VENTA.CKVNT_TOTAL%TYPE,
IN IN_CKVNT_ESTADO_VENTA SII.CGG_KDX_VENTA.CKVNT_ESTADO_VENTA%TYPE,
IN IN_CKVNT_ESTADO SII.CGG_KDX_VENTA.CKVNT_ESTADO%TYPE,
IN IN_CKVNT_USUARIO_UPDATE SII.CGG_KDX_VENTA.CKVNT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA SET
		CKASG_CODIGO = IN_CKASG_CODIGO, 
		CKVNT_LOTE = IN_CKVNT_LOTE, 
		CKVNT_FECHA_INGRESO = IN_CKVNT_FECHA_INGRESO, 
		CKVNT_NUMERO_VENTA = IN_CKVNT_NUMERO_VENTA, 
		CKVNT_SERIE_INICIO = IN_CKVNT_SERIE_INICIO, 
		CKVNT_SERIE_FIN = IN_CKVNT_SERIE_FIN, 
		CKVNT_CANTIDAD = IN_CKVNT_CANTIDAD, 
		CKVNT_TOTAL = IN_CKVNT_TOTAL, 
		CKVNT_ESTADO_VENTA = IN_CKVNT_ESTADO_VENTA, 
		CKVNT_ESTADO = IN_CKVNT_ESTADO, 
		CKVNT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CKVNT_USUARIO_UPDATE = IN_CKVNT_USUARIO_UPDATE
	WHERE
		CKVNT_CODIGO = IN_CKVNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_KDX_VENTA
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  VENTA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_SELECT(
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA.CKVNT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVNT_CODIGO, 
		CKASG_CODIGO, 
		CKVNT_LOTE, 
		CKVNT_FECHA_INGRESO, 
		CKVNT_NUMERO_VENTA, 
		CKVNT_SERIE_INICIO, 
		CKVNT_SERIE_FIN, 
		CKVNT_CANTIDAD, 
		CKVNT_TOTAL, 
		CKVNT_ESTADO_VENTA, 
		CKVNT_ESTADO, 
		CKVNT_FECHA_INSERT, 
		CKVNT_USUARIO_INSERT, 
		CKVNT_FECHA_UPDATE, 
		CKVNT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA
	WHERE CKVNT_ESTADO = TRUE AND 
		CKVNT_CODIGO = IN_CKVNT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_KDX_VENTA
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DELETE(
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA.CKVNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_VENTA
	WHERE
		CKVNT_CODIGO = IN_CKVNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_KDX_VENTA
* @param IN_CKVNT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE  VENTA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DELETE_SOFT(
IN IN_CKVNT_CODIGO SII.CGG_KDX_VENTA.CKVNT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA SET
		CKVNT_ESTADO = FALSE
	WHERE
		CKVNT_CODIGO = IN_CKVNT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_S_CGG_KDX_ASIGNACION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_S_CGG_KDX_ASIGNACION(
IN IN_CKASG_CODIGO SII.CGG_KDX_VENTA.CKASG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CKVNT_CODIGO, 
		CKASG_CODIGO, 
		CKVNT_LOTE, 
		CKVNT_FECHA_INGRESO, 
		CKVNT_NUMERO_VENTA, 
		CKVNT_SERIE_INICIO, 
		CKVNT_SERIE_FIN, 
		CKVNT_CANTIDAD, 
		CKVNT_TOTAL, 
		CKVNT_ESTADO_VENTA, 
		CKVNT_ESTADO, 
		CKVNT_FECHA_INSERT, 
		CKVNT_USUARIO_INSERT, 
		CKVNT_FECHA_UPDATE, 
		CKVNT_USUARIO_UPDATE
	FROM SII.CGG_KDX_VENTA
	WHERE CKVNT_ESTADO = TRUE AND 
		CKASG_CODIGO = IN_CKASG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_D_CGG_KDX_ASIGNACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_D_CGG_KDX_ASIGNACION(
IN IN_CKASG_CODIGO SII.CGG_KDX_VENTA.CKASG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_KDX_VENTA
	WHERE
		CKASG_CODIGO = IN_CKASG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_KDX_VENTA_D_CGG_KDX_ASIGNACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_KDX_VENTA QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_KDX_ASIGNACION.
* @param IN_CKASG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASIGNACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_KDX_VENTA_DS_CGG_KDX_ASIGNACION(
IN IN_CKASG_CODIGO SII.CGG_KDX_VENTA.CKASG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_KDX_VENTA SET
		ckvnt_estado = false
	WHERE
		CKASG_CODIGO = IN_CKASG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

