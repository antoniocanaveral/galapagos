/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_REGLA_VALIDACION
* @param IN_CRVAL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REGLA DE VALIDACION
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARAMETRO DE CONFIGURACION
* @param IN_CRVAL_NOMBRE NOMBRE DE LA REGLA DE VALIDACION
* @param IN_CRVAL_DESCRIPCION CADENA DE TEXTO DE DESCRIPCION DE LA REGLA DE VALIDACION.
* @param IN_CRVAL_FUNCION_VALIDACION CADENA QUE IDENTIFICA LA FUNCION O UNION DE FUNCIONES A EJECUTARSE PARA OBTENER UN RESULTADO A COMPARSER CON EL RESULTADO ESTABLECIDO DE LA REGLA DE VALIDACION.
* @param IN_CRVAL_OPERADOR_COMPARADOR CADENA QUE IDENTIFICA EL OPERADOR COMPARADOR CON EL CUAL SE VA A EVALUAR LOS VALORES OBTENIDOS DE LS FUNCION DE VALIDACION.
* @param IN_CRVAL_VALOR_LIBRE CADENA DE TEXTO CON UN VALOR LIBRE SOBRE EL CUAL LA REGLA SE VALIDA, USAR ESTE CAMPO SOLO PARA REGLAS CUYO VALOR NO SE DESEE MANEJAR A TRAVEZ DE UN PARAMETRO DE CONFIGURACION
* @param IN_CRVAL_RESULTADO_ACEPTACION CADENA DE TEXTO QUE IDENTIFICA EL VALOR POR EL CUAL SE COMPARA LA REGLA Y SE DA POR ACEPTADO.
* @param IN_CRVAL_SUGERENCIA CADENA DE TEXTO DE SUGERENCIA DEL PORQUE UNA REGLA FUE INVALIDA Y POSIBLE SOLUCIONES PARA ACEPCION DE LA REGLA
* @param IN_CRVAL_TIPO TIPO DE REGLA DE VALIDACION
0 - TEMPORAL
1 - INDEFINIDA
* @param IN_CRVAR_FECHA_INICIO FECHA DE INICIO DEL PERIODO DE VIGENCIA DE LA REGLA DE VALIDACION.
* @param IN_CRVAR_FECHA_FIN FECHA DE FIN DEL PERIODO DE VIGENCIA DE LA REGLA DE VALIDACION.
* @param IN_CRVAL_VALOR_1 CADENA DE TEXTO DE VALOR ADICIONAL EN CASO DE ADECUACIONES A LAS REGLAS DE VALIDACION
* @param IN_CRVAL_VALOR_2 NO ESPECIFICADO
* @param IN_CRVAL_ESTADO ESTADO DEL REGISTRO DE LA REGLA DE VALIDACION
* @param IN_CRVAL_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRVAL_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_INSERT(
IN IN_CRVAL_CODIGO SII.CGG_REGLA_VALIDACION.CRVAL_CODIGO%TYPE, 
IN IN_CGCNF_CODIGO SII.CGG_REGLA_VALIDACION.CGCNF_CODIGO%TYPE, 
IN IN_CRVAL_NOMBRE SII.CGG_REGLA_VALIDACION.CRVAL_NOMBRE%TYPE, 
IN IN_CRVAL_DESCRIPCION SII.CGG_REGLA_VALIDACION.CRVAL_DESCRIPCION%TYPE, 
IN IN_CRVAL_FUNCION_VALIDACION SII.CGG_REGLA_VALIDACION.CRVAL_FUNCION_VALIDACION%TYPE, 
IN IN_CRVAL_OPERADOR_COMPARADOR SII.CGG_REGLA_VALIDACION.CRVAL_OPERADOR_COMPARADOR%TYPE, 
IN IN_CRVAL_VALOR_LIBRE SII.CGG_REGLA_VALIDACION.CRVAL_VALOR_LIBRE%TYPE, 
IN IN_CRVAL_RESULTADO_ACEPTACION SII.CGG_REGLA_VALIDACION.CRVAL_RESULTADO_ACEPTACION%TYPE, 
IN IN_CRVAL_SUGERENCIA SII.CGG_REGLA_VALIDACION.CRVAL_SUGERENCIA%TYPE, 
IN IN_CRVAL_TIPO SII.CGG_REGLA_VALIDACION.CRVAL_TIPO%TYPE, 
IN IN_CRVAR_FECHA_INICIO SII.CGG_REGLA_VALIDACION.CRVAR_FECHA_INICIO%TYPE, 
IN IN_CRVAR_FECHA_FIN SII.CGG_REGLA_VALIDACION.CRVAR_FECHA_FIN%TYPE, 
IN IN_CRVAL_VALOR_1 SII.CGG_REGLA_VALIDACION.CRVAL_VALOR_1%TYPE, 
IN IN_CRVAL_VALOR_2 SII.CGG_REGLA_VALIDACION.CRVAL_VALOR_2%TYPE, 
IN IN_CRVAL_ESTADO SII.CGG_REGLA_VALIDACION.CRVAL_ESTADO%TYPE, 
IN IN_CRVAL_USUARIO_INSERT SII.CGG_REGLA_VALIDACION.CRVAL_USUARIO_INSERT%TYPE, 
IN IN_CRVAL_USUARIO_UPDATE SII.CGG_REGLA_VALIDACION.CRVAL_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRVAL_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_REGLA_VALIDACION','CRVAL_CODIGO','CRVAL') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRVAL_CODIGO;
	END IF;
	INSERT INTO SII.CGG_REGLA_VALIDACION(
		CRVAL_CODIGO, 
		CGCNF_CODIGO, 
		CRVAL_NOMBRE, 
		CRVAL_DESCRIPCION, 
		CRVAL_FUNCION_VALIDACION, 
		CRVAL_OPERADOR_COMPARADOR, 
		CRVAL_VALOR_LIBRE, 
		CRVAL_RESULTADO_ACEPTACION, 
		CRVAL_SUGERENCIA, 
		CRVAL_TIPO, 
		CRVAR_FECHA_INICIO, 
		CRVAR_FECHA_FIN, 
		CRVAL_VALOR_1, 
		CRVAL_VALOR_2, 
		CRVAL_ESTADO, 
		CRVAL_FECHA_INSERT, 
		CRVAL_USUARIO_INSERT, 
		CRVAL_FECHA_UPDATE, 
		CRVAL_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGCNF_CODIGO, 
		IN_CRVAL_NOMBRE, 
		IN_CRVAL_DESCRIPCION, 
		IN_CRVAL_FUNCION_VALIDACION, 
		IN_CRVAL_OPERADOR_COMPARADOR, 
		IN_CRVAL_VALOR_LIBRE, 
		IN_CRVAL_RESULTADO_ACEPTACION, 
		IN_CRVAL_SUGERENCIA, 
		IN_CRVAL_TIPO, 
		IN_CRVAR_FECHA_INICIO, 
		IN_CRVAR_FECHA_FIN, 
		IN_CRVAL_VALOR_1, 
		IN_CRVAL_VALOR_2, 
		IN_CRVAL_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRVAL_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRVAL_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_REGLA_VALIDACION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRVAL_CODIGO, 
		CGCNF_CODIGO, 
		CRVAL_NOMBRE, 
		CRVAL_DESCRIPCION, 
		CRVAL_FUNCION_VALIDACION, 
		CRVAL_OPERADOR_COMPARADOR, 
		CRVAL_VALOR_LIBRE, 
		CRVAL_RESULTADO_ACEPTACION, 
		CRVAL_SUGERENCIA, 
		CRVAL_TIPO, 
		CRVAR_FECHA_INICIO, 
		CRVAR_FECHA_FIN, 
		CRVAL_VALOR_1, 
		CRVAL_VALOR_2, 
		CRVAL_ESTADO, 
		CRVAL_FECHA_INSERT, 
		CRVAL_USUARIO_INSERT, 
		CRVAL_FECHA_UPDATE, 
		CRVAL_USUARIO_UPDATE
	FROM SII.CGG_REGLA_VALIDACION
	WHERE CRVAL_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_REGLA_VALIDACION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRVAL_CODIGO, 
		CGCNF_CODIGO, 
		CRVAL_NOMBRE, 
		CRVAL_DESCRIPCION, 
		CRVAL_FUNCION_VALIDACION, 
		CRVAL_OPERADOR_COMPARADOR, 
		CRVAL_VALOR_LIBRE, 
		CRVAL_RESULTADO_ACEPTACION, 
		CRVAL_SUGERENCIA, 
		CRVAL_TIPO, 
		CRVAR_FECHA_INICIO, 
		CRVAR_FECHA_FIN, 
		CRVAL_VALOR_1, 
		CRVAL_VALOR_2, 
		CRVAL_ESTADO, 
		CRVAL_FECHA_INSERT, 
		CRVAL_USUARIO_INSERT, 
		CRVAL_FECHA_UPDATE, 
		CRVAL_USUARIO_UPDATE,
		TRIM(PROARGNAMES::TEXT,''{}'')  AS CRVAL_FUNCION_PLSQL_PARAMETROS
	FROM SII.CGG_REGLA_VALIDACION
	INNER JOIN PG_PROC ON (UPPER(PRONAME) = UPPER(CRVAL_FUNCION_VALIDACION))
	WHERE CRVAL_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRVAL_NOMBRE, '''')||'' ''||COALESCE(CRVAL_DESCRIPCION, '''')||'' ''||COALESCE(CRVAL_FUNCION_VALIDACION, '''')||'' ''||COALESCE(CRVAL_OPERADOR_COMPARADOR, '''')||'' ''||COALESCE(CRVAL_VALOR_LIBRE, '''')||'' ''||COALESCE(CRVAL_RESULTADO_ACEPTACION, '''')||'' ''||COALESCE(CRVAL_SUGERENCIA, '''')||'' ''||COALESCE(CRVAL_TIPO, 0)||'' ''||COALESCE(CRVAR_FECHA_INICIO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRVAR_FECHA_FIN, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRVAL_VALOR_1, '''')||'' ''||COALESCE(CRVAL_VALOR_2, '''')||'' ''||COALESCE(CRVAL_ESTADO, FALSE)||'' ''||COALESCE(CRVAL_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRVAL_USUARIO_INSERT, '''')||'' ''||COALESCE(CRVAL_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRVAL_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_REGLA_VALIDACION
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_REGLA_VALIDACION
	WHERE CRVAL_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_REGLA_VALIDACION
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_REGLA_VALIDACION
	WHERE CRVAL_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRVAL_NOMBRE, '''')||' '||COALESCE(CRVAL_DESCRIPCION, '''')||' '||COALESCE(CRVAL_FUNCION_VALIDACION, '''')||' '||COALESCE(CRVAL_OPERADOR_COMPARADOR, '''')||' '||COALESCE(CRVAL_VALOR_LIBRE, '''')||' '||COALESCE(CRVAL_RESULTADO_ACEPTACION, '''')||' '||COALESCE(CRVAL_SUGERENCIA, '''')||' '||COALESCE(CRVAL_TIPO, 0)||' '||COALESCE(CRVAR_FECHA_INICIO, CURRENT_TIMESTAMP)||' '||COALESCE(CRVAR_FECHA_FIN, CURRENT_TIMESTAMP)||' '||COALESCE(CRVAL_VALOR_1, '''')||' '||COALESCE(CRVAL_VALOR_2, '''')||' '||COALESCE(CRVAL_ESTADO, FALSE)||' '||COALESCE(CRVAL_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRVAL_USUARIO_INSERT, '''')||' '||COALESCE(CRVAL_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRVAL_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_REGLA_VALIDACION
* @param IN_CRVAL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REGLA DE VALIDACION
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARAMETRO DE CONFIGURACION
* @param IN_CRVAL_NOMBRE NOMBRE DE LA REGLA DE VALIDACION
* @param IN_CRVAL_DESCRIPCION CADENA DE TEXTO DE DESCRIPCION DE LA REGLA DE VALIDACION.
* @param IN_CRVAL_FUNCION_VALIDACION CADENA QUE IDENTIFICA LA FUNCION O UNION DE FUNCIONES A EJECUTARSE PARA OBTENER UN RESULTADO A COMPARSER CON EL RESULTADO ESTABLECIDO DE LA REGLA DE VALIDACION.
* @param IN_CRVAL_OPERADOR_COMPARADOR CADENA QUE IDENTIFICA EL OPERADOR COMPARADOR CON EL CUAL SE VA A EVALUAR LOS VALORES OBTENIDOS DE LS FUNCION DE VALIDACION.
* @param IN_CRVAL_VALOR_LIBRE CADENA DE TEXTO CON UN VALOR LIBRE SOBRE EL CUAL LA REGLA SE VALIDA, USAR ESTE CAMPO SOLO PARA REGLAS CUYO VALOR NO SE DESEE MANEJAR A TRAVEZ DE UN PARAMETRO DE CONFIGURACION
* @param IN_CRVAL_RESULTADO_ACEPTACION CADENA DE TEXTO QUE IDENTIFICA EL VALOR POR EL CUAL SE COMPARA LA REGLA Y SE DA POR ACEPTADO.
* @param IN_CRVAL_SUGERENCIA CADENA DE TEXTO DE SUGERENCIA DEL PORQUE UNA REGLA FUE INVALIDA Y POSIBLE SOLUCIONES PARA ACEPCION DE LA REGLA
* @param IN_CRVAL_TIPO TIPO DE REGLA DE VALIDACION
0 - TEMPORAL
1 - INDEFINIDA
* @param IN_CRVAR_FECHA_INICIO FECHA DE INICIO DEL PERIODO DE VIGENCIA DE LA REGLA DE VALIDACION.
* @param IN_CRVAR_FECHA_FIN FECHA DE FIN DEL PERIODO DE VIGENCIA DE LA REGLA DE VALIDACION.
* @param IN_CRVAL_VALOR_1 CADENA DE TEXTO DE VALOR ADICIONAL EN CASO DE ADECUACIONES A LAS REGLAS DE VALIDACION
* @param IN_CRVAL_VALOR_2 NO ESPECIFICADO
* @param IN_CRVAL_ESTADO ESTADO DEL REGISTRO DE LA REGLA DE VALIDACION
* @param IN_CRVAL_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_UPDATE(
IN IN_CRVAL_CODIGO SII.CGG_REGLA_VALIDACION.CRVAL_CODIGO%TYPE, 
IN IN_CGCNF_CODIGO SII.CGG_REGLA_VALIDACION.CGCNF_CODIGO%TYPE, 
IN IN_CRVAL_NOMBRE SII.CGG_REGLA_VALIDACION.CRVAL_NOMBRE%TYPE, 
IN IN_CRVAL_DESCRIPCION SII.CGG_REGLA_VALIDACION.CRVAL_DESCRIPCION%TYPE, 
IN IN_CRVAL_FUNCION_VALIDACION SII.CGG_REGLA_VALIDACION.CRVAL_FUNCION_VALIDACION%TYPE, 
IN IN_CRVAL_OPERADOR_COMPARADOR SII.CGG_REGLA_VALIDACION.CRVAL_OPERADOR_COMPARADOR%TYPE, 
IN IN_CRVAL_VALOR_LIBRE SII.CGG_REGLA_VALIDACION.CRVAL_VALOR_LIBRE%TYPE, 
IN IN_CRVAL_RESULTADO_ACEPTACION SII.CGG_REGLA_VALIDACION.CRVAL_RESULTADO_ACEPTACION%TYPE, 
IN IN_CRVAL_SUGERENCIA SII.CGG_REGLA_VALIDACION.CRVAL_SUGERENCIA%TYPE, 
IN IN_CRVAL_TIPO SII.CGG_REGLA_VALIDACION.CRVAL_TIPO%TYPE, 
IN IN_CRVAR_FECHA_INICIO SII.CGG_REGLA_VALIDACION.CRVAR_FECHA_INICIO%TYPE, 
IN IN_CRVAR_FECHA_FIN SII.CGG_REGLA_VALIDACION.CRVAR_FECHA_FIN%TYPE, 
IN IN_CRVAL_VALOR_1 SII.CGG_REGLA_VALIDACION.CRVAL_VALOR_1%TYPE, 
IN IN_CRVAL_VALOR_2 SII.CGG_REGLA_VALIDACION.CRVAL_VALOR_2%TYPE, 
IN IN_CRVAL_ESTADO SII.CGG_REGLA_VALIDACION.CRVAL_ESTADO%TYPE, 
IN IN_CRVAL_USUARIO_UPDATE SII.CGG_REGLA_VALIDACION.CRVAL_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_REGLA_VALIDACION SET
		CGCNF_CODIGO = IN_CGCNF_CODIGO, 
		CRVAL_NOMBRE = IN_CRVAL_NOMBRE, 
		CRVAL_DESCRIPCION = IN_CRVAL_DESCRIPCION, 
		CRVAL_FUNCION_VALIDACION = IN_CRVAL_FUNCION_VALIDACION, 
		CRVAL_OPERADOR_COMPARADOR = IN_CRVAL_OPERADOR_COMPARADOR, 
		CRVAL_VALOR_LIBRE = IN_CRVAL_VALOR_LIBRE, 
		CRVAL_RESULTADO_ACEPTACION = IN_CRVAL_RESULTADO_ACEPTACION, 
		CRVAL_SUGERENCIA = IN_CRVAL_SUGERENCIA, 
		CRVAL_TIPO = IN_CRVAL_TIPO, 
		CRVAR_FECHA_INICIO = IN_CRVAR_FECHA_INICIO, 
		CRVAR_FECHA_FIN = IN_CRVAR_FECHA_FIN, 
		CRVAL_VALOR_1 = IN_CRVAL_VALOR_1, 
		CRVAL_VALOR_2 = IN_CRVAL_VALOR_2, 
		CRVAL_ESTADO = IN_CRVAL_ESTADO, 
		CRVAL_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRVAL_USUARIO_UPDATE = IN_CRVAL_USUARIO_UPDATE
	WHERE
		CRVAL_CODIGO = IN_CRVAL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_REGLA_VALIDACION
* @param IN_CRVAL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REGLA DE VALIDACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_SELECT(
IN IN_CRVAL_CODIGO SII.CGG_REGLA_VALIDACION.CRVAL_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRVAL_CODIGO, 
		CGCNF_CODIGO, 
		CRVAL_NOMBRE, 
		CRVAL_DESCRIPCION, 
		CRVAL_FUNCION_VALIDACION, 
		CRVAL_OPERADOR_COMPARADOR, 
		CRVAL_VALOR_LIBRE, 
		CRVAL_RESULTADO_ACEPTACION, 
		CRVAL_SUGERENCIA, 
		CRVAL_TIPO, 
		CRVAR_FECHA_INICIO, 
		CRVAR_FECHA_FIN, 
		CRVAL_VALOR_1, 
		CRVAL_VALOR_2, 
		CRVAL_ESTADO, 
		CRVAL_FECHA_INSERT, 
		CRVAL_USUARIO_INSERT, 
		CRVAL_FECHA_UPDATE, 
		CRVAL_USUARIO_UPDATE
	FROM SII.CGG_REGLA_VALIDACION
	WHERE CRVAL_ESTADO = TRUE AND 
		CRVAL_CODIGO = IN_CRVAL_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_REGLA_VALIDACION
* @param IN_CRVAL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REGLA DE VALIDACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_DELETE(
IN IN_CRVAL_CODIGO SII.CGG_REGLA_VALIDACION.CRVAL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_REGLA_VALIDACION
	WHERE
		CRVAL_CODIGO = IN_CRVAL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_REGLA_VALIDACION
* @param IN_CRVAL_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE REGLA DE VALIDACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_DELETE_SOFT(
IN IN_CRVAL_CODIGO SII.CGG_REGLA_VALIDACION.CRVAL_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_REGLA_VALIDACION SET
		CRVAL_ESTADO = FALSE
	WHERE
		CRVAL_CODIGO = IN_CRVAL_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_S_CGG_CONFIGURACION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_REGLA_VALIDACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CONFIGURACION.
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARAMETRO DE CONFIGURACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_S_CGG_CONFIGURACION(
IN IN_CGCNF_CODIGO SII.CGG_REGLA_VALIDACION.CGCNF_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRVAL_CODIGO, 
		CGCNF_CODIGO, 
		CRVAL_NOMBRE, 
		CRVAL_DESCRIPCION, 
		CRVAL_FUNCION_VALIDACION, 
		CRVAL_OPERADOR_COMPARADOR, 
		CRVAL_VALOR_LIBRE, 
		CRVAL_RESULTADO_ACEPTACION, 
		CRVAL_SUGERENCIA, 
		CRVAL_TIPO, 
		CRVAR_FECHA_INICIO, 
		CRVAR_FECHA_FIN, 
		CRVAL_VALOR_1, 
		CRVAL_VALOR_2, 
		CRVAL_ESTADO, 
		CRVAL_FECHA_INSERT, 
		CRVAL_USUARIO_INSERT, 
		CRVAL_FECHA_UPDATE, 
		CRVAL_USUARIO_UPDATE
	FROM SII.CGG_REGLA_VALIDACION
	WHERE CRVAL_ESTADO = TRUE AND 
		CGCNF_CODIGO = IN_CGCNF_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_D_CGG_CONFIGURACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_REGLA_VALIDACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CONFIGURACION.
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARAMETRO DE CONFIGURACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_D_CGG_CONFIGURACION(
IN IN_CGCNF_CODIGO SII.CGG_REGLA_VALIDACION.CGCNF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_REGLA_VALIDACION
	WHERE
		CGCNF_CODIGO = IN_CGCNF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_REGLA_VALIDACION_D_CGG_CONFIGURACION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_REGLA_VALIDACION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_CONFIGURACION.
* @param IN_CGCNF_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PARAMETRO DE CONFIGURACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_DS_CGG_CONFIGURACION(
IN IN_CGCNF_CODIGO SII.CGG_REGLA_VALIDACION.CGCNF_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_REGLA_VALIDACION SET
		crval_estado = false
	WHERE
		CGCNF_CODIGO = IN_CGCNF_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCIONA TODAS LA FUNCIONES PL/SQL DEL ESQUEMA SII PARA LISTARLAS PARA LAS REGLAS DE VALIDACION.
* @param IN_START_INDEX INDICE DE INICIO.
* @param IN_LIMIT TOTAL DE REGISTRO QUE SON CONSIDERADOS.
* @param IN_SORT_FIELD_NAME NOMBRE DE LA COLUMNA DEL ORDENAMIENTO.
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
*@return CURSOR CON INFORMACION DE LAS FUNCIONES PL/SQL DISPONIBLES.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_FUNCION_PLSQL(
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)
RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
		'SELECT UPPER(PRONAME) AS PRONAME,
			PRONARGS,
			ARRAY_TO_STRING(PROARGNAMES,'', '') PROARGNAMES,
			TYPNAME
		FROM pg_catalog.pg_namespace n	
		INNER JOIN PG_PROC PR ON (pronamespace = n.oid)
		INNER JOIN PG_TYPE TP ON( TP.OID = PR.PRORETTYPE)
		   AND PR.PROISAGG = FALSE
		   AND TP.TYPNAME <> ''trigger''
		   WHERE UPPER(nspname) = ''SII'' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(PRONAME, '''')) = 1
		ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
		' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCIONA TODAS LA FUNCIONES PL/SQL DEL ESQUEMA SII PARA LISTARLAS PARA LAS REGLAS DE VALIDACION.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
*@return CURSOR CON INFORMACION DE LAS FUNCIONES PL/SQL DISPONIBLES.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_FUNCION_PLSQL_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
	OUT_COUNT INT;
BEGIN
		SELECT COUNT(PRONAME) INTO OUT_COUNT
		FROM pg_catalog.pg_namespace n	
		INNER JOIN PG_PROC PR ON (pronamespace = n.oid)
		INNER JOIN PG_TYPE TP ON( TP.OID = PR.PRORETTYPE)
		   AND PR.PROISAGG = FALSE
		   AND TP.TYPNAME <> 'trigger'
		   WHERE PRONARGS >= 2 AND UPPER(nspname) = 'SII' AND (IN_FIND_TEXT IS NULL OR LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(PRONAME, '')) = 1);
	RETURN OUT_COUNT;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION.SII.F_CGG_REGLA_VALIDACION_FUNCION_PLSQL 
*SELECCIONA LOS METADATOS DE UNA FUNCION PL/SQL DEL ESQUEMA SII .
* @param IN_CRVAL_NOMBRE NOMBRE DE LA REGLA DE VALIDACION.
*@return CURSOR CON INFORMACION DE LAS FUNCION PL/SQL.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_FUNCION_PLSQL(
IN IN_CRVAL_NOMBRE SII.CGG_REGLA_VALIDACION.CRVAL_NOMBRE%TYPE)
RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
		SELECT UPPER(PRONAME) AS PRONAME,
		PRONARGS,
		PROARGNAMES,
		TYPNAME,
		'{'||pg_catalog.array_to_string(ARRAY( 
		SELECT 
			pg_catalog.format_type(PR.proargtypes[s.i], NULL) 
		FROM 
		pg_catalog.generate_series(0, pg_catalog.array_upper(PR.proargtypes, 1)) AS s(i) 
		), ', ') ||'}' AS PROARGSTYPE		
		FROM pg_catalog.pg_namespace n	
		INNER JOIN PG_PROC PR ON (pronamespace = n.oid)
		INNER JOIN PG_TYPE TP ON( TP.OID = PR.PRORETTYPE)
		   AND UPPER(PRONAME) = UPPER(IN_CRVAL_NOMBRE);
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION.SII.F_CGG_REGLA_VALIDACION_FUNCION_PLSQL 
*SELECCIONA LOS TIPOS DE DATOS DE LOS PARAMETROS DE UNA FUNCION PL/SQL DEL ESQUEMA SII .
* @param IN_CRVAL_NOMBRE  NOMBRE DE LA REGLA DE VALIDACION.
*@return CURSOR CON INFORMACION DE LAS FUNCION PL/SQL.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_REGLA_VALIDACION_FUNCION_PLSQL_PARAMTYPES(
IN IN_CRVAL_NOMBRE SII.CGG_REGLA_VALIDACION.CRVAL_NOMBRE%TYPE)
RETURNS CHARACTER VARYING AS
$$
DECLARE
	TMP_PARAMTYPES CHARACTER VARYING;
	
BEGIN
	SELECT 
		'{'||pg_catalog.array_to_string(ARRAY( 
		SELECT 
			pg_catalog.format_type(PR.proargtypes[s.i], NULL) 
		FROM 
		pg_catalog.generate_series(0, pg_catalog.array_upper(PR.proargtypes, 1)) AS s(i) 
		), ', ') ||'}' AS PROARGSTYPE INTO TMP_PARAMTYPES		
		FROM pg_catalog.pg_namespace n	
		INNER JOIN PG_PROC PR ON (pronamespace = n.oid)
		INNER JOIN PG_TYPE TP ON( TP.OID = PR.PRORETTYPE)
		   AND UPPER(PRONAME) = UPPER(IN_CRVAL_NOMBRE);
	RETURN TMP_PARAMTYPES;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


