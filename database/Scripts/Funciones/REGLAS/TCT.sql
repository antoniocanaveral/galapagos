
/**
* FUNCION SII.F_CGG_RES_PERSONA_PRE_REGISTRO_ANTERIOR_SELECT
* SELECCIONA UNA PERSONA TIENE UN PRE-REGISTRO ANTERIOR 
* @param IN_CRPER_NUM_DOC_IDENTIFIC NUMERO DE DOCUMENTO DEL REGISTRO DE PERSONA
* @param INOPERADOR IDENTIFICATIVO DE OPERADOR
* @param INVALORCOMPARACION VALOR DE COMPARACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_PRE_REGISTRO_ANTERIOR_SELECT(
IN IN_CRPER_NUM_DOC_IDENTIFIC SII.CGG_RES_PERSONA.CRPER_NUM_DOC_IDENTIFIC%TYPE,
IN INOPERADOR CHARACTER VARYING,
IN INVALORCOMPARACION CHARACTER VARYING
)RETURNS CHARACTER VARYING AS
$$
DECLARE
	TMP_VALOR_PRE CHARACTER VARYING;
	TMP_RESULTADO VARCHAR;
	TMP_COUNT INT;
BEGIN	
	SELECT
		COUNT(RG.CTREG_CODIGO) INTO TMP_COUNT
	FROM SII.CGG_TCT_REGISTRO RG
	INNER JOIN SII.CGG_RES_PERSONA PRS ON PRS.CRPER_CODIGO = RG.CRPER_CODIGO AND PRS.CRPER_NUM_DOC_IDENTIFIC = IN_CRPER_NUM_DOC_IDENTIFIC AND CRPER_ESTADO
	LEFT JOIN SII.CGG_RES_MOVILIDAD MVD ON MVD.CTREG_CODIGO = RG.CTREG_CODIGO AND MVD.CRMOV_TIPO_OPERACION = 0
	WHERE CTREG_ESTADO AND 
		NOT RG.CTREG_COMPLETO AND 
		CTREG_ESTADO_REGISTRO IN (0,1) AND 
		MVD.CRMOV_CODIGO IS NULL;	
	IF (TMP_COUNT = 0) THEN
		TMP_VALOR_PRE := 'FALSE';
	ELSE
		TMP_VALOR_PRE := 'TRUE';
	END IF;
	SELECT SII.F_CGG_REGLA_VALIDACION(TMP_VALOR_PRE,INOPERADOR,INVALORCOMPARACION) INTO TMP_RESULTADO;
		
	RETURN TMP_RESULTADO;	
END
$$
LANGUAGE 'PLPGSQL' VOLATILE;

/**
* FUNCION SII.F_CGG_RES_PERSONA_COMPRA_TCT_PROVINCIA_SELECT
* SELECCIONA SI UNA PERSONA SE ENCUENTRA EN LA PROVINCIA
* @param IN_CRPER_NUM_DOC_IDENTIFIC NUMERO DE DOCUMENTO DEL REGISTRO DE PERSONA
* @param INOPERADOR IDENTIFICATIVO DE OPERADOR
* @param INVALORCOMPARACION VALOR DE COMPARACION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_COMPRA_TCT_PROVINCIA_SELECT(
IN IN_CRPER_NUM_DOC_IDENTIFIC SII.CGG_RES_PERSONA.CRPER_NUM_DOC_IDENTIFIC%TYPE,
IN INOPERADOR CHARACTER VARYING,
IN INVALORCOMPARACION CHARACTER VARYING
)RETURNS CHARACTER VARYING AS
$$
DECLARE
	TMP_NUMERO_ENTRADA INT;
	TMP_NUMERO_SALIDA INT;
	TMP_RESULTADO VARCHAR;
BEGIN	
	SELECT COUNT (CRMOV_TIPO_OPERACION)  INTO TMP_NUMERO_ENTRADA
	FROM SII.CGG_RES_MOVILIDAD MV
	WHERE CRMOV_ESTADO = TRUE 
	AND CRMOV_TIPO_OPERACION =0
	AND MV.CRPER_CODIGO = (SELECT CRPER_CODIGO FROM CGG_RES_PERSONA
		WHERE CRPER_NUM_DOC_IDENTIFIC = IN_CRPER_NUM_DOC_IDENTIFIC  );

	SELECT COUNT (CRMOV_TIPO_OPERACION)  INTO TMP_NUMERO_SALIDA
	FROM SII.CGG_RES_MOVILIDAD MV
	WHERE CRMOV_ESTADO = TRUE 
	AND CRMOV_TIPO_OPERACION =1
	AND MV.CRPER_CODIGO = (SELECT CRPER_CODIGO FROM CGG_RES_PERSONA
		WHERE CRPER_NUM_DOC_IDENTIFIC = IN_CRPER_NUM_DOC_IDENTIFIC  );

	SELECT SII.F_CGG_REGLA_VALIDACION(TMP_NUMERO_ENTRADA::VARCHAR,INOPERADOR,TMP_NUMERO_SALIDA::VARCHAR) INTO TMP_RESULTADO;
	RETURN TMP_RESULTADO;
	
END
$$
LANGUAGE 'PLPGSQL' VOLATILE;


/**
* VERIFICA QUE LA PERSONA TENGA UN PRE-REGISTRO PARA REGISTRAR UN INGRESO.
* @param IN_CRTREG_CODIGO_BARRAS DE LA PERSONA QUE SE DESEA CONSULTAR
* @param IN_OPERADOR OPERADOR DE COMPARACION
* @param IN_VALOR_COMPARACION DATO DE CONVALIDACION
* @returns VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_PERSONA_INGRESO_PREREGISTRO(
IN IN_CRTREG_CODIGO_BARRAS VARCHAR,
IN IN_OPERADOR VARCHAR, 
IN IN_VALOR_COMPARACION VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
TMP_INGRESO BOOLEAN DEFAULT TRUE;
OUT_RESULTADO VARCHAR;
TMP_COUNT INT DEFAULT 0;
BEGIN
	SELECT COUNT(*) INTO TMP_COUNT FROM CGG_TCT_REGISTRO
		WHERE CTREG_CODIGO_BARRAS = IN_CRTREG_CODIGO_BARRAS
		AND CTREG_ESTADO_REGISTRO = 1
		AND CTREG_ESTADO 
		AND CTREG_COMPLETO = FALSE;
	IF (TMP_COUNT = 0) THEN
		TMP_INGRESO := FALSE;
	END IF;
	SELECT SII.F_CGG_REGLA_VALIDACION(TMP_INGRESO::VARCHAR,IN_OPERADOR,IN_VALOR_COMPARACION::VARCHAR) INTO OUT_RESULTADO;

	RETURN OUT_RESULTADO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;


/**
* VERIFICA QUE LA PERSONA NO TENGA UN INGRESO ANTERIOR CON EL PRE-REGISTRO.
* @param IN_CRTREG_CODIGO_BARRAS DE LA PERSONA QUE SE DESEA CONSULTAR
* @param IN_OPERADOR OPERADOR DE COMPARACION
* @param IN_VALOR_COMPARACION DATO DE CONVALIDACION
* @returns VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_PERSONA_INGRESO_ANTERIOR(
IN IN_CRTREG_CODIGO_BARRAS VARCHAR,
IN IN_OPERADOR VARCHAR, 
IN IN_VALOR_COMPARACION VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
TMP_INGRESO BOOLEAN DEFAULT TRUE;
OUT_RESULTADO VARCHAR;
TMP_COUNT INT DEFAULT 0;
BEGIN
	
	SELECT COUNT(*) INTO TMP_COUNT FROM CGG_TCT_REGISTRO R
		INNER JOIN CGG_RES_MOVILIDAD M ON (M.CTREG_CODIGO = R.CTREG_CODIGO)
		WHERE CTREG_CODIGO_BARRAS = IN_CRTREG_CODIGO_BARRAS
		AND CTREG_ESTADO_REGISTRO = 1
		AND CRMOV_TIPO_OPERACION = 0
		AND CTREG_ESTADO; 
		--AND CTREG_COMPLETO = FALSE;
	IF (TMP_COUNT > 0) THEN
		TMP_INGRESO := FALSE;
	END IF;
	SELECT SII.F_CGG_REGLA_VALIDACION(TMP_INGRESO::VARCHAR,IN_OPERADOR,IN_VALOR_COMPARACION::VARCHAR) INTO OUT_RESULTADO;

	RETURN OUT_RESULTADO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;


/**
* VERIFICA QUE LA PERSONA NO TENGA UN SALIDA ANTERIOR CON EL PRE-REGISTRO.
* @param IN_CRTREG_CODIGO_BARRAS DE LA PERSONA QUE SE DESEA CONSULTAR
* @param IN_OPERADOR OPERADOR DE COMPARACION
* @param IN_VALOR_COMPARACION DATO DE CONVALIDACION
* @returns VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_PERSONA_SALIDA_ANTERIOR(
IN IN_CRTREG_CODIGO_BARRAS VARCHAR,
IN IN_OPERADOR VARCHAR, 
IN IN_VALOR_COMPARACION VARCHAR
)RETURNS VARCHAR AS
$$
DECLARE
TMP_SALIDA BOOLEAN DEFAULT TRUE;
OUT_RESULTADO VARCHAR;
TMP_COUNT INT DEFAULT 0;
BEGIN
	
	SELECT COUNT(*) INTO TMP_COUNT FROM CGG_TCT_REGISTRO R
		INNER JOIN CGG_RES_MOVILIDAD M ON (M.CTREG_CODIGO = R.CTREG_CODIGO)
		WHERE CTREG_CODIGO_BARRAS = IN_CRTREG_CODIGO_BARRAS
		AND CTREG_ESTADO_REGISTRO = 1
		AND CRMOV_TIPO_OPERACION = 1
		AND CTREG_ESTADO 
		AND CTREG_COMPLETO = TRUE;
	IF (TMP_COUNT > 0) THEN
		TMP_SALIDA := FALSE;
	END IF;
	SELECT SII.F_CGG_REGLA_VALIDACION(TMP_SALIDA::VARCHAR,IN_OPERADOR,IN_VALOR_COMPARACION::VARCHAR) INTO OUT_RESULTADO;

	RETURN OUT_RESULTADO;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE COST 100;