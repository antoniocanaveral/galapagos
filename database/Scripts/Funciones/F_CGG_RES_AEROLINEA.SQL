/**
* FUNCION SII.F_CGG_RES_AEROLINEA_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_AEROLINEA
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRALN_NOMBRE NOMBRE DE LA AEROLINEA
* @param IN_CRALN_TIPO_AEROLINEA IDENTIFICATIVO DEL TIPO DE AEROLINEA
0 - EXTERNO
1 - INTERNO
* @param IN_CRALN_ESTADO ESTADO DEL REGISTRO
* @param IN_CRALN_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRALN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROLINEA_INSERT(
IN IN_CRALN_CODIGO SII.CGG_RES_AEROLINEA.CRALN_CODIGO%TYPE, 
IN IN_CRALN_NOMBRE SII.CGG_RES_AEROLINEA.CRALN_NOMBRE%TYPE, 
IN IN_CRALN_TIPO_AEROLINEA SII.CGG_RES_AEROLINEA.CRALN_TIPO_AEROLINEA%TYPE, 
IN IN_CRALN_ESTADO SII.CGG_RES_AEROLINEA.CRALN_ESTADO%TYPE, 
IN IN_CRALN_USUARIO_INSERT SII.CGG_RES_AEROLINEA.CRALN_USUARIO_INSERT%TYPE, 
IN IN_CRALN_USUARIO_UPDATE SII.CGG_RES_AEROLINEA.CRALN_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN
	SELECT COUNT(IN_CRALN_NOMBRE) INTO TMP_COUNT FROM SII.CGG_RES_AEROLINEA WHERE UPPER(CRALN_NOMBRE) = UPPER(IN_CRALN_NOMBRE) AND CRALN_ESTADO = TRUE;
	IF (TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'La Aerolinea ya se encuentra registrada.';
	END IF;
	IF (UPPER(IN_CRALN_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_AEROLINEA','CRALN_CODIGO','CRALN') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRALN_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_AEROLINEA(
		CRALN_CODIGO, 
		CRALN_NOMBRE, 
		CRALN_TIPO_AEROLINEA, 
		CRALN_ESTADO, 
		CRALN_FECHA_INSERT, 
		CRALN_USUARIO_INSERT, 
		CRALN_FECHA_UPDATE, 
		CRALN_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRALN_NOMBRE, 
		IN_CRALN_TIPO_AEROLINEA, 
		IN_CRALN_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRALN_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRALN_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROLINEA_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_AEROLINEA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROLINEA_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRALN_CODIGO, 
		CRALN_NOMBRE, 
		CRALN_TIPO_AEROLINEA, 
		CRALN_ESTADO, 
		CRALN_FECHA_INSERT, 
		CRALN_USUARIO_INSERT, 
		CRALN_FECHA_UPDATE, 
		CRALN_USUARIO_UPDATE
	FROM SII.CGG_RES_AEROLINEA
	WHERE CRALN_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROLINEA_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_AEROLINEA
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROLINEA_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRALN_CODIGO, 
		CRALN_NOMBRE, 
		CRALN_TIPO_AEROLINEA, 
		CRALN_ESTADO, 
		CRALN_FECHA_INSERT, 
		CRALN_USUARIO_INSERT, 
		CRALN_FECHA_UPDATE, 
		CRALN_USUARIO_UPDATE
	FROM SII.CGG_RES_AEROLINEA
	WHERE CRALN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CRALN_NOMBRE, '''')||'' ''||COALESCE(CRALN_TIPO_AEROLINEA, 0)||'' ''||COALESCE(CRALN_ESTADO, FALSE)||'' ''||COALESCE(CRALN_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRALN_USUARIO_INSERT, '''')||'' ''||COALESCE(CRALN_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRALN_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROLINEA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_AEROLINEA
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROLINEA_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_AEROLINEA
	WHERE CRALN_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROLINEA_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_AEROLINEA
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROLINEA_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_AEROLINEA
	WHERE CRALN_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRALN_NOMBRE, '''')||' '||COALESCE(CRALN_TIPO_AEROLINEA, 0)||' '||COALESCE(CRALN_ESTADO, FALSE)||' '||COALESCE(CRALN_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRALN_USUARIO_INSERT, '''')||' '||COALESCE(CRALN_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRALN_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROLINEA_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_AEROLINEA
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRALN_NOMBRE NOMBRE DE LA AEROLINEA
* @param IN_CRALN_TIPO_AEROLINEA IDENTIFICATIVO DEL TIPO DE AEROLINEA
0 - EXTERNO
1 - INTERNO
* @param IN_CRALN_ESTADO ESTADO DEL REGISTRO
* @param IN_CRALN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROLINEA_UPDATE(
IN IN_CRALN_CODIGO SII.CGG_RES_AEROLINEA.CRALN_CODIGO%TYPE, 
IN IN_CRALN_NOMBRE SII.CGG_RES_AEROLINEA.CRALN_NOMBRE%TYPE, 
IN IN_CRALN_TIPO_AEROLINEA SII.CGG_RES_AEROLINEA.CRALN_TIPO_AEROLINEA%TYPE, 
IN IN_CRALN_ESTADO SII.CGG_RES_AEROLINEA.CRALN_ESTADO%TYPE, 
IN IN_CRALN_USUARIO_UPDATE SII.CGG_RES_AEROLINEA.CRALN_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
TMP_COUNT INT;
BEGIN

	SELECT COUNT(IN_CRALN_NOMBRE) INTO TMP_COUNT FROM SII.CGG_RES_AEROLINEA WHERE UPPER(CRALN_NOMBRE) = UPPER(IN_CRALN_NOMBRE) AND CRALN_ESTADO = TRUE;
	IF (TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'La Aerolinea ya se encuentra registrada.';
	END IF;
	UPDATE SII.CGG_RES_AEROLINEA SET
		CRALN_NOMBRE = IN_CRALN_NOMBRE, 
		CRALN_TIPO_AEROLINEA = IN_CRALN_TIPO_AEROLINEA, 
		CRALN_ESTADO = IN_CRALN_ESTADO, 
		CRALN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRALN_USUARIO_UPDATE = IN_CRALN_USUARIO_UPDATE
	WHERE
		CRALN_CODIGO = IN_CRALN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROLINEA_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_AEROLINEA
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE AEROLINEA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROLINEA_SELECT(
IN IN_CRALN_CODIGO SII.CGG_RES_AEROLINEA.CRALN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRALN_CODIGO, 
		CRALN_NOMBRE, 
		CRALN_TIPO_AEROLINEA, 
		CRALN_ESTADO, 
		CRALN_FECHA_INSERT, 
		CRALN_USUARIO_INSERT, 
		CRALN_FECHA_UPDATE, 
		CRALN_USUARIO_UPDATE
	FROM SII.CGG_RES_AEROLINEA
	WHERE CRALN_ESTADO = TRUE AND 
		CRALN_CODIGO = IN_CRALN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROLINEA_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_AEROLINEA
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROLINEA_DELETE(
IN IN_CRALN_CODIGO SII.CGG_RES_AEROLINEA.CRALN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_AEROLINEA
	WHERE
		CRALN_CODIGO = IN_CRALN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_AEROLINEA_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_AEROLINEA
* @param IN_CRALN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_AEROLINEA_DELETE_SOFT(
IN IN_CRALN_CODIGO SII.CGG_RES_AEROLINEA.CRALN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_AEROLINEA SET
		CRALN_ESTADO = FALSE
	WHERE
		CRALN_CODIGO = IN_CRALN_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

