/**
* FUNCION SII.F_CGG_GEM_ISLA_EMPLEO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_GEM_ISLA_EMPLEO.
* @param IN_CGISE_CODIGO CODIGO IDENTIFICATIVO DE LA TABLA
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VACANTE
* @param IN_CISLA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ISLA O CIUDAD
* @param IN_CGISE_DIRECCION DIRECCION EN LA QUE VA A REALIZAR EL TRABAJO
* @param IN_CGISE_ESTADO ESTADO DEL REGISTRO
* @param IN_CGISE_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CGISE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_ISLA_EMPLEO_INSERT(
IN IN_CGISE_CODIGO SII.CGG_GEM_ISLA_EMPLEO.CGISE_CODIGO%TYPE,
IN IN_CGVCN_CODIGO SII.CGG_GEM_ISLA_EMPLEO.CGVCN_CODIGO%TYPE,
IN IN_CISLA_CODIGO SII.CGG_GEM_ISLA_EMPLEO.CISLA_CODIGO%TYPE,
IN IN_CGISE_DIRECCION SII.CGG_GEM_ISLA_EMPLEO.CGISE_DIRECCION%TYPE,
IN IN_CGISE_ESTADO SII.CGG_GEM_ISLA_EMPLEO.CGISE_ESTADO%TYPE,
IN IN_CGISE_USUARIO_INSERT SII.CGG_GEM_ISLA_EMPLEO.CGISE_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CGISE_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_GEM_ISLA_EMPLEO','CGISE_CODIGO','CGISE') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CGISE_CODIGO;
	END IF;
	INSERT INTO SII.CGG_GEM_ISLA_EMPLEO(
		CGISE_CODIGO, 
		CGVCN_CODIGO, 
		CISLA_CODIGO, 
		CGISE_DIRECCION, 
		CGISE_ESTADO, 
		CGISE_FECHA_INSERT, 
		CGISE_USUARIO_INSERT, 
		CGISE_FECHA_UPDATE, 
		CGISE_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGVCN_CODIGO, 
		IN_CISLA_CODIGO, 
		IN_CGISE_DIRECCION, 
		IN_CGISE_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CGISE_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CGISE_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_ISLA_EMPLEO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_GEM_ISLA_EMPLEO.
* @param IN_CGISE_CODIGO CODIGO IDENTIFICATIVO DE LA TABLA
* @param IN_CGVCN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE VACANTE
* @param IN_CISLA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ISLA O CIUDAD
* @param IN_CGISE_DIRECCION DIRECCION EN LA QUE VA A REALIZAR EL TRABAJO
* @param IN_CGISE_ESTADO ESTADO DEL REGISTRO
* @param IN_CGISE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION

* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_ISLA_EMPLEO_UPDATE(
IN IN_CGISE_CODIGO SII.CGG_GEM_ISLA_EMPLEO.CGISE_CODIGO%TYPE,
IN IN_CGVCN_CODIGO SII.CGG_GEM_ISLA_EMPLEO.CGVCN_CODIGO%TYPE,
IN IN_CISLA_CODIGO SII.CGG_GEM_ISLA_EMPLEO.CISLA_CODIGO%TYPE,
IN IN_CGISE_DIRECCION SII.CGG_GEM_ISLA_EMPLEO.CGISE_DIRECCION%TYPE,
IN IN_CGISE_ESTADO SII.CGG_GEM_ISLA_EMPLEO.CGISE_ESTADO%TYPE,
IN IN_CGISE_USUARIO_UPDATE SII.CGG_GEM_ISLA_EMPLEO.CGISE_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
	TMP_COUNT INT;
BEGIN
	SELECT COUNT(*) INTO TMP_COUNT FROM SII.CGG_GEM_ISLA_EMPLEO 
	WHERE CGVCN_CODIGO=IN_CGVCN_CODIGO AND CISLA_CODIGO=IN_CISLA_CODIGO;
	IF (TMP_COUNT==0) THEN
		SELECT SII.F_CGG_GEM_ISLA_EMPLEO_INSERT(
			'KEYGEN',
			IN_CGISE_CODIGO,
			IN_CGVCN_CODIGO,
			IN_CISLA_CODIGO,
			IN_CGISE_DIRECCION,
			IN_CGISE_ESTADO,
			IN_CGISE_USUARIO_UPDATE
		)
	END IF;	
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_GEM_ISLA_EMPLEO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_GEM_ISLA_EMPLEO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_CGVCN_CODIGO INDICE DE INICIO DE REGISTROS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_ISLA_EMPLEO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_CGVCN_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;	
BEGIN
	OPEN TMP_REF FOR 
		SELECT
			CGIEM.CGISE_CODIGO, 
			CISLA.CISLA_NOMBRE,			
			CGIEM.CISLA_CODIGO, 
			CGIEM.CGISE_DIRECCION
		FROM SII.CGG_GEM_ISLA_EMPLEO CGIEM
		INNER JOIN SII.CGG_ISLA CISLA ON CISLA.CISLA_CODIGO = CGIEM.CISLA_CODIGO
		WHERE CGIEM.CGVCN_CODIGO = IN_CGVCN_CODIGO
		ORDER BY CISLA.CISLA_NOMBRE ASC;

	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_GEM_ISLA_EMPLEO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_GEM_ISLA_EMPLEO.
* @param IN_CGISE_CODIGO CODIGO IDENTIFICATIVO DE LA TABLA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_GEM_ISLA_EMPLEO_DELETE(
IN IN_CGISE_CODIGO SII.CGG_GEM_ISLA_EMPLEO.CGISE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_GEM_ISLA_EMPLEO
	WHERE
		CGISE_CODIGO = IN_CGISE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
