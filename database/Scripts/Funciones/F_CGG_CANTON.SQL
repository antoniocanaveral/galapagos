/**
* FUNCION SII.F_CGG_CANTON_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CGPRV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CCTN_NOMBRE NOMBRE DEL CANTON
* @param IN_CCTN_DESCRIPCION DESCRIPCION DEL CANTON 
* @param IN_CCTN_ABREVIATURA ABREVIATURA DEL CANTON 
* @param IN_CCTN_ESTADO ESTADO DEL REGISTRO
* @param IN_CCTN_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CCTN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_INSERT(
IN IN_CCTN_CODIGO SII.CGG_CANTON.CCTN_CODIGO%TYPE, 
IN IN_CGPRV_CODIGO SII.CGG_CANTON.CGPRV_CODIGO%TYPE, 
IN IN_CCTN_NOMBRE SII.CGG_CANTON.CCTN_NOMBRE%TYPE, 
IN IN_CCTN_DESCRIPCION SII.CGG_CANTON.CCTN_DESCRIPCION%TYPE, 
IN IN_CCTN_ABREVIATURA SII.CGG_CANTON.CCTN_ABREVIATURA%TYPE, 
IN IN_CCTN_ESTADO SII.CGG_CANTON.CCTN_ESTADO%TYPE, 
IN IN_CCTN_USUARIO_INSERT SII.CGG_CANTON.CCTN_USUARIO_INSERT%TYPE, 
IN IN_CCTN_USUARIO_UPDATE SII.CGG_CANTON.CCTN_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN
	
	SELECT COUNT(CCTN_NOMBRE) INTO TMP_COUNT FROM SII.CGG_CANTON WHERE UPPER(CCTN_NOMBRE) = UPPER(IN_CCTN_NOMBRE) AND CGPRV_CODIGO = IN_CGPRV_CODIGO AND CCTN_ESTADO;
	IF(TMP_COUNT > 0)THEN
		RAISE EXCEPTION 'El nombre de canton ya esta registrado.';
	END IF;
	IF (UPPER(IN_CCTN_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_CANTON','CCTN_CODIGO','CCTN') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CCTN_CODIGO;
	END IF;
	INSERT INTO SII.CGG_CANTON(
		CCTN_CODIGO, 
		CGPRV_CODIGO, 
		CCTN_NOMBRE, 
		CCTN_DESCRIPCION, 
		CCTN_ABREVIATURA, 
		CCTN_ESTADO, 
		CCTN_FECHA_INSERT, 
		CCTN_USUARIO_INSERT, 
		CCTN_FECHA_UPDATE, 
		CCTN_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CGPRV_CODIGO, 
		IN_CCTN_NOMBRE, 
		IN_CCTN_DESCRIPCION,
		IN_CCTN_ABREVIATURA,
		IN_CCTN_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CCTN_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CCTN_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_CANTON.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CCTN_CODIGO, 
		CGPRV_CODIGO, 
		CCTN_NOMBRE,
		CCTN_DESCRIPCION,		
		CCTN_ABREVIATURA
	FROM SII.CGG_CANTON
	WHERE CCTN_ESTADO = TRUE
	ORDER BY CCTN_NOMBRE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_CANTON.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CCTN_CODIGO, 
		PRV.CGPRV_CODIGO, 
		CCTN_NOMBRE, 
		CCTN_DESCRIPCION, 
		CCTN_ABREVIATURA,
		CCTN_ESTADO, 
		CCTN_FECHA_INSERT, 
		CCTN_USUARIO_INSERT, 
		CCTN_FECHA_UPDATE, 
		CCTN_USUARIO_UPDATE
		CGPRV_NOMBRE
	FROM SII.CGG_CANTON CNT
	INNER JOIN SII.CGG_PROVINCIA PRV ON (PRV.CGPRV_CODIGO = CNT.CGPRV_CODIGO)
	WHERE CCTN_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
		CASE WHEN CGPRV_NOMBRE IS NULL THEN '''' ELSE CGPRV_NOMBRE END ||'' ''||
		CASE WHEN CCTN_NOMBRE IS NULL THEN '''' ELSE CCTN_NOMBRE END ||'' ''||
		CASE WHEN CCTN_DESCRIPCION IS NULL THEN '''' ELSE CCTN_DESCRIPCION END) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_CANTON.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_CANTON
	WHERE CCTN_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_CANTON
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_CANTON
	WHERE CCTN_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CCTN_CODIGO IS NULL THEN '''' ELSE CCTN_CODIGO END ||' '||CASE WHEN CGPRV_CODIGO IS NULL THEN '''' ELSE CGPRV_CODIGO END ||' '||CASE WHEN CCTN_NOMBRE IS NULL THEN '''' ELSE CCTN_NOMBRE END ||' '||CASE WHEN CCTN_DESCRIPCION IS NULL THEN '''' ELSE CCTN_DESCRIPCION END ||' '||CASE WHEN CCTN_ESTADO IS NULL THEN FALSE ELSE CCTN_ESTADO END ||' '||CASE WHEN CCTN_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CCTN_FECHA_INSERT END ||' '||CASE WHEN CCTN_USUARIO_INSERT IS NULL THEN '''' ELSE CCTN_USUARIO_INSERT END ||' '||CASE WHEN CCTN_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CCTN_FECHA_UPDATE END ||' '||CASE WHEN CCTN_USUARIO_UPDATE IS NULL THEN '''' ELSE CCTN_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @param IN_CGPRV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CCTN_NOMBRE NOMBRE DEL CANTON
* @param IN_CCTN_DESCRIPCION DESCRIPCION DEL CANTON 
* @param IN_CCTN_ABREVIATURA ABREVIATURA DEL CANTON 
* @param IN_CCTN_ESTADO ESTADO DEL REGISTRO
* @param IN_CCTN_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_UPDATE(
IN IN_CCTN_CODIGO SII.CGG_CANTON.CCTN_CODIGO%TYPE, 
IN IN_CGPRV_CODIGO SII.CGG_CANTON.CGPRV_CODIGO%TYPE, 
IN IN_CCTN_NOMBRE SII.CGG_CANTON.CCTN_NOMBRE%TYPE, 
IN IN_CCTN_DESCRIPCION SII.CGG_CANTON.CCTN_DESCRIPCION%TYPE, 
IN IN_CCTN_ABREVIATURA SII.CGG_CANTON.CCTN_ABREVIATURA%TYPE, 
IN IN_CCTN_ESTADO SII.CGG_CANTON.CCTN_ESTADO%TYPE, 
IN IN_CCTN_USUARIO_UPDATE SII.CGG_CANTON.CCTN_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_CANTON SET
		CGPRV_CODIGO = IN_CGPRV_CODIGO, 
		CCTN_NOMBRE = IN_CCTN_NOMBRE, 
		CCTN_DESCRIPCION = IN_CCTN_DESCRIPCION, 
		CCTN_ABREVIATURA = IN_CCTN_ABREVIATURA, 
		CCTN_ESTADO = IN_CCTN_ESTADO, 
		CCTN_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CCTN_USUARIO_UPDATE = IN_CCTN_USUARIO_UPDATE
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_SELECT(
IN IN_CCTN_CODIGO SII.CGG_CANTON.CCTN_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CCTN_CODIGO, 
		CGPRV_CODIGO, 
		CCTN_NOMBRE, 
		CCTN_DESCRIPCION, 
		CCTN_ESTADO, 
		CCTN_FECHA_INSERT, 
		CCTN_USUARIO_INSERT, 
		CCTN_FECHA_UPDATE, 
		CCTN_USUARIO_UPDATE
	FROM SII.CGG_CANTON
	WHERE CCTN_ESTADO = TRUE AND 
		CCTN_CODIGO = IN_CCTN_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_DELETE(
IN IN_CCTN_CODIGO SII.CGG_CANTON.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_CANTON
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_CANTON.
* @param IN_CCTN_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE CANTON
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_DELETE_SOFT(
IN IN_CCTN_CODIGO SII.CGG_CANTON.CCTN_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_CANTON SET
		CCTN_ESTADO = FALSE
	WHERE
		CCTN_CODIGO = IN_CCTN_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_S_CGG_PROVINCIA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_CANTON QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_PROVINCIA.
* @param IN_CGPRV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_S_CGG_PROVINCIA(
IN IN_CGPRV_CODIGO SII.CGG_CANTON.CGPRV_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CCTN_CODIGO, 
		CGPRV_CODIGO, 
		CCTN_NOMBRE, 
		CCTN_ABREVIATURA 
	FROM SII.CGG_CANTON
	WHERE CCTN_ESTADO = TRUE AND 
		CGPRV_CODIGO = IN_CGPRV_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_D_CGG_PROVINCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_CANTON QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_PROVINCIA.
* @param IN_CGPRV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_D_CGG_PROVINCIA(
IN IN_CGPRV_CODIGO SII.CGG_CANTON.CGPRV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_CANTON
	WHERE
		CGPRV_CODIGO = IN_CGPRV_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_CANTON_D_CGG_PROVINCIA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_CANTON QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_PROVINCIA.
* @param IN_CGPRV_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_CANTON_DS_CGG_PROVINCIA(
IN IN_CGPRV_CODIGO SII.CGG_CANTON.CGPRV_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_CANTON SET
		cctn_estado = false
	WHERE
		CGPRV_CODIGO = IN_CGPRV_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

