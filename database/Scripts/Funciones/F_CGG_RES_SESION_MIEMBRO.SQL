/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_SESION_MIEMBRO
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO ASISTENTE
* @param IN_CGG_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO TITULAR 
* @param IN_CRSMB_PRESIDENTE DETERMINAR EL PRESIDENTE DE LA SESION
* @param IN_CRSMB_PRESENTE DETERMINA SI EL MIEMBRO SE ENCUENTRA PRESENTE EN LA SESION
* @param IN_CRSMB_ESTADO ESTADO DEL REGISTRO
* @param IN_CRSMB_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRSMB_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_INSERT(
IN IN_CRSMB_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSMB_CODIGO%TYPE, 
IN IN_CRSSC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSSC_CODIGO%TYPE, 
IN IN_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRMBC_CODIGO%TYPE, 
IN IN_CGG_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CGG_CRMBC_CODIGO%TYPE, 
IN IN_CRSMB_PRESIDENTE SII.CGG_RES_SESION_MIEMBRO.CRSMB_PRESIDENTE%TYPE, 
IN IN_CRSMB_PRESENTE SII.CGG_RES_SESION_MIEMBRO.CRSMB_PRESENTE%TYPE, 
IN IN_CRSMB_ESTADO SII.CGG_RES_SESION_MIEMBRO.CRSMB_ESTADO%TYPE, 
IN IN_CRSMB_USUARIO_INSERT SII.CGG_RES_SESION_MIEMBRO.CRSMB_USUARIO_INSERT%TYPE, 
IN IN_CRSMB_USUARIO_UPDATE SII.CGG_RES_SESION_MIEMBRO.CRSMB_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
TMP_COUNT INT;
BEGIN

	SELECT COUNT(*) INTO TMP_COUNT FROM SII.CGG_RES_MIEMBRO_COMITE MC 
	WHERE MC.CRMBC_CODIGO = IN_CRMBC_CODIGO AND MC.CRCRG_CODIGO IN (
		(SELECT CRG.CRCRG_CODIGO
		FROM SII.CGG_RES_CARGO_COMITE CRG 
		INNER JOIN SII.CGG_RES_SESION_MIEMBRO SM ON SM.CRSSC_CODIGO = IN_CRSSC_CODIGO AND SM.CRSMB_ESTADO
		INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MC ON MC.CRMBC_CODIGO = SM.CRMBC_CODIGO AND 
			MC.CRCRG_CODIGO = CRG.CRCRG_CODIGO AND MC.CRMBC_ESTADO
		WHERE CRG.CRCRG_ESTADO
		)
		UNION
		(SELECT CRG.CRCRG_CODIGO
		FROM SII.CGG_RES_CARGO_COMITE CRG 
		INNER JOIN SII.CGG_RES_SESION_MIEMBRO SM ON SM.CRSSC_CODIGO = IN_CRSSC_CODIGO AND SM.CRSMB_ESTADO
		INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MC ON MC.CRMBC_CODIGO = SM.CGG_CRMBC_CODIGO AND 
			MC.CRCRG_CODIGO = CRG.CRCRG_CODIGO AND MC.CRMBC_ESTADO
		WHERE CRG.CRCRG_ESTADO)
	);
	
	IF(TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'El cargo seleccionado ya se encuentra representado en el comit&eacute.';
	END IF;
	
	SELECT COUNT(CRSMB_CODIGO) INTO TMP_COUNT
	FROM SII.CGG_RES_SESION_MIEMBRO 
	WHERE CRSSC_CODIGO = IN_CRSSC_CODIGO AND 
		CRSMB_PRESIDENTE AND
		CRSMB_ESTADO AND 
		IN_CRSMB_PRESIDENTE;
	IF(TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'La sesi&oacute;n acutal, ya tiene un presidente.';
	END IF;
	SELECT COUNT(CRSMB_CODIGO) INTO TMP_COUNT
	FROM SII.CGG_RES_SESION_MIEMBRO 
	WHERE CRSSC_CODIGO = IN_CRSSC_CODIGO AND 
		CRSMB_ESTADO AND 
		CRMBC_CODIGO = IN_CRMBC_CODIGO;
	IF(TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'El miembro del comit&eacute; seleccinado ya esta registrado.';
	END IF;
	IF (UPPER(IN_CRSMB_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_SESION_MIEMBRO','CRSMB_CODIGO','CRSMB') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRSMB_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_SESION_MIEMBRO(
		CRSMB_CODIGO, 
		CRSSC_CODIGO, 
		CRMBC_CODIGO, 
		CGG_CRMBC_CODIGO, 
		CRSMB_PRESIDENTE, 
		CRSMB_PRESENTE, 
		CRSMB_ESTADO, 
		CRSMB_FECHA_INSERT, 
		CRSMB_USUARIO_INSERT, 
		CRSMB_FECHA_UPDATE, 
		CRSMB_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRSSC_CODIGO, 
		IN_CRMBC_CODIGO, 
		IN_CGG_CRMBC_CODIGO, 
		IN_CRSMB_PRESIDENTE, 
		IN_CRSMB_PRESENTE, 
		IN_CRSMB_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRSMB_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRSMB_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_SESION_MIEMBRO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSMB_CODIGO, 
		CRSSC_CODIGO, 
		CRMBC_CODIGO, 
		CGG_CRMBC_CODIGO, 
		CRSMB_PRESIDENTE, 
		CRSMB_PRESENTE, 
		CRSMB_ESTADO, 
		CRSMB_FECHA_INSERT, 
		CRSMB_USUARIO_INSERT, 
		CRSMB_FECHA_UPDATE, 
		CRSMB_USUARIO_UPDATE
	FROM SII.CGG_RES_SESION_MIEMBRO
	WHERE CRSMB_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_SESION_MIEMBRO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		SM.CRSMB_CODIGO, 
		SM.CRSSC_CODIGO, 
		(SELECT CRSSC_NUMERO_SESION FROM SII.CGG_RES_SESION_COMITE WHERE CRSSC_CODIGO = SM.CRSSC_CODIGO) SESION,
		SM.CRMBC_CODIGO, 
		(SELECT CRPER_NOMBRES||'' '' || CRPER_APELLIDO_PATERNO||'' ''|| CRPER_APELLIDO_MATERNO||'' (''||US.CUSU_NOMBRE_USUARIO||'')'' FROM CGG_RES_PERSONA PR
		INNER JOIN SII.CGG_USUARIO US ON (US.CRPER_CODIGO = PR.CRPER_CODIGO)
		INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MC ON (MC.CUSU_CODIGO = US.CUSU_CODIGO)
		WHERE SM.CRMBC_CODIGO = MC.CRMBC_CODIGO) PRINCIPAL,
		SM.CGG_CRMBC_CODIGO, 
		(SELECT CRPER_NOMBRES||'' '' || CRPER_APELLIDO_PATERNO||'' ''|| CRPER_APELLIDO_MATERNO||'' (''||US.CUSU_NOMBRE_USUARIO||'')'' FROM CGG_RES_PERSONA PR
		INNER JOIN SII.CGG_USUARIO US ON (US.CRPER_CODIGO = PR.CRPER_CODIGO)
		INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MC ON (MC.CUSU_CODIGO = US.CUSU_CODIGO)
		WHERE SM.CGG_CRMBC_CODIGO = MC.CRMBC_CODIGO) SUPLENTE,
		SM.CRSMB_PRESIDENTE, 
		SM.CRSMB_PRESENTE, 
		SM.CRSMB_ESTADO, 
		SM.CRSMB_FECHA_INSERT, 
		SM.CRSMB_USUARIO_INSERT, 
		SM.CRSMB_FECHA_UPDATE, 
		SM.CRSMB_USUARIO_UPDATE
	FROM SII.CGG_RES_SESION_MIEMBRO SM
	WHERE CRSMB_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRSMB_CODIGO IS NULL THEN '''' ELSE CRSMB_CODIGO END ||'' ''||CASE WHEN CRSSC_CODIGO IS NULL THEN '''' ELSE CRSSC_CODIGO END ||'' ''||CASE WHEN CRMBC_CODIGO IS NULL THEN '''' ELSE CRMBC_CODIGO END ||'' ''||CASE WHEN CGG_CRMBC_CODIGO IS NULL THEN '''' ELSE CGG_CRMBC_CODIGO END ||'' ''||CASE WHEN CRSMB_PRESIDENTE IS NULL THEN FALSE ELSE CRSMB_PRESIDENTE END ||'' ''||CASE WHEN CRSMB_PRESENTE IS NULL THEN FALSE ELSE CRSMB_PRESENTE END ||'' ''||CASE WHEN CRSMB_ESTADO IS NULL THEN FALSE ELSE CRSMB_ESTADO END ||'' ''||CASE WHEN CRSMB_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRSMB_FECHA_INSERT END ||'' ''||CASE WHEN CRSMB_USUARIO_INSERT IS NULL THEN '''' ELSE CRSMB_USUARIO_INSERT END ||'' ''||CASE WHEN CRSMB_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRSMB_FECHA_UPDATE END ||'' ''||CASE WHEN CRSMB_USUARIO_UPDATE IS NULL THEN '''' ELSE CRSMB_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_SESION_MIEMBRO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_SESION_MIEMBRO
	WHERE CRSMB_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_SESION_MIEMBRO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_SESION_MIEMBRO
	WHERE CRSMB_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRSMB_CODIGO IS NULL THEN '''' ELSE CRSMB_CODIGO END ||' '||CASE WHEN CRSSC_CODIGO IS NULL THEN '''' ELSE CRSSC_CODIGO END ||' '||CASE WHEN CRMBC_CODIGO IS NULL THEN '''' ELSE CRMBC_CODIGO END ||' '||CASE WHEN CGG_CRMBC_CODIGO IS NULL THEN '''' ELSE CGG_CRMBC_CODIGO END ||' '||CASE WHEN CRSMB_PRESIDENTE IS NULL THEN FALSE ELSE CRSMB_PRESIDENTE END ||' '||CASE WHEN CRSMB_PRESENTE IS NULL THEN FALSE ELSE CRSMB_PRESENTE END ||' '||CASE WHEN CRSMB_ESTADO IS NULL THEN FALSE ELSE CRSMB_ESTADO END ||' '||CASE WHEN CRSMB_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRSMB_FECHA_INSERT END ||' '||CASE WHEN CRSMB_USUARIO_INSERT IS NULL THEN '''' ELSE CRSMB_USUARIO_INSERT END ||' '||CASE WHEN CRSMB_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRSMB_FECHA_UPDATE END ||' '||CASE WHEN CRSMB_USUARIO_UPDATE IS NULL THEN '''' ELSE CRSMB_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_SESION_MIEMBRO
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO ASISTENTE
* @param IN_CGG_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO TITULAR 
* @param IN_CRSMB_PRESIDENTE DETERMINAR EL PRESIDENTE DE LA SESION
* @param IN_CRSMB_PRESENTE DETERMINA SI EL MIEMBRO SE ENCUENTRA PRESENTE EN LA SESION
* @param IN_CRSMB_ESTADO ESTADO DEL REGISTRO
* @param IN_CRSMB_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_UPDATE(
IN IN_CRSMB_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSMB_CODIGO%TYPE, 
IN IN_CRSSC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSSC_CODIGO%TYPE, 
IN IN_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRMBC_CODIGO%TYPE, 
IN IN_CGG_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CGG_CRMBC_CODIGO%TYPE, 
IN IN_CRSMB_PRESIDENTE SII.CGG_RES_SESION_MIEMBRO.CRSMB_PRESIDENTE%TYPE, 
IN IN_CRSMB_PRESENTE SII.CGG_RES_SESION_MIEMBRO.CRSMB_PRESENTE%TYPE, 
IN IN_CRSMB_ESTADO SII.CGG_RES_SESION_MIEMBRO.CRSMB_ESTADO%TYPE, 
IN IN_CRSMB_USUARIO_UPDATE SII.CGG_RES_SESION_MIEMBRO.CRSMB_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
DECLARE
TMP_COUNT INT;
BEGIN
	SELECT COUNT(*) INTO TMP_COUNT FROM SII.CGG_RES_MIEMBRO_COMITE MC 
	WHERE MC.CRMBC_CODIGO = IN_CRMBC_CODIGO AND MC.CRCRG_CODIGO IN (
		(SELECT CRG.CRCRG_CODIGO
		FROM SII.CGG_RES_CARGO_COMITE CRG 
		INNER JOIN SII.CGG_RES_SESION_MIEMBRO SM ON SM.CRSSC_CODIGO = IN_CRSSC_CODIGO
		INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MC ON MC.CRMBC_CODIGO = SM.CRMBC_CODIGO AND 
			MC.CRCRG_CODIGO = CRG.CRCRG_CODIGO AND
			MC.CRMBC_CODIGO != IN_CRMBC_CODIGO)
		UNION
		(SELECT CRG.CRCRG_CODIGO
		FROM SII.CGG_RES_CARGO_COMITE CRG 
		INNER JOIN SII.CGG_RES_SESION_MIEMBRO SM ON SM.CRSSC_CODIGO = IN_CRSSC_CODIGO
		INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MC ON MC.CRMBC_CODIGO = SM.CGG_CRMBC_CODIGO AND 
			MC.CRCRG_CODIGO = CRG.CRCRG_CODIGO AND
			MC.CRMBC_CODIGO != IN_CRMBC_CODIGO)
	);
	
	IF(TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'El cargo seleccionado ya se encuentra representado en el comit&eacute.';
	END IF;
	
	SELECT COUNT(CRSMB_CODIGO) INTO TMP_COUNT
	FROM SII.CGG_RES_SESION_MIEMBRO 
	WHERE CRSSC_CODIGO = IN_CRSSC_CODIGO AND 
		CRSMB_PRESIDENTE AND
		CRSMB_ESTADO AND 
		IN_CRSMB_PRESIDENTE;
	IF(TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'La sesi&oacute;n acutal, ya tiene un presidente.';
	END IF;
	SELECT COUNT(CRSMB_CODIGO) INTO TMP_COUNT
	FROM SII.CGG_RES_SESION_MIEMBRO 
	WHERE CRSSC_CODIGO = IN_CRSSC_CODIGO AND 
		CRSMB_ESTADO AND 
		CRSMB_CODIGO != IN_CRSMB_CODIGO AND
		CRMBC_CODIGO = IN_CRMBC_CODIGO;
	IF(TMP_COUNT > 0) THEN
		RAISE EXCEPTION 'El miembro del comit&eacute; seleccinado ya esta registrado.';
	END IF;
	UPDATE SII.CGG_RES_SESION_MIEMBRO SET
		CRSSC_CODIGO = IN_CRSSC_CODIGO, 
		CRMBC_CODIGO = IN_CRMBC_CODIGO, 
		CGG_CRMBC_CODIGO = IN_CGG_CRMBC_CODIGO, 
		CRSMB_PRESIDENTE = IN_CRSMB_PRESIDENTE, 
		CRSMB_PRESENTE = IN_CRSMB_PRESENTE, 
		CRSMB_ESTADO = IN_CRSMB_ESTADO, 
		CRSMB_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRSMB_USUARIO_UPDATE = IN_CRSMB_USUARIO_UPDATE
	WHERE
		CRSMB_CODIGO = IN_CRSMB_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_SESION_MIEMBRO
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_SELECT(
IN IN_CRSMB_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSMB_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSMB_CODIGO, 
		CRSSC_CODIGO, 
		CRMBC_CODIGO, 
		CGG_CRMBC_CODIGO, 
		CRSMB_PRESIDENTE, 
		CRSMB_PRESENTE, 
		CRSMB_ESTADO, 
		CRSMB_FECHA_INSERT, 
		CRSMB_USUARIO_INSERT, 
		CRSMB_FECHA_UPDATE, 
		CRSMB_USUARIO_UPDATE
	FROM SII.CGG_RES_SESION_MIEMBRO
	WHERE CRSMB_ESTADO = TRUE AND 
		CRSMB_CODIGO = IN_CRSMB_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_SESION_MIEMBRO
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_DELETE(
IN IN_CRSMB_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSMB_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_SESION_MIEMBRO
	WHERE
		CRSMB_CODIGO = IN_CRSMB_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_SESION_MIEMBRO
* @param IN_CRSMB_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION MIEMBRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_DELETE_SOFT(
IN IN_CRSMB_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSMB_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_SESION_MIEMBRO SET
		CRSMB_ESTADO = FALSE
	WHERE
		CRSMB_CODIGO = IN_CRSMB_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_S_CGG_RES_MIEMBRO_COMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SESION_MIEMBRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MIEMBRO_COMITE.
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO ASISTENTE
* @param IN_CGG_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO TITULAR 
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_S_CGG_RES_MIEMBRO_COMITE(
IN IN_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRMBC_CODIGO%TYPE, 
IN IN_CGG_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CGG_CRMBC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSMB_CODIGO, 
		CRSSC_CODIGO, 
		CRMBC_CODIGO, 
		CGG_CRMBC_CODIGO, 
		CRSMB_PRESIDENTE, 
		CRSMB_PRESENTE, 
		CRSMB_ESTADO, 
		CRSMB_FECHA_INSERT, 
		CRSMB_USUARIO_INSERT, 
		CRSMB_FECHA_UPDATE, 
		CRSMB_USUARIO_UPDATE
	FROM SII.CGG_RES_SESION_MIEMBRO
	WHERE CRSMB_ESTADO = TRUE AND 
		CRMBC_CODIGO = IN_CRMBC_CODIGO AND 
		CGG_CRMBC_CODIGO = IN_CGG_CRMBC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_D_CGG_RES_MIEMBRO_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SESION_MIEMBRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MIEMBRO_COMITE.
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO ASISTENTE
* @param IN_CGG_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO TITULAR 
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_D_CGG_RES_MIEMBRO_COMITE(
IN IN_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRMBC_CODIGO%TYPE, 
IN IN_CGG_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CGG_CRMBC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_SESION_MIEMBRO
	WHERE
		CRMBC_CODIGO = IN_CRMBC_CODIGO AND 
		CGG_CRMBC_CODIGO = IN_CGG_CRMBC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_D_CGG_RES_MIEMBRO_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SESION_MIEMBRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_MIEMBRO_COMITE.
* @param IN_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO ASISTENTE
* @param IN_CGG_CRMBC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE MIEMBRO TITULAR 
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_DS_CGG_RES_MIEMBRO_COMITE(
IN IN_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRMBC_CODIGO%TYPE, 
IN IN_CGG_CRMBC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CGG_CRMBC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_SESION_MIEMBRO SET
		crsmb_estado = false
	WHERE
		CRMBC_CODIGO = IN_CRMBC_CODIGO AND 
		CGG_CRMBC_CODIGO = IN_CGG_CRMBC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_S_CGG_RES_SESION_COMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SESION_MIEMBRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_S_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSSC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRSMB_CODIGO, 
		CRSSC_CODIGO, 
		CRMBC_CODIGO, 
		CGG_CRMBC_CODIGO, 
		CRSMB_PRESIDENTE, 
		CRSMB_PRESENTE, 
		CRSMB_ESTADO, 
		CRSMB_FECHA_INSERT, 
		CRSMB_USUARIO_INSERT, 
		CRSMB_FECHA_UPDATE, 
		CRSMB_USUARIO_UPDATE
	FROM SII.CGG_RES_SESION_MIEMBRO
	WHERE CRSMB_ESTADO = TRUE AND 
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_D_CGG_RES_SESION_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SESION_MIEMBRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_D_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSSC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_SESION_MIEMBRO
	WHERE
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_D_CGG_RES_SESION_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_SESION_MIEMBRO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_DS_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_SESION_MIEMBRO.CRSSC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_SESION_MIEMBRO SET
		crsmb_estado = false
	WHERE
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_SESION_MIEMBRO
* @PARAM IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @PARAM IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @PARAM IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @PARAM IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @PARAM IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @PARAM IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @PARAM IN_CRCOM_CODIGO CODIGO DEL COMITE
* @RETURN REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CRCOM_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		SM.CRSMB_CODIGO, 
		SM.CRSSC_CODIGO, 
		(SELECT CRSSC_NUMERO_SESION FROM SII.CGG_RES_SESION_COMITE WHERE CRSSC_CODIGO = SM.CRSSC_CODIGO) SESION,
		SC.CRSSC_ESTADO_CONVOCATORIA,
		SM.CRMBC_CODIGO, 
		(SELECT CRPER_NOMBRES||'' '' || CRPER_APELLIDO_PATERNO||'' ''|| CRPER_APELLIDO_MATERNO||'' (''||US.CUSU_NOMBRE_USUARIO||'')'' FROM CGG_RES_PERSONA PR
		INNER JOIN SII.CGG_USUARIO US ON (US.CRPER_CODIGO = PR.CRPER_CODIGO)
		INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MC ON (MC.CUSU_CODIGO = US.CUSU_CODIGO)
		WHERE SM.CRMBC_CODIGO = MC.CRMBC_CODIGO) PRINCIPAL,
		SM.CGG_CRMBC_CODIGO, 
		(SELECT CRPER_NOMBRES||'' '' || CRPER_APELLIDO_PATERNO||'' ''|| CRPER_APELLIDO_MATERNO||'' (''||US.CUSU_NOMBRE_USUARIO||'')'' FROM CGG_RES_PERSONA PR
		INNER JOIN SII.CGG_USUARIO US ON (US.CRPER_CODIGO = PR.CRPER_CODIGO)
		INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MC ON (MC.CUSU_CODIGO = US.CUSU_CODIGO)
		WHERE SM.CGG_CRMBC_CODIGO = MC.CRMBC_CODIGO) SUPLENTE,
		SM.CRSMB_PRESIDENTE, 
		SM.CRSMB_PRESENTE, 
		SM.CRSMB_ESTADO, 
		SM.CRSMB_FECHA_INSERT, 
		SM.CRSMB_USUARIO_INSERT, 
		SM.CRSMB_FECHA_UPDATE, 
		SM.CRSMB_USUARIO_UPDATE
	FROM SII.CGG_RES_SESION_MIEMBRO SM
	INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MCT ON (MCT.CRMBC_CODIGO = SM.CRMBC_CODIGO)
	INNER JOIN SII.CGG_RES_CARGO_COMITE CT ON (CT.CRCRG_CODIGO = MCT.CRCRG_CODIGO)
	INNER JOIN SII.CGG_RES_COMITE CM ON (CM.CRCOM_CODIGO = CT.CRCOM_CODIGO)	
	INNER JOIN SII.CGG_RES_SESION_COMITE SC ON (SC.CRSSC_CODIGO=SM.CRSSC_CODIGO)
	WHERE CRSMB_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN SM.CRSMB_CODIGO IS NULL THEN '''' ELSE SM.CRSMB_CODIGO END ||'' ''||
	CASE WHEN SM.CRSSC_CODIGO IS NULL THEN '''' ELSE SM.CRSSC_CODIGO END ||'' ''||
	CASE WHEN SM.CRMBC_CODIGO IS NULL THEN '''' ELSE SM.CRMBC_CODIGO END ||'' ''||
	CASE WHEN SM.CGG_CRMBC_CODIGO IS NULL THEN '''' ELSE SM.CGG_CRMBC_CODIGO END ||'' ''||
	CASE WHEN SM.CRSMB_PRESIDENTE IS NULL THEN FALSE ELSE SM.CRSMB_PRESIDENTE END ||'' ''||
	CASE WHEN SM.CRSMB_PRESENTE IS NULL THEN FALSE ELSE SM.CRSMB_PRESENTE END ||'' ''||
	CASE WHEN SM.CRSMB_ESTADO IS NULL THEN FALSE ELSE SM.CRSMB_ESTADO END ||'' ''||
	CASE WHEN SM.CRSMB_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE SM.CRSMB_FECHA_INSERT END ||'' ''||
	CASE WHEN SM.CRSMB_USUARIO_INSERT IS NULL THEN '''' ELSE SM.CRSMB_USUARIO_INSERT END ||'' ''||
	CASE WHEN SM.CRSMB_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE SM.CRSMB_FECHA_UPDATE END ||'' ''||
	CASE WHEN SM.CRSMB_USUARIO_UPDATE IS NULL THEN '''' ELSE SM.CRSMB_USUARIO_UPDATE END ) = 1
	AND SC.CRSSC_ESTADO_CONVOCATORIA = 3
	AND CM.CRCOM_CODIGO ='''||IN_CRCOM_CODIGO||'''
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_SESION_MIEMBRO
* @PARAM IN_CRCOM_CODIGO CODIGO DEL COMITE
* @RETURN INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_COUNT(
IN IN_CRCOM_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_SESION_MIEMBRO SM
	INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MCT ON (MCT.CRMBC_CODIGO = SM.CRMBC_CODIGO)
	INNER JOIN SII.CGG_RES_CARGO_COMITE CT ON (CT.CRCRG_CODIGO = MCT.CRCRG_CODIGO)
	INNER JOIN SII.CGG_RES_COMITE CM ON (CM.CRCOM_CODIGO = CT.CRCOM_CODIGO)	
	INNER JOIN SII.CGG_RES_SESION_COMITE SC ON (SC.CRSSC_CODIGO=SM.CRSSC_CODIGO)
	WHERE CRSMB_ESTADO = TRUE
	AND SC.CRSSC_ESTADO_CONVOCATORIA = 3
	AND CM.CRCOM_CODIGO =IN_CRCOM_CODIGO;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_SESION_MIEMBRO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_SESION_MIEMBRO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @PARAM IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @PARAM IN_CRCOM_CODIGO CODIGO DEL COMITE
* @RETURN TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_SESION_MIEMBRO_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_CRCOM_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_SESION_MIEMBRO SM
	INNER JOIN SII.CGG_RES_MIEMBRO_COMITE MCT ON (MCT.CRMBC_CODIGO = SM.CRMBC_CODIGO)
	INNER JOIN SII.CGG_RES_CARGO_COMITE CT ON (CT.CRCRG_CODIGO = MCT.CRCRG_CODIGO)
	INNER JOIN SII.CGG_RES_COMITE CM ON (CM.CRCOM_CODIGO = CT.CRCOM_CODIGO)	
	INNER JOIN SII.CGG_RES_SESION_COMITE SC ON (SC.CRSSC_CODIGO=SM.CRSSC_CODIGO)
	WHERE CRSMB_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRSMB_CODIGO IS NULL THEN '''' ELSE CRSMB_CODIGO END ||' '||
	CASE WHEN CRSSC_CODIGO IS NULL THEN '''' ELSE CRSSC_CODIGO END ||' '||CASE WHEN CRMBC_CODIGO IS NULL THEN '''' ELSE CRMBC_CODIGO END ||' '||
	CASE WHEN CGG_CRMBC_CODIGO IS NULL THEN '''' ELSE CGG_CRMBC_CODIGO END ||' '||
	CASE WHEN CRSMB_PRESIDENTE IS NULL THEN FALSE ELSE CRSMB_PRESIDENTE END ||' '||
	CASE WHEN CRSMB_PRESENTE IS NULL THEN FALSE ELSE CRSMB_PRESENTE END ||' '||
	CASE WHEN CRSMB_ESTADO IS NULL THEN FALSE ELSE CRSMB_ESTADO END ||' '||
	CASE WHEN CRSMB_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRSMB_FECHA_INSERT END ||' '||
	CASE WHEN CRSMB_USUARIO_INSERT IS NULL THEN '''' ELSE CRSMB_USUARIO_INSERT END ||' '||
	CASE WHEN CRSMB_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRSMB_FECHA_UPDATE END ||' '||
	CASE WHEN CRSMB_USUARIO_UPDATE IS NULL THEN '''' ELSE CRSMB_USUARIO_UPDATE END ) = 1
	AND SC.CRSSC_ESTADO_CONVOCATORIA = 3
	AND CM.CRCOM_CODIGO =IN_CRCOM_CODIGO;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;
