/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_FASE_USUARIO
* @param IN_CRFSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE UNA FASE CON SU USUARIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CRFSU_ACTIVO DETERMINA SI EL USUARIO ASIGNADO A LA FASE SE HALLA APTO PARA ATENDERLA
* @param IN_CRFSU_ESTADO ESTADO DEL REGISTRO
* @param IN_CRFSU_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRFSU_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_INSERT(
IN IN_CRFSU_CODIGO SII.CGG_RES_FASE_USUARIO.CRFSU_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_FASE_USUARIO.CUSU_CODIGO%TYPE, 
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE_USUARIO.CRFAS_CODIGO%TYPE, 
IN IN_CRFSU_ACTIVO SII.CGG_RES_FASE_USUARIO.CRFSU_ACTIVO%TYPE, 
IN IN_CRFSU_ESTADO SII.CGG_RES_FASE_USUARIO.CRFSU_ESTADO%TYPE, 
IN IN_CRFSU_USUARIO_INSERT SII.CGG_RES_FASE_USUARIO.CRFSU_USUARIO_INSERT%TYPE, 
IN IN_CRFSU_USUARIO_UPDATE SII.CGG_RES_FASE_USUARIO.CRFSU_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRFSU_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_FASE_USUARIO','CRFSU_CODIGO','CRFSU') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRFSU_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_FASE_USUARIO(
		CRFSU_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_CODIGO, 
		CRFSU_ACTIVO, 
		CRFSU_ESTADO, 
		CRFSU_FECHA_INSERT, 
		CRFSU_USUARIO_INSERT, 
		CRFSU_FECHA_UPDATE, 
		CRFSU_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CUSU_CODIGO, 
		IN_CRFAS_CODIGO, 
		IN_CRFSU_ACTIVO, 
		IN_CRFSU_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRFSU_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRFSU_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_FASE_USUARIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFSU_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_CODIGO, 
		CRFSU_ACTIVO, 
		CRFSU_ESTADO, 
		CRFSU_FECHA_INSERT, 
		CRFSU_USUARIO_INSERT, 
		CRFSU_FECHA_UPDATE, 
		CRFSU_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE_USUARIO
	WHERE CRFSU_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_RES_FASE_USUARIO__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_FASE_USUARIO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRFSU_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_CODIGO, 
		CRFSU_ACTIVO, 
		CRFSU_ESTADO, 
		CRFSU_FECHA_INSERT, 
		CRFSU_USUARIO_INSERT, 
		CRFSU_FECHA_UPDATE, 
		CRFSU_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE_USUARIO
	WHERE CRFSU_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRFSU_CODIGO IS NULL THEN '''' ELSE CRFSU_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CRFAS_CODIGO IS NULL THEN '''' ELSE CRFAS_CODIGO END ||'' ''||CASE WHEN CRFSU_ACTIVO IS NULL THEN FALSE ELSE CRFSU_ACTIVO END ||'' ''||CASE WHEN CRFSU_ESTADO IS NULL THEN FALSE ELSE CRFSU_ESTADO END ||'' ''||CASE WHEN CRFSU_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRFSU_FECHA_INSERT END ||'' ''||CASE WHEN CRFSU_USUARIO_INSERT IS NULL THEN '''' ELSE CRFSU_USUARIO_INSERT END ||'' ''||CASE WHEN CRFSU_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRFSU_FECHA_UPDATE END ||'' ''||CASE WHEN CRFSU_USUARIO_UPDATE IS NULL THEN '''' ELSE CRFSU_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_FASE_USUARIO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_FASE_USUARIO
	WHERE CRFSU_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_FASE_USUARIO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_FASE_USUARIO
	WHERE CRFSU_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRFSU_CODIGO IS NULL THEN '''' ELSE CRFSU_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CRFAS_CODIGO IS NULL THEN '''' ELSE CRFAS_CODIGO END ||' '||CASE WHEN CRFSU_ACTIVO IS NULL THEN FALSE ELSE CRFSU_ACTIVO END ||' '||CASE WHEN CRFSU_ESTADO IS NULL THEN FALSE ELSE CRFSU_ESTADO END ||' '||CASE WHEN CRFSU_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRFSU_FECHA_INSERT END ||' '||CASE WHEN CRFSU_USUARIO_INSERT IS NULL THEN '''' ELSE CRFSU_USUARIO_INSERT END ||' '||CASE WHEN CRFSU_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRFSU_FECHA_UPDATE END ||' '||CASE WHEN CRFSU_USUARIO_UPDATE IS NULL THEN '''' ELSE CRFSU_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_FASE_USUARIO
* @param IN_CRFSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE UNA FASE CON SU USUARIO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CRFSU_ACTIVO DETERMINA SI EL USUARIO ASIGNADO A LA FASE SE HALLA APTO PARA ATENDERLA
* @param IN_CRFSU_ESTADO ESTADO DEL REGISTRO
* @param IN_CRFSU_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_UPDATE(
IN IN_CRFSU_CODIGO SII.CGG_RES_FASE_USUARIO.CRFSU_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_FASE_USUARIO.CUSU_CODIGO%TYPE, 
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE_USUARIO.CRFAS_CODIGO%TYPE, 
IN IN_CRFSU_ACTIVO SII.CGG_RES_FASE_USUARIO.CRFSU_ACTIVO%TYPE, 
IN IN_CRFSU_ESTADO SII.CGG_RES_FASE_USUARIO.CRFSU_ESTADO%TYPE, 
IN IN_CRFSU_USUARIO_UPDATE SII.CGG_RES_FASE_USUARIO.CRFSU_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE_USUARIO SET
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CRFAS_CODIGO = IN_CRFAS_CODIGO, 
		CRFSU_ACTIVO = IN_CRFSU_ACTIVO, 
		CRFSU_ESTADO = IN_CRFSU_ESTADO, 
		CRFSU_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRFSU_USUARIO_UPDATE = IN_CRFSU_USUARIO_UPDATE
	WHERE
		CRFSU_CODIGO = IN_CRFSU_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_FASE_USUARIO
* @param IN_CRFSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE UNA FASE CON SU USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_SELECT(
IN IN_CRFSU_CODIGO SII.CGG_RES_FASE_USUARIO.CRFSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFSU_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_CODIGO, 
		CRFSU_ACTIVO, 
		CRFSU_ESTADO, 
		CRFSU_FECHA_INSERT, 
		CRFSU_USUARIO_INSERT, 
		CRFSU_FECHA_UPDATE, 
		CRFSU_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE_USUARIO
	WHERE CRFSU_ESTADO = TRUE AND 
		CRFSU_CODIGO = IN_CRFSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_FASE_USUARIO
* @param IN_CRFSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE UNA FASE CON SU USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_DELETE(
IN IN_CRFSU_CODIGO SII.CGG_RES_FASE_USUARIO.CRFSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_FASE_USUARIO
	WHERE
		CRFSU_CODIGO = IN_CRFSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_FASE_USUARIO
* @param IN_CRFSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE UNA FASE CON SU USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_DELETE_SOFT(
IN IN_CRFSU_CODIGO SII.CGG_RES_FASE_USUARIO.CRFSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE_USUARIO SET
		CRFSU_ESTADO = FALSE
	WHERE
		CRFSU_CODIGO = IN_CRFSU_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_FASE_USUARIO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFSU_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_CODIGO, 
		CRFSU_ACTIVO, 
		CRFSU_ESTADO, 
		CRFSU_FECHA_INSERT, 
		CRFSU_USUARIO_INSERT, 
		CRFSU_FECHA_UPDATE, 
		CRFSU_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE_USUARIO
	WHERE CRFSU_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_FASE_USUARIO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_FASE_USUARIO
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_FASE_USUARIO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE_USUARIO SET
		crfsu_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_S_CGG_RES_FASE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_S_CGG_RES_FASE(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE_USUARIO.CRFAS_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFSU_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_CODIGO, 
		CRFSU_ACTIVO, 
		CRFSU_ESTADO, 
		CRFSU_FECHA_INSERT, 
		CRFSU_USUARIO_INSERT, 
		CRFSU_FECHA_UPDATE, 
		CRFSU_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE_USUARIO
	WHERE CRFSU_ESTADO = TRUE AND 
		CRFAS_CODIGO = IN_CRFAS_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_D_CGG_RES_FASE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_D_CGG_RES_FASE(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE_USUARIO.CRFAS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_FASE_USUARIO
	WHERE
		CRFAS_CODIGO = IN_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_USUARIO_D_CGG_RES_FASE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE_USUARIO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_USUARIO_DS_CGG_RES_FASE(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE_USUARIO.CRFAS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE_USUARIO SET
		crfsu_estado = false
	WHERE
		CRFAS_CODIGO = IN_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*SELECCIONA EL CODIGO DEL PRIMER USUARIO DE UNA FASE.
*@param IN_CRFAS_CODIGO CODIGO DE FASE.
*@param IN_CISLA_CODIGO IDENTIFICATIVO UNICO DE ISLA.
*@return CODIGO DE USUARIO.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_PRIMER_USUARIO(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE_USUARIO.CRFAS_CODIGO%TYPE,
IN IN_CISLA_CODIGO SII.CGG_ISLA.CISLA_CODIGO%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	CUSUCODIGO VARCHAR;
BEGIN
	CUSUCODIGO := '';
	SELECT		
		 COALESCE(FU.CUSU_CODIGO,'') INTO CUSUCODIGO				
	FROM SII.CGG_RES_FASE_USUARIO FU
	INNER JOIN SII.CGG_USUARIO U ON (FU.CUSU_CODIGO = U.CUSU_CODIGO AND U.CUSU_ACTIVO AND U.CUSU_ESTADO)
	WHERE FU.CRFSU_ESTADO = TRUE AND CRPER_CODIGO IS NOT NULL AND
		U.CISLA_CODIGO = IN_CISLA_CODIGO AND
		FU.CRFSU_ACTIVO AND
		CRFAS_CODIGO = IN_CRFAS_CODIGO
	LIMIT 1;	
	RETURN CUSUCODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*SELECCIONA LOS USUARIO DE UNA FASE POR SU ISLA.
*@param IN_CRFAS_CODIGO CODIGO DE FASE.
*@param IN_CISLA_CODIGO CODIGO DE ISLA.
*@return CODIGO DE USUARIO.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_TODOS_USUARIO(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE_USUARIO.CRFAS_CODIGO%TYPE,
IN IN_CISLA_CODIGO SII.CGG_ISLA.CISLA_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;	
BEGIN
	OPEN TMP_REF FOR
	SELECT				 
		FU.CUSU_CODIGO, 							
		SII.F_CGG_USUARIO_NOMBRE_PERSONA(U.CUSU_CODIGO) CRPER_NOMBRES,
		U.CUSU_NOMBRE_USUARIO
	FROM SII.CGG_RES_FASE_USUARIO FU
	INNER JOIN SII.CGG_USUARIO U ON (FU.CUSU_CODIGO = U.CUSU_CODIGO)
	WHERE FU.CRFSU_ESTADO = TRUE AND 
		U.CISLA_CODIGO = IN_CISLA_CODIGO AND
		FU.CRFSU_ACTIVO AND
		CRFAS_CODIGO = IN_CRFAS_CODIGO	;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;