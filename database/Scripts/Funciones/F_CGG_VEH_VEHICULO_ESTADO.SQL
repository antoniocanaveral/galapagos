/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_VEH_VEHICULO_ESTADO
* @param IN_CVSVH_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VEHICULO ESTADO
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @param IN_CVSVM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ESTADO VEHICULO MOTOR
* @param IN_CVSVH_FECHA FECHA DE INICIO DEL ESTADO
* @param IN_CVSVH_OBSERVACION INFORMACION ADICIONAL
* @param IN_CVSVH_ESTADO ESTADO DEL REGISTRO
* @param IN_CVSVH_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CVSVH_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_INSERT(
IN IN_CVSVH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_CODIGO%TYPE,
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVVEH_CODIGO%TYPE,
IN IN_CVSVM_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVM_CODIGO%TYPE,
IN IN_CVSVH_FECHA SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_FECHA%TYPE,
IN IN_CVSVH_OBSERVACION SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_OBSERVACION%TYPE,
IN IN_CVSVH_ESTADO SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_ESTADO%TYPE,
IN IN_CVSVH_USUARIO_INSERT SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CVSVH_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_VEH_VEHICULO_ESTADO','CVSVH_CODIGO','CVSVH') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CVSVH_CODIGO;
	END IF;
	INSERT INTO SII.CGG_VEH_VEHICULO_ESTADO(
		CVSVH_CODIGO, 
		CVVEH_CODIGO, 
		CVSVM_CODIGO, 
		CVSVH_FECHA, 
		CVSVH_OBSERVACION, 
		CVSVH_ESTADO, 
		CVSVH_FECHA_INSERT, 
		CVSVH_USUARIO_INSERT, 
		CVSVH_FECHA_UPDATE, 
		CVSVH_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CVVEH_CODIGO, 
		IN_CVSVM_CODIGO, 
		IN_CVSVH_FECHA, 
		IN_CVSVH_OBSERVACION, 
		IN_CVSVH_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CVSVH_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CVSVH_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVSVH_CODIGO, 
		CVVEH_CODIGO, 
		CVSVM_CODIGO, 
		CVSVH_FECHA, 
		CVSVH_OBSERVACION, 
		CVSVH_ESTADO, 
		CVSVH_FECHA_INSERT, 
		CVSVH_USUARIO_INSERT, 
		CVSVH_FECHA_UPDATE, 
		CVSVH_USUARIO_UPDATE
	FROM SII.CGG_VEH_VEHICULO_ESTADO
	WHERE CVSVH_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CVSVH_CODIGO, 
		CVVEH_CODIGO, 
		CVSVM_CODIGO, 
		CVSVH_FECHA, 
		CVSVH_OBSERVACION, 
		CVSVH_ESTADO, 
		CVSVH_FECHA_INSERT, 
		CVSVH_USUARIO_INSERT, 
		CVSVH_FECHA_UPDATE, 
		CVSVH_USUARIO_UPDATE
	FROM SII.CGG_VEH_VEHICULO_ESTADO
	WHERE CVSVH_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CVSVH_FECHA, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVSVH_OBSERVACION, '''')||'' ''||COALESCE(CVSVH_ESTADO, FALSE)||'' ''||COALESCE(CVSVH_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVSVH_USUARIO_INSERT, '''')||'' ''||COALESCE(CVSVH_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CVSVH_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_VEHICULO_ESTADO
	WHERE CVSVH_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_VEH_VEHICULO_ESTADO
	WHERE CVSVH_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CVSVH_FECHA, CURRENT_TIMESTAMP)||' '||COALESCE(CVSVH_OBSERVACION, '''')||' '||COALESCE(CVSVH_ESTADO, FALSE)||' '||COALESCE(CVSVH_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CVSVH_USUARIO_INSERT, '''')||' '||COALESCE(CVSVH_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CVSVH_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_VEH_VEHICULO_ESTADO
* @param IN_CVSVH_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VEHICULO ESTADO
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @param IN_CVSVM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ESTADO VEHICULO MOTOR
* @param IN_CVSVH_FECHA FECHA DE INICIO DEL ESTADO
* @param IN_CVSVH_OBSERVACION INFORMACION ADICIONAL
* @param IN_CVSVH_ESTADO ESTADO DEL REGISTRO
* @param IN_CVSVH_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_UPDATE(
IN IN_CVSVH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_CODIGO%TYPE,
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVVEH_CODIGO%TYPE,
IN IN_CVSVM_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVM_CODIGO%TYPE,
IN IN_CVSVH_FECHA SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_FECHA%TYPE,
IN IN_CVSVH_OBSERVACION SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_OBSERVACION%TYPE,
IN IN_CVSVH_ESTADO SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_ESTADO%TYPE,
IN IN_CVSVH_USUARIO_UPDATE SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_VEHICULO_ESTADO SET
		CVVEH_CODIGO = IN_CVVEH_CODIGO, 
		CVSVM_CODIGO = IN_CVSVM_CODIGO, 
		CVSVH_FECHA = IN_CVSVH_FECHA, 
		CVSVH_OBSERVACION = IN_CVSVH_OBSERVACION, 
		CVSVH_ESTADO = IN_CVSVH_ESTADO, 
		CVSVH_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CVSVH_USUARIO_UPDATE = IN_CVSVH_USUARIO_UPDATE
	WHERE
		CVSVH_CODIGO = IN_CVSVH_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_VEH_VEHICULO_ESTADO
* @param IN_CVSVH_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VEHICULO ESTADO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_SELECT(
IN IN_CVSVH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVSVH_CODIGO, 
		CVVEH_CODIGO, 
		CVSVM_CODIGO, 
		CVSVH_FECHA, 
		CVSVH_OBSERVACION, 
		CVSVH_ESTADO, 
		CVSVH_FECHA_INSERT, 
		CVSVH_USUARIO_INSERT, 
		CVSVH_FECHA_UPDATE, 
		CVSVH_USUARIO_UPDATE
	FROM SII.CGG_VEH_VEHICULO_ESTADO
	WHERE CVSVH_ESTADO = TRUE AND 
		CVSVH_CODIGO = IN_CVSVH_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_VEH_VEHICULO_ESTADO
* @param IN_CVSVH_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VEHICULO ESTADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_DELETE(
IN IN_CVSVH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_VEHICULO_ESTADO
	WHERE
		CVSVH_CODIGO = IN_CVSVH_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_VEH_VEHICULO_ESTADO
* @param IN_CVSVH_CODIGO IDENTIFICATIVO UNICO DE REGISTRO VEHICULO ESTADO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_DELETE_SOFT(
IN IN_CVSVH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVH_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_VEHICULO_ESTADO SET
		CVSVH_ESTADO = FALSE
	WHERE
		CVSVH_CODIGO = IN_CVSVH_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_S_CGG_VEH_VEHICULO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_VEHICULO.
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_S_CGG_VEH_VEHICULO(
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVVEH_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		VS.CVSVH_CODIGO, 
		VS.CVVEH_CODIGO, 
		VS.CVSVM_CODIGO, 
		ST.CVSVM_NOMBRE ESTADO,
		VS.CVSVH_FECHA, 
		VS.CVSVH_OBSERVACION, 
		VS.CVSVH_ESTADO, 
		VS.CVSVH_FECHA_INSERT, 
		VS.CVSVH_USUARIO_INSERT, 
		VS.CVSVH_FECHA_UPDATE, 
		VS.CVSVH_USUARIO_UPDATE
	FROM SII.CGG_VEH_VEHICULO_ESTADO VS
	INNER JOIN SII.CGG_VEH_ESTADO_VHMT ST ON ST.CVSVM_CODIGO = VS.CVSVM_CODIGO
	WHERE CVSVH_ESTADO AND 
		CVVEH_CODIGO = IN_CVVEH_CODIGO
	ORDER BY VS.CVSVH_FECHA DESC;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_D_CGG_VEH_VEHICULO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_VEHICULO.
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_D_CGG_VEH_VEHICULO(
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVVEH_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_VEHICULO_ESTADO
	WHERE
		CVVEH_CODIGO = IN_CVVEH_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_D_CGG_VEH_VEHICULO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_VEHICULO.
* @param IN_CVVEH_CODIGO IDENTIFICADOR UNICO DE REGISTRO DE VEHICULO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_DS_CGG_VEH_VEHICULO(
IN IN_CVVEH_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVVEH_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_VEHICULO_ESTADO SET
		cvsvh_estado = false
	WHERE
		CVVEH_CODIGO = IN_CVVEH_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_S_CGG_VEH_ESTADO_VHMT
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_ESTADO_VHMT.
* @param IN_CVSVM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ESTADO VEHICULO MOTOR
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_S_CGG_VEH_ESTADO_VHMT(
IN IN_CVSVM_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVM_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CVSVH_CODIGO, 
		CVVEH_CODIGO, 
		CVSVM_CODIGO, 
		CVSVH_FECHA, 
		CVSVH_OBSERVACION, 
		CVSVH_ESTADO, 
		CVSVH_FECHA_INSERT, 
		CVSVH_USUARIO_INSERT, 
		CVSVH_FECHA_UPDATE, 
		CVSVH_USUARIO_UPDATE
	FROM SII.CGG_VEH_VEHICULO_ESTADO
	WHERE CVSVH_ESTADO = TRUE AND 
		CVSVM_CODIGO = IN_CVSVM_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_D_CGG_VEH_ESTADO_VHMT
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_ESTADO_VHMT.
* @param IN_CVSVM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ESTADO VEHICULO MOTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_D_CGG_VEH_ESTADO_VHMT(
IN IN_CVSVM_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_VEH_VEHICULO_ESTADO
	WHERE
		CVSVM_CODIGO = IN_CVSVM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_VEH_VEHICULO_ESTADO_D_CGG_VEH_ESTADO_VHMT
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_VEH_VEHICULO_ESTADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_VEH_ESTADO_VHMT.
* @param IN_CVSVM_CODIGO IDENTIFICATIVO UNICO DE REGISTRO ESTADO VEHICULO MOTOR
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_VEH_VEHICULO_ESTADO_DS_CGG_VEH_ESTADO_VHMT(
IN IN_CVSVM_CODIGO SII.CGG_VEH_VEHICULO_ESTADO.CVSVM_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_VEH_VEHICULO_ESTADO SET
		cvsvh_estado = false
	WHERE
		CVSVM_CODIGO = IN_CVSVM_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

