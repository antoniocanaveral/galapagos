/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_SEC_USUARIO_CONTACTO
* @param IN_CSUCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CONTACTO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @param IN_CSUCT_CONTACTO INFORMACION DE LOCALIZACION
* @param IN_CSUCT_OBSERVACION INFORMACION ADICIONAL
* @param IN_CSUCT_ESTADO ESTADO DEL REGISTRO
* @param IN_CSUCT_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CSUCT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_INSERT(
IN IN_CSUCT_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_CODIGO%TYPE,
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CUSU_CODIGO%TYPE,
IN IN_CRTCO_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CRTCO_CODIGO%TYPE,
IN IN_CSUCT_CONTACTO SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_CONTACTO%TYPE,
IN IN_CSUCT_OBSERVACION SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_OBSERVACION%TYPE,
IN IN_CSUCT_ESTADO SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_ESTADO%TYPE,
IN IN_CSUCT_USUARIO_INSERT SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CSUCT_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_SEC_USUARIO_CONTACTO','CSUCT_CODIGO','CSUCT') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CSUCT_CODIGO;
	END IF;
	INSERT INTO SII.CGG_SEC_USUARIO_CONTACTO(
		CSUCT_CODIGO, 
		CUSU_CODIGO, 
		CRTCO_CODIGO, 
		CSUCT_CONTACTO, 
		CSUCT_OBSERVACION, 
		CSUCT_ESTADO, 
		CSUCT_FECHA_INSERT, 
		CSUCT_USUARIO_INSERT, 
		CSUCT_FECHA_UPDATE, 
		CSUCT_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CUSU_CODIGO, 
		IN_CRTCO_CODIGO, 
		IN_CSUCT_CONTACTO, 
		IN_CSUCT_OBSERVACION, 
		IN_CSUCT_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CSUCT_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CSUCT_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSUCT_CODIGO, 
		CUSU_CODIGO, 
		CRTCO_CODIGO, 
		CSUCT_CONTACTO, 
		CSUCT_OBSERVACION, 
		CSUCT_ESTADO, 
		CSUCT_FECHA_INSERT, 
		CSUCT_USUARIO_INSERT, 
		CSUCT_FECHA_UPDATE, 
		CSUCT_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_CONTACTO
	WHERE CSUCT_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CUSU_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		UCN.CSUCT_CODIGO, 
		UCN.CUSU_CODIGO, 
		UCN.CRTCO_CODIGO, 
		TCN.CRTCO_NOMBRE,
		UCN.CSUCT_CONTACTO, 
		UCN.CSUCT_OBSERVACION, 
		UCN.CSUCT_ESTADO, 
		UCN.CSUCT_FECHA_INSERT, 
		UCN.CSUCT_USUARIO_INSERT, 
		UCN.CSUCT_FECHA_UPDATE, 
		UCN.CSUCT_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_CONTACTO UCN
	INNER JOIN SII.CGG_RES_TIPO_CONTACTO TCN ON TCN.CRTCO_CODIGO = UCN.CRTCO_CODIGO
	WHERE CSUCT_ESTADO AND 
		UCN.CUSU_CODIGO = '||QUOTE_LITERAL(IN_CUSU_CODIGO)||' AND 
		(LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CSUCT_CONTACTO, '''')||'' ''||COALESCE(CSUCT_OBSERVACION, '''')) = 1)
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_USUARIO_CONTACTO
	WHERE CSUCT_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_CUSU_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_SEC_USUARIO_CONTACTO UCN
	INNER JOIN SII.CGG_RES_TIPO_CONTACTO TCN ON TCN.CRTCO_CODIGO = UCN.CRTCO_CODIGO
	WHERE CSUCT_ESTADO AND 
		UCN.CUSU_CODIGO = IN_CUSU_CODIGO AND 
		(SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CSUCT_CONTACTO, '')||' '||COALESCE(CSUCT_OBSERVACION, '')) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_SEC_USUARIO_CONTACTO
* @param IN_CSUCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CONTACTO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @param IN_CSUCT_CONTACTO INFORMACION DE LOCALIZACION
* @param IN_CSUCT_OBSERVACION INFORMACION ADICIONAL
* @param IN_CSUCT_ESTADO ESTADO DEL REGISTRO
* @param IN_CSUCT_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_UPDATE(
IN IN_CSUCT_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_CODIGO%TYPE,
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CUSU_CODIGO%TYPE,
IN IN_CRTCO_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CRTCO_CODIGO%TYPE,
IN IN_CSUCT_CONTACTO SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_CONTACTO%TYPE,
IN IN_CSUCT_OBSERVACION SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_OBSERVACION%TYPE,
IN IN_CSUCT_ESTADO SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_ESTADO%TYPE,
IN IN_CSUCT_USUARIO_UPDATE SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_USUARIO_CONTACTO SET
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CRTCO_CODIGO = IN_CRTCO_CODIGO, 
		CSUCT_CONTACTO = IN_CSUCT_CONTACTO, 
		CSUCT_OBSERVACION = IN_CSUCT_OBSERVACION, 
		CSUCT_ESTADO = IN_CSUCT_ESTADO, 
		CSUCT_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CSUCT_USUARIO_UPDATE = IN_CSUCT_USUARIO_UPDATE
	WHERE
		CSUCT_CODIGO = IN_CSUCT_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_SEC_USUARIO_CONTACTO
* @param IN_CSUCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CONTACTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_SELECT(
IN IN_CSUCT_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSUCT_CODIGO, 
		CUSU_CODIGO, 
		CRTCO_CODIGO, 
		CSUCT_CONTACTO, 
		CSUCT_OBSERVACION, 
		CSUCT_ESTADO, 
		CSUCT_FECHA_INSERT, 
		CSUCT_USUARIO_INSERT, 
		CSUCT_FECHA_UPDATE, 
		CSUCT_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_CONTACTO
	WHERE CSUCT_ESTADO = TRUE AND 
		CSUCT_CODIGO = IN_CSUCT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_SEC_USUARIO_CONTACTO
* @param IN_CSUCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CONTACTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_DELETE(
IN IN_CSUCT_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_USUARIO_CONTACTO
	WHERE
		CSUCT_CODIGO = IN_CSUCT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_SEC_USUARIO_CONTACTO
* @param IN_CSUCT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO CONTACTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_DELETE_SOFT(
IN IN_CSUCT_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CSUCT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_USUARIO_CONTACTO SET
		CSUCT_ESTADO = FALSE
	WHERE
		CSUCT_CODIGO = IN_CSUCT_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_S_CGG_RES_TIPO_CONTACTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_CONTACTO.
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_S_CGG_RES_TIPO_CONTACTO(
IN IN_CRTCO_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CRTCO_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSUCT_CODIGO, 
		CUSU_CODIGO, 
		CRTCO_CODIGO, 
		CSUCT_CONTACTO, 
		CSUCT_OBSERVACION, 
		CSUCT_ESTADO, 
		CSUCT_FECHA_INSERT, 
		CSUCT_USUARIO_INSERT, 
		CSUCT_FECHA_UPDATE, 
		CSUCT_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_CONTACTO
	WHERE CSUCT_ESTADO = TRUE AND 
		CRTCO_CODIGO = IN_CRTCO_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_D_CGG_RES_TIPO_CONTACTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_CONTACTO.
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_D_CGG_RES_TIPO_CONTACTO(
IN IN_CRTCO_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CRTCO_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_USUARIO_CONTACTO
	WHERE
		CRTCO_CODIGO = IN_CRTCO_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_D_CGG_RES_TIPO_CONTACTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_CONTACTO.
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_DS_CGG_RES_TIPO_CONTACTO(
IN IN_CRTCO_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CRTCO_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_USUARIO_CONTACTO SET
		csuct_estado = false
	WHERE
		CRTCO_CODIGO = IN_CRTCO_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CSUCT_CODIGO, 
		CUSU_CODIGO, 
		CRTCO_CODIGO, 
		CSUCT_CONTACTO, 
		CSUCT_OBSERVACION, 
		CSUCT_ESTADO, 
		CSUCT_FECHA_INSERT, 
		CSUCT_USUARIO_INSERT, 
		CSUCT_FECHA_UPDATE, 
		CSUCT_USUARIO_UPDATE
	FROM SII.CGG_SEC_USUARIO_CONTACTO
	WHERE CSUCT_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_SEC_USUARIO_CONTACTO
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_SEC_USUARIO_CONTACTO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_SEC_USUARIO_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_SEC_USUARIO_CONTACTO_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_SEC_USUARIO_CONTACTO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_SEC_USUARIO_CONTACTO SET
		csuct_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

