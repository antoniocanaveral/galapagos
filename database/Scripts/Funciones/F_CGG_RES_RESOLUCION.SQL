
/**
* FUNCION SII.F_CGG_RES_RESOLUCION_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_RESOLUCION
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION
* @param IN_CRRES_NUMERO_RESOLUCION NUMERO IDENTIFICATIVO DE LA RESOLUCION
* @param IN_CRRES_TIPO TIPO DE RESOLUCION
0 - NORMATIVA
1 - APROBACION
* @param IN_CRRES_OBSERVACIONES OBSERVACIONES CONSIDERADAS PARA LA RESOLUCION
* @param IN_CRRES_EXTRACTO_RESOLUCION RESUMEN DEL CONTENIDO DE LA RESOLUCION
* @param IN_CRRES_VOTOS_APROBACION NUMERO DE VOTOS A FAVOR DE LA RESOLUCION
* @param IN_CRRES_VOTOS_NEGACION NUMERO DE VOTOS EN CONTRA DE LA RESOLUCION
* @param IN_CRRES_VOTOS_ABSTENCION NUMERO DE VOTOS DE ABSTENCION
* @param IN_CRRES_FECHA_EMISION FECHA DE EMISION DE RESULTADO DE LA RESOLUCION
* @param IN_CRRES_FECHA_EJECUCION FECHA DE EJECUCION O LLEVADA A LA PRACTICA
* @param IN_CRRES_FECHA_ANULACION FECHA DE ANULACION O PERDIDA DE LA VIGENCIA
* @param IN_CRRES_FECHA_CONFIRMACION FECHA DE CONFIRMACION DE LA RESOLUCION EN LA QUE EL ADMINISTRADOR FINALMENTE CONFIRMO UNA RESIDENCIA.
* @param IN_CRRES_RESOLUCION_REEMPLAZA RESOLUCION POR LA QUE PUDO SER REEMPLAZA LA ACTUAL
* @param IN_CRRES_NOMBRE_ADJUNTO_RESOL NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CRRES_ADJUNTO_RESOLUCION ARCHIVO DIGITAL ANEXO A LA RESOLUCION
* @param IN_CRRES_DESCRIPCION_ADJUNTO DESCRIPCION DE LOS DOCUMENTOS ADJUNTOS
* @param IN_CRRES_FECHA_APELACION FECHA DE APELACION A LA RESOLUCION
* @param IN_CRRES_EXTRACTO_APELACION EXTRACTO DE LA APELACION
* @param IN_CRRES_NUMERO_APELACION NUMERO DE DOCUMENTO DE APELACION
* @param IN_CRRES_NOMBRE_ADJUNTO_APELAC NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CRRES_ADJUNTO_APELACION ARCHIVO ADJUNTO A LA APELACION
* @param IN_CRRES_ESTADO_RESOLUCION ESTADO DE LA RESOLUCION:
0 - ESPERANDO VOTACION
1 - APROBADA
2 - NEGADA
3 - EJECUTADA
4 - ANULADA
* @param IN_CRRES_ESTADO ESTADO DEL REGISTRO
* @param IN_CRRES_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRRES_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_INSERT(
IN IN_CRRES_CODIGO SII.CGG_RES_RESOLUCION.CRRES_CODIGO%TYPE, 
IN IN_CRSSC_CODIGO SII.CGG_RES_RESOLUCION.CRSSC_CODIGO%TYPE, 
IN IN_CRRES_NUMERO_RESOLUCION SII.CGG_RES_RESOLUCION.CRRES_NUMERO_RESOLUCION%TYPE, 
IN IN_CRRES_TIPO SII.CGG_RES_RESOLUCION.CRRES_TIPO%TYPE, 
IN IN_CRRES_OBSERVACIONES SII.CGG_RES_RESOLUCION.CRRES_OBSERVACIONES%TYPE, 
IN IN_CRRES_EXTRACTO_RESOLUCION SII.CGG_RES_RESOLUCION.CRRES_EXTRACTO_RESOLUCION%TYPE, 
IN IN_CRRES_VOTOS_APROBACION SII.CGG_RES_RESOLUCION.CRRES_VOTOS_APROBACION%TYPE, 
IN IN_CRRES_VOTOS_NEGACION SII.CGG_RES_RESOLUCION.CRRES_VOTOS_NEGACION%TYPE, 
IN IN_CRRES_VOTOS_ABSTENCION SII.CGG_RES_RESOLUCION.CRRES_VOTOS_ABSTENCION%TYPE, 
IN IN_CRRES_FECHA_EMISION SII.CGG_RES_RESOLUCION.CRRES_FECHA_EMISION%TYPE, 
IN IN_CRRES_FECHA_EJECUCION SII.CGG_RES_RESOLUCION.CRRES_FECHA_EJECUCION%TYPE, 
IN IN_CRRES_FECHA_ANULACION SII.CGG_RES_RESOLUCION.CRRES_FECHA_ANULACION%TYPE, 
IN IN_CRRES_FECHA_CONFIRMACION SII.CGG_RES_RESOLUCION.CRRES_FECHA_CONFIRMACION%TYPE, 
IN IN_CRRES_RESOLUCION_REEMPLAZA SII.CGG_RES_RESOLUCION.CRRES_RESOLUCION_REEMPLAZA%TYPE, 
IN IN_CRRES_NOMBRE_ADJUNTO_RESOL SII.CGG_RES_RESOLUCION.CRRES_NOMBRE_ADJUNTO_RESOL%TYPE, 
IN IN_CRRES_ADJUNTO_RESOLUCION SII.CGG_RES_RESOLUCION.CRRES_ADJUNTO_RESOLUCION%TYPE, 
IN IN_CRRES_DESCRIPCION_ADJUNTO SII.CGG_RES_RESOLUCION.CRRES_DESCRIPCION_ADJUNTO%TYPE, 
IN IN_CRRES_FECHA_APELACION SII.CGG_RES_RESOLUCION.CRRES_FECHA_APELACION%TYPE, 
IN IN_CRRES_EXTRACTO_APELACION SII.CGG_RES_RESOLUCION.CRRES_EXTRACTO_APELACION%TYPE, 
IN IN_CRRES_NUMERO_APELACION SII.CGG_RES_RESOLUCION.CRRES_NUMERO_APELACION%TYPE, 
IN IN_CRRES_NOMBRE_ADJUNTO_APELAC SII.CGG_RES_RESOLUCION.CRRES_NOMBRE_ADJUNTO_APELAC%TYPE, 
IN IN_CRRES_ADJUNTO_APELACION SII.CGG_RES_RESOLUCION.CRRES_ADJUNTO_APELACION%TYPE, 
IN IN_CRRES_ESTADO_RESOLUCION SII.CGG_RES_RESOLUCION.CRRES_ESTADO_RESOLUCION%TYPE, 
IN IN_CRRES_ESTADO SII.CGG_RES_RESOLUCION.CRRES_ESTADO%TYPE, 
IN IN_CRRES_USUARIO_INSERT SII.CGG_RES_RESOLUCION.CRRES_USUARIO_INSERT%TYPE, 
IN IN_CRRES_USUARIO_UPDATE SII.CGG_RES_RESOLUCION.CRRES_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRRES_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_RESOLUCION','CRRES_CODIGO','CRRES') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRRES_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_RESOLUCION(
		CRRES_CODIGO, 
		CRSSC_CODIGO, 
		CRRES_NUMERO_RESOLUCION, 
		CRRES_TIPO, 
		CRRES_OBSERVACIONES, 
		CRRES_EXTRACTO_RESOLUCION, 
		CRRES_VOTOS_APROBACION, 
		CRRES_VOTOS_NEGACION, 
		CRRES_VOTOS_ABSTENCION, 
		CRRES_FECHA_EMISION, 
		CRRES_FECHA_EJECUCION, 
		CRRES_FECHA_ANULACION, 
		CRRES_FECHA_CONFIRMACION, 
		CRRES_RESOLUCION_REEMPLAZA, 
		CRRES_NOMBRE_ADJUNTO_RESOL, 
		CRRES_ADJUNTO_RESOLUCION, 
		CRRES_DESCRIPCION_ADJUNTO, 
		CRRES_FECHA_APELACION, 
		CRRES_EXTRACTO_APELACION, 
		CRRES_NUMERO_APELACION, 
		CRRES_NOMBRE_ADJUNTO_APELAC, 
		CRRES_ADJUNTO_APELACION, 
		CRRES_ESTADO_RESOLUCION, 
		CRRES_ESTADO, 
		CRRES_FECHA_INSERT, 
		CRRES_USUARIO_INSERT, 
		CRRES_FECHA_UPDATE, 
		CRRES_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRSSC_CODIGO, 
		IN_CRRES_NUMERO_RESOLUCION, 
		IN_CRRES_TIPO, 
		IN_CRRES_OBSERVACIONES, 
		IN_CRRES_EXTRACTO_RESOLUCION, 
		IN_CRRES_VOTOS_APROBACION, 
		IN_CRRES_VOTOS_NEGACION, 
		IN_CRRES_VOTOS_ABSTENCION, 
		IN_CRRES_FECHA_EMISION, 
		IN_CRRES_FECHA_EJECUCION, 
		IN_CRRES_FECHA_ANULACION, 
		IN_CRRES_FECHA_CONFIRMACION, 
		IN_CRRES_RESOLUCION_REEMPLAZA, 
		IN_CRRES_NOMBRE_ADJUNTO_RESOL, 
		IN_CRRES_ADJUNTO_RESOLUCION, 
		IN_CRRES_DESCRIPCION_ADJUNTO, 
		IN_CRRES_FECHA_APELACION, 
		IN_CRRES_EXTRACTO_APELACION, 
		IN_CRRES_NUMERO_APELACION, 
		IN_CRRES_NOMBRE_ADJUNTO_APELAC, 
		IN_CRRES_ADJUNTO_APELACION, 
		IN_CRRES_ESTADO_RESOLUCION, 
		IN_CRRES_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRRES_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRRES_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_RESOLUCION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRRES_CODIGO, 
		CRSSC_CODIGO, 
		CRRES_NUMERO_RESOLUCION, 
		CRRES_TIPO, 
		CRRES_OBSERVACIONES, 
		CRRES_EXTRACTO_RESOLUCION, 
		CRRES_VOTOS_APROBACION, 
		CRRES_VOTOS_NEGACION, 
		CRRES_VOTOS_ABSTENCION, 
		CRRES_FECHA_EMISION, 
		CRRES_FECHA_EJECUCION, 
		CRRES_FECHA_ANULACION, 
		CRRES_FECHA_CONFIRMACION, 
		CRRES_RESOLUCION_REEMPLAZA, 
		CRRES_NOMBRE_ADJUNTO_RESOL, 
		NULL, 
		CRRES_DESCRIPCION_ADJUNTO, 
		CRRES_FECHA_APELACION, 
		CRRES_EXTRACTO_APELACION, 
		CRRES_NUMERO_APELACION, 
		CRRES_NOMBRE_ADJUNTO_APELAC, 
		NULL,
		CRRES_ESTADO_RESOLUCION, 
		CRRES_ESTADO, 
		CRRES_FECHA_INSERT, 
		CRRES_USUARIO_INSERT, 
		CRRES_FECHA_UPDATE, 
		CRRES_USUARIO_UPDATE
	FROM SII.CGG_RES_RESOLUCION
	WHERE CRRES_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_RESOLUCION
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT,
IN IN_CRRES_ESTADO_RESOLUCION INT,
IN IN_CRSSC_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		RS.CRRES_CODIGO, 
		RS.CRSSC_CODIGO, 
		(SELECT CRSSC_NUMERO_SESION FROM SII.CGG_RES_SESION_COMITE WHERE CRSSC_CODIGO = RS.CRSSC_CODIGO) CRSSC_NUMERO_SESION,
		(SELECT ARRAY_TO_STRING((SELECT ARRAY(SELECT CRTRA_ANIO||''-''||CRTRA_NUMERO FROM SII.CGG_RES_TRAMITE WHERE CRTRA_CODIGO IN (SELECT CRTRA_CODIGO FROM SII.CGG_RES_RESOL_TRAMITE WHERE CRRES_CODIGO = RS.CRRES_CODIGO))),'', '')) NUMERO,
		RS.CRRES_NUMERO_RESOLUCION, 
		RS.CRRES_TIPO, 
		RS.CRRES_OBSERVACIONES, 
		RS.CRRES_EXTRACTO_RESOLUCION, 
		RS.CRRES_VOTOS_APROBACION, 
		RS.CRRES_VOTOS_NEGACION, 
		RS.CRRES_VOTOS_ABSTENCION, 
		RS.CRRES_FECHA_EMISION, 
		RS.CRRES_FECHA_EJECUCION, 
		RS.CRRES_FECHA_ANULACION, 
        RS.CRRES_FECHA_CONFIRMACION,
		RS.CRRES_RESOLUCION_REEMPLAZA, 
		RS.CRRES_NOMBRE_ADJUNTO_RESOL, 
		RS.CRRES_DESCRIPCION_ADJUNTO, 
		RS.CRRES_FECHA_APELACION, 
		RS.CRRES_EXTRACTO_APELACION, 
		RS.CRRES_NUMERO_APELACION, 
		RS.CRRES_NOMBRE_ADJUNTO_APELAC, 
		RS.CRRES_ESTADO_RESOLUCION, 
		RS.CRRES_ESTADO, 
		RS.CRRES_FECHA_INSERT, 
		RS.CRRES_USUARIO_INSERT, 
		RS.CRRES_FECHA_UPDATE, 
		RS.CRRES_USUARIO_UPDATE
	FROM SII.CGG_RES_RESOLUCION RS	
	WHERE CRRES_ESTADO AND 
		(LENGTH('||QUOTE_LITERAL(IN_CRSSC_CODIGO)||') = 0 OR RS.CRSSC_CODIGO = '||QUOTE_LITERAL(IN_CRSSC_CODIGO)||') AND
		(('||IN_CRRES_ESTADO_RESOLUCION||') < 0 OR RS.CRRES_ESTADO_RESOLUCION = '||IN_CRRES_ESTADO_RESOLUCION||' AND RS.CRRES_CODIGO NOT IN (SELECT RTRM.CRRES_CODIGO FROM SII.CGG_RES_RESOL_TRAMITE RTRM INNER JOIN SII.CGG_RES_RESOLUCION RES ON RES.CRRES_CODIGO = RTRM.CRRES_CODIGO AND RES.CRRES_ESTADO_RESOLUCION = 0) AND 
		(RS.CRSSC_CODIGO IS NULL OR (SELECT CRSSC_ESTADO_CONVOCATORIA FROM SII.CGG_RES_SESION_COMITE WHERE CRSSC_CODIGO = RS.CRSSC_CODIGO) != 3 OR RS.CRSSC_CODIGO = '||QUOTE_LITERAL(IN_CRSSC_CODIGO)||' )) AND 
		(LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 OR SII.F_STRING_IN('||QUOTE_LITERAL(IN_FIND_TEXT)||',COALESCE(CRRES_NUMERO_RESOLUCION, '''')||'' ''||COALESCE(CRRES_TIPO, 0)||'' ''||COALESCE(CRRES_OBSERVACIONES, '''')||'' ''||COALESCE(CRRES_EXTRACTO_RESOLUCION, '''')||'' ''||COALESCE(CRRES_VOTOS_APROBACION, 0)||'' ''||COALESCE(CRRES_VOTOS_NEGACION, 0)||'' ''||COALESCE(CRRES_VOTOS_ABSTENCION, 0)||'' ''||COALESCE(CRRES_FECHA_EMISION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRES_FECHA_EJECUCION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRES_FECHA_ANULACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRES_RESOLUCION_REEMPLAZA, '''')||'' ''||COALESCE(CRRES_NOMBRE_ADJUNTO_RESOL, '''')||'' ''||COALESCE(CRRES_DESCRIPCION_ADJUNTO, '''')||'' ''||COALESCE(CRRES_FECHA_APELACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRES_EXTRACTO_APELACION, '''')||'' ''||COALESCE(CRRES_NUMERO_APELACION, '''')||'' ''||COALESCE(CRRES_NOMBRE_ADJUNTO_APELAC, '''')||'' ''||COALESCE(CRRES_ESTADO_RESOLUCION, 0)||'' ''||COALESCE(CRRES_ESTADO, FALSE)||'' ''||COALESCE(CRRES_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRES_USUARIO_INSERT, '''')||'' ''||COALESCE(CRRES_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CRRES_USUARIO_UPDATE, '''')) = 1)
	
	LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
--ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_RESOLUCION
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_RESOLUCION
	WHERE CRRES_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_RESOLUCION
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRRES_ESTADO_RESOLUCION ESTADO DE LA RESOLUCION:
0 - ESPERANDO VOTACION
1 - APROBADA
2 - NEGADA
3 - EJECUTADA
4 - ANULADA
* @param CRSSC_CODIGO IDENTIFICATIVO UNICO DE SESION COMITE
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_COUNT(
IN IN_FIND_TEXT TEXT,
IN IN_CRRES_ESTADO_RESOLUCION INT,
IN IN_CRSSC_CODIGO VARCHAR
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_RESOLUCION RS
	WHERE CRRES_ESTADO AND 
		(LENGTH(IN_CRSSC_CODIGO) = 0 OR RS.CRSSC_CODIGO = IN_CRSSC_CODIGO) AND 
		(IN_CRRES_ESTADO_RESOLUCION < 0 OR RS.CRRES_ESTADO_RESOLUCION = IN_CRRES_ESTADO_RESOLUCION) AND 
		(LENGTH(IN_FIND_TEXT) = 0 OR SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CRRES_NUMERO_RESOLUCION, '''')||' '||COALESCE(CRRES_TIPO, 0)||' '||COALESCE(CRRES_OBSERVACIONES, '''')||' '||COALESCE(CRRES_EXTRACTO_RESOLUCION, '''')||' '||COALESCE(CRRES_VOTOS_APROBACION, 0)||' '||COALESCE(CRRES_VOTOS_NEGACION, 0)||' '||COALESCE(CRRES_VOTOS_ABSTENCION, 0)||' '||COALESCE(CRRES_FECHA_EMISION, CURRENT_TIMESTAMP)||' '||COALESCE(CRRES_FECHA_EJECUCION, CURRENT_TIMESTAMP)||' '||COALESCE(CRRES_FECHA_ANULACION, CURRENT_TIMESTAMP)||' '||COALESCE(CRRES_FECHA_CONFIRMACION, CURRENT_TIMESTAMP)||' '||COALESCE(CRRES_RESOLUCION_REEMPLAZA, '''')||' '||COALESCE(CRRES_NOMBRE_ADJUNTO_RESOL, '''')||' '||COALESCE(CRRES_DESCRIPCION_ADJUNTO, '''')||' '||COALESCE(CRRES_FECHA_APELACION, CURRENT_TIMESTAMP)||' '||COALESCE(CRRES_EXTRACTO_APELACION, '''')||' '||COALESCE(CRRES_NUMERO_APELACION, '''')||' '||COALESCE(CRRES_NOMBRE_ADJUNTO_APELAC, '''')||' '||COALESCE(CRRES_ESTADO_RESOLUCION, 0)||' '||COALESCE(CRRES_ESTADO, FALSE)||' '||COALESCE(CRRES_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CRRES_USUARIO_INSERT, '''')||' '||COALESCE(CRRES_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CRRES_USUARIO_UPDATE, '''')) = 1);
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_RESOLUCION
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION
* @param IN_CRRES_NUMERO_RESOLUCION NUMERO IDENTIFICATIVO DE LA RESOLUCION
* @param IN_CRRES_TIPO TIPO DE RESOLUCION
0 - NORMATIVA
1 - APROBACION
* @param IN_CRRES_OBSERVACIONES OBSERVACIONES CONSIDERADAS PARA LA RESOLUCION
* @param IN_CRRES_EXTRACTO_RESOLUCION RESUMEN DEL CONTENIDO DE LA RESOLUCION
* @param IN_CRRES_VOTOS_APROBACION NUMERO DE VOTOS A FAVOR DE LA RESOLUCION
* @param IN_CRRES_VOTOS_NEGACION NUMERO DE VOTOS EN CONTRA DE LA RESOLUCION
* @param IN_CRRES_VOTOS_ABSTENCION NUMERO DE VOTOS DE ABSTENCION
* @param IN_CRRES_FECHA_EMISION FECHA DE EMISION DE RESULTADO DE LA RESOLUCION
* @param IN_CRRES_FECHA_EJECUCION FECHA DE EJECUCION O LLEVADA A LA PRACTICA
* @param IN_CRRES_FECHA_ANULACION FECHA DE ANULACION O PERDIDA DE LA VIGENCIA
* @param IN_CRRES_FECHA_CONFIRMACION FECHA DE CONFIRMACION DE LA RESOLUCION EN LA QUE EL ADMINISTRADOR FINALMENTE CONFIRMO UNA RESIDENCIA.
* @param IN_CRRES_RESOLUCION_REEMPLAZA RESOLUCION POR LA QUE PUDO SER REEMPLAZA LA ACTUAL
* @param IN_CRRES_NOMBRE_ADJUNTO_RESOL NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CRRES_ADJUNTO_RESOLUCION ARCHIVO DIGITAL ANEXO A LA RESOLUCION
* @param IN_CRRES_DESCRIPCION_ADJUNTO DESCRIPCION DE LOS DOCUMENTOS ADJUNTOS
* @param IN_CRRES_FECHA_APELACION FECHA DE APELACION A LA RESOLUCION
* @param IN_CRRES_EXTRACTO_APELACION EXTRACTO DE LA APELACION
* @param IN_CRRES_NUMERO_APELACION NUMERO DE DOCUMENTO DE APELACION
* @param IN_CRRES_NOMBRE_ADJUNTO_APELAC NOMBRE DEL DOCUMENTO ADJUNTO
* @param IN_CRRES_ADJUNTO_APELACION ARCHIVO ADJUNTO A LA APELACION
* @param IN_CRRES_ESTADO_RESOLUCION ESTADO DE LA RESOLUCION:
0 - ESPERANDO VOTACION
1 - APROBADA
2 - NEGADA
3 - EJECUTADA
4 - ANULADA
* @param IN_CRRES_ESTADO ESTADO DEL REGISTRO
* @param IN_CRRES_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_UPDATE(
IN IN_CRRES_CODIGO SII.CGG_RES_RESOLUCION.CRRES_CODIGO%TYPE, 
IN IN_CRSSC_CODIGO SII.CGG_RES_RESOLUCION.CRSSC_CODIGO%TYPE, 
IN IN_CRRES_NUMERO_RESOLUCION SII.CGG_RES_RESOLUCION.CRRES_NUMERO_RESOLUCION%TYPE, 
IN IN_CRRES_TIPO SII.CGG_RES_RESOLUCION.CRRES_TIPO%TYPE, 
IN IN_CRRES_OBSERVACIONES SII.CGG_RES_RESOLUCION.CRRES_OBSERVACIONES%TYPE, 
IN IN_CRRES_EXTRACTO_RESOLUCION SII.CGG_RES_RESOLUCION.CRRES_EXTRACTO_RESOLUCION%TYPE, 
IN IN_CRRES_VOTOS_APROBACION SII.CGG_RES_RESOLUCION.CRRES_VOTOS_APROBACION%TYPE, 
IN IN_CRRES_VOTOS_NEGACION SII.CGG_RES_RESOLUCION.CRRES_VOTOS_NEGACION%TYPE, 
IN IN_CRRES_VOTOS_ABSTENCION SII.CGG_RES_RESOLUCION.CRRES_VOTOS_ABSTENCION%TYPE, 
IN IN_CRRES_FECHA_EMISION SII.CGG_RES_RESOLUCION.CRRES_FECHA_EMISION%TYPE, 
IN IN_CRRES_FECHA_EJECUCION SII.CGG_RES_RESOLUCION.CRRES_FECHA_EJECUCION%TYPE, 
IN IN_CRRES_FECHA_ANULACION SII.CGG_RES_RESOLUCION.CRRES_FECHA_ANULACION%TYPE, 
IN IN_CRRES_FECHA_CONFIRMACION SII.CGG_RES_RESOLUCION.CRRES_FECHA_CONFIRMACION%TYPE, 
IN IN_CRRES_RESOLUCION_REEMPLAZA SII.CGG_RES_RESOLUCION.CRRES_RESOLUCION_REEMPLAZA%TYPE, 
IN IN_CRRES_NOMBRE_ADJUNTO_RESOL SII.CGG_RES_RESOLUCION.CRRES_NOMBRE_ADJUNTO_RESOL%TYPE, 
IN IN_CRRES_ADJUNTO_RESOLUCION SII.CGG_RES_RESOLUCION.CRRES_ADJUNTO_RESOLUCION%TYPE, 
IN IN_CRRES_DESCRIPCION_ADJUNTO SII.CGG_RES_RESOLUCION.CRRES_DESCRIPCION_ADJUNTO%TYPE, 
IN IN_CRRES_FECHA_APELACION SII.CGG_RES_RESOLUCION.CRRES_FECHA_APELACION%TYPE, 
IN IN_CRRES_EXTRACTO_APELACION SII.CGG_RES_RESOLUCION.CRRES_EXTRACTO_APELACION%TYPE, 
IN IN_CRRES_NUMERO_APELACION SII.CGG_RES_RESOLUCION.CRRES_NUMERO_APELACION%TYPE, 
IN IN_CRRES_NOMBRE_ADJUNTO_APELAC SII.CGG_RES_RESOLUCION.CRRES_NOMBRE_ADJUNTO_APELAC%TYPE, 
IN IN_CRRES_ADJUNTO_APELACION SII.CGG_RES_RESOLUCION.CRRES_ADJUNTO_APELACION%TYPE, 
IN IN_CRRES_ESTADO_RESOLUCION SII.CGG_RES_RESOLUCION.CRRES_ESTADO_RESOLUCION%TYPE, 
IN IN_CRRES_ESTADO SII.CGG_RES_RESOLUCION.CRRES_ESTADO%TYPE, 
IN IN_CRRES_USUARIO_UPDATE SII.CGG_RES_RESOLUCION.CRRES_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESOLUCION SET
	
		CRSSC_CODIGO = IN_CRSSC_CODIGO, 
		CRRES_NUMERO_RESOLUCION = IN_CRRES_NUMERO_RESOLUCION, 
		CRRES_TIPO = IN_CRRES_TIPO, 
		CRRES_OBSERVACIONES = IN_CRRES_OBSERVACIONES, 
		CRRES_EXTRACTO_RESOLUCION = IN_CRRES_EXTRACTO_RESOLUCION, 
		CRRES_VOTOS_APROBACION = IN_CRRES_VOTOS_APROBACION, 
		CRRES_VOTOS_NEGACION = IN_CRRES_VOTOS_NEGACION, 
		CRRES_VOTOS_ABSTENCION = IN_CRRES_VOTOS_ABSTENCION, 
		CRRES_FECHA_EMISION = IN_CRRES_FECHA_EMISION, 
		CRRES_FECHA_EJECUCION = IN_CRRES_FECHA_EJECUCION, 
		CRRES_FECHA_ANULACION = IN_CRRES_FECHA_ANULACION, 
		CRRES_FECHA_CONFIRMACION = IN_CRRES_FECHA_CONFIRMACION, 
		CRRES_RESOLUCION_REEMPLAZA = IN_CRRES_RESOLUCION_REEMPLAZA, 
		CRRES_NOMBRE_ADJUNTO_RESOL = IN_CRRES_NOMBRE_ADJUNTO_RESOL, 
		CRRES_ADJUNTO_RESOLUCION = IN_CRRES_ADJUNTO_RESOLUCION, 
		CRRES_DESCRIPCION_ADJUNTO = IN_CRRES_DESCRIPCION_ADJUNTO, 
		CRRES_FECHA_APELACION = IN_CRRES_FECHA_APELACION, 
		CRRES_EXTRACTO_APELACION = IN_CRRES_EXTRACTO_APELACION, 
		CRRES_NUMERO_APELACION = IN_CRRES_NUMERO_APELACION, 
		CRRES_NOMBRE_ADJUNTO_APELAC = IN_CRRES_NOMBRE_ADJUNTO_APELAC, 
		CRRES_ADJUNTO_APELACION = IN_CRRES_ADJUNTO_APELACION, 
		CRRES_ESTADO_RESOLUCION = IN_CRRES_ESTADO_RESOLUCION, 
		CRRES_ESTADO = IN_CRRES_ESTADO, 
		CRRES_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRRES_USUARIO_UPDATE = IN_CRRES_USUARIO_UPDATE
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_RESOLUCION
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_SELECT(
IN IN_CRRES_CODIGO SII.CGG_RES_RESOLUCION.CRRES_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRRES_CODIGO, 
		CRSSC_CODIGO, 
		CRRES_NUMERO_RESOLUCION, 
		CRRES_TIPO, 
		CRRES_OBSERVACIONES, 
		CRRES_EXTRACTO_RESOLUCION, 
		CRRES_VOTOS_APROBACION, 
		CRRES_VOTOS_NEGACION, 
		CRRES_VOTOS_ABSTENCION, 
		CRRES_FECHA_EMISION, 
		CRRES_FECHA_EJECUCION, 
		CRRES_FECHA_ANULACION, 
		CRRES_FECHA_CONFIRMACION, 
		CRRES_RESOLUCION_REEMPLAZA, 
		CRRES_NOMBRE_ADJUNTO_RESOL, 
		NULL,
		CRRES_DESCRIPCION_ADJUNTO, 
		CRRES_FECHA_APELACION, 
		CRRES_EXTRACTO_APELACION, 
		CRRES_NUMERO_APELACION, 
		CRRES_NOMBRE_ADJUNTO_APELAC, 
		NULL,
		CRRES_ESTADO_RESOLUCION, 
		CRRES_ESTADO, 
		CRRES_FECHA_INSERT, 
		CRRES_USUARIO_INSERT, 
		CRRES_FECHA_UPDATE, 
		CRRES_USUARIO_UPDATE
	FROM SII.CGG_RES_RESOLUCION
	WHERE CRRES_ESTADO = TRUE AND 
		CRRES_CODIGO = IN_CRRES_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_RESOLUCION
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_DELETE(
IN IN_CRRES_CODIGO SII.CGG_RES_RESOLUCION.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_RESOLUCION
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_RESOLUCION
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_DELETE_SOFT(
IN IN_CRRES_CODIGO SII.CGG_RES_RESOLUCION.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESOLUCION SET
		CRRES_ESTADO = FALSE
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_ANULAR
* MARCA UNA RESOLUCION COMO ANULADA 
* @param IN_CRRES_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE RESOLUCIONES
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APLICACIONES.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_ANULAR(
IN IN_USER_NAME VARCHAR,
IN IN_CRRES_CODIGO SII.CGG_RES_RESOLUCION.CRRES_CODIGO%TYPE
)RETURNS VOID AS
$$
DECLARE
TMP_CRRES_CODIGO VARCHAR;
BEGIN
	SELECT CRRES_CODIGO INTO TMP_CRRES_CODIGO 
	FROM SII.CGG_RES_RESOLUCION 
	WHERE CRRES_CODIGO = IN_CRRES_CODIGO AND CRRES_ESTADO_RESOLUCION = 0;
	IF (TMP_CRRES_CODIGO IS NOT NULL) THEN
		RAISE EXCEPTION 'La resoluci&oacute;n seleccionada no ha recibido votaci&oacute;n.';
	END IF;
	SELECT CRRES_CODIGO INTO TMP_CRRES_CODIGO 
	FROM SII.CGG_RES_RESOLUCION 
	WHERE CRRES_CODIGO = IN_CRRES_CODIGO AND CRRES_ESTADO_RESOLUCION = 4;
	IF (TMP_CRRES_CODIGO IS NOT NULL) THEN
		RAISE EXCEPTION 'La resoluci&oacute;n seleccionada ya esta anulada.';
	END IF;
	SELECT RSL.CRRES_CODIGO INTO TMP_CRRES_CODIGO 
	FROM SII.CGG_RES_RESOLUCION RSL
	INNER JOIN SII.CGG_RES_RESOL_TRAMITE RST ON RST.CRRES_CODIGO = RSL.CRRES_CODIGO AND RST.CRRST_ESTADO
	INNER JOIN SII.CGG_RES_TRAMITE TRM ON TRM.CRTRA_CODIGO = RST.CRTRA_CODIGO AND TRM.CRTRA_ESTADO
	INNER JOIN SII.CGG_RES_RESIDENCIA RSD ON RSD.CRTRA_CODIGO = TRM.CRTRA_CODIGO AND RSD.CRRSD_ESTADO
	WHERE RSD.CRRSD_VIGENTE;
	IF (TMP_CRRES_CODIGO IS NOT NULL) THEN
		RAISE EXCEPTION 'La resoluci&oacute;n seleccionada no se puede anular por que concedio una residencia.';
	END IF;
	UPDATE SII.CGG_RES_RESOLUCION SET
		CRRES_ESTADO_RESOLUCION = 4, 
		CRRES_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRRES_USUARIO_UPDATE = IN_USER_NAME
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_S_CGG_RES_SESION_COMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESOLUCION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_S_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_RESOLUCION.CRSSC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRRES_CODIGO, 
		CRSSC_CODIGO, 
		CRRES_NUMERO_RESOLUCION, 
		CRRES_TIPO, 
		CRRES_OBSERVACIONES, 
		CRRES_EXTRACTO_RESOLUCION, 
		CRRES_VOTOS_APROBACION, 
		CRRES_VOTOS_NEGACION, 
		CRRES_VOTOS_ABSTENCION, 
		CRRES_FECHA_EMISION, 
		CRRES_FECHA_EJECUCION, 
		CRRES_FECHA_ANULACION, 
		CRRES_FECHA_CONFIRMACION, 
		CRRES_RESOLUCION_REEMPLAZA, 
		CRRES_NOMBRE_ADJUNTO_RESOL, 
		NULL, 
		CRRES_DESCRIPCION_ADJUNTO, 
		CRRES_FECHA_APELACION, 
		CRRES_EXTRACTO_APELACION, 
		CRRES_NUMERO_APELACION, 
		CRRES_NOMBRE_ADJUNTO_APELAC, 
		NULL,
		CRRES_ESTADO_RESOLUCION, 
		CRRES_ESTADO, 
		CRRES_FECHA_INSERT, 
		CRRES_USUARIO_INSERT, 
		CRRES_FECHA_UPDATE, 
		CRRES_USUARIO_UPDATE
	FROM SII.CGG_RES_RESOLUCION
	WHERE CRRES_ESTADO = TRUE AND 
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_D_CGG_RES_SESION_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESOLUCION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_D_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_RESOLUCION.CRSSC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_RESOLUCION
	WHERE
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_R_CGG_RES_SESION_COMITE
* ACTUALIZA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESOLUCION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_R_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_RESOLUCION.CRSSC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESOLUCION 
	SET CRSSC_CODIGO = NULL
	WHERE
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_D_CGG_RES_SESION_COMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESOLUCION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SESION_COMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGIsTRO DE SESION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_DS_CGG_RES_SESION_COMITE(
IN IN_CRSSC_CODIGO SII.CGG_RES_RESOLUCION.CRSSC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESOLUCION SET
		crres_estado = false
	WHERE
		CRSSC_CODIGO = IN_CRSSC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_RESOLUCION_TRAMITE_SESION_D
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_RESOLUCION QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TRAMITE.
* @param IN_CRSSC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SESION COMITE
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_TRAMITE_SESION_D(
IN IN_CRSSC_CODIGO SII.CGG_RES_SESION_COMITE.CRSSC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_RESOL_TRAMITE WHERE CRRES_CODIGO IN (SELECT CRRES_CODIGO FROM SII.CGG_RES_RESOLUCION WHERE CRSSC_CODIGO = IN_CRSSC_CODIGO AND CRRES_ESTADO_RESOLUCION = 0);
	DELETE FROM SII.CGG_RES_RESOLUCION WHERE CRSSC_CODIGO = IN_CRSSC_CODIGO AND CRRES_ESTADO_RESOLUCION = 0;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. ACTUALIZA LA FECHA DE CONFIRMACION DE UNA RESOLUCION SOLAMENTE.
*@param IN_CRRES_CODIGO CODIGO DE RESOLUCION.
*@param IN_CRRES_FECHA_CONFIRMACION FECHA DE CONFIRMACION DE LA RESOLUCION.
*@param IN_CRRES_USUARIO_UPDATE USURIO QUE REALIZA LA ACTUALIZACION.
*@return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_RESOLUCION_UPDATE1(
IN IN_CRRES_CODIGO SII.CGG_RES_RESOLUCION.CRRES_CODIGO%TYPE, 
IN IN_CRRES_FECHA_CONFIRMACION SII.CGG_RES_RESOLUCION.CRRES_FECHA_CONFIRMACION%TYPE, 
IN IN_CRRES_USUARIO_UPDATE SII.CGG_RES_RESOLUCION.CRRES_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_RESOLUCION SET			
		CRRES_FECHA_CONFIRMACION = IN_CRRES_FECHA_CONFIRMACION, 		
		CRRES_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRRES_USUARIO_UPDATE = IN_CRRES_USUARIO_UPDATE
	WHERE
		CRRES_CODIGO = IN_CRRES_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_ADJUNTO_RESOLUCION_SELECT
* SELECCIONA EL ARCHIVO ADJUNTO ASOCIADO A UNA RESOLUCION.
* @param IN_CRRES_CODIGO CODIGO DE RESOLUCION
* @returns 
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_ADJUNTO_RESOLUCION_SELECT(
IN IN_CRRES_CODIGO character varying
)RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRADJ_CODIGO, 	 
		CRADJ_NOMBRE_ADJUNTO		
	FROM SII.CGG_RES_ADJUNTO
	WHERE CRADJ_ESTADO = TRUE AND 		
		CRRES_CODIGO = IN_CRRES_CODIGO;
	RETURN NEXT TMP_REF;
END
$BODY$
LANGUAGE 'plpgsql' VOLATILE COST 100 ROWS 1000;
