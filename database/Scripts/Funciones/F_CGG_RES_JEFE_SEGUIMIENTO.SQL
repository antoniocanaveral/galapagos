/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO
* @param IN_CRJSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRJSG_ESTADO ESTADO DEL REGISTRO
* @param IN_CRJSG_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRJSG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_INSERT(
IN IN_CRJSG_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CUSU_CODIGO%TYPE, 
IN IN_CRJSG_ESTADO SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_ESTADO%TYPE, 
IN IN_CRJSG_USUARIO_INSERT SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_USUARIO_INSERT%TYPE, 
IN IN_CRJSG_USUARIO_UPDATE SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRJSG_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_JEFE_SEGUIMIENTO','CRJSG_CODIGO','CRJSG') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRJSG_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_JEFE_SEGUIMIENTO(
		CRJSG_CODIGO, 
		CUSU_CODIGO, 
		CRJSG_ESTADO, 
		CRJSG_FECHA_INSERT, 
		CRJSG_USUARIO_INSERT, 
		CRJSG_FECHA_UPDATE, 
		CRJSG_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CUSU_CODIGO, 
		IN_CRJSG_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRJSG_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRJSG_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRJSG_CODIGO, 
		CUSU_CODIGO, 
		CRJSG_ESTADO, 
		CRJSG_FECHA_INSERT, 
		CRJSG_USUARIO_INSERT, 
		CRJSG_FECHA_UPDATE, 
		CRJSG_USUARIO_UPDATE
	FROM SII.CGG_RES_JEFE_SEGUIMIENTO
	WHERE CRJSG_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/*
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRJSG_CODIGO, 
		CUSU_CODIGO, 
		CRJSG_ESTADO, 
		CRJSG_FECHA_INSERT, 
		CRJSG_USUARIO_INSERT, 
		CRJSG_FECHA_UPDATE, 
		CRJSG_USUARIO_UPDATE
	FROM SII.CGG_RES_JEFE_SEGUIMIENTO
	WHERE CRJSG_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRJSG_CODIGO IS NULL THEN '''' ELSE CRJSG_CODIGO END ||'' ''||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||'' ''||CASE WHEN CRJSG_ESTADO IS NULL THEN FALSE ELSE CRJSG_ESTADO END ||'' ''||CASE WHEN CRJSG_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRJSG_FECHA_INSERT END ||'' ''||CASE WHEN CRJSG_USUARIO_INSERT IS NULL THEN '''' ELSE CRJSG_USUARIO_INSERT END ||'' ''||CASE WHEN CRJSG_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRJSG_FECHA_UPDATE END ||'' ''||CASE WHEN CRJSG_USUARIO_UPDATE IS NULL THEN '''' ELSE CRJSG_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_JEFE_SEGUIMIENTO
	WHERE CRJSG_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_JEFE_SEGUIMIENTO
	WHERE CRJSG_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRJSG_CODIGO IS NULL THEN '''' ELSE CRJSG_CODIGO END ||' '||CASE WHEN CUSU_CODIGO IS NULL THEN '''' ELSE CUSU_CODIGO END ||' '||CASE WHEN CRJSG_ESTADO IS NULL THEN FALSE ELSE CRJSG_ESTADO END ||' '||CASE WHEN CRJSG_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRJSG_FECHA_INSERT END ||' '||CASE WHEN CRJSG_USUARIO_INSERT IS NULL THEN '''' ELSE CRJSG_USUARIO_INSERT END ||' '||CASE WHEN CRJSG_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRJSG_FECHA_UPDATE END ||' '||CASE WHEN CRJSG_USUARIO_UPDATE IS NULL THEN '''' ELSE CRJSG_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_JEFE_SEGUIMIENTO
* @param IN_CRJSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRJSG_ESTADO ESTADO DEL REGISTRO
* @param IN_CRJSG_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_UPDATE(
IN IN_CRJSG_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_CODIGO%TYPE, 
IN IN_CUSU_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CUSU_CODIGO%TYPE, 
IN IN_CRJSG_ESTADO SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_ESTADO%TYPE, 
IN IN_CRJSG_USUARIO_UPDATE SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_JEFE_SEGUIMIENTO SET
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CRJSG_ESTADO = IN_CRJSG_ESTADO, 
		CRJSG_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRJSG_USUARIO_UPDATE = IN_CRJSG_USUARIO_UPDATE
	WHERE
		CRJSG_CODIGO = IN_CRJSG_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO
* @param IN_CRJSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_SELECT(
IN IN_CRJSG_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRJSG_CODIGO, 
		CUSU_CODIGO, 
		CRJSG_ESTADO, 
		CRJSG_FECHA_INSERT, 
		CRJSG_USUARIO_INSERT, 
		CRJSG_FECHA_UPDATE, 
		CRJSG_USUARIO_UPDATE
	FROM SII.CGG_RES_JEFE_SEGUIMIENTO
	WHERE CRJSG_ESTADO = TRUE AND 
		CRJSG_CODIGO = IN_CRJSG_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO
* @param IN_CRJSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_DELETE(
IN IN_CRJSG_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_JEFE_SEGUIMIENTO
	WHERE
		CRJSG_CODIGO = IN_CRJSG_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO
* @param IN_CRJSG_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_DELETE_SOFT(
IN IN_CRJSG_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CRJSG_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_JEFE_SEGUIMIENTO SET
		CRJSG_ESTADO = FALSE
	WHERE
		CRJSG_CODIGO = IN_CRJSG_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRJSG_CODIGO, 
		CUSU_CODIGO, 
		CRJSG_ESTADO, 
		CRJSG_FECHA_INSERT, 
		CRJSG_USUARIO_INSERT, 
		CRJSG_FECHA_UPDATE, 
		CRJSG_USUARIO_UPDATE
	FROM SII.CGG_RES_JEFE_SEGUIMIENTO
	WHERE CRJSG_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_JEFE_SEGUIMIENTO
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_JEFE_SEGUIMIENTO_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_JEFE_SEGUIMIENTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_JEFE_SEGUIMIENTO_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_RES_JEFE_SEGUIMIENTO.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_JEFE_SEGUIMIENTO SET
		crjsg_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

