/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA_CONTACTO
* @param IN_CRPRC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @param IN_CRPRC_DESCRIPCION VALOR ASIGNADO AL CONTACTO
* @param IN_CRPRC_CONTACTO NUMERO DE CONTACTO, DIRECCION DE CORREO ELECTRONICO
* @param IN_CRPRC_ESTADO ESTADO DEL REGISTRO
* @param IN_CRPRC_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRPRC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_INSERT(
IN IN_CRPRC_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPRC_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPER_CODIGO%TYPE, 
IN IN_CRTCO_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRTCO_CODIGO%TYPE, 
IN IN_CRPRC_DESCRIPCION SII.CGG_RES_PERSONA_CONTACTO.CRPRC_DESCRIPCION%TYPE, 
IN IN_CRPRC_CONTACTO SII.CGG_RES_PERSONA_CONTACTO.CRPRC_CONTACTO%TYPE, 
IN IN_CRPRC_ESTADO SII.CGG_RES_PERSONA_CONTACTO.CRPRC_ESTADO%TYPE, 
IN IN_CRPRC_USUARIO_INSERT SII.CGG_RES_PERSONA_CONTACTO.CRPRC_USUARIO_INSERT%TYPE, 
IN IN_CRPRC_USUARIO_UPDATE SII.CGG_RES_PERSONA_CONTACTO.CRPRC_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRPRC_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_PERSONA_CONTACTO','CRPRC_CODIGO','CRPRC') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRPRC_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_PERSONA_CONTACTO(
		CRPRC_CODIGO, 
		CRPER_CODIGO, 
		CRTCO_CODIGO, 
		CRPRC_DESCRIPCION, 
		CRPRC_CONTACTO, 
		CRPRC_ESTADO, 
		CRPRC_FECHA_INSERT, 
		CRPRC_USUARIO_INSERT, 
		CRPRC_FECHA_UPDATE, 
		CRPRC_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CRTCO_CODIGO, 
		IN_CRPRC_DESCRIPCION, 
		IN_CRPRC_CONTACTO, 
		IN_CRPRC_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRPRC_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRPRC_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPRC_CODIGO, 
		CRPER_CODIGO, 
		CRTCO_CODIGO, 
		CRPRC_DESCRIPCION, 
		CRPRC_CONTACTO, 
		CRPRC_ESTADO, 
		CRPRC_FECHA_INSERT, 
		CRPRC_USUARIO_INSERT, 
		CRPRC_FECHA_UPDATE, 
		CRPRC_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE CRPRC_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CRPRC_CODIGO, 
		CRPER_CODIGO, 
		CRTCO_CODIGO, 
		CRPRC_DESCRIPCION, 
		CRPRC_CONTACTO, 
		CRPRC_ESTADO, 
		CRPRC_FECHA_INSERT, 
		CRPRC_USUARIO_INSERT, 
		CRPRC_FECHA_UPDATE, 
		CRPRC_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE CRPRC_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CRPRC_CODIGO IS NULL THEN '''' ELSE CRPRC_CODIGO END ||'' ''||CASE WHEN CRPER_CODIGO IS NULL THEN '''' ELSE CRPER_CODIGO END ||'' ''||CASE WHEN CRTCO_CODIGO IS NULL THEN '''' ELSE CRTCO_CODIGO END ||'' ''||CASE WHEN CRPRC_DESCRIPCION IS NULL THEN '''' ELSE CRPRC_DESCRIPCION END ||'' ''||CASE WHEN CRPRC_CONTACTO IS NULL THEN '''' ELSE CRPRC_CONTACTO END ||'' ''||CASE WHEN CRPRC_ESTADO IS NULL THEN FALSE ELSE CRPRC_ESTADO END ||'' ''||CASE WHEN CRPRC_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRPRC_FECHA_INSERT END ||'' ''||CASE WHEN CRPRC_USUARIO_INSERT IS NULL THEN '''' ELSE CRPRC_USUARIO_INSERT END ||'' ''||CASE WHEN CRPRC_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRPRC_FECHA_UPDATE END ||'' ''||CASE WHEN CRPRC_USUARIO_UPDATE IS NULL THEN '''' ELSE CRPRC_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE CRPRC_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE CRPRC_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRPRC_CODIGO IS NULL THEN '''' ELSE CRPRC_CODIGO END ||' '||CASE WHEN CRPER_CODIGO IS NULL THEN '''' ELSE CRPER_CODIGO END ||' '||CASE WHEN CRTCO_CODIGO IS NULL THEN '''' ELSE CRTCO_CODIGO END ||' '||CASE WHEN CRPRC_DESCRIPCION IS NULL THEN '''' ELSE CRPRC_DESCRIPCION END ||' '||CASE WHEN CRPRC_CONTACTO IS NULL THEN '''' ELSE CRPRC_CONTACTO END ||' '||CASE WHEN CRPRC_ESTADO IS NULL THEN FALSE ELSE CRPRC_ESTADO END ||' '||CASE WHEN CRPRC_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRPRC_FECHA_INSERT END ||' '||CASE WHEN CRPRC_USUARIO_INSERT IS NULL THEN '''' ELSE CRPRC_USUARIO_INSERT END ||' '||CASE WHEN CRPRC_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRPRC_FECHA_UPDATE END ||' '||CASE WHEN CRPRC_USUARIO_UPDATE IS NULL THEN '''' ELSE CRPRC_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_PERSONA_CONTACTO
* @param IN_CRPRC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @param IN_CRPRC_DESCRIPCION VALOR ASIGNADO AL CONTACTO
* @param IN_CRPRC_CONTACTO NUMERO DE CONTACTO, DIRECCION DE CORREO ELECTRONICO
* @param IN_CRPRC_ESTADO ESTADO DEL REGISTRO
* @param IN_CRPRC_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_UPDATE(
IN IN_CRPRC_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPRC_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPER_CODIGO%TYPE, 
IN IN_CRTCO_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRTCO_CODIGO%TYPE, 
IN IN_CRPRC_DESCRIPCION SII.CGG_RES_PERSONA_CONTACTO.CRPRC_DESCRIPCION%TYPE, 
IN IN_CRPRC_CONTACTO SII.CGG_RES_PERSONA_CONTACTO.CRPRC_CONTACTO%TYPE, 
IN IN_CRPRC_ESTADO SII.CGG_RES_PERSONA_CONTACTO.CRPRC_ESTADO%TYPE, 
IN IN_CRPRC_USUARIO_UPDATE SII.CGG_RES_PERSONA_CONTACTO.CRPRC_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA_CONTACTO SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CRTCO_CODIGO = IN_CRTCO_CODIGO, 
		CRPRC_DESCRIPCION = IN_CRPRC_DESCRIPCION, 
		CRPRC_CONTACTO = IN_CRPRC_CONTACTO, 
		CRPRC_ESTADO = IN_CRPRC_ESTADO, 
		CRPRC_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRPRC_USUARIO_UPDATE = IN_CRPRC_USUARIO_UPDATE
	WHERE
		CRPRC_CODIGO = IN_CRPRC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA_CONTACTO
* @param IN_CRPRC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_SELECT(
IN IN_CRPRC_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPRC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPRC_CODIGO, 
		CRPER_CODIGO, 
		CRTCO_CODIGO, 
		CRPRC_DESCRIPCION, 
		CRPRC_CONTACTO, 
		CRPRC_ESTADO, 
		CRPRC_FECHA_INSERT, 
		CRPRC_USUARIO_INSERT, 
		CRPRC_FECHA_UPDATE, 
		CRPRC_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE CRPRC_ESTADO = TRUE AND 
		CRPRC_CODIGO = IN_CRPRC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA_CONTACTO
* @param IN_CRPRC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_DELETE(
IN IN_CRPRC_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPRC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE
		CRPRC_CODIGO = IN_CRPRC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_PERSONA_CONTACTO
* @param IN_CRPRC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_DELETE_SOFT(
IN IN_CRPRC_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPRC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA_CONTACTO SET
		CRPRC_ESTADO = FALSE
	WHERE
		CRPRC_CODIGO = IN_CRPRC_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_S_CGG_RES_TIPO_CONTACTO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_CONTACTO.
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_S_CGG_RES_TIPO_CONTACTO(
IN IN_CRTCO_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRTCO_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPRC_CODIGO, 
		CRPER_CODIGO, 
		CRTCO_CODIGO, 
		CRPRC_DESCRIPCION, 
		CRPRC_CONTACTO, 
		CRPRC_ESTADO, 
		CRPRC_FECHA_INSERT, 
		CRPRC_USUARIO_INSERT, 
		CRPRC_FECHA_UPDATE, 
		CRPRC_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE CRPRC_ESTADO = TRUE AND 
		CRTCO_CODIGO = IN_CRTCO_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_D_CGG_RES_TIPO_CONTACTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_CONTACTO.
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_D_CGG_RES_TIPO_CONTACTO(
IN IN_CRTCO_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRTCO_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE
		CRTCO_CODIGO = IN_CRTCO_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_D_CGG_RES_TIPO_CONTACTO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_TIPO_CONTACTO.
* @param IN_CRTCO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE TIPO DE CONTACTO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_DS_CGG_RES_TIPO_CONTACTO(
IN IN_CRTCO_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRTCO_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA_CONTACTO SET
		crprc_estado = false
	WHERE
		CRTCO_CODIGO = IN_CRTCO_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRPRC_CODIGO, 
		CRPER_CODIGO, 
		CRTCO_CODIGO, 
		CRPRC_DESCRIPCION, 
		CRPRC_CONTACTO, 
		CRPRC_ESTADO, 
		CRPRC_FECHA_INSERT, 
		CRPRC_USUARIO_INSERT, 
		CRPRC_FECHA_UPDATE, 
		CRPRC_USUARIO_UPDATE
	FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE CRPRC_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_PERSONA_CONTACTO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_PERSONA_CONTACTO_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA_CONTACTO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_PERSONA_CONTACTO SET
		crprc_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_RES_CONTACTOS_PERSONA_BYID
* SELECCIONA LOS CONTACTOS DE UNA PERSONA SEGUN EL ID
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO DE PERSONA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_CONTACTOS_PERSONA_BYID(
IN IN_CRPER_CODIGO SII.CGG_RES_PERSONA.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT		
		TCO.CRTCO_NOMBRE,
		PCO.CRPRC_CONTACTO as CRPRC_CONTACTO
	FROM SII.CGG_RES_PERSONA PER INNER JOIN SII.CGG_RES_PERSONA_CONTACTO PCO ON(PCO.CRPER_CODIGO=PER.CRPER_CODIGO)
	INNER JOIN SII.CGG_RES_TIPO_CONTACTO TCO ON(PCO.CRTCO_CODIGO=TCO.CRTCO_CODIGO)
	WHERE PER.CRPER_ESTADO = TRUE AND 
		PER.CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_contactosPaginadosContactosBYID
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE PERSONA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION sii.F_CGG_contactosPaginadosContactosBYID(in_user_name character varying, in_start_index integer, in_limit integer, in_sort_field_name character varying, in_direction character varying, in_find_text text,inCrper_codigo character varying)
  RETURNS SETOF refcursor AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CON.CRPRC_CODIGO, 
		CON.CRPER_CODIGO,
		CON.CRTCO_CODIGO,
		CON.CRPRC_DESCRIPCION,
		CON.CRPRC_CONTACTO,
		TCN.CRTCO_NOMBRE,
		TCN.CRTCO_NOMBRE_IMAGEN 
	FROM SII.CGG_RES_PERSONA_CONTACTO CON INNER JOIN SII.CGG_RES_TIPO_CONTACTO TCN ON (CON.CRTCO_CODIGO=TCN.CRTCO_CODIGO)
	WHERE CON.CRPRC_ESTADO = TRUE AND CON.CRPER_CODIGO='''||inCrper_codigo||''' AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CON.CRPRC_CODIGO IS NULL THEN '''' ELSE CON.CRPRC_CODIGO END ||'' ''||CASE WHEN CON.CRPER_CODIGO IS NULL THEN '''' ELSE CON.CRPER_CODIGO END ||'' ''||CASE WHEN CON.CRTCO_CODIGO IS NULL THEN '''' ELSE CON.CRTCO_CODIGO END ||'' ''||CASE WHEN CON.CRPRC_DESCRIPCION IS NULL THEN '''' ELSE CON.CRPRC_DESCRIPCION END ||'' ''||CASE WHEN CON.CRPRC_CONTACTO IS NULL THEN '''' ELSE CON.CRPRC_CONTACTO END ||'' ''||CASE WHEN TCN.CRTCO_NOMBRE IS NULL THEN '''' ELSE TCN.CRTCO_NOMBRE END) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.f_cgg_res_persona_contacto_countById
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_PERSONA_CONTACTO 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO UNICO DE PERSONA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.f_cgg_res_persona_contacto_countById(in_find_text text, inCrper_codigo character varying)
  RETURNS integer AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_PERSONA_CONTACTO
	WHERE CRPRC_ESTADO = TRUE AND CRPER_CODIGO = inCrper_codigo AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CRPRC_CODIGO IS NULL THEN '''' ELSE CRPRC_CODIGO END ||' '||CASE WHEN CRPER_CODIGO IS NULL THEN '''' ELSE CRPER_CODIGO END ||' '||CASE WHEN CRTCO_CODIGO IS NULL THEN '''' ELSE CRTCO_CODIGO END ||' '||CASE WHEN CRPRC_DESCRIPCION IS NULL THEN '''' ELSE CRPRC_DESCRIPCION END ||' '||CASE WHEN CRPRC_CONTACTO IS NULL THEN '''' ELSE CRPRC_CONTACTO END ||' '||CASE WHEN CRPRC_ESTADO IS NULL THEN FALSE ELSE CRPRC_ESTADO END ||' '||CASE WHEN CRPRC_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CRPRC_FECHA_INSERT END ||' '||CASE WHEN CRPRC_USUARIO_INSERT IS NULL THEN '''' ELSE CRPRC_USUARIO_INSERT END ||' '||CASE WHEN CRPRC_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CRPRC_FECHA_UPDATE END ||' '||CASE WHEN CRPRC_USUARIO_UPDATE IS NULL THEN '''' ELSE CRPRC_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
