/**
* FUNCION SII.F_CGG_JUR_ASESOR_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_JUR_ASESOR.
* @param IN_CJASE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASESOR DE PROCESO JURIDICO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @param IN_CJASE_ACTIVO ESTADO QUE DETERMINA SI UN ENCARGADO SE HALLA ACTIVO SOBRE UN PROCESO
0 - NO ACTIVO
1 - ACTIVO
2 - OTRO
* @param IN_CJASE_ESTADO ESTADO DEL REGISTRO
* @param IN_CJASE_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CJASE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_INSERT(
IN IN_CJASE_CODIGO SII.CGG_JUR_ASESOR.CJASE_CODIGO%TYPE,
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR.CUSU_CODIGO%TYPE,
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR.CJPJU_CODIGO%TYPE,
IN IN_CJASE_ACTIVO SII.CGG_JUR_ASESOR.CJASE_ACTIVO%TYPE,
IN IN_CJASE_ESTADO SII.CGG_JUR_ASESOR.CJASE_ESTADO%TYPE,
IN IN_CJASE_USUARIO_INSERT SII.CGG_JUR_ASESOR.CJASE_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CJASE_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_JUR_ASESOR','CJASE_CODIGO','CJASE') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CJASE_CODIGO;
	END IF;
	INSERT INTO SII.CGG_JUR_ASESOR(
		CJASE_CODIGO, 
		CUSU_CODIGO, 
		CJPJU_CODIGO, 
		CJASE_ACTIVO, 
		CJASE_ESTADO, 
		CJASE_FECHA_INSERT, 
		CJASE_USUARIO_INSERT, 
		CJASE_FECHA_UPDATE, 
		CJASE_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CUSU_CODIGO, 
		IN_CJPJU_CODIGO, 
		IN_CJASE_ACTIVO, 
		IN_CJASE_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CJASE_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CJASE_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_JUR_ASESOR.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJASE_CODIGO, 
		CUSU_CODIGO, 
		CJPJU_CODIGO, 
		CJASE_ACTIVO, 
		CJASE_ESTADO, 
		CJASE_FECHA_INSERT, 
		CJASE_USUARIO_INSERT, 
		CJASE_FECHA_UPDATE, 
		CJASE_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR
	WHERE CJASE_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_JUR_ASESOR.
* @PARAM IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @PARAM IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @PARAM IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @PARAM IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @PARAM IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @PARAM IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @RETURN REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		JAS.CJASE_CODIGO, 
		JAS.CUSU_CODIGO,
		US.CUSU_NOMBRE_USUARIO,
		PR.CRPER_CODIGO, 		 
		PR.CRDID_CODIGO, 
		(SELECT CRDID_DESCRIPCION FROM CGG_RES_DOCUMENTO_IDENTIFICACIO DI WHERE DI.CRDID_CODIGO= PR.CRDID_CODIGO) DOCUMENTO, 				
		PR.CRPER_NOMBRES, 
		(PR.CRPER_APELLIDO_PATERNO||'' ''|| PR.CRPER_APELLIDO_MATERNO) APELLIDO,
		PR.CRPER_NUM_DOC_IDENTIFIC, 
		PR.CRPER_FECHA_NACIMIENTO, 		
		PR.CRPER_GENERO,		
		PR.CPRR_CODIGO, 
		(SELECT CPRR_NOMBRE FROM CGG_PARROQUIA PA WHERE PA.CPRR_CODIGO= PR.CPRR_CODIGO) PARROQUIA, 
		PR.CCTN_CODIGO, 		
		(SELECT CCTN_NOMBRE FROM CGG_CANTON CT WHERE CT.CCTN_CODIGO= PR.CCTN_CODIGO) CANTON, 
		JAS.CJPJU_CODIGO, 
		PJ.CJPJU_NUMERO,
		JAS.CJASE_ACTIVO, 
		JAS.CJASE_ESTADO, 
		JAS.CJASE_FECHA_INSERT, 
		JAS.CJASE_USUARIO_INSERT, 
		JAS.CJASE_FECHA_UPDATE, 
		JAS.CJASE_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR JAS
	INNER JOIN SII.CGG_USUARIO US ON (US.CUSU_CODIGO= JAS.CUSU_CODIGO)
	INNER JOIN SII.CGG_RES_PERSONA PR ON (PR.CRPER_CODIGO = US.CRPER_CODIGO)
	INNER JOIN SII.CGG_JUR_PROCESO_JUDICIAL PJ ON(PJ.CJPJU_CODIGO = JAS.CJPJU_CODIGO)
	WHERE CJASE_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	COALESCE(PR.CRPER_NOMBRES, '''')||'' ''||
	COALESCE(PR.CRPER_APELLIDO_PATERNO,'''')||'' ''|| 
	COALESCE(PR.CRPER_APELLIDO_MATERNO,'''')||'' ''||
	COALESCE(PR.CRPER_NUM_DOC_IDENTIFIC,'''')||'' ''||
	COALESCE(PJ.CJPJU_NUMERO,'''')||'' ''||
	COALESCE(US.CUSU_NOMBRE_USUARIO, '''')||'' ''||
	COALESCE(PR.CRPER_CODIGO, '''')||'' ''||
	COALESCE(PR.CRDID_CODIGO, '''')||'' ''||
	COALESCE(PR.CRPER_NOMBRES, '''')||'' ''||
	COALESCE(PR.CRPER_NUM_DOC_IDENTIFIC,'''' )||'' ''||
	COALESCE(PR.CRPER_FECHA_NACIMIENTO,CURRENT_TIMESTAMP)||'' ''||
	COALESCE(PR.CRPER_GENERO, 0)||'' ''||
	COALESCE(PR.CPRR_CODIGO, '''')||'' ''||
	COALESCE(PR.CCTN_CODIGO, '''')||'' ''||
	COALESCE(JAS.CJPJU_CODIGO, '''')||'' ''||
	COALESCE(JAS.CJASE_ACTIVO, 0)||'' ''||	
	COALESCE(JAS.CJASE_ESTADO, FALSE)||'' ''||
	COALESCE(JAS.CJASE_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(JAS.CJASE_USUARIO_INSERT, '''')||'' ''||
	COALESCE(JAS.CJASE_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||
	COALESCE(JAS.CJASE_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'PLPGSQL' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_ASESOR.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_ASESOR JAS
	INNER JOIN CGG_USUARIO US ON (US.CUSU_CODIGO= JAS.CUSU_CODIGO)
	INNER JOIN CGG_RES_PERSONA PR ON (PR.CRPER_CODIGO = US.CRPER_CODIGO)
	WHERE CJASE_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_JUR_ASESOR.
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_JUR_ASESOR JAS
	INNER JOIN CGG_USUARIO US ON (US.CUSU_CODIGO= JAS.CUSU_CODIGO)
	INNER JOIN CGG_RES_PERSONA PR ON (PR.CRPER_CODIGO = US.CRPER_CODIGO)
	WHERE CJASE_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,
	COALESCE(US.CUSU_NOMBRE_USUARIO, '''')||' '||
	COALESCE(PR.CRPER_CODIGO, '''')||' '||
	COALESCE(PR.CRDID_CODIGO, '''')||' '||
	COALESCE(PR.CRPER_NOMBRES, '''')||' '||
	COALESCE(PR.CRPER_NUM_DOC_IDENTIFIC, '''')||' '||
	COALESCE(PR.CRPER_FECHA_NACIMIENTO,'''' )||' '||
	COALESCE(PR.CRPER_GENERO, '''')||' '||
	COALESCE(PR.CPRR_CODIGO, '''')||' '||
	COALESCE(PR.CCTN_CODIGO, '''')||' '||
	COALESCE(JAS.CJPJU_CODIGO, '''')||' '||
	COALESCE(JAS.CJASE_ACTIVO, '''')||' '||	
	COALESCE(JAS.CJASE_ESTADO, FALSE)||' '||
	COALESCE(JAS.CJASE_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||
	COALESCE(JAS.CJASE_USUARIO_INSERT, '''')||' '||
	COALESCE(JAS.CJASE_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||
	COALESCE(JAS.CJASE_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_JUR_ASESOR.
* @param IN_CJASE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASESOR DE PROCESO JURIDICO
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @param IN_CJASE_ACTIVO ESTADO QUE DETERMINA SI UN ENCARGADO SE HALLA ACTIVO SOBRE UN PROCESO
0 - NO ACTIVO
1 - ACTIVO
2 - OTRO
* @param IN_CJASE_ESTADO ESTADO DEL REGISTRO
* @param IN_CJASE_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_UPDATE(
IN IN_CJASE_CODIGO SII.CGG_JUR_ASESOR.CJASE_CODIGO%TYPE,
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR.CUSU_CODIGO%TYPE,
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR.CJPJU_CODIGO%TYPE,
IN IN_CJASE_ACTIVO SII.CGG_JUR_ASESOR.CJASE_ACTIVO%TYPE,
IN IN_CJASE_ESTADO SII.CGG_JUR_ASESOR.CJASE_ESTADO%TYPE,
IN IN_CJASE_USUARIO_UPDATE SII.CGG_JUR_ASESOR.CJASE_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_ASESOR SET
		CUSU_CODIGO = IN_CUSU_CODIGO, 
		CJPJU_CODIGO = IN_CJPJU_CODIGO, 
		CJASE_ACTIVO = IN_CJASE_ACTIVO, 
		CJASE_ESTADO = IN_CJASE_ESTADO, 
		CJASE_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CJASE_USUARIO_UPDATE = IN_CJASE_USUARIO_UPDATE
	WHERE
		CJASE_CODIGO = IN_CJASE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_JUR_ASESOR.
* @param IN_CJASE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASESOR DE PROCESO JURIDICO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_SELECT(
IN IN_CJASE_CODIGO SII.CGG_JUR_ASESOR.CJASE_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJASE_CODIGO, 
		CUSU_CODIGO, 
		CJPJU_CODIGO, 
		CJASE_ACTIVO, 
		CJASE_ESTADO, 
		CJASE_FECHA_INSERT, 
		CJASE_USUARIO_INSERT, 
		CJASE_FECHA_UPDATE, 
		CJASE_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR
	WHERE CJASE_ESTADO = TRUE AND 
		CJASE_CODIGO = IN_CJASE_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_JUR_ASESOR
* @param IN_CJASE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASESOR DE PROCESO JURIDICO.
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_DELETE(
IN IN_CJASE_CODIGO SII.CGG_JUR_ASESOR.CJASE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_ASESOR
	WHERE
		CJASE_CODIGO = IN_CJASE_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_JUR_ASESOR.
* @param IN_CJASE_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ASESOR DE PROCESO JURIDICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_DELETE_SOFT(
IN IN_CJASE_CODIGO SII.CGG_JUR_ASESOR.CJASE_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_ASESOR SET
		CJASE_ESTADO = FALSE
	WHERE
		CJASE_CODIGO = IN_CJASE_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_S_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR.CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJASE_CODIGO, 
		CUSU_CODIGO, 
		CJPJU_CODIGO, 
		CJASE_ACTIVO, 
		CJASE_ESTADO, 
		CJASE_FECHA_INSERT, 
		CJASE_USUARIO_INSERT, 
		CJASE_FECHA_UPDATE, 
		CJASE_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR
	WHERE CJASE_ESTADO = TRUE AND 
		CUSU_CODIGO = IN_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_D_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_ASESOR
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_DS_CGG_USUARIO(
IN IN_CUSU_CODIGO SII.CGG_JUR_ASESOR.CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_ASESOR SET
		cjase_estado = false
	WHERE
		CUSU_CODIGO = IN_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_S_CGG_JUR_PROCESO_JUDICIAL
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_S_CGG_JUR_PROCESO_JUDICIAL(
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR.CJPJU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CJASE_CODIGO, 
		CUSU_CODIGO, 
		CJPJU_CODIGO, 
		CJASE_ACTIVO, 
		CJASE_ESTADO, 
		CJASE_FECHA_INSERT, 
		CJASE_USUARIO_INSERT, 
		CJASE_FECHA_UPDATE, 
		CJASE_USUARIO_UPDATE
	FROM SII.CGG_JUR_ASESOR
	WHERE CJASE_ESTADO = TRUE AND 
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_D_CGG_JUR_PROCESO_JUDICIAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_D_CGG_JUR_PROCESO_JUDICIAL(
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR.CJPJU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_JUR_ASESOR
	WHERE
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_JUR_ASESOR_D_CGG_JUR_PROCESO_JUDICIAL
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_JUR_ASESOR QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_JUR_PROCESO_JUDICIAL.
* @param IN_CJPJU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO JUDICIAL
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_JUR_ASESOR_DS_CGG_JUR_PROCESO_JUDICIAL(
IN IN_CJPJU_CODIGO SII.CGG_JUR_ASESOR.CJPJU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_JUR_ASESOR SET
		cjase_estado = false
	WHERE
		CJPJU_CODIGO = IN_CJPJU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

