/**
* FUNCION SII.F_CGG_DHU_TIPO_CURSO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_CURSO.
* @param IN_CDTCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CURSO
* @param IN_CDTCR_NOMBRE NOMBRE O DESCRIPCION DEL TIPO DE CURSO
* @param IN_CDTCR_TIPO_RESIDENTE TIPO DE RESIDENTE PARA SEGUIR UN CURSO
* @param IN_CDTCR_ESTADO ESTADO DEL REGISTRO
* @param IN_CDTCR_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDTCR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CURSO_INSERT(
IN IN_CDTCR_CODIGO SII.CGG_DHU_TIPO_CURSO.CDTCR_CODIGO%TYPE, 
IN IN_CDTCR_NOMBRE SII.CGG_DHU_TIPO_CURSO.CDTCR_NOMBRE%TYPE, 
IN IN_CDTCR_TIPO_RESIDENTE SII.CGG_DHU_TIPO_CURSO.CDTCR_TIPO_RESIDENTE%TYPE,
IN IN_CDTCR_ESTADO SII.CGG_DHU_TIPO_CURSO.CDTCR_ESTADO%TYPE, 
IN IN_CDTCR_USUARIO_INSERT SII.CGG_DHU_TIPO_CURSO.CDTCR_USUARIO_INSERT%TYPE, 
IN IN_CDTCR_USUARIO_UPDATE SII.CGG_DHU_TIPO_CURSO.CDTCR_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDTCR_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_TIPO_CURSO','CDTCR_CODIGO','CDTCR') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDTCR_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_TIPO_CURSO(
		CDTCR_CODIGO, 
		CDTCR_NOMBRE, 
		CDTCR_TIPO_RESIDENTE,
		CDTCR_ESTADO, 
		CDTCR_FECHA_INSERT, 
		CDTCR_USUARIO_INSERT, 
		CDTCR_FECHA_UPDATE, 
		CDTCR_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CDTCR_NOMBRE, 
		IN_CDTCR_TIPO_RESIDENTE,
		IN_CDTCR_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDTCR_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDTCR_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CURSO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_CURSO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CURSO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDTCR_CODIGO, 
		CDTCR_NOMBRE, 
		CDTCR_TIPO_RESIDENTE,
		CDTCR_ESTADO, 
		CDTCR_FECHA_INSERT, 
		CDTCR_USUARIO_INSERT, 
		CDTCR_FECHA_UPDATE, 
		CDTCR_USUARIO_UPDATE
	FROM SII.CGG_DHU_TIPO_CURSO
	WHERE CDTCR_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CURSO__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_CURSO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CURSO_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CDTCR_CODIGO, 
		CDTCR_NOMBRE, 
		CDTCR_TIPO_RESIDENTE,
		CDTCR_ESTADO, 
		CDTCR_FECHA_INSERT, 
		CDTCR_USUARIO_INSERT, 
		CDTCR_FECHA_UPDATE, 
		CDTCR_USUARIO_UPDATE
	FROM SII.CGG_DHU_TIPO_CURSO
	WHERE CDTCR_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',
	CASE WHEN CDTCR_CODIGO IS NULL THEN '''' ELSE CDTCR_CODIGO END ||'' ''||
	CASE WHEN CDTCR_NOMBRE IS NULL THEN '''' ELSE CDTCR_NOMBRE END ||'' ''||
	CASE WHEN CDTCR_TIPO_RESIDENTE IS NULL THEN 0 ELSE CDTCR_TIPO_RESIDENTE END ||'' ''||
	CASE WHEN CDTCR_ESTADO IS NULL THEN FALSE ELSE CDTCR_ESTADO END ||'' ''||
	CASE WHEN CDTCR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDTCR_FECHA_INSERT END ||'' ''||
	CASE WHEN CDTCR_USUARIO_INSERT IS NULL THEN '''' ELSE CDTCR_USUARIO_INSERT END ||'' ''||
	CASE WHEN CDTCR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDTCR_FECHA_UPDATE END ||'' ''||
	CASE WHEN CDTCR_USUARIO_UPDATE IS NULL THEN '''' ELSE CDTCR_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CURSO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_CURSO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CURSO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_TIPO_CURSO
	WHERE CDTCR_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CURSO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_CURSO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CURSO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_TIPO_CURSO
	WHERE CDTCR_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,
	CASE WHEN CDTCR_CODIGO IS NULL THEN '''' ELSE CDTCR_CODIGO END ||' '||
	CASE WHEN CDTCR_NOMBRE IS NULL THEN '''' ELSE CDTCR_NOMBRE END ||' '||
	CASE WHEN CDTCR_TIPO_RESIDENTE IS NULL THEN 0 ELSE CDTCR_TIPO_RESIDENTE END ||' '||
	CASE WHEN CDTCR_ESTADO IS NULL THEN FALSE ELSE CDTCR_ESTADO END ||' '||
	CASE WHEN CDTCR_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDTCR_FECHA_INSERT END ||' '||
	CASE WHEN CDTCR_USUARIO_INSERT IS NULL THEN '''' ELSE CDTCR_USUARIO_INSERT END ||' '||
	CASE WHEN CDTCR_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDTCR_FECHA_UPDATE END ||' '||
	CASE WHEN CDTCR_USUARIO_UPDATE IS NULL THEN '''' ELSE CDTCR_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CURSO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_TIPO_CURSO.
* @param IN_CDTCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CURSO
* @param IN_CDTCR_NOMBRE NOMBRE O DESCRIPCION DEL TIPO DE CURSO
* @param IN_CDTCR_TIPO_RESIDENTE IDENTIFICADOR DEL TIPO DE RESIDENTE
* @param IN_CDTCR_ESTADO ESTADO DEL REGISTRO
* @param IN_CDTCR_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CURSO_UPDATE(
IN IN_CDTCR_CODIGO SII.CGG_DHU_TIPO_CURSO.CDTCR_CODIGO%TYPE, 
IN IN_CDTCR_NOMBRE SII.CGG_DHU_TIPO_CURSO.CDTCR_NOMBRE%TYPE, 
IN IN_CDTCR_TIPO_RESIDENTE SII.CGG_DHU_TIPO_CURSO.CDTCR_TIPO_RESIDENTE%TYPE,
IN IN_CDTCR_ESTADO SII.CGG_DHU_TIPO_CURSO.CDTCR_ESTADO%TYPE, 
IN IN_CDTCR_USUARIO_UPDATE SII.CGG_DHU_TIPO_CURSO.CDTCR_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_TIPO_CURSO SET
		CDTCR_NOMBRE = IN_CDTCR_NOMBRE, 
		CDTCR_TIPO_RESIDENTE = IN_CDTCR_TIPO_RESIDENTE,
		CDTCR_ESTADO = IN_CDTCR_ESTADO, 
		CDTCR_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDTCR_USUARIO_UPDATE = IN_CDTCR_USUARIO_UPDATE
	WHERE
		CDTCR_CODIGO = IN_CDTCR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CURSO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_CURSO.
* @param IN_CDTCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CURSO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CURSO_SELECT(
IN IN_CDTCR_CODIGO SII.CGG_DHU_TIPO_CURSO.CDTCR_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDTCR_CODIGO, 
		CDTCR_NOMBRE, 
		CDTCR_TIPO_RESIDENTE,
		CDTCR_ESTADO, 
		CDTCR_FECHA_INSERT, 
		CDTCR_USUARIO_INSERT, 
		CDTCR_FECHA_UPDATE, 
		CDTCR_USUARIO_UPDATE
	FROM SII.CGG_DHU_TIPO_CURSO
	WHERE CDTCR_ESTADO = TRUE AND 
		CDTCR_CODIGO = IN_CDTCR_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CURSO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_CURSO.
* @param IN_CDTCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CURSO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CURSO_DELETE(
IN IN_CDTCR_CODIGO SII.CGG_DHU_TIPO_CURSO.CDTCR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_TIPO_CURSO
	WHERE
		CDTCR_CODIGO = IN_CDTCR_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CURSO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_CURSO.
* @param IN_CDTCR_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CURSO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CURSO_DELETE_SOFT(
IN IN_CDTCR_CODIGO SII.CGG_DHU_TIPO_CURSO.CDTCR_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_TIPO_CURSO SET
		CDTCR_ESTADO = FALSE
	WHERE
		CDTCR_CODIGO = IN_CDTCR_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

