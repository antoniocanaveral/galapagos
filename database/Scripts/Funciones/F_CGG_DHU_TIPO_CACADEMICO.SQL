/**
* FUNCION SII.F_CGG_DHU_TIPO_CACADEMICO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_CACADEMICO.
* @param IN_CDTCA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CERTIFICADO ACADEMICO
* @param IN_CDTCA_NOMBRE NOMBRE DEL CERTIFICADO
* @param IN_CDTCA_OBSERVACION INFORMACION ADICIONAL
* @param IN_CDTCA_ESTADO ESTADO DEL REGISTRO
* @param IN_CDTCA_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDTCA_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CACADEMICO_INSERT(
IN IN_CDTCA_CODIGO SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_CODIGO%TYPE, 
IN IN_CDTCA_NOMBRE SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_NOMBRE%TYPE, 
IN IN_CDTCA_OBSERVACION SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_OBSERVACION%TYPE, 
IN IN_CDTCA_ESTADO SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_ESTADO%TYPE, 
IN IN_CDTCA_USUARIO_INSERT SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_USUARIO_INSERT%TYPE, 
IN IN_CDTCA_USUARIO_UPDATE SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDTCA_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_TIPO_CACADEMICO','CDTCA_CODIGO','CDTCA') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDTCA_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_TIPO_CACADEMICO(
		CDTCA_CODIGO, 
		CDTCA_NOMBRE, 
		CDTCA_OBSERVACION, 
		CDTCA_ESTADO, 
		CDTCA_FECHA_INSERT, 
		CDTCA_USUARIO_INSERT, 
		CDTCA_FECHA_UPDATE, 
		CDTCA_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CDTCA_NOMBRE, 
		IN_CDTCA_OBSERVACION, 
		IN_CDTCA_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDTCA_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDTCA_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CACADEMICO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_CACADEMICO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CACADEMICO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDTCA_CODIGO, 
		CDTCA_NOMBRE, 
		CDTCA_OBSERVACION, 
		CDTCA_ESTADO, 
		CDTCA_FECHA_INSERT, 
		CDTCA_USUARIO_INSERT, 
		CDTCA_FECHA_UPDATE, 
		CDTCA_USUARIO_UPDATE
	FROM SII.CGG_DHU_TIPO_CACADEMICO
	WHERE CDTCA_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CACADEMICO__SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_CACADEMICO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CACADEMICO_SELECT(
IN IN_USER_NAME varchar(50),
IN IN_START_INDEX int,
IN IN_LIMIT int,
IN IN_SORT_FIELD_NAME varchar,
IN IN_DIRECTION varchar,
IN IN_FIND_TEXT text
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CDTCA_CODIGO, 
		CDTCA_NOMBRE, 
		CDTCA_OBSERVACION, 
		CDTCA_ESTADO, 
		CDTCA_FECHA_INSERT, 
		CDTCA_USUARIO_INSERT, 
		CDTCA_FECHA_UPDATE, 
		CDTCA_USUARIO_UPDATE
	FROM SII.CGG_DHU_TIPO_CACADEMICO
	WHERE CDTCA_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',CASE WHEN CDTCA_CODIGO IS NULL THEN '''' ELSE CDTCA_CODIGO END ||'' ''||CASE WHEN CDTCA_NOMBRE IS NULL THEN '''' ELSE CDTCA_NOMBRE END ||'' ''||CASE WHEN CDTCA_OBSERVACION IS NULL THEN '''' ELSE CDTCA_OBSERVACION END ||'' ''||CASE WHEN CDTCA_ESTADO IS NULL THEN FALSE ELSE CDTCA_ESTADO END ||'' ''||CASE WHEN CDTCA_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDTCA_FECHA_INSERT END ||'' ''||CASE WHEN CDTCA_USUARIO_INSERT IS NULL THEN '''' ELSE CDTCA_USUARIO_INSERT END ||'' ''||CASE WHEN CDTCA_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDTCA_FECHA_UPDATE END ||'' ''||CASE WHEN CDTCA_USUARIO_UPDATE IS NULL THEN '''' ELSE CDTCA_USUARIO_UPDATE END ) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CACADEMICO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_CACADEMICO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CACADEMICO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_TIPO_CACADEMICO
	WHERE CDTCA_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CACADEMICO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_TIPO_CACADEMICO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CACADEMICO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_TIPO_CACADEMICO
	WHERE CDTCA_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CDTCA_CODIGO IS NULL THEN '''' ELSE CDTCA_CODIGO END ||' '||CASE WHEN CDTCA_NOMBRE IS NULL THEN '''' ELSE CDTCA_NOMBRE END ||' '||CASE WHEN CDTCA_OBSERVACION IS NULL THEN '''' ELSE CDTCA_OBSERVACION END ||' '||CASE WHEN CDTCA_ESTADO IS NULL THEN FALSE ELSE CDTCA_ESTADO END ||' '||CASE WHEN CDTCA_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDTCA_FECHA_INSERT END ||' '||CASE WHEN CDTCA_USUARIO_INSERT IS NULL THEN '''' ELSE CDTCA_USUARIO_INSERT END ||' '||CASE WHEN CDTCA_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDTCA_FECHA_UPDATE END ||' '||CASE WHEN CDTCA_USUARIO_UPDATE IS NULL THEN '''' ELSE CDTCA_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CACADEMICO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_TIPO_CACADEMICO.
* @param IN_CDTCA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CERTIFICADO ACADEMICO
* @param IN_CDTCA_NOMBRE NOMBRE DEL CERTIFICADO
* @param IN_CDTCA_OBSERVACION INFORMACION ADICIONAL
* @param IN_CDTCA_ESTADO ESTADO DEL REGISTRO
* @param IN_CDTCA_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CACADEMICO_UPDATE(
IN IN_CDTCA_CODIGO SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_CODIGO%TYPE, 
IN IN_CDTCA_NOMBRE SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_NOMBRE%TYPE, 
IN IN_CDTCA_OBSERVACION SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_OBSERVACION%TYPE, 
IN IN_CDTCA_ESTADO SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_ESTADO%TYPE, 
IN IN_CDTCA_USUARIO_UPDATE SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_TIPO_CACADEMICO SET
		CDTCA_NOMBRE = IN_CDTCA_NOMBRE, 
		CDTCA_OBSERVACION = IN_CDTCA_OBSERVACION, 
		CDTCA_ESTADO = IN_CDTCA_ESTADO, 
		CDTCA_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDTCA_USUARIO_UPDATE = IN_CDTCA_USUARIO_UPDATE
	WHERE
		CDTCA_CODIGO = IN_CDTCA_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CACADEMICO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_CACADEMICO.
* @param IN_CDTCA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CERTIFICADO ACADEMICO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CACADEMICO_SELECT(
IN IN_CDTCA_CODIGO SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDTCA_CODIGO, 
		CDTCA_NOMBRE, 
		CDTCA_OBSERVACION, 
		CDTCA_ESTADO, 
		CDTCA_FECHA_INSERT, 
		CDTCA_USUARIO_INSERT, 
		CDTCA_FECHA_UPDATE, 
		CDTCA_USUARIO_UPDATE
	FROM SII.CGG_DHU_TIPO_CACADEMICO
	WHERE CDTCA_ESTADO = TRUE AND 
		CDTCA_CODIGO = IN_CDTCA_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CACADEMICO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_CACADEMICO.
* @param IN_CDTCA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CERTIFICADO ACADEMICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CACADEMICO_DELETE(
IN IN_CDTCA_CODIGO SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_TIPO_CACADEMICO
	WHERE
		CDTCA_CODIGO = IN_CDTCA_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_TIPO_CACADEMICO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_TIPO_CACADEMICO.
* @param IN_CDTCA_CODIGO IDENTIFICATIVO UNICO DE REGISTRO TIPO DE CERTIFICADO ACADEMICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_TIPO_CACADEMICO_DELETE_SOFT(
IN IN_CDTCA_CODIGO SII.CGG_DHU_TIPO_CACADEMICO.CDTCA_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_TIPO_CACADEMICO SET
		CDTCA_ESTADO = FALSE
	WHERE
		CDTCA_CODIGO = IN_CDTCA_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

