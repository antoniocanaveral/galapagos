/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @param IN_CDACD_NUMERO_CICLO NUMERO DE CICLO ACADEMICO
* @param IN_CDACD_FECHA_INICIO FECHA DE INICIO DEL CICLO
* @param IN_CDACD_FECHA_FIN FECHA DE CULMINACION DEL CICLO
* @param IN_CDACD_OBSERVACION INFORMACION ADICIONAL
* @param IN_CDACD_ESTADO_APROBACION CAMPO QUE INDICA SI EL SEGUIMIENTO ACADEMICO FUE APROBADO VALORES:
0 - NO APROBADO
1 - APROBADO
2 - OTROS
* @param IN_CDACD_ESTADO ESTADO DEL REGISTRO
* @param IN_CDACD_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CDACD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_INSERT(
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDBEC_CODIGO%TYPE, 
IN IN_CDACD_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_CODIGO%TYPE, 
IN IN_CDACD_NUMERO_CICLO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_NUMERO_CICLO%TYPE, 
IN IN_CDACD_FECHA_INICIO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_FECHA_INICIO%TYPE, 
IN IN_CDACD_FECHA_FIN SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_FECHA_FIN%TYPE, 
IN IN_CDACD_OBSERVACION SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_OBSERVACION%TYPE, 
IN IN_CDACD_ESTADO_APROBACION SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_ESTADO_APROBACION%TYPE, 
IN IN_CDACD_ESTADO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_ESTADO%TYPE, 
IN IN_CDACD_USUARIO_INSERT SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_USUARIO_INSERT%TYPE, 
IN IN_CDACD_USUARIO_UPDATE SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CDACD_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_DHU_SEGUIMIENTO_ACADEMICO','CDACD_CODIGO','CDACD') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CDACD_CODIGO;
	END IF;
	INSERT INTO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO(
		CDBEC_CODIGO, 
		CDACD_CODIGO, 
		CDACD_NUMERO_CICLO, 
		CDACD_FECHA_INICIO, 
		CDACD_FECHA_FIN, 
		CDACD_OBSERVACION, 
		CDACD_ESTADO_APROBACION, 
		CDACD_ESTADO, 
		CDACD_FECHA_INSERT, 
		CDACD_USUARIO_INSERT, 
		CDACD_FECHA_UPDATE, 
		CDACD_USUARIO_UPDATE
	) VALUES (
		IN_CDBEC_CODIGO, 
		OUT_KEY, 
		IN_CDACD_NUMERO_CICLO, 
		IN_CDACD_FECHA_INICIO, 
		IN_CDACD_FECHA_FIN, 
		IN_CDACD_OBSERVACION, 
		IN_CDACD_ESTADO_APROBACION, 
		IN_CDACD_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CDACD_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CDACD_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_SELECT_AS(
IN IN_USER_NAME varchar(50)
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDBEC_CODIGO, 
		CDACD_CODIGO, 
		CDACD_NUMERO_CICLO, 
		CDACD_FECHA_INICIO, 
		CDACD_FECHA_FIN, 
		CDACD_OBSERVACION, 
		CDACD_ESTADO_APROBACION, 
		CDACD_ESTADO, 
		CDACD_FECHA_INSERT, 
		CDACD_USUARIO_INSERT, 
		CDACD_FECHA_UPDATE, 
		CDACD_USUARIO_UPDATE
	FROM SII.CGG_DHU_SEGUIMIENTO_ACADEMICO
	WHERE CDACD_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;



/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_SEGUIMIENTO_ACADEMICO
	WHERE CDACD_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS int2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_DHU_SEGUIMIENTO_ACADEMICO
	WHERE CDACD_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,CASE WHEN CDBEC_CODIGO IS NULL THEN '''' ELSE CDBEC_CODIGO END ||' '||CASE WHEN CDACD_CODIGO IS NULL THEN '''' ELSE CDACD_CODIGO END ||' '||CASE WHEN CDACD_NUMERO_CICLO IS NULL THEN 0 ELSE CDACD_NUMERO_CICLO END ||' '||CASE WHEN CDACD_FECHA_INICIO IS NULL THEN CURRENT_TIMESTAMP ELSE CDACD_FECHA_INICIO END ||' '||CASE WHEN CDACD_FECHA_FIN IS NULL THEN CURRENT_TIMESTAMP ELSE CDACD_FECHA_FIN END ||' '||CASE WHEN CDACD_OBSERVACION IS NULL THEN '''' ELSE CDACD_OBSERVACION END ||' '||CASE WHEN CDACD_ESTADO_APROBACION IS NULL THEN 0 ELSE CDACD_ESTADO_APROBACION END ||' '||CASE WHEN CDACD_ESTADO IS NULL THEN FALSE ELSE CDACD_ESTADO END ||' '||CASE WHEN CDACD_FECHA_INSERT IS NULL THEN CURRENT_TIMESTAMP ELSE CDACD_FECHA_INSERT END ||' '||CASE WHEN CDACD_USUARIO_INSERT IS NULL THEN '''' ELSE CDACD_USUARIO_INSERT END ||' '||CASE WHEN CDACD_FECHA_UPDATE IS NULL THEN CURRENT_TIMESTAMP ELSE CDACD_FECHA_UPDATE END ||' '||CASE WHEN CDACD_USUARIO_UPDATE IS NULL THEN '''' ELSE CDACD_USUARIO_UPDATE END ) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_DHU_SEGUIMIENTO_ACADEMICO
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @param IN_CDACD_NUMERO_CICLO NUMERO DE CICLO ACADEMICO
* @param IN_CDACD_FECHA_INICIO FECHA DE INICIO DEL CICLO
* @param IN_CDACD_FECHA_FIN FECHA DE CULMINACION DEL CICLO
* @param IN_CDACD_OBSERVACION INFORMACION ADICIONAL
* @param IN_CDACD_ESTADO_APROBACION CAMPO QUE INDICA SI EL SEGUIMIENTO ACADEMICO FUE APROBADO VALORES:
0 - NO APROBADO
1 - APROBADO
2 - OTROS
* @param IN_CDACD_ESTADO ESTADO DEL REGISTRO
* @param IN_CDACD_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_UPDATE(
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDBEC_CODIGO%TYPE, 
IN IN_CDACD_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_CODIGO%TYPE, 
IN IN_CDACD_NUMERO_CICLO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_NUMERO_CICLO%TYPE, 
IN IN_CDACD_FECHA_INICIO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_FECHA_INICIO%TYPE, 
IN IN_CDACD_FECHA_FIN SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_FECHA_FIN%TYPE, 
IN IN_CDACD_OBSERVACION SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_OBSERVACION%TYPE, 
IN IN_CDACD_ESTADO_APROBACION SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_ESTADO_APROBACION%TYPE, 
IN IN_CDACD_ESTADO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_ESTADO%TYPE, 
IN IN_CDACD_USUARIO_UPDATE SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SEGUIMIENTO_ACADEMICO SET
		CDBEC_CODIGO = IN_CDBEC_CODIGO, 
		CDACD_NUMERO_CICLO = IN_CDACD_NUMERO_CICLO, 
		CDACD_FECHA_INICIO = IN_CDACD_FECHA_INICIO, 
		CDACD_FECHA_FIN = IN_CDACD_FECHA_FIN, 
		CDACD_OBSERVACION = IN_CDACD_OBSERVACION, 
		CDACD_ESTADO_APROBACION = IN_CDACD_ESTADO_APROBACION, 
		CDACD_ESTADO = IN_CDACD_ESTADO, 
		CDACD_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CDACD_USUARIO_UPDATE = IN_CDACD_USUARIO_UPDATE
	WHERE
		CDACD_CODIGO = IN_CDACD_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_SELECT(
IN IN_CDACD_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDBEC_CODIGO, 
		CDACD_CODIGO, 
		CDACD_NUMERO_CICLO, 
		CDACD_FECHA_INICIO, 
		CDACD_FECHA_FIN, 
		CDACD_OBSERVACION, 
		CDACD_ESTADO_APROBACION, 
		CDACD_ESTADO, 
		CDACD_FECHA_INSERT, 
		CDACD_USUARIO_INSERT, 
		CDACD_FECHA_UPDATE, 
		CDACD_USUARIO_UPDATE
	FROM SII.CGG_DHU_SEGUIMIENTO_ACADEMICO
	WHERE CDACD_ESTADO = TRUE AND 
		CDACD_CODIGO = IN_CDACD_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_DELETE(
IN IN_CDACD_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_SEGUIMIENTO_ACADEMICO
	WHERE
		CDACD_CODIGO = IN_CDACD_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.
* @param IN_CDACD_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE SEGUIMIENTO ACADEMICO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_DELETE_SOFT(
IN IN_CDACD_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDACD_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SEGUIMIENTO_ACADEMICO SET
		CDACD_ESTADO = FALSE
	WHERE
		CDACD_CODIGO = IN_CDACD_CODIGO;
END$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_S_CGG_DHU_BECA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_S_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDBEC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CDBEC_CODIGO, 
		CDACD_CODIGO, 
		CDACD_NUMERO_CICLO, 
		CDACD_FECHA_INICIO, 
		CDACD_FECHA_FIN, 
		CDACD_OBSERVACION, 
		CDACD_ESTADO_APROBACION, 
		CDACD_ESTADO, 
		CDACD_FECHA_INSERT, 
		CDACD_USUARIO_INSERT, 
		CDACD_FECHA_UPDATE, 
		CDACD_USUARIO_UPDATE
	FROM SII.CGG_DHU_SEGUIMIENTO_ACADEMICO
	WHERE CDACD_ESTADO = TRUE AND 
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_D_CGG_DHU_BECA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_D_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDBEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_DHU_SEGUIMIENTO_ACADEMICO
	WHERE
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_D_CGG_DHU_BECA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_DHU_SEGUIMIENTO_ACADEMICO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_DHU_BECA.
* @param IN_CDBEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE BECA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_DHU_SEGUIMIENTO_ACADEMICO_DS_CGG_DHU_BECA(
IN IN_CDBEC_CODIGO SII.CGG_DHU_SEGUIMIENTO_ACADEMICO.CDBEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_DHU_SEGUIMIENTO_ACADEMICO SET
		cdacd_estado = false
	WHERE
		CDBEC_CODIGO = IN_CDBEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

