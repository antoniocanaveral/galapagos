/**
* FUNCION SII.F_CGG_RES_OBSERVADO_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_OBSERVADO
* @param IN_CROBS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CROBS_FECHA_OBSERVACION FECHA DE REGISTRO DE LA 0BSERVACION
* @param IN_CROBS_DESCRIPCION DESCRIPCION DEL INCONVENIENTE QUE GENERO LA OBSERVACION
* @param IN_CROBS_RESUELTO ESTADO QUE DETERMINA SI YA SE RESOLCIO LA OBSERVACION
* @param IN_CROBS_FECHA_RESUELTO FECHA DE RESOLUCION DE LA OBSERVACION
* @param IN_CROBS_ESTADO ESTADO DEL REGISTRO
* @param IN_CROBS_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CROBS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_INSERT(
IN IN_CROBS_CODIGO SII.CGG_RES_OBSERVADO.CROBS_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_OBSERVADO.CRPER_CODIGO%TYPE, 
IN IN_CROBS_FECHA_OBSERVACION SII.CGG_RES_OBSERVADO.CROBS_FECHA_OBSERVACION%TYPE, 
IN IN_CROBS_DESCRIPCION SII.CGG_RES_OBSERVADO.CROBS_DESCRIPCION%TYPE, 
IN IN_CROBS_RESUELTO SII.CGG_RES_OBSERVADO.CROBS_RESUELTO%TYPE, 
IN IN_CROBS_FECHA_RESUELTO SII.CGG_RES_OBSERVADO.CROBS_FECHA_RESUELTO%TYPE, 
IN IN_CROBS_ESTADO SII.CGG_RES_OBSERVADO.CROBS_ESTADO%TYPE, 
IN IN_CROBS_USUARIO_INSERT SII.CGG_RES_OBSERVADO.CROBS_USUARIO_INSERT%TYPE, 
IN IN_CROBS_USUARIO_UPDATE SII.CGG_RES_OBSERVADO.CROBS_USUARIO_UPDATE%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CROBS_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_OBSERVADO','CROBS_CODIGO','CROBS') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CROBS_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_OBSERVADO(
		CROBS_CODIGO, 
		CRPER_CODIGO, 
		CROBS_FECHA_OBSERVACION, 
		CROBS_DESCRIPCION, 
		CROBS_RESUELTO, 
		CROBS_FECHA_RESUELTO, 
		CROBS_ESTADO, 
		CROBS_FECHA_INSERT, 
		CROBS_USUARIO_INSERT, 
		CROBS_FECHA_UPDATE, 
		CROBS_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPER_CODIGO, 
		IN_CROBS_FECHA_OBSERVACION, 
		IN_CROBS_DESCRIPCION, 
		IN_CROBS_RESUELTO, 
		IN_CROBS_FECHA_RESUELTO, 
		IN_CROBS_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CROBS_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CROBS_USUARIO_UPDATE
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_OBSERVADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CROBS_CODIGO, 
		CRPER_CODIGO, 
		CROBS_FECHA_OBSERVACION, 
		CROBS_DESCRIPCION, 
		CROBS_RESUELTO, 
		CROBS_FECHA_RESUELTO, 
		CROBS_ESTADO, 
		CROBS_FECHA_INSERT, 
		CROBS_USUARIO_INSERT, 
		CROBS_FECHA_UPDATE, 
		CROBS_USUARIO_UPDATE
	FROM SII.CGG_RES_OBSERVADO
	WHERE CROBS_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_OBSERVADO
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		CROBS_CODIGO, 
		CRPER_CODIGO, 
		CROBS_FECHA_OBSERVACION, 
		CROBS_DESCRIPCION, 
		CROBS_RESUELTO, 
		CROBS_FECHA_RESUELTO, 
		CROBS_ESTADO, 
		CROBS_FECHA_INSERT, 
		CROBS_USUARIO_INSERT, 
		CROBS_FECHA_UPDATE, 
		CROBS_USUARIO_UPDATE
	FROM SII.CGG_RES_OBSERVADO
	WHERE CROBS_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(CROBS_FECHA_OBSERVACION, CURRENT_TIMESTAMP)||'' ''||COALESCE(CROBS_DESCRIPCION, '''')||'' ''||COALESCE(CROBS_RESUELTO, FALSE)||'' ''||COALESCE(CROBS_FECHA_RESUELTO, CURRENT_TIMESTAMP)||'' ''||COALESCE(CROBS_ESTADO, FALSE)||'' ''||COALESCE(CROBS_FECHA_INSERT, CURRENT_TIMESTAMP)||'' ''||COALESCE(CROBS_USUARIO_INSERT, '''')||'' ''||COALESCE(CROBS_FECHA_UPDATE, CURRENT_TIMESTAMP)||'' ''||COALESCE(CROBS_USUARIO_UPDATE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_OBSERVADO
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_OBSERVADO
	WHERE CROBS_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_OBSERVADO
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_OBSERVADO
	WHERE CROBS_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(CROBS_FECHA_OBSERVACION, CURRENT_TIMESTAMP)||' '||COALESCE(CROBS_DESCRIPCION, '''')||' '||COALESCE(CROBS_RESUELTO, FALSE)||' '||COALESCE(CROBS_FECHA_RESUELTO, CURRENT_TIMESTAMP)||' '||COALESCE(CROBS_ESTADO, FALSE)||' '||COALESCE(CROBS_FECHA_INSERT, CURRENT_TIMESTAMP)||' '||COALESCE(CROBS_USUARIO_INSERT, '''')||' '||COALESCE(CROBS_FECHA_UPDATE, CURRENT_TIMESTAMP)||' '||COALESCE(CROBS_USUARIO_UPDATE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_OBSERVADO
* @param IN_CROBS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @param IN_CROBS_FECHA_OBSERVACION FECHA DE REGISTRO DE LA 0BSERVACION
* @param IN_CROBS_DESCRIPCION DESCRIPCION DEL INCONVENIENTE QUE GENERO LA OBSERVACION
* @param IN_CROBS_RESUELTO ESTADO QUE DETERMINA SI YA SE RESOLCIO LA OBSERVACION
* @param IN_CROBS_FECHA_RESUELTO FECHA DE RESOLUCION DE LA OBSERVACION
* @param IN_CROBS_ESTADO ESTADO DEL REGISTRO
* @param IN_CROBS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_UPDATE(
IN IN_CROBS_CODIGO SII.CGG_RES_OBSERVADO.CROBS_CODIGO%TYPE, 
IN IN_CRPER_CODIGO SII.CGG_RES_OBSERVADO.CRPER_CODIGO%TYPE, 
IN IN_CROBS_FECHA_OBSERVACION SII.CGG_RES_OBSERVADO.CROBS_FECHA_OBSERVACION%TYPE, 
IN IN_CROBS_DESCRIPCION SII.CGG_RES_OBSERVADO.CROBS_DESCRIPCION%TYPE, 
IN IN_CROBS_RESUELTO SII.CGG_RES_OBSERVADO.CROBS_RESUELTO%TYPE, 
IN IN_CROBS_FECHA_RESUELTO SII.CGG_RES_OBSERVADO.CROBS_FECHA_RESUELTO%TYPE, 
IN IN_CROBS_ESTADO SII.CGG_RES_OBSERVADO.CROBS_ESTADO%TYPE, 
IN IN_CROBS_USUARIO_UPDATE SII.CGG_RES_OBSERVADO.CROBS_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_OBSERVADO SET
		CRPER_CODIGO = IN_CRPER_CODIGO, 
		CROBS_FECHA_OBSERVACION = IN_CROBS_FECHA_OBSERVACION, 
		CROBS_DESCRIPCION = IN_CROBS_DESCRIPCION, 
		CROBS_RESUELTO = IN_CROBS_RESUELTO, 
		CROBS_FECHA_RESUELTO = IN_CROBS_FECHA_RESUELTO, 
		CROBS_ESTADO = IN_CROBS_ESTADO, 
		CROBS_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CROBS_USUARIO_UPDATE = IN_CROBS_USUARIO_UPDATE
	WHERE
		CROBS_CODIGO = IN_CROBS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_OBSERVADO
* @param IN_CROBS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_SELECT(
IN IN_CROBS_CODIGO SII.CGG_RES_OBSERVADO.CROBS_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CROBS_CODIGO, 
		CRPER_CODIGO, 
		CROBS_FECHA_OBSERVACION, 
		CROBS_DESCRIPCION, 
		CROBS_RESUELTO, 
		CROBS_FECHA_RESUELTO, 
		CROBS_ESTADO, 
		CROBS_FECHA_INSERT, 
		CROBS_USUARIO_INSERT, 
		CROBS_FECHA_UPDATE, 
		CROBS_USUARIO_UPDATE
	FROM SII.CGG_RES_OBSERVADO
	WHERE CROBS_ESTADO = TRUE AND 
		CROBS_CODIGO = IN_CROBS_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_OBSERVADO
* @param IN_CROBS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_DELETE(
IN IN_CROBS_CODIGO SII.CGG_RES_OBSERVADO.CROBS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_OBSERVADO
	WHERE
		CROBS_CODIGO = IN_CROBS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_OBSERVADO
* @param IN_CROBS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_DELETE_SOFT(
IN IN_CROBS_CODIGO SII.CGG_RES_OBSERVADO.CROBS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_OBSERVADO SET
		CROBS_ESTADO = FALSE
	WHERE
		CROBS_CODIGO = IN_CROBS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_S_CGG_RES_PERSONA
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OBSERVADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_S_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_OBSERVADO.CRPER_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CROBS_CODIGO, 
		CRPER_CODIGO, 
		CROBS_FECHA_OBSERVACION, 
		CROBS_DESCRIPCION, 
		CASE CROBS_RESUELTO 
		WHEN 0 THEN FALSE
		ELSE TRUE
		END CROBS_RESUELTO, 
		CROBS_FECHA_RESUELTO, 
		CROBS_ESTADO, 
		CROBS_FECHA_INSERT, 
		CROBS_USUARIO_INSERT, 
		CROBS_FECHA_UPDATE, 
		CROBS_USUARIO_UPDATE
	FROM SII.CGG_RES_OBSERVADO
	WHERE CROBS_ESTADO = TRUE AND 
		CRPER_CODIGO = IN_CRPER_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OBSERVADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO CODIGO IDENTIFICATIVO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_D_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_OBSERVADO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_OBSERVADO
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_OBSERVADO_D_CGG_RES_PERSONA
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_OBSERVADO QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PERSONA.
* @param IN_CRPER_CODIGO IDENTIFICATIVO DE REGISTRO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_OBSERVADO_DS_CGG_RES_PERSONA(
IN IN_CRPER_CODIGO SII.CGG_RES_OBSERVADO.CRPER_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_OBSERVADO SET
		crobs_estado = false
	WHERE
		CRPER_CODIGO = IN_CRPER_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

