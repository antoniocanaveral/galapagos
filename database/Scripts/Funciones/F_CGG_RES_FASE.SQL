/**
* FUNCION SII.F_CGG_RES_FASE_INSERT
* INGRESA UN REGISTRO EN LA TABLA SII.CGG_RES_FASE
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CRPRO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO
* @param IN_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA POSITIVA
* @param IN_CGG_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA NEGATIVA
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO
* @param IN_CRFAS_NOMBRE INFORMACION DE IDENTIFICACION DE LA FASE
* @param IN_CRFAS_ORDEN ORDEN DE EJECUCION DE LA FASE
* @param IN_CRFAS_TAREA_REALIZA TAREA QUE SE REALIZA EN ESTA FASE DEL PROCESO
* @param IN_CRFAS_FUNCION_EJECUTA NOMBRE DE LA FUNCION O PROCEDIMIENTO QUE SE EJECUTARIA EN LA FASE
* @param IN_CRFAS_SUBE_ADJUNTO ESTADO QUE DETERMINA LA AUTORIZACION DE SUBIR ARCHIVOS ADJUNTOS
* @param IN_CRFAS_SUBE_ADJUNTO_REQUISITO ESTADO QUE DETERMINA LA AUTORIZACION DE SUBIR ARCHIVOS ADJUNTOS DE REQUISITOS
* @param IN_CRFAS_EJECUTA_DESPACHO ESTADO QUE DETERMINA SI LA FUNCION SE EJECUTA AL REALIZAR DESPACHO O DISTRIBUCION
* @param IN_CRFAS_ATENCION_NORMAL ESTADO QUE DETERMINA LA FASE SERA ATENDIDA EN FORMA NORMAL O A TRAVES DE OTRO PROCESO
* @param IN_CRFAS_ESTADO ESTADO DEL REGISTRO
* @param IN_CRFAS_USUARIO_INSERT USUARIO QUE INGRESO LA INFORMACION EN EL SISTEMA
* @param IN_CRFAS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VARCHAR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_INSERT(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE.CRFAS_CODIGO%TYPE,
IN IN_CRPRO_CODIGO SII.CGG_RES_FASE.CRPRO_CODIGO%TYPE,
IN IN_CRETT_CODIGO SII.CGG_RES_FASE.CRETT_CODIGO%TYPE,
IN IN_CGG_CRETT_CODIGO SII.CGG_RES_FASE.CGG_CRETT_CODIGO%TYPE,
IN IN_CRSEC_CODIGO SII.CGG_RES_FASE.CRSEC_CODIGO%TYPE,
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_FASE.CGG_CRFAS_CODIGO%TYPE,
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_FASE.CGG_CUSU_CODIGO%TYPE,
IN IN_CRFAS_NOMBRE SII.CGG_RES_FASE.CRFAS_NOMBRE%TYPE,
IN IN_CRFAS_ORDEN SII.CGG_RES_FASE.CRFAS_ORDEN%TYPE,
IN IN_CRFAS_TAREA_REALIZA SII.CGG_RES_FASE.CRFAS_TAREA_REALIZA%TYPE,
IN IN_CRFAS_FUNCION_EJECUTA SII.CGG_RES_FASE.CRFAS_FUNCION_EJECUTA%TYPE,
IN IN_CRFAS_SUBE_ADJUNTO SII.CGG_RES_FASE.CRFAS_SUBE_ADJUNTO%TYPE,
IN IN_CRFAS_SUBE_ADJUNTO_REQUISITO SII.CGG_RES_FASE.CRFAS_SUBE_ADJUNTO_REQUISITO%TYPE,
IN IN_CRFAS_EJECUTA_DESPACHO SII.CGG_RES_FASE.CRFAS_EJECUTA_DESPACHO%TYPE,
IN IN_CRFAS_ATENCION_NORMAL SII.CGG_RES_FASE.CRFAS_ATENCION_NORMAL%TYPE,
IN IN_CRFAS_ESTADO SII.CGG_RES_FASE.CRFAS_ESTADO%TYPE,
IN IN_CRFAS_USUARIO_INSERT SII.CGG_RES_FASE.CRFAS_USUARIO_INSERT%TYPE
)RETURNS VARCHAR AS
$$
DECLARE
OUT_KEY VARCHAR;
BEGIN
	IF (UPPER(IN_CRFAS_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_FASE','CRFAS_CODIGO','CRFAS') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRFAS_CODIGO;
	END IF;
	INSERT INTO SII.CGG_RES_FASE(
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_ORDEN, 
		CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO, 
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE
	) VALUES (
		OUT_KEY, 
		IN_CRPRO_CODIGO, 
		IN_CRETT_CODIGO, 
		IN_CGG_CRETT_CODIGO, 
		IN_CRSEC_CODIGO, 
		IN_CGG_CRFAS_CODIGO, 
		IN_CGG_CUSU_CODIGO, 
		IN_CRFAS_NOMBRE, 
		IN_CRFAS_ORDEN, 
		IN_CRFAS_TAREA_REALIZA, 
		IN_CRFAS_FUNCION_EJECUTA, 
		IN_CRFAS_SUBE_ADJUNTO, 
		IN_CRFAS_SUBE_ADJUNTO_REQUISITO, 
		IN_CRFAS_EJECUTA_DESPACHO, 
		IN_CRFAS_ATENCION_NORMAL, 
		IN_CRFAS_ESTADO, 
		CURRENT_TIMESTAMP, 
		IN_CRFAS_USUARIO_INSERT, 
		CURRENT_TIMESTAMP, 
		IN_CRFAS_USUARIO_INSERT
	);
	RETURN OUT_KEY;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_SELECT_AS
* SELECCIONA TODOS LOS REGISTROS DE LA TABLA SII.CGG_RES_FASE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_SELECT_AS(
IN IN_USER_NAME VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_ORDEN, 
		CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO, 
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE
	WHERE CRFAS_ESTADO = TRUE;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_SELECT
* SELECCIONA N REGISTROS DE LA TABLA SII.CGG_RES_FASE
* @param IN_USER_NAME NOMBRE DE USUARIO DEL SERVIDOR DE APP. O DE LA BASE DE DATOS.
* @param IN_START_INDEX INDICE DE INICIO DE REGISTROS.
* @param IN_LIMIT NUMERO DE REGISTRO DISCRIMINADOS
* @param IN_SORT_FIELD_NAME COLUMNA DE ORDENAMIENTO. 
* @param IN_DIRECTION DIRECCION DEL ORDENAMIENTO ASC/DESC. 
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_SELECT(
IN IN_USER_NAME VARCHAR,
IN IN_START_INDEX INT,
IN IN_LIMIT INT,
IN IN_SORT_FIELD_NAME VARCHAR,
IN IN_DIRECTION VARCHAR,
IN IN_FIND_TEXT TEXT
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT
		F.CRFAS_CODIGO, 
		F.CRPRO_CODIGO, 
		F.CRETT_CODIGO, 
		F.CGG_CRETT_CODIGO, 
		F.CRSEC_CODIGO, 
		F.CGG_CRFAS_CODIGO, 
		F.CGG_CUSU_CODIGO, 
		F.CRFAS_NOMBRE, 
		F.CRFAS_ORDEN, 
		F.CRFAS_TAREA_REALIZA, 
		F.CRFAS_FUNCION_EJECUTA, 
		F.CRFAS_SUBE_ADJUNTO, 
		F.CRFAS_SUBE_ADJUNTO_REQUISITO, 
		F.CRFAS_EJECUTA_DESPACHO, 
		F.CRFAS_ATENCION_NORMAL, 
		F.CRFAS_ESTADO, 
		F.CRFAS_FECHA_INSERT, 
		F.CRFAS_USUARIO_INSERT, 
		F.CRFAS_FECHA_UPDATE, 
		F.CRFAS_USUARIO_UPDATE,
		P.CRPRO_NOMBRE
	FROM SII.CGG_RES_FASE F
	INNER JOIN SII.CGG_RES_PROCESO P ON F.CRPRO_CODIGO=P.CRPRO_CODIGO
	WHERE CRFAS_ESTADO = TRUE AND SII.F_STRING_IN('''||IN_FIND_TEXT||''',COALESCE(F.CRFAS_NOMBRE, '''')||'' ''||COALESCE(F.CRFAS_TAREA_REALIZA, '''')||'' ''||COALESCE(F.CRFAS_FUNCION_EJECUTA, '''')||'' ''||COALESCE(P.CRPRO_NOMBRE, '''')) = 1
	ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||
	' LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_FASE
* @return INT
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_COUNT(
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(*) INTO TMP_ROWS
	FROM SII.CGG_RES_FASE
	WHERE CRFAS_ESTADO = TRUE;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_COUNT
* CONTABILIZA EL NUMERO DE REGISTROS DE LA TABLA SII.CGG_RES_FASE
* QUE CUMPLEN CON EL CRITERIO DE BUSQUEDA.
* @param IN_FIND_TEXT CRITERIO DE BUSQUEDA.
* @return TOTAL DE REGISTROS.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_COUNT(
IN IN_FIND_TEXT TEXT
)RETURNS INT AS
$$
DECLARE
TMP_ROWS INT2;
BEGIN
	SELECT COUNT(F.CRFAS_CODIGO) INTO TMP_ROWS
	FROM SII.CGG_RES_FASE F
	INNER JOIN SII.CGG_RES_PROCESO P ON F.CRPRO_CODIGO=P.CRPRO_CODIGO
	WHERE F.CRFAS_ESTADO = TRUE AND SII.F_STRING_IN(IN_FIND_TEXT,COALESCE(F.CRFAS_NOMBRE, '''')||' '||COALESCE(F.CRFAS_TAREA_REALIZA, '''')||' '||COALESCE(F.CRFAS_FUNCION_EJECUTA, '''')||' '||COALESCE(P.CRPRO_NOMBRE, '''')) = 1;
	RETURN TMP_ROWS;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_UPDATE
* ACTUALIZA UN REGISTRO EN LA TABLA sii.CGG_RES_FASE
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CRPRO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO
* @param IN_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA POSITIVA
* @param IN_CGG_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA NEGATIVA
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO
* @param IN_CRFAS_NOMBRE INFORMACION DE IDENTIFICACION DE LA FASE
* @param IN_CRFAS_ORDEN ORDEN DE EJECUCION DE LA FASE
* @param IN_CRFAS_TAREA_REALIZA TAREA QUE SE REALIZA EN ESTA FASE DEL PROCESO
* @param IN_CRFAS_FUNCION_EJECUTA NOMBRE DE LA FUNCION O PROCEDIMIENTO QUE SE EJECUTARIA EN LA FASE
* @param IN_CRFAS_SUBE_ADJUNTO ESTADO QUE DETERMINA LA AUTORIZACION DE SUBIR ARCHIVOS ADJUNTOS
* @param IN_CRFAS_SUBE_ADJUNTO_REQUISITO ESTADO QUE DETERMINA LA AUTORIZACION DE SUBIR ARCHIVOS ADJUNTOS DE REQUISITOS
* @param IN_CRFAS_EJECUTA_DESPACHO ESTADO QUE DETERMINA SI LA FUNCION SE EJECUTA AL REALIZAR DESPACHO O DISTRIBUCION
* @param IN_CRFAS_ATENCION_NORMAL ESTADO QUE DETERMINA LA FASE SERA ATENDIDA EN FORMA NORMAL O A TRAVES DE OTRO PROCESO
* @param IN_CRFAS_ESTADO ESTADO DEL REGISTRO
* @param IN_CRFAS_USUARIO_UPDATE USUARIO QUE REALIZO LA ACTUALIZACION DE LA INFORMACION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_UPDATE(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE.CRFAS_CODIGO%TYPE,
IN IN_CRPRO_CODIGO SII.CGG_RES_FASE.CRPRO_CODIGO%TYPE,
IN IN_CRETT_CODIGO SII.CGG_RES_FASE.CRETT_CODIGO%TYPE,
IN IN_CGG_CRETT_CODIGO SII.CGG_RES_FASE.CGG_CRETT_CODIGO%TYPE,
IN IN_CRSEC_CODIGO SII.CGG_RES_FASE.CRSEC_CODIGO%TYPE,
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_FASE.CGG_CRFAS_CODIGO%TYPE,
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_FASE.CGG_CUSU_CODIGO%TYPE,
IN IN_CRFAS_NOMBRE SII.CGG_RES_FASE.CRFAS_NOMBRE%TYPE,
IN IN_CRFAS_ORDEN SII.CGG_RES_FASE.CRFAS_ORDEN%TYPE,
IN IN_CRFAS_TAREA_REALIZA SII.CGG_RES_FASE.CRFAS_TAREA_REALIZA%TYPE,
IN IN_CRFAS_FUNCION_EJECUTA SII.CGG_RES_FASE.CRFAS_FUNCION_EJECUTA%TYPE,
IN IN_CRFAS_SUBE_ADJUNTO SII.CGG_RES_FASE.CRFAS_SUBE_ADJUNTO%TYPE,
IN IN_CRFAS_SUBE_ADJUNTO_REQUISITO SII.CGG_RES_FASE.CRFAS_SUBE_ADJUNTO_REQUISITO%TYPE,
IN IN_CRFAS_EJECUTA_DESPACHO SII.CGG_RES_FASE.CRFAS_EJECUTA_DESPACHO%TYPE,
IN IN_CRFAS_ATENCION_NORMAL SII.CGG_RES_FASE.CRFAS_ATENCION_NORMAL%TYPE,
IN IN_CRFAS_ESTADO SII.CGG_RES_FASE.CRFAS_ESTADO%TYPE,
IN IN_CRFAS_USUARIO_UPDATE SII.CGG_RES_FASE.CRFAS_USUARIO_UPDATE%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE SET
		CRPRO_CODIGO = IN_CRPRO_CODIGO, 
		CRETT_CODIGO = IN_CRETT_CODIGO, 
		CGG_CRETT_CODIGO = IN_CGG_CRETT_CODIGO, 
		CRSEC_CODIGO = IN_CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO, 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO, 
		CRFAS_NOMBRE = IN_CRFAS_NOMBRE, 
		CRFAS_ORDEN = IN_CRFAS_ORDEN, 
		CRFAS_TAREA_REALIZA = IN_CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA = IN_CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO = IN_CRFAS_SUBE_ADJUNTO, 
		CRFAS_SUBE_ADJUNTO_REQUISITO = IN_CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO = IN_CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL = IN_CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO = IN_CRFAS_ESTADO, 
		CRFAS_FECHA_UPDATE = CURRENT_TIMESTAMP, 
		CRFAS_USUARIO_UPDATE = IN_CRFAS_USUARIO_UPDATE
	WHERE
		CRFAS_CODIGO = IN_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
/**
* FUNCION SII.F_CGG_RES_FASE_SELECT
* SELECCIONA UN REGISTRO EN LA TABLA SII.CGG_RES_FASE
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_SELECT(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE.CRFAS_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_ORDEN,
		CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO, 
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE
	WHERE CRFAS_ESTADO = TRUE AND 
		CRFAS_CODIGO = IN_CRFAS_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_DELETE
* ELIMINA UN REGISTRO EN LA TABLA SII.CGG_RES_FASE
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_DELETE(
	IN IN_CRFAS_CODIGO SII.CGG_RES_FASE.CRFAS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_FASE
	WHERE
		CRFAS_CODIGO = IN_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_DELETE_SOFT
* ELIMINA LOGICAMENTE UN REGISTRO EN LA TABLA SII.CGG_RES_FASE
* @param IN_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_DELETE_SOFT(
IN IN_CRFAS_CODIGO SII.CGG_RES_FASE.CRFAS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
		CRFAS_ESTADO = FALSE
	WHERE
		CRFAS_CODIGO = IN_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_S_CGG_RES_ESTADO_TRAMITE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_ESTADO_TRAMITE.
* @param IN_CGG_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA NEGATIVA
* @param IN_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA POSITIVA
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_S_CGG_RES_ESTADO_TRAMITE(
IN IN_CGG_CRETT_CODIGO SII.CGG_RES_FASE.CGG_CRETT_CODIGO%TYPE, 
IN IN_CRETT_CODIGO SII.CGG_RES_FASE.CRETT_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO, 
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE
	WHERE CRFAS_ESTADO = TRUE AND 
		CGG_CRETT_CODIGO = IN_CGG_CRETT_CODIGO AND 
		CRETT_CODIGO = IN_CRETT_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
* FUNCION SII.F_CGG_RES_FASE_D_CGG_RES_ESTADO_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_ESTADO_TRAMITE.
* @param IN_CGG_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA NEGATIVA
* @param IN_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA POSITIVA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_D_CGG_RES_ESTADO_TRAMITE(
IN IN_CGG_CRETT_CODIGO SII.CGG_RES_FASE.CGG_CRETT_CODIGO%TYPE, 
IN IN_CRETT_CODIGO SII.CGG_RES_FASE.CRETT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_FASE
	WHERE
		CGG_CRETT_CODIGO = IN_CGG_CRETT_CODIGO AND 
		CRETT_CODIGO = IN_CRETT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;
/**
* FUNCION SII.F_CGG_RES_FASE_D_CGG_RES_ESTADO_TRAMITE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_ESTADO_TRAMITE.
* @param IN_CGG_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA NEGATIVA
* @param IN_CRETT_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE ESTADO DE TRAMITE RESPUESTA POSITIVA
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_DS_CGG_RES_ESTADO_TRAMITE(
IN IN_CGG_CRETT_CODIGO SII.CGG_RES_FASE.CGG_CRETT_CODIGO%TYPE, 
IN IN_CRETT_CODIGO SII.CGG_RES_FASE.CRETT_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE SET
		crfas_estado = false
	WHERE
		CGG_CRETT_CODIGO = IN_CGG_CRETT_CODIGO AND 
		CRETT_CODIGO = IN_CRETT_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_S_CGG_USUARIO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_S_CGG_USUARIO(
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_FASE.CGG_CUSU_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO, 
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE
	WHERE CRFAS_ESTADO = TRUE AND 
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_D_CGG_USUARIO(
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_FASE.CGG_CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_FASE
	WHERE
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_D_CGG_USUARIO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_USUARIO.
* @param IN_CGG_CUSU_CODIGO IDENTIFICATIVO UNICO DE REGISTRO USUARIO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_DS_CGG_USUARIO(
IN IN_CGG_CUSU_CODIGO SII.CGG_RES_FASE.CGG_CUSU_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE SET
		crfas_estado = false
	WHERE
		CGG_CUSU_CODIGO = IN_CGG_CUSU_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_S_CGG_RES_FASE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_S_CGG_RES_FASE(
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_FASE.CGG_CRFAS_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO, 
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE
	WHERE CRFAS_ESTADO = TRUE AND 
		CGG_CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_D_CGG_RES_FASE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_D_CGG_RES_FASE(
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_FASE.CGG_CRFAS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_FASE
	WHERE
		CGG_CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_D_CGG_RES_FASE
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_DS_CGG_RES_FASE(
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_FASE.CGG_CRFAS_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE SET
		crfas_estado = false
	WHERE
		CGG_CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_S_CGG_RES_PROCESO
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PROCESO.
* @param IN_CRPRO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_S_CGG_RES_PROCESO(
IN IN_CRPRO_CODIGO SII.CGG_RES_FASE.CRPRO_CODIGO%TYPE,
IN IN_CISLA_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO,
		CRPRO_CODIGO, 
		CRETT_CODIGO,
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		FASES.CUSU_CODIGO,
		US.CUSU_NOMBRE_USUARIO USUARIO,
		CRFAS_NOMBRE, 
		CRFAS_ORDEN, 
		CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO,
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE	
	FROM(
		SELECT
			F.CRFAS_CODIGO, 
			F.CRPRO_CODIGO, 
			F.CRETT_CODIGO, 
			F.CGG_CRETT_CODIGO, 
			F.CRSEC_CODIGO, 
			F.CGG_CRFAS_CODIGO, 
			SII.F_CGG_RES_FASE_PRIMER_USUARIO(F.CRFAS_CODIGO,IN_CISLA_CODIGO) CUSU_CODIGO, 
			F.CRFAS_NOMBRE, 
			F.CRFAS_ORDEN, 
			F.CRFAS_TAREA_REALIZA, 
			F.CRFAS_FUNCION_EJECUTA, 
			F.CRFAS_SUBE_ADJUNTO,
			F.CRFAS_SUBE_ADJUNTO_REQUISITO, 
			F.CRFAS_EJECUTA_DESPACHO, 
			F.CRFAS_ATENCION_NORMAL, 
			F.CRFAS_ESTADO, 
			F.CRFAS_FECHA_INSERT, 
			F.CRFAS_USUARIO_INSERT, 
			F.CRFAS_FECHA_UPDATE, 
			F.CRFAS_USUARIO_UPDATE			
			FROM SII.CGG_RES_FASE F		
		WHERE F.CRFAS_ESTADO = TRUE AND			
			F.CGG_CRFAS_CODIGO IS NULL AND
			CRPRO_CODIGO = IN_CRPRO_CODIGO		
	) AS FASES
	INNER JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = FASES.CUSU_CODIGO
	INNER JOIN SII.CGG_RES_PERSONA PRS ON PRS.CRPER_CODIGO = US.CRPER_CODIGO
	WHERE LENGTH(FASES.CUSU_CODIGO)>=1
	ORDER BY CRFAS_ORDEN ASC;
	
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_D_CGG_RES_PROCESO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PROCESO.
* @param IN_CRPRO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_D_CGG_RES_PROCESO(
IN IN_CRPRO_CODIGO SII.CGG_RES_FASE.CRPRO_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_FASE
	WHERE
		CRPRO_CODIGO = IN_CRPRO_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_D_CGG_RES_PROCESO
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_PROCESO.
* @param IN_CRPRO_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE PROCESO
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_DS_CGG_RES_PROCESO(
IN IN_CRPRO_CODIGO SII.CGG_RES_FASE.CRPRO_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE SET
		crfas_estado = false
	WHERE
		CRPRO_CODIGO = IN_CRPRO_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;


/**
* FUNCION SII.F_CGG_RES_FASE_S_CGG_RES_SECCION
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SECCION.
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_S_CGG_RES_SECCION(
IN IN_CRSEC_CODIGO SII.CGG_RES_FASE.CRSEC_CODIGO%TYPE
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CGG_CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO, 
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE
	WHERE CRFAS_ESTADO = TRUE AND 
		CRSEC_CODIGO = IN_CRSEC_CODIGO;
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_D_CGG_RES_SECCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SECCION.
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_D_CGG_RES_SECCION(
IN IN_CRSEC_CODIGO SII.CGG_RES_FASE.CRSEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	DELETE FROM SII.CGG_RES_FASE
	WHERE
		CRSEC_CODIGO = IN_CRSEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_D_CGG_RES_SECCION
* ELIMINA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_SECCION.
* @param IN_CRSEC_CODIGO IDENTIFICATIVO UNICO DE REGISTRO SECCION
* @return VOID
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_DS_CGG_RES_SECCION(
IN IN_CRSEC_CODIGO SII.CGG_RES_FASE.CRSEC_CODIGO%TYPE
)RETURNS VOID AS
$$
BEGIN
	UPDATE SII.CGG_RES_FASE SET
		crfas_estado = false
	WHERE
		CRSEC_CODIGO = IN_CRSEC_CODIGO;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
* FUNCION SII.F_CGG_RES_FASE_S_CGG_RES_FASE
* SELECCIONA TODOS LOS REGISTRO DE LA TABLA SII.CGG_RES_FASE QUE ESTAN
* RELACIONADOS CON LA TABLA SII.CGG_RES_FASE.
* @param IN_CGG_CRFAS_CODIGO IDENTIFICATIVO UNICO DE REGISTRO DE FASES
* @param IN_CISLA_CODIGO CODIGO DE LA ISLA DE LA FASE.
* @return REFCURSOR
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_S_CGG_RES_FASE(
IN IN_CGG_CRFAS_CODIGO SII.CGG_RES_FASE.CGG_CRFAS_CODIGO%TYPE,
IN IN_CISLA_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_ORDEN, 
		CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO,
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE	
	FROM(
	SELECT
		F.CRFAS_CODIGO, 
		F.CRPRO_CODIGO, 
		F.CRETT_CODIGO, 
		F.CGG_CRETT_CODIGO, 
		F.CRSEC_CODIGO, 
		F.CGG_CRFAS_CODIGO, 
		SII.F_CGG_RES_FASE_PRIMER_USUARIO(F.CRFAS_CODIGO,IN_CISLA_CODIGO) CUSU_CODIGO,
		F.CRFAS_NOMBRE, 
		F.CRFAS_ORDEN, 
		F.CRFAS_TAREA_REALIZA, 
		F.CRFAS_FUNCION_EJECUTA, 
		F.CRFAS_SUBE_ADJUNTO,
		F.CRFAS_SUBE_ADJUNTO_REQUISITO,
		F.CRFAS_EJECUTA_DESPACHO, 
		F.CRFAS_ATENCION_NORMAL,  
		F.CRFAS_ESTADO, 
		F.CRFAS_FECHA_INSERT, 
		F.CRFAS_USUARIO_INSERT, 
		F.CRFAS_FECHA_UPDATE, 
		F.CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE F	
	WHERE F.CRFAS_ESTADO = TRUE AND		
		F.CGG_CRFAS_CODIGO = IN_CGG_CRFAS_CODIGO
	ORDER BY CRFAS_ORDEN
	) AS FASES
	WHERE LENGTH(CUSU_CODIGO)>=1;

	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCINA LA FASE INICIAL O DE ORDEN CERO PARA EL INICIO DE UN TRAMITE.
*@param IN_CRPRO_CODIGO CODIGO DE PROCESO.
*@param IN_CISLA_CODIGO CODIGO DE LA ISLA DE LA FASE.
*@return CURSOR CON INFORMACION DE FASE.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_INICIO(
IN IN_CRPRO_CODIGO VARCHAR,
IN IN_CISLA_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	ORDEN_MINIMO NUMERIC;
BEGIN

	SELECT MIN(CRFAS_ORDEN) INTO ORDEN_MINIMO 
	FROM SII.CGG_RES_FASE 
	WHERE CRPRO_CODIGO = IN_CRPRO_CODIGO
	AND CRFAS_ESTADO = TRUE;

	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_ORDEN, 
		CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO,
		CRFAS_SUBE_ADJUNTO_REQUISITO,
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL,  
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE	
	FROM(
	SELECT
		F.CRFAS_CODIGO, 
		F.CRPRO_CODIGO, 
		F.CRETT_CODIGO, 
		F.CGG_CRETT_CODIGO, 
		F.CRSEC_CODIGO, 
		F.CGG_CRFAS_CODIGO, 
		SII.F_CGG_RES_FASE_PRIMER_USUARIO(F.CRFAS_CODIGO,IN_CISLA_CODIGO) CUSU_CODIGO, 
		F.CRFAS_NOMBRE, 
		F.CRFAS_ORDEN, 
		F.CRFAS_TAREA_REALIZA, 
		F.CRFAS_FUNCION_EJECUTA, 
		F.CRFAS_SUBE_ADJUNTO,
		F.CRFAS_SUBE_ADJUNTO_REQUISITO, 
		F.CRFAS_EJECUTA_DESPACHO, 
		F.CRFAS_ATENCION_NORMAL, 
		F.CRFAS_ESTADO, 
		F.CRFAS_FECHA_INSERT, 
		F.CRFAS_USUARIO_INSERT, 
		F.CRFAS_FECHA_UPDATE, 
		F.CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE F		
	WHERE F.CRFAS_ESTADO = TRUE AND 			
		F.CRPRO_CODIGO = IN_CRPRO_CODIGO AND		
		F.CRFAS_ORDEN = ORDEN_MINIMO AND
		F.CGG_CRFAS_CODIGO IS NULL
	) AS FASES	
	WHERE LENGTH(CUSU_CODIGO)>=1;		
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECCINA LA FASE FINAL O DE MAYOR ORDEN PARA EL INICIO DE UN TRAMITE.
*@param IN_CRPRO_CODIGO CODIGO DE PROCESO.
* @param IN_CISLA_CODIGO CODIGO DE LA ISLA DE LA FASE.
*@return CURSOR CON INFORMACION DE FASE.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_FINALIZACION(
IN IN_CRPRO_CODIGO VARCHAR,
IN IN_CISLA_CODIGO VARCHAR
)RETURNS SETOF REFCURSOR AS
$$
DECLARE
	TMP_REF REFCURSOR;
	ORDEN_MAXIMO NUMERIC;
BEGIN

	SELECT MAX(CRFAS_ORDEN) INTO ORDEN_MAXIMO 
	FROM SII.CGG_RES_FASE 
	WHERE CRPRO_CODIGO = IN_CRPRO_CODIGO
	AND CRFAS_ESTADO = TRUE
	AND CGG_CRFAS_CODIGO IS NULL;
	
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_ORDEN, 
		CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO,
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE	
	FROM(
	SELECT
		F.CRFAS_CODIGO, 
		F.CRPRO_CODIGO, 
		F.CRETT_CODIGO, 
		F.CGG_CRETT_CODIGO, 
		F.CRSEC_CODIGO, 
		F.CGG_CRFAS_CODIGO, 
		SII.F_CGG_RES_FASE_PRIMER_USUARIO(F.CRFAS_CODIGO,IN_CISLA_CODIGO) CUSU_CODIGO,  
		F.CRFAS_NOMBRE, 
		F.CRFAS_ORDEN, 
		F.CRFAS_TAREA_REALIZA, 
		F.CRFAS_FUNCION_EJECUTA, 
		F.CRFAS_SUBE_ADJUNTO,
		F.CRFAS_SUBE_ADJUNTO_REQUISITO,
		F.CRFAS_EJECUTA_DESPACHO, 
		F.CRFAS_ATENCION_NORMAL,  
		F.CRFAS_ESTADO, 
		F.CRFAS_FECHA_INSERT, 
		F.CRFAS_USUARIO_INSERT, 
		F.CRFAS_FECHA_UPDATE, 
		F.CRFAS_USUARIO_UPDATE
	FROM SII.CGG_RES_FASE F	
	WHERE F.CRFAS_ESTADO = TRUE AND 		
		F.CRPRO_CODIGO = IN_CRPRO_CODIGO AND
		F.CRFAS_ORDEN = ORDEN_MAXIMO AND		
		F.CGG_CRFAS_CODIGO IS NULL
	) AS FASES
	WHERE LENGTH(CUSU_CODIGO)>=1;		
	RETURN NEXT TMP_REF;
END
$$
LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

/**
*FUNCION. SELECIONA LA SIGUIENTE FASE A LA FASE ESTABLECIDA.
*@param IN_CRFAS_CODIGO CODIGO DE FASE ACTUAL.
*@param IN_CISLA_CODIGO CODIGO DE ISLA DEL PROCESO.
*@return FASE SIGUIENTE A LA ESPECIFICADA.
*/
CREATE OR REPLACE FUNCTION SII.F_CGG_RES_FASE_SIGUIENTE(
	IN IN_CRFAS_CODIGO VARCHAR,
	IN IN_CISLA_CODIGO VARCHAR
) RETURNS SETOF REFCURSOR AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	CRFASCODIGO VARCHAR(20);
	CRFASCODIGO_SIGUIENTE VARCHAR(20);
	CRFASORDEN NUMERIC;	
	CRPROCODIGO VARCHAR(20);
BEGIN
	CRFASCODIGO:=' ';
	CRPROCODIGO:=' ';	
	
	SELECT CRFAS_ORDEN,CRPRO_CODIGO INTO CRFASORDEN,CRPROCODIGO 
	FROM SII.CGG_RES_FASE 
	WHERE CRFAS_CODIGO = IN_CRFAS_CODIGO
	AND CRFAS_ESTADO = TRUE;	
					
	OPEN TMP_REF FOR
	SELECT
		CRFAS_CODIGO, 
		CRPRO_CODIGO, 
		CRETT_CODIGO, 
		CGG_CRETT_CODIGO, 
		CRSEC_CODIGO, 
		CGG_CRFAS_CODIGO, 
		CUSU_CODIGO, 
		CRFAS_NOMBRE, 
		CRFAS_ORDEN, 
		CRFAS_TAREA_REALIZA, 
		CRFAS_FUNCION_EJECUTA, 
		CRFAS_SUBE_ADJUNTO,
		CRFAS_SUBE_ADJUNTO_REQUISITO, 
		CRFAS_EJECUTA_DESPACHO, 
		CRFAS_ATENCION_NORMAL, 
		CRFAS_ESTADO, 
		CRFAS_FECHA_INSERT, 
		CRFAS_USUARIO_INSERT, 
		CRFAS_FECHA_UPDATE, 
		CRFAS_USUARIO_UPDATE	
	FROM(
	SELECT 
		F.CRFAS_CODIGO, 
		F.CRPRO_CODIGO, 
		F.CRETT_CODIGO, 
		F.CGG_CRETT_CODIGO, 
		F.CRSEC_CODIGO, 
		F.CGG_CRFAS_CODIGO, 
		SII.F_CGG_RES_FASE_PRIMER_USUARIO(F.CRFAS_CODIGO,IN_CISLA_CODIGO) CUSU_CODIGO,
		F.CRFAS_NOMBRE, 
		F.CRFAS_ORDEN, 
		F.CRFAS_TAREA_REALIZA,
		F.CRFAS_FUNCION_EJECUTA,  
		F.CRFAS_SUBE_ADJUNTO,
		F.CRFAS_SUBE_ADJUNTO_REQUISITO, 
		F.CRFAS_EJECUTA_DESPACHO, 
		F.CRFAS_ATENCION_NORMAL, 
		F.CRFAS_ESTADO, 
		F.CRFAS_FECHA_INSERT, 
		F.CRFAS_USUARIO_INSERT, 
		F.CRFAS_FECHA_UPDATE, 
		F.CRFAS_USUARIO_UPDATE 
	FROM SII.CGG_RES_FASE F	
	WHERE F.CRPRO_CODIGO = CRPROCODIGO  AND		  
		  F.CRFAS_ESTADO = TRUE AND
		  F.CGG_CRFAS_CODIGO IS NULL AND
		  F.CRFAS_ORDEN>CRFASORDEN		  
	ORDER BY CRFAS_ORDEN
	LIMIT 1
	) AS FASES
	WHERE LENGTH(CUSU_CODIGO)>=1;		
	RETURN NEXT TMP_REF;
END
$BODY$
 LANGUAGE 'plpgsql' VOLATILE CALLED ON NULL INPUT;

