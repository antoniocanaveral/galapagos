/**
* FUNCION SII.TRG_KG_CGG_KDX_KARDEX. REGISTRA LA BITACORA DE LAS ACTIVIDADES REALIZADAS SOBRE LA INFORMACION ALMACENADA EN LA TABLA SII.CGG_KDX_KARDEX
*/
CREATE OR REPLACE FUNCTION SII.TRG_AUD_CGG_KDX_KARDEX() RETURNS TRIGGER AS
$$
DECLARE
TMP_CUSU_CODIGO VARCHAR;
TMP_IP VARCHAR;
TMP_SESSION_ID VARCHAR;
TMP_DATO_NUEVO VARCHAR;
TMP_DATO_ANTIGUO VARCHAR;
TMP_USUARIO VARCHAR;
TMP_CODIGO VARCHAR;
BEGIN
	TMP_DATO_ANTIGUO = '';
	TMP_DATO_NUEVO = '';
	IF (TG_OP = 'INSERT') THEN
		TMP_USUARIO = NEW.CKKRD_USUARIO_INSERT;
		SELECT CUSU_CODIGO INTO TMP_CUSU_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = NEW.CKKRD_USUARIO_INSERT;
		SELECT CSSSN_IP, CSSSN_ID INTO TMP_IP, TMP_SESSION_ID FROM SII.CGG_SEC_SESION WHERE CUSU_CODIGO = TMP_CUSU_CODIGO AND CSSSN_ACTIVO = TRUE;
	ELSIF (TG_OP = 'UPDATE') THEN
		TMP_USUARIO = NEW.CKKRD_USUARIO_UPDATE;
		SELECT CUSU_CODIGO INTO TMP_CUSU_CODIGO FROM SII.CGG_USUARIO WHERE CUSU_NOMBRE_USUARIO = NEW.CKKRD_USUARIO_UPDATE;
		SELECT CSSSN_IP, CSSSN_ID INTO TMP_IP, TMP_SESSION_ID FROM SII.CGG_SEC_SESION WHERE CUSU_CODIGO = TMP_CUSU_CODIGO AND CSSSN_ACTIVO = TRUE;
		TMP_DATO_ANTIGUO = '<'||TG_TABLE_NAME||'>'||
			'<CKKRD_CODIGO>'||COALESCE(OLD.CKKRD_CODIGO, '')||'</CKKRD_CODIGO>'||
			'<CKESP_CODIGO>'||COALESCE(OLD.CKESP_CODIGO, '')||'</CKESP_CODIGO>'||
			'<CKKRD_NUMERO>'||COALESCE(OLD.CKKRD_NUMERO, 0)||'</CKKRD_NUMERO>'||
			'<CKKRD_DETALLE>'||COALESCE(OLD.CKKRD_DETALLE, '')||'</CKKRD_DETALLE>'||
			'<CKKRD_FECHA_REGISTRO>'||COALESCE(OLD.CKKRD_FECHA_REGISTRO, CURRENT_TIMESTAMP)||'</CKKRD_FECHA_REGISTRO>'||
			'<CKKRD_TIPO_MOVIMIENTO>'||COALESCE(OLD.CKKRD_TIPO_MOVIMIENTO, 0)||'</CKKRD_TIPO_MOVIMIENTO>'||
			'<CKKRD_TIPO_OPERACION>'||COALESCE(OLD.CKKRD_TIPO_OPERACION, 0)||'</CKKRD_TIPO_OPERACION>'||
			'<CKKRD_INGRESO_CANTIDAD>'||COALESCE(OLD.CKKRD_INGRESO_CANTIDAD, 0)||'</CKKRD_INGRESO_CANTIDAD>'||
			'<CKKRD_INGRESO_PU>'||COALESCE(OLD.CKKRD_INGRESO_PU, 0)||'</CKKRD_INGRESO_PU>'||
			'<CKKRD_INGRESO_TOTAL>'||COALESCE(OLD.CKKRD_INGRESO_TOTAL, 0)||'</CKKRD_INGRESO_TOTAL>'||
			'<CKKRD_SALIDA_CANTIDAD>'||COALESCE(OLD.CKKRD_SALIDA_CANTIDAD, 0)||'</CKKRD_SALIDA_CANTIDAD>'||
			'<CKKRD_SALIDA_PU>'||COALESCE(OLD.CKKRD_SALIDA_PU, 0)||'</CKKRD_SALIDA_PU>'||
			'<CKKRD_SALIDA_TOTAL>'||COALESCE(OLD.CKKRD_SALIDA_TOTAL, 0)||'</CKKRD_SALIDA_TOTAL>'||
			'<CKKRD_TOTAL_CANTIDAD>'||COALESCE(OLD.CKKRD_TOTAL_CANTIDAD, 0)||'</CKKRD_TOTAL_CANTIDAD>'||
			'<CKKRD_TOTAL_PU>'||COALESCE(OLD.CKKRD_TOTAL_PU, 0)||'</CKKRD_TOTAL_PU>'||
			'<CKKRD_TOTAL_TOTAL>'||COALESCE(OLD.CKKRD_TOTAL_TOTAL, 0)||'</CKKRD_TOTAL_TOTAL>'||
			'<CKKRD_ESTADO>'||COALESCE(OLD.CKKRD_ESTADO, FALSE)||'</CKKRD_ESTADO>'||
			'<CKKRD_FECHA_INSERT>'||COALESCE(OLD.CKKRD_FECHA_INSERT, CURRENT_TIMESTAMP)||'</CKKRD_FECHA_INSERT>'||
			'<CKKRD_USUARIO_INSERT>'||COALESCE(OLD.CKKRD_USUARIO_INSERT, '')||'</CKKRD_USUARIO_INSERT>'||
			'<CKKRD_FECHA_UPDATE>'||COALESCE(OLD.CKKRD_FECHA_UPDATE, CURRENT_TIMESTAMP)||'</CKKRD_FECHA_UPDATE>'||
			'<CKKRD_USUARIO_UPDATE>'||COALESCE(OLD.CKKRD_USUARIO_UPDATE, '')||'</CKKRD_USUARIO_UPDATE>'||
		'</'||TG_TABLE_NAME||'>';
	ELSIF (TG_OP = 'DELETE') THEN
		SELECT INET_CLIENT_ADDR() INTO TMP_IP;
		SELECT SESSION_USER INTO TMP_SESSION_ID;
	END IF;

	IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
		TMP_DATO_NUEVO = '<'||TG_TABLE_NAME||'>'||
			'<CKKRD_CODIGO>'||COALESCE(NEW.CKKRD_CODIGO, '')||'</CKKRD_CODIGO>'||
			'<CKESP_CODIGO>'||COALESCE(NEW.CKESP_CODIGO, '')||'</CKESP_CODIGO>'||
			'<CKKRD_NUMERO>'||COALESCE(NEW.CKKRD_NUMERO, 0)||'</CKKRD_NUMERO>'||
			'<CKKRD_DETALLE>'||COALESCE(NEW.CKKRD_DETALLE, '')||'</CKKRD_DETALLE>'||
			'<CKKRD_FECHA_REGISTRO>'||COALESCE(NEW.CKKRD_FECHA_REGISTRO, CURRENT_TIMESTAMP)||'</CKKRD_FECHA_REGISTRO>'||
			'<CKKRD_TIPO_MOVIMIENTO>'||COALESCE(NEW.CKKRD_TIPO_MOVIMIENTO, 0)||'</CKKRD_TIPO_MOVIMIENTO>'||
			'<CKKRD_TIPO_OPERACION>'||COALESCE(NEW.CKKRD_TIPO_OPERACION, 0)||'</CKKRD_TIPO_OPERACION>'||
			'<CKKRD_INGRESO_CANTIDAD>'||COALESCE(NEW.CKKRD_INGRESO_CANTIDAD, 0)||'</CKKRD_INGRESO_CANTIDAD>'||
			'<CKKRD_INGRESO_PU>'||COALESCE(NEW.CKKRD_INGRESO_PU, 0)||'</CKKRD_INGRESO_PU>'||
			'<CKKRD_INGRESO_TOTAL>'||COALESCE(NEW.CKKRD_INGRESO_TOTAL, 0)||'</CKKRD_INGRESO_TOTAL>'||
			'<CKKRD_SALIDA_CANTIDAD>'||COALESCE(NEW.CKKRD_SALIDA_CANTIDAD, 0)||'</CKKRD_SALIDA_CANTIDAD>'||
			'<CKKRD_SALIDA_PU>'||COALESCE(NEW.CKKRD_SALIDA_PU, 0)||'</CKKRD_SALIDA_PU>'||
			'<CKKRD_SALIDA_TOTAL>'||COALESCE(NEW.CKKRD_SALIDA_TOTAL, 0)||'</CKKRD_SALIDA_TOTAL>'||
			'<CKKRD_TOTAL_CANTIDAD>'||COALESCE(NEW.CKKRD_TOTAL_CANTIDAD, 0)||'</CKKRD_TOTAL_CANTIDAD>'||
			'<CKKRD_TOTAL_PU>'||COALESCE(NEW.CKKRD_TOTAL_PU, 0)||'</CKKRD_TOTAL_PU>'||
			'<CKKRD_TOTAL_TOTAL>'||COALESCE(NEW.CKKRD_TOTAL_TOTAL, 0)||'</CKKRD_TOTAL_TOTAL>'||
			'<CKKRD_ESTADO>'||COALESCE(NEW.CKKRD_ESTADO, FALSE)||'</CKKRD_ESTADO>'||
			'<CKKRD_FECHA_INSERT>'||COALESCE(NEW.CKKRD_FECHA_INSERT, CURRENT_TIMESTAMP)||'</CKKRD_FECHA_INSERT>'||
			'<CKKRD_USUARIO_INSERT>'||COALESCE(NEW.CKKRD_USUARIO_INSERT, '')||'</CKKRD_USUARIO_INSERT>'||
			'<CKKRD_FECHA_UPDATE>'||COALESCE(NEW.CKKRD_FECHA_UPDATE, CURRENT_TIMESTAMP)||'</CKKRD_FECHA_UPDATE>'||
			'<CKKRD_USUARIO_UPDATE>'||COALESCE(NEW.CKKRD_USUARIO_UPDATE, '')||'</CKKRD_USUARIO_UPDATE>'||
		'</'||TG_TABLE_NAME||'>';
	END IF;

	INSERT INTO SII.CGG_SEC_AUDITORIA(
		CSADT_CODIGO,
		CSADT_FECHA,
		CSADT_USUARIO,
		CSADT_IP,
		CSADT_SESION,
		CSADT_TABLA,
		CSADT_OPERACION,
		CSADT_DATO_ANTIGUO,
		CSADT_DATO_NUEVO
	) VALUES (
		('CSADT'||NEXTVAL('scn_cgg_sec_auditoria'))::VARCHAR,
		CURRENT_TIMESTAMP,
		TMP_USUARIO,
		TMP_IP,
		TMP_SESSION_ID,
		TG_TABLE_NAME,
		TG_OP,
		TMP_DATO_ANTIGUO,
		TMP_DATO_NUEVO
	);
	RETURN NULL;
END;
$$
LANGUAGE plpgsql;

/**
* DISPARADOR TRG_KG_CGG_KDX_KARDEX. REGISTRA UNA BITACORA DE LAS ACTIVIDADES REALIZADAS SOBRE LA INFORMACION ALMACENADA EN LA TABLA SII.CGG_KDX_KARDEX
*/
CREATE TRIGGER TRG_AUD_CGG_KDX_KARDEX AFTER INSERT OR UPDATE OR DELETE ON SII.CGG_KDX_KARDEX FOR EACH ROW EXECUTE PROCEDURE SII.TRG_AUD_CGG_KDX_KARDEX();
COMMENT ON TRIGGER TRG_AUD_CGG_KDX_KARDEX ON SII.CGG_KDX_KARDEX IS 'DISPARADOR DE AUDITORIA DE LOS DATOS';
ALTER TABLE SII.CGG_KDX_KARDEX DISABLE TRIGGER TRG_AUD_CGG_KDX_KARDEX;

/**
* DISPARADOR QUE VERIFICA EL REGISTRO DE SALDOS DE KARDEX
*/
CREATE OR REPLACE FUNCTION SII.TRG_CHK_CGG_KDX_KARDEX_TOTAL() RETURNS TRIGGER AS
$$
BEGIN
	IF (NEW.CKKRD_TOTAL_CANTIDAD < 0) THEN
		RAISE EXCEPTION 'El saldo de la especie no puede ser inferior a cero.';
	END IF;
	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER TRG_CHK_CGG_KDX_KARDEX_TOTAL BEFORE INSERT OR UPDATE ON SII.CGG_KDX_KARDEX FOR EACH ROW EXECUTE PROCEDURE SII.TRG_CHK_CGG_KDX_KARDEX_TOTAL();
COMMENT ON TRIGGER TRG_CHK_CGG_KDX_KARDEX_TOTAL ON SII.CGG_KDX_KARDEX IS 'VERIFICA QUE LOS SALDOS NO SEAN NEGATIVOS';
ALTER TABLE SII.CGG_KDX_KARDEX ENABLE TRIGGER TRG_CHK_CGG_KDX_KARDEX_TOTAL;