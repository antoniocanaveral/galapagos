/** * Funcion publica. Formulario que permite administrar la informacion a travez de las operaciones basicas de insercion y actualizacion de los registros de tabla Cgg_veh_marca. * @param {String} IN_SENTENCIA_CGG_VEH_MARCA Sentencia (insert/update) para el tratamiento de la informacion. * @param {Ext.data.Record} IN_RECORD_CGG_VEH_MARCA Registro de datos de la tabla Cgg_veh_marca. * @constructor * @base FrmListadoCgg_veh_marca * @author Besixplus Cia. Ltda. */function FrmCgg_veh_marca(IN_SENTENCIA_CGG_VEH_MARCA, IN_RECORD_CGG_VEH_MARCA) {    var inSentenciaCgg_veh_marca = IN_SENTENCIA_CGG_VEH_MARCA;    var inRecordCgg_veh_marca = IN_RECORD_CGG_VEH_MARCA;    var urlCgg_veh_marca = URL_WS + "Cgg_veh_marca";    var tituloCgg_veh_marca = 'Marca';    var descCgg_veh_marca = 'El formulario permite administrar la informaci\u00f3n de las marcas de veh\u00edculos.';    var isEdit = false;    /**     * Ext.form.TextField IDENTIFICADOR UNICO DE REGISTRO DE MARCA     */    var txtCvmrc_codigo = new Ext.form.TextField({        id: 'txtCvmrc_codigo',        name: 'txtCvmrc_codigo',        fieldLabel: 'Codigo',        anchor: '98%',        value: "KEYGEN",        hidden: true,        hideLabel: true,        allowBlank: false    });    /**     * Ext.form.TextField NOMBRE IDENTIFICADOR DE LA MARCA.     */    var txtCvmrc_nombre = new Ext.form.TextField({        id: 'txtCvmrc_nombre',        name: 'txtCvmrc_nombre',        fieldLabel: 'Nombre',        anchor: '98%',        allowBlank: false    });    /**     * Ext.form.TextArea INFORMACION ADICIONAL     */    var txtCvmrc_observacion = new Ext.form.TextArea({        id: 'txtCvmrc_observacion',        name: 'txtCvmrc_observacion',        fieldLabel: 'Observaci\u00f3n',        width: '98%'    });    /**     * Boton que permite almacenar la informacion de la ventana winFrmCgg_veh_marca     */    var btnGuardarCgg_veh_marca = new Ext.Button({        id: 'btnGuardarCgg_veh_marca',        text: 'Guardar',        iconCls: 'iconGuardar',        listeners: {            click: function () {                if (pnlCgg_veh_marca.getForm().isValid() == false) {                    return;                }                try {                    function CallBackCgg_veh_marca(r) {                        winFrmCgg_veh_marca.getEl().unmask();                        if (r == 'true') {                            Ext.Msg.show({                                title: tituloCgg_veh_marca,                                msg: 'La informaci\u00f3n de Marca ha sido almacenada.',                                buttons: Ext.Msg.OK,                                icon: Ext.MessageBox.INFO                            });                            winFrmCgg_veh_marca.close()                        } else {                            Ext.Msg.show({                                title: tituloCgg_veh_marca,                                msg: 'La informaci\u00f3n de Marca no ha podido ser almacenada. ' + (r.message?r.message:r),                                buttons: Ext.Msg.OK,                                icon: Ext.MessageBox.ERROR                            });                        }                    }                    winFrmCgg_veh_marca.getEl().mask('Guardando...', 'x-mask-loading');                    var param = new SOAPClientParameters();                    if (isEdit) param.add('inCvmrc_codigo', txtCvmrc_codigo.getValue());                    param.add('inCvmrc_nombre', txtCvmrc_nombre.getValue());                    param.add('inCvmrc_observacion', txtCvmrc_observacion.getValue());                    SOAPClient.invoke(urlCgg_veh_marca, IN_SENTENCIA_CGG_VEH_MARCA, param, true, CallBackCgg_veh_marca);                } catch (inErr) {                    winFrmCgg_veh_marca.getEl().unmask();                }            }        }    });    /**     * Boton que permite cancelar los cambios de la informacion de la ventana winFrmCgg_veh_marca.     */    var btnCancelarCgg_veh_marca = new Ext.Button({        id: 'btnCancelarCgg_veh_marca',        text: 'Cancelar',        iconCls: 'iconCancelar',        listeners: {            click: function () {                pnlCgg_veh_marca.getForm().reset();            }        }    });    /**     * Boton que permite cerrar la ventana winFrmCgg_veh_marca.     */    var btnCerrarCgg_veh_marca = new Ext.Button({        id: 'btnCerrarCgg_veh_marca',        text: 'Cerrar',        iconCls: 'iconCerrar',        listeners: {            click: function () {                winFrmCgg_veh_marca.close();            }        }    });    /**     * Ext.form.FormPanel Panel principal que contiene los controles de la ventana winFrmCgg_veh_marca.     */    var pnlCgg_veh_marca = new Ext.form.FormPanel({        frame: true,        labelWidth: 100,        items: [txtCvmrc_codigo, txtCvmrc_nombre, txtCvmrc_observacion]    });    /**     * Ext.Window Ventana en la que reside los controles necesarios para administrar la informacion de los registros de la tabla Cgg_veh_marca.     */    var winFrmCgg_veh_marca = new Ext.Window({        id: 'winFrmCgg_veh_marca',        title: tituloCgg_veh_marca,        width: 400,        minWidth: 400,        maximizable: true,        minimizable: true,        constrain: true,        tbar: getPanelTitulo(tituloCgg_veh_marca, descCgg_veh_marca),        items: [pnlCgg_veh_marca],        bbar: [btnGuardarCgg_veh_marca, btnCancelarCgg_veh_marca, '->', btnCerrarCgg_veh_marca]    });    /**     * Funcion que permite habilitar los controles que contienen la informacion de la ventana winFrmCgg_veh_marca.     * @param {Boolean} inEstado Estado (true/false) para la habilitacion de los controles.     */    function habilitarCgg_veh_marcaCtrls(inEstado) {        estado = !inEstado;        txtCvmrc_codigo.setDisabled(estado);        txtCvmrc_nombre.setDisabled(estado);        txtCvmrc_observacion.setDisabled(estado);    }    /**     * Funcion que permite cargar la informacion de los controles de la ventana winFrmCgg_veh_marca.     */    function cargarCgg_veh_marcaCtrls() {        if (inRecordCgg_veh_marca) {            txtCvmrc_codigo.setValue(inRecordCgg_veh_marca.get('CVMRC_CODIGO'));            txtCvmrc_nombre.setValue(inRecordCgg_veh_marca.get('CVMRC_NOMBRE'));            txtCvmrc_observacion.setValue(inRecordCgg_veh_marca.get('CVMRC_OBSERVACION'));            isEdit = true;            habilitarCgg_veh_marcaCtrls(true);        }    }    /**     * Funcion miembro que devuelve la ventana winFrmCgg_veh_marca.     * @returns ventana winFrmCgg_veh_marca.     * @base FrmCgg_veh_marca.prototype.show     */    this.getWindow = function () {        return winFrmCgg_veh_marca;    }    /**     * Funcion miembro que carga los controles de la ventana winFrmCgg_veh_marca.     * @base FrmCgg_veh_marca.prototype.loadData     */    this.loadData = function () {        cargarCgg_veh_marcaCtrls();    }}/** * Funcion prototipo. Permite mostrar la ventana winFrmCgg_veh_marca desde una instancia. */FrmCgg_veh_marca.prototype.show = function () {    this.getWindow().show();}/** *Funcion prototipo. Permite cerrar la ventana winFrmCgg_veh_marca desde una instancia. */FrmCgg_veh_marca.prototype.close = function () {    this.getWindow().close();}/** * Funcion prototipo. Permite saber si se ha cerrado la ventana winFrmCgg_veh_marca, * con el fin de realizar otras acciones desde una instancia. */FrmCgg_veh_marca.prototype.closeHandler = function (inFunctionHandler) {    this.getWindow().on('close', inFunctionHandler);}/** * Funcion prototipo. Permite cargar los controles de la ventana winFrmCgg_veh_marca desde una instancia. */FrmCgg_veh_marca.prototype.loadData = function () {    this.loadData();}