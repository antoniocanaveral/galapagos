/** * Funcion publica. Formulario que permite visualizar en forma de listado, la informacion de los registros de tabla Cgg_veh_motor. * @constructor * @author Besixplus Cia. Ltda. */function FrmListadoCgg_veh_motor(inDesktop) {    var optMenu = 'Vehiculos/Motores';    var urlListadoCgg_veh_motor = URL_WS + "Cgg_veh_motor";    var tituloListadoCgg_veh_motor = 'Listado de motores';    var descListadoCgg_veh_motor = 'El formulario permite administrar informaci\u00f3n de los motores.';	var tmpVehiculo;		var tmpStoreMarca = new FrmListadoCgg_veh_marca().getStore();	tmpStoreMarca.baseParams.start = 0;	tmpStoreMarca.baseParams.limit = 1000;	tmpStoreMarca.reload();		var tmpStoreCombustible = new FrmListadoCgg_veh_combustible().getStore();	tmpStoreCombustible.baseParams.start = 0;	tmpStoreCombustible.baseParams.limit = 1000;	tmpStoreCombustible.reload();		var tmpStoreCilindraje = new FrmListadoCgg_veh_cilindraje().getStore();	tmpStoreCilindraje.baseParams.start = 0;	tmpStoreCilindraje.baseParams.limit = 1000;	tmpStoreCilindraje.reload();    /**     * Ext.Button Boton que permite insertar un nuevo registro de la ventana winFrmListadoCgg_veh_motor.     */    var btnNuevoCgg_veh_motor = new Ext.Button({        id: 'btnNuevoCgg_veh_motor',        text: 'Nuevo',        iconCls: 'iconNuevo',        listeners: {            click: function () {                var objCgg_veh_motor = new FrmCgg_veh_motor("insert");				objCgg_veh_motor.setStoreMarca(tmpStoreMarca);				objCgg_veh_motor.setStoreCilindraje(tmpStoreCilindraje);				objCgg_veh_motor.setStoreCombustible(tmpStoreCombustible);				objCgg_veh_motor.setVehiculo(gsCgg_veh_motor.baseParams.inCvveh_codigo);                objCgg_veh_motor.closeHandler(function () {                    gsCgg_veh_motor.reload();                });                objCgg_veh_motor.show();            }        }    });    /**     * Ext.Button Boton que permite editar un registro de la ventana winFrmListadoCgg_veh_motor.     */    var btnEditarCgg_veh_motor = new Ext.Button({        id: 'btnEditarCgg_veh_motor',        text: 'Editar',        iconCls: 'iconEditar',        listeners: {            click: function () {                var r = grdCgg_veh_motor.getSelectionModel().getSelected();                if (r) {                    var objCgg_veh_motor = new FrmCgg_veh_motor("update", r);					objCgg_veh_motor.setStoreMarca(tmpStoreMarca);					objCgg_veh_motor.setStoreCilindraje(tmpStoreCilindraje);					objCgg_veh_motor.setStoreCombustible(tmpStoreCombustible);					objCgg_veh_motor.setVehiculo(gsCgg_veh_motor.baseParams.inCvveh_codigo);                    objCgg_veh_motor.closeHandler(function () {                        gsCgg_veh_motor.reload();                    });                    objCgg_veh_motor.loadData();                    objCgg_veh_motor.show();                }            }        }    });    /**     * Ext.Button Boton que permite eliminar un registro de la ventana winFrmListadoCgg_veh_motor.     */    var btnEliminarCgg_veh_motor = new Ext.Button({        id: 'btnEliminarCgg_veh_motor',        text: 'Eliminar',        iconCls: 'iconEliminar',        listeners: {            click: function () {                Ext.Msg.show({                    title: 'Aviso',                    msg: 'Seguro de eliminar el registro seleccionado?',                    buttons: Ext.Msg.YESNO,                    fn: SWRCgg_veh_motor,                    icon: Ext.MessageBox.QUESTION                });                function SWRCgg_veh_motor(btn) {                    if (btn == 'yes') {                        try {                            function CallBackCgg_veh_motor(r) {                                winFrmListadoCgg_veh_motor.getEl().unmask();                                if (r == 'true') {                                    Ext.Msg.show({                                        title: tituloListadoCgg_veh_motor,                                        msg: 'La informaci\u00f3n de Motor ha sido eliminada.',                                        buttons: Ext.Msg.OK,                                        icon: Ext.MessageBox.INFO                                    });                                    gsCgg_veh_motor.reload();                                } else {                                    Ext.Msg.show({                                        title: tituloListadoCgg_veh_motor,                                        msg: 'La informaci\u00f3n de Motor no ha podido ser eliminada.'+(r.message?r.message:r),                                        buttons: Ext.Msg.OK,                                        icon: Ext.MessageBox.ERROR                                    });                                }                            }                            winFrmListadoCgg_veh_motor.getEl().mask('Eliminando...', 'x-mask-loading');                            var param = new SOAPClientParameters();                            param.add('inCvmtr_codigo', grdCgg_veh_motor.getSelectionModel().getSelected().get('CVMTR_CODIGO'));                            SOAPClient.invoke(urlListadoCgg_veh_motor, "delete", param, true, CallBackCgg_veh_motor);                        } catch (inErr) {                            winFrmListadoCgg_veh_motor.getEl().unmask();                        }                    }                }            }        }    });    /**     * Ext.Button Boton que permite salir de la ventana winFrmListadoCgg_veh_motor.     */    var btnSalirCgg_veh_motor = new Ext.Button({        id: 'btnSalirCgg_veh_motor',        text: 'Salir',        iconCls: 'iconSalir',        listeners: {            click: function () {                winFrmListadoCgg_veh_motor.close();            }        }    });    /**     * Ext.grid.ColumnModel Define el modelo de columnas para el objeto cgg_veh_motor.     */    var chkCvmtr_estado_funcional = new Ext.grid.CheckColumn({        dataIndex: 'CVMTR_ESTADO_FUNCIONAL',        header: 'Funcional?',        width: 70,        sortable: true    });	var chkCvmtr_ingreso = new Ext.grid.CheckColumn(		{dataIndex:'CVMTR_INGRESO',header:'Ingreso',width:150,sortable:true});	var chkCvmtr_salio = new Ext.grid.CheckColumn(		{dataIndex:'CVMTR_SALIO',header:'Salio',width:150,sortable:true});    var cmCgg_veh_motor = new Ext.grid.ColumnModel([		{dataIndex:'TRAMITE',header:'Tramite',width:50,sortable:true},    	{dataIndex:'MARCA',header:'Marca',width:150,sortable:true},    	{dataIndex: 'CVMTR_SERIE',header: 'Serie',width: 100,sortable: true},    	{dataIndex: 'CVMTR_ANIO_FABRICACION',header: 'A\u00f1o de fab.',width: 70,sortable: true},        chkCvmtr_estado_funcional,    	{dataIndex: 'CVMTR_TONELAJE',header: 'Tonelaje',width: 70,sortable: true},			chkCvmtr_ingreso,			{dataIndex:'CVMTR_FECHA_INGRESO',header:'Fecha ingreso',width:150,sortable:true,renderer:truncDate},			chkCvmtr_salio,			{dataIndex:'CVMTR_FECHA_SALIDA',header:'Fecha salida',width:150,sortable:true,renderer:truncDate},    	{dataIndex:'COMBUSTIBLE',header:'Combustible',width:150,sortable:true},		{dataIndex:'ESTADOS',header:'Estados',width:150,sortable:true},    	{dataIndex: 'CVMTR_OBSERVACION',header: 'Observaci\u00f3n',width: 200,sortable: true}]);    /**     * Ext.data.Store Agrupacion de registros de la tabla Cgg_veh_motor por un campo especifico.     */    var gsCgg_veh_motor = new Ext.data.Store({        proxy: new Ext.ux.bsx.SoapProxy({            url: URL_WS + "Cgg_veh_motor",            method: "selectPageDirect",            pagin: true        }),        remoteSort: true,        reader: new Ext.data.JsonReader({            id: 'CVMTR_CODIGO',            root: 'dataSet',            totalProperty: 'totalCount'        }, [			{name: 'CVMTR_CODIGO'},			{name:'CVMRC_CODIGO'},			{name:'CVCMB_CODIGO'},			{name:'CVVEH_CODIGO'},			{name:'CVVEH_PLACA'},			{name:'CVVEH_NOMBRE'},			{name:'CVVEH_FECHA_INGRESO'},			{name: 'MARCA'},			{name: 'TRAMITE'},			{name: 'COMBUSTIBLE'},			{name: 'CVCLN_CODIGO'},			{name: 'CILINDRAJE'},			{name: 'CVMTR_SERIE'},			{name: 'CVMTR_ANIO_FABRICACION'},			{name: 'CVMTR_ESTADO_FUNCIONAL'},			{name: 'CVMTR_TONELAJE'},			{name:'CVMTR_INGRESO'},			{name:'CVMTR_FECHA_INGRESO'},			{name:'CVMTR_SALIO'},			{name:'CVMTR_FECHA_SALIDA'},			{name: 'ESTADOS'},			{name: 'CVMTR_OBSERVACION'}        ]),        sortInfo: {            field: 'CVCLN_CODIGO',            direction: 'ASC'        },        baseParams: {            keyword: "",            format: 'JSON',			inCvveh_codigo:''        }    });    /**     * Ext.PagingToolbar Barra de navegacion que permite la visualizacion organizada de los registros de la tabla Cgg_veh_motor.     */    var pgBarCgg_veh_motor = new Ext.PagingToolbar({        store: gsCgg_veh_motor,        displayInfo: true,        pageSize: RECORD_PAGE,        displayMsg: 'Mostrando {0} - {1} de {2}',        temptyMsg: 'No hay informaci\u00f3n para mostrar'    });    /**     * Ext.grid.GridPanel Representacion de los datos de la tabla Cgg_veh_motor en un formato tabular de filas y columnas.     */    var grdCgg_veh_motor = new Ext.grid.GridPanel({        cm: cmCgg_veh_motor,        store: gsCgg_veh_motor,        region: 'center',        sm: new Ext.grid.RowSelectionModel({            singleSelect: true        }),        loadMask: {            msg: "Cargando..."        },        tbar: [            'Buscar: ',            new Ext.ux.bsx.SearchField({            store: gsCgg_veh_motor,            width: 200        })            ],        bbar: pgBarCgg_veh_motor,        listeners: {            rowdblclick: function (inGridComponent, inRowIndex, inEventObject) {                if (!btnEditarCgg_veh_motor.disabled) {                    btnEditarCgg_veh_motor.fireEvent('click', btnEditarCgg_veh_motor);                }            }        }    });    gsCgg_veh_motor.reload({        params: {            start: 0,            limit: RECORD_PAGE,            format: 'JSON'        }    });    if(inDesktop){		/**		 * Ext.Window Ventana en la que reside los controles necesarios para visualizar la informacion de los registros de la tabla Cgg_veh_motor.		 */		var winFrmListadoCgg_veh_motor = inDesktop.createWindow({			id: 'winFrmListadoCgg_veh_motor',			title: tituloListadoCgg_veh_motor,			width: 600,			minWidth: 600,			height: 400,			minHeight: 400,			maximizable: true,			minimizable: true,			constrain: true,			layout: 'border',			tbar: getPanelTitulo(tituloListadoCgg_veh_motor, descListadoCgg_veh_motor),			items: [grdCgg_veh_motor],			bbar: [btnNuevoCgg_veh_motor, btnEditarCgg_veh_motor, btnEliminarCgg_veh_motor, '->', btnSalirCgg_veh_motor]		});		/**		 * Funcion que aplica los privilegios del usuario.		 */		applyGrants(winFrmListadoCgg_veh_motor.getBottomToolbar());    }    /**     * Funcion miembro que devuelve la ventana winFrmListadoCgg_veh_motor.     * @returns ventana winFrmCgg_veh_motor.     * @base FrmListadoCgg_veh_motor.prototype.show     */    this.getWindow = function () {        return winFrmListadoCgg_veh_motor;    }    /**     * Funcion miembro que carga los controles de la ventana winFrmListadoCgg_veh_motor.     * @base FrmListadoCgg_veh_motor.prototype.loadData     */    this.loadData = function () {        gsCgg_veh_motor.load();    }    /**     * Funcion miembro que develve el ColumnModel utilizado en el listado.     */    this.getColumnModel = function () {        return cmCgg_veh_motor;    }    /**     * Funcion miembro que develve el Store utilizado en el listado.     */    this.getStore = function () {        return gsCgg_veh_motor;    }	/**     * Funcion miembro que develve el GridPanel utilizado en el listado.     */    this.getGridPanel = function (inCvveh_codigo) {		gsCgg_veh_motor.baseParams.inCvveh_codigo = inCvveh_codigo;        return grdCgg_veh_motor;    }		this.addMotor = function(){		btnNuevoCgg_veh_motor.fireEvent('click')	}		this.editMotor = function(){		btnEditarCgg_veh_motor.fireEvent('click');	}		this.setVehiculo = function(inCvveh_codigo){		tmpVehiculo = inCvveh_codigo;		gsCgg_veh_motor.baseParams.inCvveh_codigo = tmpVehiculo;		gsCgg_veh_motor.reload();	}	}FrmListadoCgg_veh_motor.prototype.setVehiculo = function (inCvveh_codigo) {    this.setVehiculo(inCvveh_codigo);}FrmListadoCgg_veh_motor.prototype.addMotor = function () {    this.addMotor();}FrmListadoCgg_veh_motor.prototype.editMotor = function () {    this.editMotor();}FrmListadoCgg_veh_motor.prototype.getGridPanel = function (inCvveh_codigo) {    this.getGridPanel(inCvveh_codigo);}/** * Funcion prototipo. Devuelve el GridPanel utilizado en el formulario. */FrmListadoCgg_veh_motor.prototype.getGridPanel = function (inCvveh_codigo) {    this.getGridPanel(inCvveh_codigo);}/** * Funcion prototipo. Devuelve el ColumnModel utilizado en el formulario. */FrmListadoCgg_veh_motor.prototype.getColumnModel = function () {    this.getColumnModel();}/** * Funcion prototipo. Devuelve el Store utilizado en el formulario. */FrmListadoCgg_veh_motor.prototype.getStore = function () {    this.getStore();}/** * Funcion prototipo. Permite mostrar la ventana winFrmListadoCgg_veh_motor desde una instancia. */FrmListadoCgg_veh_motor.prototype.show = function () {    this.getWindow().show();}/** * Funcion prototipo. Permite cerrar la ventana winFrmListadoCgg_veh_motor desde una instancia. */FrmListadoCgg_veh_motor.prototype.close = function () {    this.getWindow().close();}/** * Funcion prototipo. Permite saber si se ha cerrado la ventana winFrmListadoCgg_veh_motor, * con el fin de realizar otras acciones desde una instancia */FrmListadoCgg_veh_motor.prototype.closeHandler = function (inFunctionHandler) {    this.getWindow().on('close', inFunctionHandler);}/** * Funcion prototipo. Permite cargar los controles de la ventana winFrmListadoCgg_veh_motor desde una instancia. */FrmListadoCgg_veh_motor.prototype.loadData = function () {    this.loadData();}