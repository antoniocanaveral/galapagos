/** * Funcion publica. Formulario que permite administrar la informacion a travez de las operaciones basicas de insercion y actualizacion de los registros de tabla Cgg_veh_color. * @param {String} IN_SENTENCIA_CGG_VEH_COLOR Sentencia (insert/update) para el tratamiento de la informacion. * @param {Ext.data.Record} IN_RECORD_CGG_VEH_COLOR Registro de datos de la tabla Cgg_veh_color. * @constructor * @base FrmListadoCgg_veh_color * @author Besixplus Cia. Ltda. */function FrmCgg_veh_color(IN_SENTENCIA_CGG_VEH_COLOR, IN_RECORD_CGG_VEH_COLOR) {    var inSentenciaCgg_veh_color = IN_SENTENCIA_CGG_VEH_COLOR;    var inRecordCgg_veh_color = IN_RECORD_CGG_VEH_COLOR;    var urlCgg_veh_color = URL_WS + "Cgg_veh_color";    var tituloCgg_veh_color = 'Color';    var descCgg_veh_color = 'El formulario permite administrar la informaci\u00f3n del color de los veh\u00f3culos.';    var isEdit = false;    /**     * Ext.form.TextField IDENTIFICADOR UNICO DE REGISTRO DE COLOR     */    var txtCvclr_codigo = new Ext.form.TextField({        id: 'txtCvclr_codigo',        name: 'txtCvclr_codigo',        fieldLabel: 'Codigo',        anchor: '98%',        value: "KEYGEN",        hidden: true,        hideLabel: true,        allowBlank: false    });    /**     * Ext.form.TextField NOMBRE DESCRIPTIVO DEL NOMBRE.     */    var txtCvclr_nombre = new Ext.form.TextField({        id: 'txtCvclr_nombre',        name: 'txtCvclr_nombre',        fieldLabel: 'Nombre',        anchor: '98%',        allowBlank: false,        maxLength:100    });    /**     * Ext.form.TextArea INFORMACION ADICIONAL     */    var txtCvclr_observacion = new Ext.form.TextArea({        id: 'txtCvclr_observacion',        name: 'txtCvclr_observacion',        fieldLabel: 'Observaci\u00f3n',        width: '98%'    });    /**     * Boton que permite almacenar la informacion de la ventana winFrmCgg_veh_color     */    var btnGuardarCgg_veh_color = new Ext.Button({        id: 'btnGuardarCgg_veh_color',        text: 'Guardar',        iconCls: 'iconGuardar',        listeners: {            click: function () {                if (pnlCgg_veh_color.getForm().isValid() == false) {                    return;                }                try {                    function CallBackCgg_veh_color(r) {                        winFrmCgg_veh_color.getEl().unmask();                        if (r == 'true') {                            Ext.Msg.show({                                title: tituloCgg_veh_color,                                msg: 'La informaci\u00f3n de color ha sido almacenada.',                                buttons: Ext.Msg.OK,                                icon: Ext.MessageBox.INFO                            });                            winFrmCgg_veh_color.close()                        } else {                            Ext.Msg.show({                                title: tituloCgg_veh_color,                                msg: 'La informaci\u00f3n de color no ha podido ser almacenada. ' + (r.message?r.message:r),                                buttons: Ext.Msg.OK,                                icon: Ext.MessageBox.ERROR                            });                        }                    }                    winFrmCgg_veh_color.getEl().mask('Guardando...', 'x-mask-loading');                    var param = new SOAPClientParameters();                    if (isEdit) param.add('inCvclr_codigo', txtCvclr_codigo.getValue());                    param.add('inCvclr_nombre', txtCvclr_nombre.getValue());                    param.add('inCvclr_observacion', txtCvclr_observacion.getValue());                    SOAPClient.invoke(urlCgg_veh_color, IN_SENTENCIA_CGG_VEH_COLOR, param, true, CallBackCgg_veh_color);                } catch (inErr) {                    winFrmCgg_veh_color.getEl().unmask();                }            }        }    });    /**     * Boton que permite cancelar los cambios de la informacion de la ventana winFrmCgg_veh_color.     */    var btnCancelarCgg_veh_color = new Ext.Button({        id: 'btnCancelarCgg_veh_color',        text: 'Cancelar',        iconCls: 'iconCancelar',        listeners: {            click: function () {                pnlCgg_veh_color.getForm().reset();            }        }    });    /**     * Boton que permite cerrar la ventana winFrmCgg_veh_color.     */    var btnCerrarCgg_veh_color = new Ext.Button({        id: 'btnCerrarCgg_veh_color',        text: 'Cerrar',        iconCls: 'iconCerrar',        listeners: {            click: function () {                winFrmCgg_veh_color.close();            }        }    });    /**     * Ext.form.FormPanel Panel principal que contiene los controles de la ventana winFrmCgg_veh_color.     */    var pnlCgg_veh_color = new Ext.form.FormPanel({        frame: true,        labelWidth: 100,        items: [txtCvclr_codigo, txtCvclr_nombre, txtCvclr_observacion]    });    /**     * Ext.Window Ventana en la que reside los controles necesarios para administrar la informacion de los registros de la tabla Cgg_veh_color.     */    var winFrmCgg_veh_color = new Ext.Window({        id: 'winFrmCgg_veh_color',        title: tituloCgg_veh_color,        width: 400,        minWidth: 400,        maximizable: true,        minimizable: true,        constrain: true,        tbar: getPanelTitulo(tituloCgg_veh_color, descCgg_veh_color),        items: [pnlCgg_veh_color],        bbar: [btnGuardarCgg_veh_color, btnCancelarCgg_veh_color, '->', btnCerrarCgg_veh_color]    });    /**     * Funcion que permite habilitar los controles que contienen la informacion de la ventana winFrmCgg_veh_color.     * @param {Boolean} inEstado Estado (true/false) para la habilitacion de los controles.     */    function habilitarCgg_veh_colorCtrls(inEstado) {        estado = !inEstado;        txtCvclr_codigo.setDisabled(estado);        txtCvclr_nombre.setDisabled(estado);        txtCvclr_observacion.setDisabled(estado);    }    /**     * Funcion que permite cargar la informacion de los controles de la ventana winFrmCgg_veh_color.     */    function cargarCgg_veh_colorCtrls() {        if (inRecordCgg_veh_color) {            txtCvclr_codigo.setValue(inRecordCgg_veh_color.get('CVCLR_CODIGO'));            txtCvclr_nombre.setValue(inRecordCgg_veh_color.get('CVCLR_NOMBRE'));            txtCvclr_observacion.setValue(inRecordCgg_veh_color.get('CVCLR_OBSERVACION'));            isEdit = true;            habilitarCgg_veh_colorCtrls(true);        }    }    /**     * Funcion miembro que devuelve la ventana winFrmCgg_veh_color.     * @returns ventana winFrmCgg_veh_color.     * @base FrmCgg_veh_color.prototype.show     */    this.getWindow = function () {        return winFrmCgg_veh_color;    }    /**     * Funcion miembro que carga los controles de la ventana winFrmCgg_veh_color.     * @base FrmCgg_veh_color.prototype.loadData     */    this.loadData = function () {        cargarCgg_veh_colorCtrls();    }}/** * Funcion prototipo. Permite mostrar la ventana winFrmCgg_veh_color desde una instancia. */FrmCgg_veh_color.prototype.show = function () {    this.getWindow().show();}/** *Funcion prototipo. Permite cerrar la ventana winFrmCgg_veh_color desde una instancia. */FrmCgg_veh_color.prototype.close = function () {    this.getWindow().close();}/** * Funcion prototipo. Permite saber si se ha cerrado la ventana winFrmCgg_veh_color, * con el fin de realizar otras acciones desde una instancia. */FrmCgg_veh_color.prototype.closeHandler = function (inFunctionHandler) {    this.getWindow().on('close', inFunctionHandler);}/** * Funcion prototipo. Permite cargar los controles de la ventana winFrmCgg_veh_color desde una instancia. */FrmCgg_veh_color.prototype.loadData = function () {    this.loadData();}