/** * Funcion publica. Formulario que permite administrar la informacion a travez de las operaciones basicas de insercion y actualizacion de los registros de tabla Cgg_veh_motor. * @param {String} IN_SENTENCIA_CGG_VEH_MOTOR Sentencia (insert/update) para el tratamiento de la informacion. * @param {Ext.data.Record} IN_RECORD_CGG_VEH_MOTOR Registro de datos de la tabla Cgg_veh_motor. * @constructor * @base FrmListadoCgg_veh_motor * @author Besixplus Cia. Ltda. */function FrmCgg_veh_motor(IN_SENTENCIA_CGG_VEH_MOTOR, IN_RECORD_CGG_VEH_MOTOR) {    var inSentenciaCgg_veh_motor = IN_SENTENCIA_CGG_VEH_MOTOR;    var inRecordCgg_veh_motor = IN_RECORD_CGG_VEH_MOTOR;    var urlCgg_veh_motor = URL_WS + "Cgg_veh_motor";    var tituloCgg_veh_motor = 'Motor';    var descCgg_veh_motor = 'El formulario permite administrar la informaci\u00f3n de un motor.';    var isEdit = false;    var tmpDatos = new Array();	var tmpRemEstados = new Array();	var tmpNewEstados = new Array();	var tmpVehiculo;    /**     * Ext.form.TextField IDENTIFICATIVO UNICO DE REGISTRO DE MOTOR     */    var txtCvmtr_codigo = new Ext.form.TextField({        id: 'txtCvmtr_codigo',        name: 'txtCvmtr_codigo',        fieldLabel: 'Codigo',        anchor: '98%',        value: "KEYGEN",        hidden: true,        hideLabel: true,        allowBlank: false    });			var cbxCvmrc_codigo = new Ext.form.ComboBox({		id:'cbxCvmrc_codigo',		fieldLabel :'Marca',		typeAhead: true,		triggerAction: 'all',		lazyRender:true,		editable:false,		forceSelection:true,		mode: 'local',		anchor:'98%',		displayField:'CVMRC_NOMBRE',		valueField:'CVMRC_CODIGO',		emptyText:'Seleccione la marca del motor ...',		listeners:{			select:function(inSource, inRecord, inIndex){				tmpDatos['MARCA'] = cbxCvmrc_codigo.getValue();			}		}	});	    var cbxCvcln_codigo = new Ext.form.ComboBox({		id:'cbxCvcln_codigo',		fieldLabel :'Cilindraje',		typeAhead: true,		triggerAction: 'all',		lazyRender:true,		editable:false,		forceSelection:true,		mode: 'local',		anchor:'98%',		displayField:'CVCLN_CILINDRAJE',		valueField:'CVCLN_CODIGO',		emptyText:'Seleccione el cilindraje del motor ...',		listeners:{			select:function(inSource, inRecord, inIndex){				tmpDatos['CILINDRAJE'] = cbxCvcln_codigo.getValue();			}		}	});		var cbxCvcmb_codigo = new Ext.form.ComboBox({		id:'cbxCvcmb_codigo',		fieldLabel :'Combustible',		typeAhead: true,		triggerAction: 'all',		lazyRender:true,		forceSelection:true,		mode: 'local',		anchor:'98%',		editable:false,		displayField:'CVCMB_NOMBRE',		valueField:'CVCMB_CODIGO',		emptyText:'Seleccione el combustible del motor ...',		listeners:{			select:function(inSource, inRecord, inIndex){				tmpDatos['COMBUSTIBLE'] = cbxCvcmb_codigo.getValue();			}		}	});    /**     * Ext.form.TextField SERIE DE FABRICA DEL MOTOR     */    var txtCvmtr_serie = new Ext.form.TextField({        id: 'txtCvmtr_serie',        name: 'txtCvmtr_serie',        fieldLabel: 'Serie',        anchor: '98%',        allowBlank: false    });    /**     * Ext.form.NumberField ANIO DE FABRICACION DEL MOTOR.     */    var numCvmtr_anio_fabricacion = new Ext.form.NumberField({        id: 'numCvmtr_anio_fabricacion',        name: 'numCvmtr_anio_fabricacion',        fieldLabel: 'A\u00f1o de fab.',		anchor:'98%',        allowBlank: false,        disabled: false    });    /**     * Ext.form.Checkbox ESTADO DE FUNCIONAMIENTO DEL MOTOR     */    var chkCvmtr_estado_funcional = new Ext.form.Checkbox({        id: 'chkCvmtr_estado_funcional',        name: 'chkCvmtr_estado_funcional',        fieldLabel: 'Funcional?',        allowBlank: false,        checked: true    });    /**     * Ext.form.NumberField CAPACIDAD DE CARGA     */    var numCvmtr_tonelaje = new Ext.form.NumberField({        id: 'numCvmtr_tonelaje',        name: 'numCvmtr_tonelaje',        fieldLabel: 'Tonelaje',		anchor:'98%',        allowBlank: false,        disabled: false    });	/**	* Ext.form.Checkbox INDICA SI EL MOTOR ESTA DENTRO DE LA PROVINCIA	*/	var chkCvmtr_ingreso = new Ext.form.Checkbox({			id:'chkCvmtr_ingreso',			name:'chkCvmtr_ingreso',			fieldLabel :'Ingreso',			allowBlank :true,			checked:false,			listeners:{				check:function(inObject, inChecked){					dtCvmtr_fecha_ingreso.setDisabled(!inChecked);					dtCvmtr_fecha_ingreso.maxValue = CURRENT_DATE;				}			}	});	/**	* Ext.form.DateField FECHA DE INGRESO DEL MOTOR A LA PROVINCIA	*/	var dtCvmtr_fecha_ingreso = new Ext.form.DateField({			id:'dtCvmtr_fecha_ingreso',			name:'dtCvmtr_fecha_ingreso',			fieldLabel :'Fecha',			allowBlank :true,			disabled:true,			format :'d/m/Y',			value:CURRENT_DATE	});	/**	* Ext.form.Checkbox INDICA SI EL MOTOR ESTA DENTRO DE LA PRONVINCIA	*/	var chkCvmtr_salio = new Ext.form.Checkbox({			id:'chkCvmtr_salio',			name:'chkCvmtr_salio',			fieldLabel :'Salio',			allowBlank :true,			checked:false,			listeners:{				check:function(inObject, inChecked){					dtCvmtr_fecha_salida.setDisabled(!inChecked);				}			}	});	/**	* Ext.form.DateField FECHA DE SALIDA DEL MOTOR DE LA PROVINCIA	*/	var dtCvmtr_fecha_salida = new Ext.form.DateField({			id:'dtCvmtr_fecha_salida',			name:'dtCvmtr_fecha_salida',			fieldLabel :'Fecha',			allowBlank :true,			disabled:true,			format :'d/m/Y',			value:CURRENT_DATE	});    /**     * Ext.form.TextArea INFORMACION ADICIONAL     */    var txtCvmtr_observacion = new Ext.form.TextArea({        id: 'txtCvmtr_observacion',        name: 'txtCvmtr_observacion',        fieldLabel: 'Observaci\u00f3n',        width: '98%'    });    /**     * Boton que permite almacenar la informacion de la ventana winFrmCgg_veh_motor     */    var btnGuardarCgg_veh_motor = new Ext.Button({        id: 'btnGuardarCgg_veh_motor',        text: 'Guardar',        iconCls: 'iconGuardar',        listeners: {            click: function () {                if (pnlCgg_veh_motor.getForm().isValid() == false) {                    return;                }                try {					var tmpJSONEstados = '[';					for(i = 0; i < gsCgg_veh_motor_estado.getCount(); i++){						if(gsCgg_veh_motor_estado.getAt(i).get('CVSMT_CODIGO') == 'KEYGEN'){							if(tmpJSONEstados.length > 1)								tmpJSONEstados += ',';							tmpJSONEstados = tmpJSONEstados + '{CVSVM_CODIGO:"'+gsCgg_veh_motor_estado.getAt(i).get('CVSVM_CODIGO')+'",CVSMT_FECHA:"'+gsCgg_veh_motor_estado.getAt(i).get('CVSMT_FECHA').format('Y-m-d H:i:s')+'",CVSMT_OBSERVACION:"'+gsCgg_veh_motor_estado.getAt(i).get('CVSMT_OBSERVACION')+'"}';						}					}					tmpJSONEstados += ']';                    function CallBackCgg_veh_motor(r) {                        winFrmCgg_veh_motor.getEl().unmask();                        if (r == 'true') {                            Ext.Msg.show({                                title: tituloCgg_veh_motor,                                msg: 'La informaci\u00f3n de Motor ha sido almacenada.',                                buttons: Ext.Msg.OK,                                icon: Ext.MessageBox.INFO                            });                            winFrmCgg_veh_motor.close()                        } else {                            Ext.Msg.show({                                title: tituloCgg_veh_motor,                                msg: 'La informaci\u00f3n de Motor no ha podido ser almacenada. ' + (r.message?r.message:r),                                buttons: Ext.Msg.OK,                                icon: Ext.MessageBox.ERROR                            });                        }                    }                    winFrmCgg_veh_motor.getEl().mask('Guardando...', 'x-mask-loading');                    var param = new SOAPClientParameters();                    if (isEdit) param.add('inCvmtr_codigo', txtCvmtr_codigo.getValue());                    param.add('inCvcln_codigo', tmpDatos['CILINDRAJE']);                    param.add('inCvmrc_codigo',tmpDatos['MARCA']);                    param.add('inCvcmb_codigo',tmpDatos['COMBUSTIBLE']);                    param.add('inCvmtr_serie', txtCvmtr_serie.getValue());                    param.add('inCvmtr_anio_fabricacion', numCvmtr_anio_fabricacion.getValue());                    param.add('inCvmtr_estado_funcional', chkCvmtr_estado_funcional.getValue());                    param.add('inCvmtr_tonelaje', numCvmtr_tonelaje.getValue());					param.add('inCvmtr_ingreso',chkCvmtr_ingreso.getValue());					param.add('inCvmtr_fecha_ingreso',dtCvmtr_fecha_ingreso.getValue()?dtCvmtr_fecha_ingreso.getValue().format('c'):null);					param.add('inCvmtr_salio',chkCvmtr_salio.getValue());					param.add('inCvmtr_fecha_salida',dtCvmtr_fecha_salida.getValue()?dtCvmtr_fecha_salida.getValue().format('c'):null);                    param.add('inCvmtr_observacion', txtCvmtr_observacion.getValue());					if(!isEdit) param.add('inCvveh_codigo', tmpVehiculo);					param.add('inEstados', tmpJSONEstados);                    SOAPClient.invoke(urlCgg_veh_motor, IN_SENTENCIA_CGG_VEH_MOTOR, param, true, CallBackCgg_veh_motor);                } catch (inErr) {                    winFrmCgg_veh_motor.getEl().unmask();                }            }        }    });    /**     * Boton que permite cancelar los cambios de la informacion de la ventana winFrmCgg_veh_motor.     */    var btnCancelarCgg_veh_motor = new Ext.Button({        id: 'btnCancelarCgg_veh_motor',        text: 'Cancelar',        iconCls: 'iconCancelar',        listeners: {            click: function () {                pnlCgg_veh_motor.getForm().reset();            }        }    });    /**     * Boton que permite cerrar la ventana winFrmCgg_veh_motor.     */    var btnCerrarCgg_veh_motor = new Ext.Button({        id: 'btnCerrarCgg_veh_motor',        text: 'Cerrar',        iconCls: 'iconCerrar',        listeners: {            click: function () {                winFrmCgg_veh_motor.close();            }        }    });	/**	* Ext.form.DateField FECHA DE INICIO DEL ESTADO	*/	var dtCvsmt_fecha = new Ext.form.DateField({			id:'dtCvsmt_fecha',			name:'dtCvsmt_fecha',			fieldLabel :'Fecha',			allowBlank :false,			format :'d/m/Y',			value:new Date()	});	/**	* Ext.grid.ColumnModel Define el modelo de columnas para el objeto cgg_veh_motor_estado.	*/	var cmCgg_veh_motor_estado = new Ext.grid.ColumnModel([		{dataIndex:'ESTADO',header:'Estado',width:200,sortable:true},			{dataIndex:'CVSMT_FECHA',header:'Fecha',width:80,sortable:true,renderer:truncDate,editor:dtCvsmt_fecha},	{dataIndex:'CVSMT_OBSERVACION',header:'Observaci\u00f3n',width:250,sortable:true,editor:new Ext.form.TextField({})}]);	/**	* Ext.data.Store Agrupacion de registros de la tabla Cgg_veh_motor_estado por un campo especifico.	*/	var gsCgg_veh_motor_estado = new Ext.data.Store({			proxy:new Ext.ux.bsx.SoapProxy({					url:URL_WS+"Cgg_veh_motor_estado",					method:"selectCGG_VEH_MOTOR",					pagin:false			}),			remoteSort:false,			reader:new Ext.data.JsonReader({					id:'CVSMT_CODIGO'			},[				{name:'CVSMT_CODIGO'},				{name:'CVMTR_CODIGO'},				{name:'CVSVM_CODIGO'},				{name:'ESTADO'},				{name:'CVSMT_FECHA'},				{name:'CVSMT_OBSERVACION'}			]),			sortInfo:{field: 'CVMTR_CODIGO', direction: 'ASC'},			baseParams:{format:'JSON',inCvmtr_codigo:''}	});	/**	* Ext.grid.GridPanel Representacion de los datos de la tabla Cgg_veh_motor_estado en un formato tabular de filas y columnas.	*/	var grdCgg_veh_motor_estado = new Ext.grid.EditorGridPanel({		title:'Estado',			cm:cmCgg_veh_motor_estado,			store:gsCgg_veh_motor_estado,			height:160,			sm:new Ext.grid.RowSelectionModel({singleSelect:true}),			loadMask:{msg:"Cargando..."},			tbar:[{iconCls:'iconNuevo',handler:function(){					var tmpFLCgg_veh_estado_vhmt = new FrmListadoCgg_veh_estado_vhmt();					var objBusqueda = new DlgBusqueda(tmpFLCgg_veh_estado_vhmt.getStore(),tmpFLCgg_veh_estado_vhmt.getColumnModel());					objBusqueda.closeHandler(function(){							var tmpRecord = objBusqueda.getSelectedRow();							if(tmpRecord){								var tmpRecordEstado = gsCgg_veh_motor_estado.recordType;								gsCgg_veh_motor_estado.insert(0, new tmpRecordEstado({									CVSMT_CODIGO:'KEYGEN',									CVMTR_CODIGO:txtCvmtr_codigo.getValue(),									CVSVM_CODIGO:tmpRecord.get('CVSVM_CODIGO'),									ESTADO:tmpRecord.get('CVSVM_NOMBRE'),									CVSMT_FECHA:new Date(),									CVSMT_OBSERVACION:''								}));							}					});					objBusqueda.show();				}}],			listeners:{				beforeedit:function(inObject){					if(inObject.record.get('CVSMT_CODIGO') != 'KEYGEN')						return false;				}			}				});	gsCgg_veh_motor_estado.reload({params:{			format:'JSON',			inCvmtr_codigo:''		}	});    /**     * Ext.form.FormPanel Panel principal que contiene los controles de la ventana winFrmCgg_veh_motor.     */    var pnlCgg_veh_motor = new Ext.form.FormPanel({        frame: true,        labelWidth: 70,        items: [txtCvmtr_codigo,			txtCvmtr_serie,			cbxCvmrc_codigo,            {xtype: 'panel',layout: 'column',items: [				{columnWidth: .5,layout: 'form',items: [cbxCvcmb_codigo]},            	{columnWidth: .5,layout: 'form',items: [cbxCvcln_codigo]}]},            {xtype: 'panel',layout: 'column',items: [				{columnWidth: .5,layout: 'form',items: [numCvmtr_anio_fabricacion]},            	{columnWidth: .5,layout: 'form',items: [numCvmtr_tonelaje]}]},				chkCvmtr_estado_funcional, 			{xtype: 'panel',layout: 'column',items: [				{columnWidth: .5,layout: 'form',items: [chkCvmtr_ingreso]},				{columnWidth: .5,layout: 'form',items: [dtCvmtr_fecha_ingreso]}]},			{xtype: 'panel',layout: 'column',items: [				{columnWidth: .5,layout: 'form',items: [chkCvmtr_salio]},				{columnWidth: .5,layout: 'form',items: [dtCvmtr_fecha_salida]}]},				txtCvmtr_observacion,			grdCgg_veh_motor_estado]    });    /**     * Ext.Window Ventana en la que reside los controles necesarios para administrar la informacion de los registros de la tabla Cgg_veh_motor.     */    var winFrmCgg_veh_motor = new Ext.Window({        id: 'winFrmCgg_veh_motor',        title: tituloCgg_veh_motor,        width: 460,        minWidth: 400,        maximizable: true,        minimizable: true,        constrain: true,        tbar: getPanelTitulo(tituloCgg_veh_motor, descCgg_veh_motor),        items: [pnlCgg_veh_motor],        bbar: [btnGuardarCgg_veh_motor, btnCancelarCgg_veh_motor, '->', btnCerrarCgg_veh_motor]    });    /**     * Funcion que permite cargar la informacion de los controles de la ventana winFrmCgg_veh_motor.     */    function cargarCgg_veh_motorCtrls() {        if (inRecordCgg_veh_motor) {        	tmpDatos['CILINDRAJE'] = inRecordCgg_veh_motor.get('CVCLN_CODIGO');        	tmpDatos['MARCA'] =  inRecordCgg_veh_motor.get('CVMRC_CODIGO');        	tmpDatos['COMBUSTIBLE'] = inRecordCgg_veh_motor.get('CVCMB_CODIGO');         	cbxCvmrc_codigo.setValue(inRecordCgg_veh_motor.get('CVMRC_CODIGO'));            txtCvmtr_codigo.setValue(inRecordCgg_veh_motor.get('CVMTR_CODIGO'));            cbxCvcln_codigo.setValue(inRecordCgg_veh_motor.get('CVCLN_CODIGO'));            cbxCvcmb_codigo.setValue(inRecordCgg_veh_motor.get('CVCMB_CODIGO'));            txtCvmtr_serie.setValue(inRecordCgg_veh_motor.get('CVMTR_SERIE'));            numCvmtr_anio_fabricacion.setValue(inRecordCgg_veh_motor.get('CVMTR_ANIO_FABRICACION'));            chkCvmtr_estado_funcional.setValue(inRecordCgg_veh_motor.get('CVMTR_ESTADO_FUNCIONAL'));            numCvmtr_tonelaje.setValue(inRecordCgg_veh_motor.get('CVMTR_TONELAJE'));			chkCvmtr_ingreso.setValue(inRecordCgg_veh_motor.get('CVMTR_INGRESO'));			dtCvmtr_fecha_ingreso.setValue(truncDate(inRecordCgg_veh_motor.get('CVMTR_FECHA_INGRESO')));			chkCvmtr_salio.setValue(inRecordCgg_veh_motor.get('CVMTR_SALIO'));			dtCvmtr_fecha_salida.setValue(truncDate(inRecordCgg_veh_motor.get('CVMTR_FECHA_SALIDA')));            txtCvmtr_observacion.setValue(inRecordCgg_veh_motor.get('CVMTR_OBSERVACION'));            isEdit = true;			gsCgg_veh_motor_estado.reload({params:{					format:'JSON',					inCvmtr_codigo:inRecordCgg_veh_motor.get('CVMTR_CODIGO')				}			});        }    }    /**     * Funcion miembro que devuelve la ventana winFrmCgg_veh_motor.     * @returns ventana winFrmCgg_veh_motor.     * @base FrmCgg_veh_motor.prototype.show     */    this.getWindow = function () {        return winFrmCgg_veh_motor;    }    /**     * Funcion miembro que carga los controles de la ventana winFrmCgg_veh_motor.     * @base FrmCgg_veh_motor.prototype.loadData     */    this.loadData = function () {       cargarCgg_veh_motorCtrls();    }		this.setVehiculo = function (inCvveh_codigo){		tmpVehiculo = inCvveh_codigo;	}		this.setStoreMarca = function (inStoreMarca) {		cbxCvmrc_codigo.store = inStoreMarca;	}		this.setStoreCilindraje = function (inStoreCilindraje) {		cbxCvcln_codigo.store = inStoreCilindraje;	}	this.setStoreCombustible = function (inStoreCombustible) {		cbxCvcmb_codigo.store = inStoreCombustible;	}}/** * Funcion prototipo. Asigna el store de la Marcas registradas. */FrmCgg_veh_motor.prototype.setStoreMarca = function (inStoreMarca) {    this.setStoreMarca(inStoreMarca);}/** * Funcion prototipo. Asigna el store de los Cillindraje registrados. */FrmCgg_veh_motor.prototype.setStoreCilindraje = function (inStoreCilindraje) {    this.setStoreCilindraje(inStoreCilindraje);}/** * Funcion prototipo. Asigna el store de los combustibles registrados. */FrmCgg_veh_motor.prototype.setStoreCombustible = function (inStoreCombustible) {    this.setStoreCombustible(inStoreCombustible);}/** * Funcion prototipo. Asigna el codigo el vehiculo. */FrmCgg_veh_motor.prototype.setVehiculo = function (inCvveh_codigo) {    this.setVehiculo(inCvveh_codigo);}/** * Funcion prototipo. Permite mostrar la ventana winFrmCgg_veh_motor desde una instancia. */FrmCgg_veh_motor.prototype.show = function () {    this.getWindow().show();}/** *Funcion prototipo. Permite cerrar la ventana winFrmCgg_veh_motor desde una instancia. */FrmCgg_veh_motor.prototype.close = function () {    this.getWindow().close();}/** * Funcion prototipo. Permite saber si se ha cerrado la ventana winFrmCgg_veh_motor, * con el fin de realizar otras acciones desde una instancia. */FrmCgg_veh_motor.prototype.closeHandler = function (inFunctionHandler) {    this.getWindow().on('close', inFunctionHandler);}/** * Funcion prototipo. Permite cargar los controles de la ventana winFrmCgg_veh_motor desde una instancia. */FrmCgg_veh_motor.prototype.loadData = function () {    this.loadData();}