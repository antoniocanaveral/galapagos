CREATE OR REPLACE FUNCTION f_select_requisitotiposolicitudtramite(in_crtst_codigo character varying, in_crtra_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	IF(IN_CRTRA_CODIGO IS NULL)THEN

	OPEN TMP_REF FOR
		SELECT
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_DESCRIPCION,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_REQUERIDO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE,
		  CGG_RES_REQUISITO.CRREQ_CODIGO,
		  CGG_RES_REQUISITO.CRREQ_DESCRIPCION,
		  ' ' AS CRTRA_CODIGO,
		  ' ' AS CRRQT_CODIGO,
		  false AS CRRQT_CUMPLE,
		  ' ' AS CRRQT_OBSERVACION
		FROM
		  SII.CGG_RES_SOLICITUD_REQUISITO INNER JOIN SII.CGG_RES_REQUISITO ON (CGG_RES_REQUISITO.CRREQ_CODIGO = CGG_RES_SOLICITUD_REQUISITO.CRREQ_CODIGO)
		  WHERE CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO = IN_CRTST_CODIGO
		  ORDER BY CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE;

	ELSE
		OPEN TMP_REF FOR
		  SELECT
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_DESCRIPCION,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_REQUERIDO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE,
		  CGG_RES_REQUISITO.CRREQ_CODIGO,
		  CGG_RES_REQUISITO.CRREQ_DESCRIPCION,
		  CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_CODIGO,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_CUMPLE,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_OBSERVACION
		FROM
		  SII.CGG_RES_SOLICITUD_REQUISITO
		  INNER JOIN SII.CGG_RES_REQUISITO ON (CGG_RES_REQUISITO.CRREQ_CODIGO = CGG_RES_SOLICITUD_REQUISITO.CRREQ_CODIGO)
		  INNER JOIN SII.CGG_RES_REQUISITO_TRAMITE  ON (CGG_RES_SOLICITUD_REQUISITO.CRSRQ_CODIGO = CGG_RES_REQUISITO_TRAMITE.CRSRQ_CODIGO)
		  WHERE CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO = IN_CRTST_CODIGO OR CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO = IN_CRTRA_CODIGO
		  GROUP BY CGG_RES_SOLICITUD_REQUISITO.CRSRQ_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_DESCRIPCION,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_REQUERIDO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE,
		  CGG_RES_REQUISITO.CRREQ_CODIGO,
		  CGG_RES_REQUISITO.CRREQ_DESCRIPCION,
		  CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_CODIGO,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_CUMPLE,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_OBSERVACION
		  HAVING CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO = IN_CRTST_CODIGO AND  (CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO = IN_CRTRA_CODIGO OR CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO IS NULL)
		  ORDER BY CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE;
	END IF;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;


--TEMPORALES CON LOS PADRES CORRECTOS:
update sii.cgg_res_tipo_solicitud_tramite set cgg_crtst_codigo='CRTST2' where cgg_crtst_codigo='CRTST11' and crtst_estado;


--FIX: MOSTRAR FASE EN INFORMES
CREATE OR REPLACE FUNCTION f_cgg_res_informe_tramite(in_crtra_codigo character varying, in_crseg_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	FECHA_SEGUIMIENTO TIMESTAMP;
BEGIN
	SELECT CRSEG_FECHA_INSERT INTO FECHA_SEGUIMIENTO FROM CGG_RES_SEGUIMIENTO WHERE CRSEG_CODIGO = IN_CRSEG_CODIGO;
	OPEN TMP_REF FOR
	SELECT
		CRISE.CRISE_CODIGO,
		CRISE.CRSEG_CODIGO,
		CRISE.CRSEC_CODIGO,
		CRISE.CRISE_NUMERO_INFORME,
		CRISE.CRISE_FECHA_INFORME,
		CRISE.CRISE_ASUNTO_INFORME,
		CRISE.CRISE_EXTRACTO_INFORME,
		CRISE.CRISE_DESCRIPCION_ADJUNTO,
		CRISE.CRISE_ESTADO,
		CRISE.CRISE_FECHA_INSERT,
		CRISE.CRISE_USUARIO_INSERT,
		CRISE.CRISE_FECHA_UPDATE,
		CRISE.CRISE_USUARIO_UPDATE,
		FAS.CRFAS_CODIGO,
		FAS.CRFAS_NOMBRE
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO CRISE
	INNER JOIN SII.CGG_RES_SEGUIMIENTO SEG ON (CRISE.CRSEG_CODIGO = SEG.CRSEG_CODIGO)
	INNER JOIN SII.CGG_RES_FASE FAS ON (FAS.CRFAS_CODIGO = SEG.CRFAS_CODIGO)
	WHERE CRISE_ESTADO = TRUE AND
		  SEG.CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		 (SEG.CRSEG_CODIGO = IN_CRSEG_CODIGO OR CRISE.CRISE_FECHA_INSERT <= FECHA_SEGUIMIENTO);
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;

--> Consulta de historico ordenado por fecha de creacion descendente.(SE VUELVE MUY PESADO) -->> SE HICIERON OPTIMIZACIONES
--> ESTE INDICE AYUDA
-- CREATE INDEX i_cgg_res_tramite_fecha_insert
--   ON sii.cgg_res_tramite USING btree (crtra_fecha_insert DESC NULLS FIRST);
CREATE OR REPLACE FUNCTION sii.f_cgg_res_tramite_historial(in_start_index integer, in_limit integer, in_sort_field_name character varying, in_direction character varying, in_find_text text)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	SQL_STMT TEXT;
BEGIN

	SQL_STMT := 'SELECT
		CRTRA_CODIGO,
		CRPER_CODIGO,
		CRPER_TAUSPICIANTE,
		CRPJR_CODIGO,
		CRPJR_NOMBRES,
		CGG_CRPER_CODIGO,
		CRPER_TBENEFICIARIO,
		CRPRO_CODIGO,
		CRTST_CODIGO,
		CRTST_DESCRIPCION,
		CVVEH_CODIGO,
		CRETT_CODIGO,
		CRETT_NOMBRE,
		CISLA_CODIGO,
		CVMTR_CODIGO,
		CGG_CVMTR_CODIGO,
		CGG_CVVEH_CODIGO,
		CRTRA_ANIO,
		CRTRA_NUMERO,
		CRTRA_FECHA_RECEPCION,
		CRTRA_ACTIVIDAD_RESIDENCIA,
		ACTIVIDAD_RESIDENCIA,
		CGCRG_NOMBRE,
		CRTRA_OBSERVACION,
		CRTRA_DIAS_PERMANENCIA,
		CRTRA_PENDIENTE,
		CRTRA_OBSERVACION_PENDIENTE,
		CRTRA_ATENCION_CLIENTE,
		CRTRA_COMUNICADO_RADIAL,
		CRTRA_MOTIVO,
		CRTRA_FOLIO,
		CRTRA_ESTADO,
		CRTRA_FECHA_INSERT,
		CRTRA_USUARIO_INSERT,
		CRTRA_FECHA_UPDATE,
		CRTRA_USUARIO_UPDATE,
	    CRTRA_GRUPO,
		CRTRA_ORDEN,
		CRTGR_ESTADO_ASIGNACION,
		CRSEG_ESTADO_ATENCION
	FROM (
	    SELECT
	   	T.CRTRA_CODIGO,
		T.CRPER_CODIGO,
		CASE WHEN T.CRPER_CODIGO IS NOT NULL
			THEN (SELECT COALESCE(PRSA.CRPER_NOMBRES,'''')||'' ''||COALESCE(PRSA.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PRSA.CRPER_APELLIDO_MATERNO,'''') FROM  SII.CGG_RES_PERSONA PRSA WHERE  PRSA.CRPER_CODIGO = T.CRPER_CODIGO) ELSE NULL END AS CRPER_TAUSPICIANTE,
		T.CRPJR_CODIGO,
		CASE WHEN T.CRPJR_CODIGO IS NOT NULL
			THEN (SELECT PJR.CRPJR_RAZON_SOCIAL FROM SII.CGG_RES_PERSONA_JURIDICA PJR WHERE PJR.CRPJR_CODIGO = T.CRPJR_CODIGO) ELSE NULL END AS CRPJR_NOMBRES,
		T.CGG_CRPER_CODIGO,
		CASE WHEN T.CGG_CRPER_CODIGO IS NOT NULL
			THEN (SELECT COALESCE(PRSB.CRPER_NOMBRES,'''')||'' ''||COALESCE(PRSB.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PRSB.CRPER_APELLIDO_MATERNO,'''') FROM  SII.CGG_RES_PERSONA PRSB WHERE  PRSB.CRPER_CODIGO = T.CGG_CRPER_CODIGO) ELSE NULL END AS CRPER_TBENEFICIARIO,
		T.CRPRO_CODIGO,
		T.CRTST_CODIGO,
		TST.CRTST_DESCRIPCION AS CRTST_DESCRIPCION,
		T.CVVEH_CODIGO,
		T.CRETT_CODIGO,
		STT.CRETT_NOMBRE,
		T.CISLA_CODIGO,
		T.CVMTR_CODIGO,
		T.CGG_CVMTR_CODIGO,
		T.CGG_CVVEH_CODIGO,
		T.CRTRA_ANIO,
		T.CRTRA_NUMERO,
		T.CRTRA_FECHA_RECEPCION,
		T.CRTRA_ACTIVIDAD_RESIDENCIA,
		GMC.CGCRG_NOMBRE,
		GMC.CGCRG_NOMBRE AS ACTIVIDAD_RESIDENCIA,
		T.CRTRA_OBSERVACION,
		T.CRTRA_DIAS_PERMANENCIA,
		T.CRTRA_PENDIENTE,
		T.CRTRA_OBSERVACION_PENDIENTE,
		T.CRTRA_ATENCION_CLIENTE,
		T.CRTRA_COMUNICADO_RADIAL,
		T.CRTRA_MOTIVO,
		T.CRTRA_FOLIO,
		T.CRTRA_ESTADO,
		T.CRTRA_FECHA_INSERT,
		T.CRTRA_USUARIO_INSERT,
		T.CRTRA_FECHA_UPDATE,
		T.CRTRA_USUARIO_UPDATE,
		T.CRTRA_GRUPO,
		T.CRTRA_ORDEN,
		(SELECT MAX(TRG.CRTGR_ESTADO_ASIGNACION ) FROM SII.CGG_RES_TRAMITE_GARANTIA TRG WHERE TRG.CRTRA_CODIGO = T.CRTRA_CODIGO ) AS CRTGR_ESTADO_ASIGNACION,
		(SELECT CRSEG_ESTADO_ATENCION FROM SII.CGG_RES_SEGUIMIENTO WHERE CRTRA_CODIGO = T.CRTRA_CODIGO ORDER BY CRSEG_FECHA_INSERT DESC LIMIT 1) CRSEG_ESTADO_ATENCION
	    FROM SII.CGG_RES_TRAMITE T
		INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON TST.CRTST_CODIGO = T.CRTST_CODIGO
		LEFT JOIN SII.CGG_GEM_CARGO GMC ON GMC.CGCRG_CODIGO = T.CRTRA_ACTIVIDAD_RESIDENCIA
		LEFT JOIN SII.CGG_RES_ESTADO_TRAMITE STT ON STT.CRETT_CODIGO = T.CRETT_CODIGO
		WHERE T.CRTRA_ESTADO
		ORDER BY T.crtra_fecha_insert DESC
	) AS TRA
	WHERE CASE WHEN LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 THEN 1=1 ELSE
		COALESCE(CRPER_TAUSPICIANTE,'''')||'' ''||
		COALESCE(CRPJR_NOMBRES,'''')||'' ''||
		COALESCE(CRPER_TBENEFICIARIO,'''')||'' ''||
		COALESCE(CRTST_DESCRIPCION,'''')||'' ''||
		COALESCE(TRA.CRTRA_ANIO,0)||'' ''||
		COALESCE(TRA.CRTRA_NUMERO,0)||'' ''||
		COALESCE(TO_CHAR(TRA.CRTRA_FECHA_RECEPCION,''DD/MM/YY''),'' '')||'' ''||
		COALESCE(TRA.ACTIVIDAD_RESIDENCIA,'''')||'' ''||
		COALESCE(TRA.CRTRA_OBSERVACION,'''')||'' ''||
		COALESCE(TRA.CRTRA_DIAS_PERMANENCIA,0)||'' ''||
		COALESCE(TRA.CRTRA_PENDIENTE,0)||'' ''||
		COALESCE(TRA.CRTRA_OBSERVACION_PENDIENTE,'''')||'' ''||
		COALESCE(TRA.CRTRA_ATENCION_CLIENTE,FALSE)||'' ''||
		COALESCE(TRA.CRTRA_MOTIVO,'''')||'' ''||
		COALESCE(TRA.CRTRA_FOLIO,0)||'' ''||
		COALESCE(TRA.CRTRA_ESTADO,FALSE)||'' ''||
		COALESCE(TRA.CRTRA_USUARIO_INSERT,'''') LIKE'||QUOTE_LITERAL('%'||IN_FIND_TEXT||'%')||' END '
	'LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;

	--ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||

	OPEN TMP_REF FOR EXECUTE SQL_STMT;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;

--> ACTIVAMOS AL CONSEJO DE GOBIERNO

update SII.CGG_RES_PERSONA_JURIDICA PJ set CRPJR_ESTADO = true where PJ.CRPJR_CODIGO= 'CRPJR529';



--> VISUALIZACION DE CAMBIO DE MOTIVO

CREATE OR REPLACE FUNCTION f_cgg_res_persona_historial_residencia(in_crper_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
TMP_REF REFCURSOR;
BEGIN
OPEN TMP_REF FOR
SELECT
DISTINCT SII.F_TRAMITE_TIPO(RES.CRTST_CODIGO) TIPO_RESIDENCIA,
RES.CRRSD_VIGENTE,
COALESCE(SL.CISLA_INDICE::VARCHAR,'')||(CASE WHEN RES.CRTST_CODIGO IN (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '03')
UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
) SELECT CRTST_CODIGO  FROM TIPO) THEN
(SELECT CRTST_INDICE FROM SII.CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '03') )
WHEN RES.CRTST_CODIGO IN (WITH RECURSIVE TIPO(CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION)AS(
SELECT CRTST_CODIGO, CGG_CRTST_CODIGO, CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '04')
UNION SELECT TST.CRTST_CODIGO, TST.CGG_CRTST_CODIGO, TP.CRTST_DESCRIPCION FROM CGG_RES_TIPO_SOLICITUD_TRAMITE TST, TIPO TP
WHERE TST.CGG_CRTST_CODIGO = TP.CRTST_CODIGO
) SELECT CRTST_CODIGO  FROM TIPO) THEN
(SELECT CRTST_INDICE FROM SII.CGG_RES_TIPO_SOLICITUD_TRAMITE WHERE CRTST_CODIGO = (SELECT CGCNF_VALOR_CADENA FROM SII.CGG_CONFIGURACION WHERE CGCNF_CODIGO = '04'))
ELSE 0 END)||LPAD(RES.CRRSD_NUMERO::VARCHAR,5,'0') NUMERO_RESIDENCIA,
RES.CRRSD_FECHA_INICIO,
RES.CRRSD_FECHA_CADUCIDAD,
RSL.CRRES_NUMERO_RESOLUCION,
RSL.CRRES_FECHA_EMISION
FROM SII.CGG_RES_RESIDENCIA RES
LEFT JOIN SII.CGG_RES_PERSONA PER ON PER.CRPER_CODIGO=RES.CRPER_CODIGO AND PER.CRPER_ESTADO
LEFT JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON TST.CRTST_CODIGO = RES.CRTST_CODIGO AND TST.CRTST_ESTADO
LEFT JOIN SII.CGG_RES_TRAMITE TRM ON (TRM.CRTRA_CODIGO = RES.CRTRA_CODIGO AND (TRM.CRTST_CODIGO = RES.CRTST_CODIGO OR TRM.CHANGE_CRTST_CODIGO = RES.CRTST_CODIGO)) AND TRM.CRTRA_ESTADO
LEFT JOIN SII.CGG_RES_RESOL_TRAMITE RST ON RST.CRTRA_CODIGO = TRM.CRTRA_CODIGO AND RST.CRRST_ESTADO
LEFT JOIN SII.CGG_RES_RESOLUCION RSL ON RSL.CRRES_CODIGO = RST.CRRES_CODIGO AND RSL.CRRES_ESTADO
LEFT JOIN SII.CGG_ISLA SL ON SL.CISLA_CODIGO = RES.CISLA_CODIGO AND SL.CISLA_ESTADO
WHERE RES.CRRSD_USUARIO_INSERT NOT LIKE 'monitor' AND
RES.CRRSD_ESTADO AND
PER.CRPER_ESTADO AND
RES.CRPER_CODIGO = IN_CRPER_CODIGO
--AND CRRES_ESTADO_RESOLUCION <> '2'
ORDER BY CRRSD_FECHA_INICIO DESC;
RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;



---> MODIFICA LA CONSULTA DE USUARIOS DE LAS FASES. PARA MOSTRAR LOS QUE YA EJECUTARON LA ACCION
CREATE OR REPLACE FUNCTION f_cgg_res_fase_s_cgg_res_proceso(in_crpro_codigo character varying, in_cisla_codigo character varying, in_crtra_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
TMP_REF REFCURSOR;
BEGIN
OPEN TMP_REF FOR
SELECT
CRFAS_CODIGO,
CRPRO_CODIGO,
CRETT_CODIGO,
CGG_CRETT_CODIGO,
CRSEC_CODIGO,
CGG_CRFAS_CODIGO,
FASES.CUSU_CODIGO,
US.CUSU_NOMBRE_USUARIO USUARIO,
CRFAS_NOMBRE,
CRFAS_ORDEN,
CRFAS_TAREA_REALIZA,
CRFAS_FUNCION_EJECUTA,
CRFAS_SUBE_ADJUNTO,
CRFAS_SUBE_ADJUNTO_REQUISITO,
CRFAS_EJECUTA_DESPACHO,
CRFAS_ATENCION_NORMAL,
CRFAS_ESTADO,
CRFAS_FECHA_INSERT,
CRFAS_USUARIO_INSERT,
CRFAS_FECHA_UPDATE,
CRFAS_USUARIO_UPDATE
FROM(
SELECT
F.CRFAS_CODIGO,
F.CRPRO_CODIGO,
F.CRETT_CODIGO,
F.CGG_CRETT_CODIGO,
F.CRSEC_CODIGO,
F.CGG_CRFAS_CODIGO,
CASE WHEN SEG.CUSU_CODIGO IS NOT NULL THEN SEG.CUSU_CODIGO ELSE SII.F_CGG_RES_FASE_PRIMER_USUARIO(F.CRFAS_CODIGO,IN_CISLA_CODIGO) END CUSU_CODIGO,
F.CRFAS_NOMBRE,
F.CRFAS_ORDEN,
F.CRFAS_TAREA_REALIZA,
F.CRFAS_FUNCION_EJECUTA,
F.CRFAS_SUBE_ADJUNTO,
F.CRFAS_SUBE_ADJUNTO_REQUISITO,
F.CRFAS_EJECUTA_DESPACHO,
F.CRFAS_ATENCION_NORMAL,
F.CRFAS_ESTADO,
F.CRFAS_FECHA_INSERT,
F.CRFAS_USUARIO_INSERT,
F.CRFAS_FECHA_UPDATE,
F.CRFAS_USUARIO_UPDATE
FROM SII.CGG_RES_FASE F
LEFT JOIN SII.cgg_res_seguimiento SEG ON SEG.CRFAS_CODIGO = F.CRFAS_CODIGO AND SEG.crtra_codigo = in_crtra_codigo
WHERE F.CRFAS_ESTADO = TRUE AND
F.CGG_CRFAS_CODIGO IS NULL AND
CRPRO_CODIGO = IN_CRPRO_CODIGO
) AS FASES
INNER JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = FASES.CUSU_CODIGO
INNER JOIN SII.CGG_RES_PERSONA PRS ON PRS.CRPER_CODIGO = US.CRPER_CODIGO
WHERE LENGTH(FASES.CUSU_CODIGO)>=1
ORDER BY CRFAS_ORDEN ASC;

RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;


---> Mobilidades identificando si son automaticas o manuales

CREATE OR REPLACE FUNCTION f_cgg_res_persona_select_movilidad_general(in_user_name character varying, in_start_index integer, in_limit integer, in_sort_field_name character varying, in_direction character varying, in_find_text text, incrper_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	OPEN TMP_REF FOR EXECUTE
	'SELECT CASE MOV.CRMOV_TIPO_OPERACION WHEN 0 THEN MOV.CRMOV_FECHA_VIAJE ELSE NULL END FECHA_VIAJE_INGRESO,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 0 THEN MOV.CRMOV_TIPO_OPERACION ELSE NULL END CRMOV_TIPO_OPERACION,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 0 THEN MOV.CRMOV_CODIGO ELSE NULL END CRMOV_CODIGO,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 0 THEN AER.CRALN_NOMBRE ELSE NULL END CRALN_NOMBRE_INGRESO,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 0 THEN ART.CARPT_NOMBRE ELSE NULL END CARPT_NOMBRE_INGRESO,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 0 THEN ARP.CARPT_NOMBRE ELSE NULL END CGG_CARPT_NOMBRE_INGRESO,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 0 THEN MOV.CRMOV_NUMERO_VUELO ELSE NULL END CRMOV_NUMERO_VUELO,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 0 THEN TSTI.CRTST_DESCRIPCION ELSE NULL END TIPO_RESIDENCIA,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 1 THEN MOV.CRMOV_FECHA_VIAJE ELSE NULL END CRMOV_FECHA_VIAJE_SALIDA,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 1 THEN MOV.CRMOV_TIPO_OPERACION ELSE NULL END CRMOV_TIPO_OPERACION_SALIDA,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 1 THEN MOV.CRMOV_CODIGO ELSE NULL END CRMOV_CODIGO_SALIDA,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 1 THEN AER.CRALN_NOMBRE ELSE NULL END CRALN_NOMBRE_SALIDA,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 1 THEN ART.CARPT_NOMBRE ELSE NULL END CARPT_NOMBRE_SALIDA,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 1 THEN ARP.CARPT_NOMBRE ELSE NULL END CGG_CARPT_NOMBRE_SALIDA,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 1 THEN MOV.CRMOV_NUMERO_VUELO ELSE NULL END CRMOV_NUMERO_VUELO_SALIDA,
		CASE MOV.CRMOV_TIPO_OPERACION WHEN 1 THEN TSTI.CRTST_DESCRIPCION ELSE NULL END TIPO_RESIDENCIA_SALIDA,
		MOV.CRMOV_SOPORTE
	FROM SII.CGG_RES_PERSONA PER
	INNER JOIN SII.CGG_RES_MOVILIDAD MOV ON MOV.CRPER_CODIGO = PER.CRPER_CODIGO AND MOV.CRMOV_ESTADO
	INNER JOIN SII.CGG_RES_RESIDENCIA RSI ON RSI.CRRSD_CODIGO=MOV.CRRSD_CODIGO
	INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TSTI ON TSTI.CRTST_CODIGO = RSI.CRTST_CODIGO
	LEFT JOIN SII.CGG_RES_AEROLINEA AER ON AER.CRALN_CODIGO=MOV.CRALN_CODIGO
	LEFT JOIN SII.CGG_RES_AEROPUERTO ART ON ART.CARPT_CODIGO=MOV.CARPT_CODIGO
	LEFT JOIN SII.CGG_RES_AEROPUERTO ARP ON ARP.CARPT_CODIGO=MOV.CGG_CARPT_CODIGO
	WHERE PER.CRPER_CODIGO = '||QUOTE_LITERAL(INCRPER_CODIGO)||'
	ORDER BY MOV.CRMOV_FECHA_VIAJE DESC, MOV.CRMOV_TIPO_OPERACION DESC
	LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;


--> Usuarios de Fase, segun el proceso.

CREATE OR REPLACE FUNCTION f_cgg_res_fase_s_cgg_res_proceso(
    in_crpro_codigo character varying,
    in_cisla_codigo character varying,
    in_crtra_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
TMP_REF REFCURSOR;
BEGIN
OPEN TMP_REF FOR
SELECT
CRFAS_CODIGO,
CRPRO_CODIGO,
CRETT_CODIGO,
CGG_CRETT_CODIGO,
CRSEC_CODIGO,
CGG_CRFAS_CODIGO,
FASES.CUSU_CODIGO,
US.CUSU_NOMBRE_USUARIO USUARIO,
CRFAS_NOMBRE,
CRFAS_ORDEN,
CRFAS_TAREA_REALIZA,
CRFAS_FUNCION_EJECUTA,
CRFAS_SUBE_ADJUNTO,
CRFAS_SUBE_ADJUNTO_REQUISITO,
CRFAS_EJECUTA_DESPACHO,
CRFAS_ATENCION_NORMAL,
CRFAS_ESTADO,
CRFAS_FECHA_INSERT,
CRFAS_USUARIO_INSERT,
CRFAS_FECHA_UPDATE,
CRFAS_USUARIO_UPDATE
FROM(
SELECT
F.CRFAS_CODIGO,
F.CRPRO_CODIGO,
F.CRETT_CODIGO,
F.CGG_CRETT_CODIGO,
F.CRSEC_CODIGO,
F.CGG_CRFAS_CODIGO,
CASE WHEN SEG.CUSU_CODIGO IS NOT NULL THEN SEG.CUSU_CODIGO ELSE SII.F_CGG_RES_FASE_PRIMER_USUARIO(F.CRFAS_CODIGO,IN_CISLA_CODIGO) END CUSU_CODIGO,
F.CRFAS_NOMBRE,
F.CRFAS_ORDEN,
F.CRFAS_TAREA_REALIZA,
F.CRFAS_FUNCION_EJECUTA,
F.CRFAS_SUBE_ADJUNTO,
F.CRFAS_SUBE_ADJUNTO_REQUISITO,
F.CRFAS_EJECUTA_DESPACHO,
F.CRFAS_ATENCION_NORMAL,
F.CRFAS_ESTADO,
F.CRFAS_FECHA_INSERT,
F.CRFAS_USUARIO_INSERT,
F.CRFAS_FECHA_UPDATE,
F.CRFAS_USUARIO_UPDATE
FROM SII.CGG_RES_FASE F
LEFT JOIN SII.cgg_res_seguimiento SEG ON SEG.CRFAS_CODIGO = F.CRFAS_CODIGO AND SEG.crtra_codigo = in_crtra_codigo
WHERE F.CRFAS_ESTADO = TRUE AND
F.CGG_CRFAS_CODIGO IS NULL AND
CRPRO_CODIGO = IN_CRPRO_CODIGO
) AS FASES
INNER JOIN SII.CGG_USUARIO US ON US.CUSU_CODIGO = FASES.CUSU_CODIGO
INNER JOIN SII.CGG_RES_PERSONA PRS ON PRS.CRPER_CODIGO = US.CRPER_CODIGO
WHERE LENGTH(FASES.CUSU_CODIGO)>=1
ORDER BY CRFAS_ORDEN ASC;

RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;

--FECHA DE INGRESO EN EL REGISTRO DEL TRAMITE
CREATE OR REPLACE FUNCTION f_cgg_res_tramite_insert_1(
    in_crtra_codigo character varying,
    in_crper_codigo character varying,
    in_crpjr_codigo character varying,
    in_cgg_crper_codigo character varying,
    in_crpro_codigo character varying,
    in_crtst_codigo character varying,
    in_cvveh_codigo character varying,
    in_crett_codigo character varying,
    in_cisla_codigo character varying,
    in_cvmtr_codigo character varying,
    in_cgg_cvmtr_codigo character varying,
    in_cgg_cvveh_codigo character varying,
    in_crtra_anio numeric,
    in_crtra_numero numeric,
    in_crtra_fecha_recepcion timestamp with time zone,
    in_crtra_actividad_residencia character varying,
    in_crtra_observacion text,
    in_crtra_dias_permanencia smallint,
    in_crtra_pendiente smallint,
    in_crtra_observacion_pendiente text,
    in_crtra_atencion_cliente boolean,
    in_crtra_comunicado_radial character varying,
    in_crtra_motivo character varying,
    in_crtra_folio numeric,
    in_crtra_fecha_salida timestamp with time zone,
    in_crtra_estado boolean,
    in_crtra_usuario_insert character varying,
    in_crtra_usuario_update character varying,
    in_rep_crper_codigo character varying,
    inchange_crtst_codigo character varying,
    incrtt_codigo character varying,
    in_crtra_fecha_ingreso timestamp with time zone)
  RETURNS character varying AS
$BODY$
DECLARE
OUT_KEY VARCHAR;
OUT_NUM NUMERIC;
OUT_RESULT VARCHAR;
BEGIN
	IF (UPPER(IN_CRTRA_CODIGO) = 'KEYGEN') THEN
		SELECT SII.F_KEYGEN('CGG_RES_TRAMITE','CRTRA_CODIGO','CRTRA') INTO OUT_KEY;
	ELSE
		OUT_KEY := IN_CRTRA_CODIGO;
	END IF;

	IF(IN_CRTRA_NUMERO = 0)THEN
		SELECT SII.F_NUMERO('CGG_RES_TRAMITE','CRTRA_NUMERO','CRTRA_ANIO') INTO OUT_NUM;
	ELSE
		OUT_NUM := IN_CRTRA_NUMERO;
	END IF;

	INSERT INTO SII.CGG_RES_TRAMITE(
		CRTRA_CODIGO,
		CRPER_CODIGO,
		CRPJR_CODIGO,
		CGG_CRPER_CODIGO,
		CRPRO_CODIGO,
		CRTST_CODIGO,
		CVVEH_CODIGO,
		CRETT_CODIGO,
		CISLA_CODIGO,
		CVMTR_CODIGO,
		CGG_CVMTR_CODIGO,
		CGG_CVVEH_CODIGO,
		CRTRA_ANIO,
		CRTRA_NUMERO,
		CRTRA_FECHA_RECEPCION,
		CRTRA_ACTIVIDAD_RESIDENCIA,
		CRTRA_OBSERVACION,
		CRTRA_DIAS_PERMANENCIA,
		CRTRA_PENDIENTE,
		CRTRA_OBSERVACION_PENDIENTE,
		CRTRA_ATENCION_CLIENTE,
		CRTRA_COMUNICADO_RADIAL,
		CRTRA_MOTIVO,
		CRTRA_FOLIO,
	    CRTRA_FECHA_SALIDA,
		CRTRA_ESTADO,
		CRTRA_FECHA_INSERT,
		CRTRA_USUARIO_INSERT,
		CRTRA_FECHA_UPDATE,
		CRTRA_USUARIO_UPDATE,
		REP_CRPER_CODIGO,
		CHANGE_CRTST_CODIGO,
		CRTT_CODIGO,
		CRTRA_FECHA_INGRESO
	) VALUES (
		OUT_KEY,
		IN_CRPER_CODIGO,
		IN_CRPJR_CODIGO,
		IN_CGG_CRPER_CODIGO,
		IN_CRPRO_CODIGO,
		IN_CRTST_CODIGO,
		IN_CVVEH_CODIGO,
		IN_CRETT_CODIGO,
		IN_CISLA_CODIGO,
		IN_CVMTR_CODIGO,
		IN_CGG_CVMTR_CODIGO,
		IN_CGG_CVVEH_CODIGO,
		IN_CRTRA_ANIO,
		OUT_NUM,
		IN_CRTRA_FECHA_RECEPCION,
		IN_CRTRA_ACTIVIDAD_RESIDENCIA,
		IN_CRTRA_OBSERVACION,
		IN_CRTRA_DIAS_PERMANENCIA,
		IN_CRTRA_PENDIENTE,
		IN_CRTRA_OBSERVACION_PENDIENTE,
		IN_CRTRA_ATENCION_CLIENTE,
		IN_CRTRA_COMUNICADO_RADIAL,
		IN_CRTRA_MOTIVO,
		IN_CRTRA_FOLIO,
		IN_CRTRA_FECHA_SALIDA,
		IN_CRTRA_ESTADO,
		CURRENT_TIMESTAMP,
		IN_CRTRA_USUARIO_INSERT,
		CURRENT_TIMESTAMP,
		IN_CRTRA_USUARIO_UPDATE,
		IN_REP_CRPER_CODIGO,
		INCHANGE_CRTST_CODIGO,
		INCRTT_CODIGO,
		IN_CRTRA_FECHA_INGRESO
	);
	OUT_RESULT:=OUT_KEY||','||OUT_NUM;
	RETURN OUT_RESULT;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;


  --> MIGRATION SCRIPT CONTROLLER <--
INSERT INTO sii.cgg_migrationscript (mrgsp_codigo,mrgsp_fecha,mrgsp_usuario_insert,mrgsp_fecha_insert,mrgsp_usuario_update,mrgsp_fecha_update,
	mrgsp_estado,mrgsp_developer,mrgsp_name,mrgsp_description,
	mrgsp_releaseno,mrgsp_filename,mrgsp_isapply)
VALUES(SII.F_KEYGEN('CGG_MIGRATIONSCRIPT','MRGSP_CODIGO','MRGSP'), current_timestamp,'ADMIN', current_timestamp,'ADMIN', current_timestamp,
	true,'acanaveral','BUGS FIX','Arregla algunos problemas de orden y visualizacion.',
	'2.0','2016_08_02_BugsFixes.sql',true);