CREATE OR REPLACE FUNCTION f_select_requisitotiposolicitudtramite(in_crtst_codigo character varying, in_crtra_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
BEGIN
	IF(IN_CRTRA_CODIGO IS NULL)THEN

	OPEN TMP_REF FOR
		SELECT
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_DESCRIPCION,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_REQUERIDO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE,
		  CGG_RES_REQUISITO.CRREQ_CODIGO,
		  CGG_RES_REQUISITO.CRREQ_DESCRIPCION,
		  ' ' AS CRTRA_CODIGO,
		  ' ' AS CRRQT_CODIGO,
		  false AS CRRQT_CUMPLE,
		  ' ' AS CRRQT_OBSERVACION
		FROM
		  SII.CGG_RES_SOLICITUD_REQUISITO INNER JOIN SII.CGG_RES_REQUISITO ON (CGG_RES_REQUISITO.CRREQ_CODIGO = CGG_RES_SOLICITUD_REQUISITO.CRREQ_CODIGO)
		  WHERE CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO = IN_CRTST_CODIGO
		  ORDER BY CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE;

	ELSE
		OPEN TMP_REF FOR
		  SELECT
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_DESCRIPCION,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_REQUERIDO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE,
		  CGG_RES_REQUISITO.CRREQ_CODIGO,
		  CGG_RES_REQUISITO.CRREQ_DESCRIPCION,
		  CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_CODIGO,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_CUMPLE,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_OBSERVACION
		FROM
		  SII.CGG_RES_SOLICITUD_REQUISITO
		  INNER JOIN SII.CGG_RES_REQUISITO ON (CGG_RES_REQUISITO.CRREQ_CODIGO = CGG_RES_SOLICITUD_REQUISITO.CRREQ_CODIGO)
		  INNER JOIN SII.CGG_RES_REQUISITO_TRAMITE  ON (CGG_RES_SOLICITUD_REQUISITO.CRSRQ_CODIGO = CGG_RES_REQUISITO_TRAMITE.CRSRQ_CODIGO)
		  WHERE CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO = IN_CRTST_CODIGO OR CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO = IN_CRTRA_CODIGO
		  GROUP BY CGG_RES_SOLICITUD_REQUISITO.CRSRQ_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_DESCRIPCION,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_REQUERIDO,
		  CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE,
		  CGG_RES_REQUISITO.CRREQ_CODIGO,
		  CGG_RES_REQUISITO.CRREQ_DESCRIPCION,
		  CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_CODIGO,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_CUMPLE,
		  CGG_RES_REQUISITO_TRAMITE.CRRQT_OBSERVACION
		  HAVING CGG_RES_SOLICITUD_REQUISITO.CRTST_CODIGO = IN_CRTST_CODIGO AND  (CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO = IN_CRTRA_CODIGO OR CGG_RES_REQUISITO_TRAMITE.CRTRA_CODIGO IS NULL)
		  ORDER BY CGG_RES_SOLICITUD_REQUISITO.CRSRQ_PARTICIPANTE;
	END IF;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;


--TEMPORALES CON LOS PADRES CORRECTOS:
update sii.cgg_res_tipo_solicitud_tramite set cgg_crtst_codigo='CRTST2' where cgg_crtst_codigo='CRTST11' and crtst_estado;


--FIX: MOSTRAR FASE EN INFORMES
CREATE OR REPLACE FUNCTION f_cgg_res_informe_tramite(in_crtra_codigo character varying, in_crseg_codigo character varying)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	FECHA_SEGUIMIENTO TIMESTAMP;
BEGIN
	SELECT CRSEG_FECHA_INSERT INTO FECHA_SEGUIMIENTO FROM CGG_RES_SEGUIMIENTO WHERE CRSEG_CODIGO = IN_CRSEG_CODIGO;
	OPEN TMP_REF FOR
	SELECT
		CRISE.CRISE_CODIGO,
		CRISE.CRSEG_CODIGO,
		CRISE.CRSEC_CODIGO,
		CRISE.CRISE_NUMERO_INFORME,
		CRISE.CRISE_FECHA_INFORME,
		CRISE.CRISE_ASUNTO_INFORME,
		CRISE.CRISE_EXTRACTO_INFORME,
		CRISE.CRISE_DESCRIPCION_ADJUNTO,
		CRISE.CRISE_ESTADO,
		CRISE.CRISE_FECHA_INSERT,
		CRISE.CRISE_USUARIO_INSERT,
		CRISE.CRISE_FECHA_UPDATE,
		CRISE.CRISE_USUARIO_UPDATE,
		FAS.CRFAS_CODIGO,
		FAS.CRFAS_NOMBRE
	FROM SII.CGG_RES_INFORME_SEGUIMIENTO CRISE
	INNER JOIN SII.CGG_RES_SEGUIMIENTO SEG ON (CRISE.CRSEG_CODIGO = SEG.CRSEG_CODIGO)
	INNER JOIN SII.CGG_RES_FASE FAS ON (FAS.CRFAS_CODIGO = SEG.CRFAS_CODIGO)
	WHERE CRISE_ESTADO = TRUE AND
		  SEG.CRTRA_CODIGO = IN_CRTRA_CODIGO AND
		 (SEG.CRSEG_CODIGO = IN_CRSEG_CODIGO OR CRISE.CRISE_FECHA_INSERT <= FECHA_SEGUIMIENTO);
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;

--> Consulta de historico ordenado por fecha de creacion descendente.(SE VUELVE MUY PESADO) -->> SE HICIERON OPTIMIZACIONES
--> ESTE INDICE AYUDA
-- CREATE INDEX i_cgg_res_tramite_fecha_insert
--   ON sii.cgg_res_tramite USING btree (crtra_fecha_insert DESC NULLS FIRST);
CREATE OR REPLACE FUNCTION sii.f_cgg_res_tramite_historial(in_start_index integer, in_limit integer, in_sort_field_name character varying, in_direction character varying, in_find_text text)
  RETURNS SETOF refcursor AS
$BODY$
DECLARE
	TMP_REF REFCURSOR;
	SQL_STMT TEXT;
BEGIN

	SQL_STMT := 'SELECT
		CRTRA_CODIGO,
		CRPER_CODIGO,
		CRPER_TAUSPICIANTE,
		CRPJR_CODIGO,
		CRPJR_NOMBRES,
		CGG_CRPER_CODIGO,
		CRPER_TBENEFICIARIO,
		CRPRO_CODIGO,
		CRTST_CODIGO,
		CRTST_DESCRIPCION,
		CVVEH_CODIGO,
		CRETT_CODIGO,
		CRETT_NOMBRE,
		CISLA_CODIGO,
		CVMTR_CODIGO,
		CGG_CVMTR_CODIGO,
		CGG_CVVEH_CODIGO,
		CRTRA_ANIO,
		CRTRA_NUMERO,
		CRTRA_FECHA_RECEPCION,
		CRTRA_ACTIVIDAD_RESIDENCIA,
		ACTIVIDAD_RESIDENCIA,
		CGCRG_NOMBRE,
		CRTRA_OBSERVACION,
		CRTRA_DIAS_PERMANENCIA,
		CRTRA_PENDIENTE,
		CRTRA_OBSERVACION_PENDIENTE,
		CRTRA_ATENCION_CLIENTE,
		CRTRA_COMUNICADO_RADIAL,
		CRTRA_MOTIVO,
		CRTRA_FOLIO,
		CRTRA_ESTADO,
		CRTRA_FECHA_INSERT,
		CRTRA_USUARIO_INSERT,
		CRTRA_FECHA_UPDATE,
		CRTRA_USUARIO_UPDATE,
	    CRTRA_GRUPO,
		CRTRA_ORDEN,
		CRTGR_ESTADO_ASIGNACION,
		CRSEG_ESTADO_ATENCION
	FROM (
	    SELECT
	   	T.CRTRA_CODIGO,
		T.CRPER_CODIGO,
		CASE WHEN T.CRPER_CODIGO IS NOT NULL
			THEN (SELECT COALESCE(PRSA.CRPER_NOMBRES,'''')||'' ''||COALESCE(PRSA.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PRSA.CRPER_APELLIDO_MATERNO,'''') FROM  SII.CGG_RES_PERSONA PRSA WHERE  PRSA.CRPER_CODIGO = T.CRPER_CODIGO) ELSE NULL END AS CRPER_TAUSPICIANTE,
		T.CRPJR_CODIGO,
		CASE WHEN T.CRPJR_CODIGO IS NOT NULL
			THEN (SELECT PJR.CRPJR_RAZON_SOCIAL FROM SII.CGG_RES_PERSONA_JURIDICA PJR WHERE PJR.CRPJR_CODIGO = T.CRPJR_CODIGO) ELSE NULL END AS CRPJR_NOMBRES,
		T.CGG_CRPER_CODIGO,
		CASE WHEN T.CGG_CRPER_CODIGO IS NOT NULL
			THEN (SELECT COALESCE(PRSB.CRPER_NOMBRES,'''')||'' ''||COALESCE(PRSB.CRPER_APELLIDO_PATERNO,'''')||'' ''||COALESCE(PRSB.CRPER_APELLIDO_MATERNO,'''') FROM  SII.CGG_RES_PERSONA PRSB WHERE  PRSB.CRPER_CODIGO = T.CGG_CRPER_CODIGO) ELSE NULL END AS CRPER_TBENEFICIARIO,
		T.CRPRO_CODIGO,
		T.CRTST_CODIGO,
		TST.CRTST_DESCRIPCION AS CRTST_DESCRIPCION,
		T.CVVEH_CODIGO,
		T.CRETT_CODIGO,
		STT.CRETT_NOMBRE,
		T.CISLA_CODIGO,
		T.CVMTR_CODIGO,
		T.CGG_CVMTR_CODIGO,
		T.CGG_CVVEH_CODIGO,
		T.CRTRA_ANIO,
		T.CRTRA_NUMERO,
		T.CRTRA_FECHA_RECEPCION,
		T.CRTRA_ACTIVIDAD_RESIDENCIA,
		GMC.CGCRG_NOMBRE,
		GMC.CGCRG_NOMBRE AS ACTIVIDAD_RESIDENCIA,
		T.CRTRA_OBSERVACION,
		T.CRTRA_DIAS_PERMANENCIA,
		T.CRTRA_PENDIENTE,
		T.CRTRA_OBSERVACION_PENDIENTE,
		T.CRTRA_ATENCION_CLIENTE,
		T.CRTRA_COMUNICADO_RADIAL,
		T.CRTRA_MOTIVO,
		T.CRTRA_FOLIO,
		T.CRTRA_ESTADO,
		T.CRTRA_FECHA_INSERT,
		T.CRTRA_USUARIO_INSERT,
		T.CRTRA_FECHA_UPDATE,
		T.CRTRA_USUARIO_UPDATE,
		T.CRTRA_GRUPO,
		T.CRTRA_ORDEN,
		(SELECT MAX(TRG.CRTGR_ESTADO_ASIGNACION ) FROM SII.CGG_RES_TRAMITE_GARANTIA TRG WHERE TRG.CRTRA_CODIGO = T.CRTRA_CODIGO ) AS CRTGR_ESTADO_ASIGNACION,
		(SELECT CRSEG_ESTADO_ATENCION FROM SII.CGG_RES_SEGUIMIENTO WHERE CRTRA_CODIGO = T.CRTRA_CODIGO ORDER BY CRSEG_FECHA_INSERT DESC LIMIT 1) CRSEG_ESTADO_ATENCION
	    FROM SII.CGG_RES_TRAMITE T
		INNER JOIN SII.CGG_RES_TIPO_SOLICITUD_TRAMITE TST ON TST.CRTST_CODIGO = T.CRTST_CODIGO
		LEFT JOIN SII.CGG_GEM_CARGO GMC ON GMC.CGCRG_CODIGO = T.CRTRA_ACTIVIDAD_RESIDENCIA
		LEFT JOIN SII.CGG_RES_ESTADO_TRAMITE STT ON STT.CRETT_CODIGO = T.CRETT_CODIGO
		WHERE T.CRTRA_ESTADO
		ORDER BY T.crtra_fecha_insert DESC
	) AS TRA
	WHERE CASE WHEN LENGTH('||QUOTE_LITERAL(IN_FIND_TEXT)||') = 0 THEN 1=1 ELSE
		COALESCE(CRPER_TAUSPICIANTE,'''')||'' ''||
		COALESCE(CRPJR_NOMBRES,'''')||'' ''||
		COALESCE(CRPER_TBENEFICIARIO,'''')||'' ''||
		COALESCE(CRTST_DESCRIPCION,'''')||'' ''||
		COALESCE(TRA.CRTRA_ANIO,0)||'' ''||
		COALESCE(TRA.CRTRA_NUMERO,0)||'' ''||
		COALESCE(TO_CHAR(TRA.CRTRA_FECHA_RECEPCION,''DD/MM/YY''),'' '')||'' ''||
		COALESCE(TRA.ACTIVIDAD_RESIDENCIA,'''')||'' ''||
		COALESCE(TRA.CRTRA_OBSERVACION,'''')||'' ''||
		COALESCE(TRA.CRTRA_DIAS_PERMANENCIA,0)||'' ''||
		COALESCE(TRA.CRTRA_PENDIENTE,0)||'' ''||
		COALESCE(TRA.CRTRA_OBSERVACION_PENDIENTE,'''')||'' ''||
		COALESCE(TRA.CRTRA_ATENCION_CLIENTE,FALSE)||'' ''||
		COALESCE(TRA.CRTRA_MOTIVO,'''')||'' ''||
		COALESCE(TRA.CRTRA_FOLIO,0)||'' ''||
		COALESCE(TRA.CRTRA_ESTADO,FALSE)||'' ''||
		COALESCE(TRA.CRTRA_USUARIO_INSERT,'''') LIKE'||QUOTE_LITERAL('%'||IN_FIND_TEXT||'%')||' END '
	'LIMIT '||IN_LIMIT||' OFFSET '||IN_START_INDEX;

	--ORDER BY '||IN_SORT_FIELD_NAME||' '||IN_DIRECTION||

	OPEN TMP_REF FOR EXECUTE SQL_STMT;
	RETURN NEXT TMP_REF;
END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;

--> ACTIVAMOS AL CONSEJO DE GOBIERNO

update SII.CGG_RES_PERSONA_JURIDICA PJ set CRPJR_ESTADO = true where PJ.CRPJR_CODIGO= 'CRPJR529'

  --> MIGRATION SCRIPT CONTROLLER <--
INSERT INTO sii.cgg_migrationscript (mrgsp_codigo,mrgsp_fecha,mrgsp_usuario_insert,mrgsp_fecha_insert,mrgsp_usuario_update,mrgsp_fecha_update,
	mrgsp_estado,mrgsp_developer,mrgsp_name,mrgsp_description,
	mrgsp_releaseno,mrgsp_filename,mrgsp_isapply)
VALUES(SII.F_KEYGEN('CGG_MIGRATIONSCRIPT','MRGSP_CODIGO','MRGSP'), current_timestamp,'ADMIN', current_timestamp,'ADMIN', current_timestamp,
	true,'acanaveral','BUGS FIX','Arregla algunos problemas de orden y visualizacion.',
	'2.0','2016_08_02_BugsFixes.sql',true);